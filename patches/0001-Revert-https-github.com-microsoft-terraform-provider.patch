From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Daniel Bradley <daniel@pulumi.com>
Date: Tue, 3 Dec 2024 12:14:04 +0000
Subject: [PATCH] Revert
 https://github.com/microsoft/terraform-provider-azuredevops/pull/1075

The validation always fails when running under the bridge because the bridge fills in the default values for values which are marked as ConflictsWith. Therefore, we'll remove this validation for the time being to unblock users from using the variable group resource.

This can be removed once https://github.com/pulumi/pulumi-terraform-bridge/issues/2618 is resolved.

Original customer issue: https://github.com/pulumi/pulumi-azuredevops/issues/514

diff --git a/azuredevops/internal/service/taskagent/resource_variable_group.go b/azuredevops/internal/service/taskagent/resource_variable_group.go
index 71d53d3f..45f164c3 100644
--- a/azuredevops/internal/service/taskagent/resource_variable_group.go
+++ b/azuredevops/internal/service/taskagent/resource_variable_group.go
@@ -362,21 +362,6 @@ func expandVariableGroupParameters(clients *client.AggregatedClient, d *schema.R
 	description := converter.String(d.Get("description").(string))
 	variables := d.Get("variable").(*schema.Set).List()
 
-	// needed to detect if the secret_value attribute is set in the config
-	// see https://github.com/hashicorp/terraform-plugin-sdk/issues/741
-	for it := d.GetRawConfig().AsValueMap()["variable"].ElementIterator(); it.Next(); {
-		_, ctyVariable := it.Element()
-		ctyVariableAsMap := ctyVariable.AsValueMap()
-		name := ctyVariableAsMap["name"].AsString()
-		valueSet := !ctyVariableAsMap["value"].IsNull()
-		secretValueSet := !ctyVariableAsMap["secret_value"].IsNull()
-		isSecret := !ctyVariableAsMap["is_secret"].IsNull()
-
-		if valueSet && (secretValueSet || isSecret) || secretValueSet != isSecret {
-			return nil, nil, fmt.Errorf("`%s` variable can have either only `value` attribute or both `is_secret` and `secret_value` attributes", name)
-		}
-	}
-
 	variableMap := make(map[string]interface{})
 
 	for _, variable := range variables {
