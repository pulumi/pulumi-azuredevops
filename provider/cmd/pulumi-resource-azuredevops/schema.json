{
    "name": "azuredevops",
    "description": "A Pulumi package for creating and managing Azure DevOps.",
    "keywords": [
        "pulumi",
        "azuredevops"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`azuredevops` Terraform Provider](https://github.com/microsoft/terraform-provider-azuredevops).",
    "repository": "https://github.com/pulumi/pulumi-azuredevops",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "namespaces": {
                "azuredevops": "AzureDevOps"
            },
            "compatibility": "tfbridge20"
        },
        "go": {
            "importBasePath": "github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing Azure DevOps.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/microsoft/terraform-provider-azuredevops)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-azuredevops` repo](https://github.com/pulumi/pulumi-azuredevops/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-azuredevops` repo](https://github.com/microsoft/terraform-provider-azuredevops/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/microsoft/terraform-provider-azuredevops)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-azuredevops` repo](https://github.com/pulumi/pulumi-azuredevops/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-azuredevops` repo](https://github.com/microsoft/terraform-provider-azuredevops/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "orgServiceUrl": {
                "type": "string",
                "description": "The url of the Azure DevOps instance which should be used.\n",
                "defaultInfo": {
                    "environment": [
                        "AZDO_ORG_SERVICE_URL"
                    ]
                }
            },
            "personalAccessToken": {
                "type": "string",
                "description": "The personal access token which should be used.\n",
                "secret": true
            }
        }
    },
    "types": {
        "azuredevops:Agent/getPoolsAgentPool:getPoolsAgentPool": {
            "properties": {
                "autoProvision": {
                    "type": "boolean",
                    "description": "Specifies whether or not a queue should be automatically provisioned for each project collection.\n"
                },
                "autoUpdate": {
                    "type": "boolean",
                    "description": "Specifies whether or not agents within the pool should be automatically updated.\n"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the agent pool\n"
                },
                "poolType": {
                    "type": "string",
                    "description": "Specifies whether the agent pool type is Automation or Deployment.\n"
                }
            },
            "type": "object",
            "required": [
                "autoProvision",
                "autoUpdate",
                "id",
                "name",
                "poolType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:Build/BuildDefinitionCiTrigger:BuildDefinitionCiTrigger": {
            "properties": {
                "override": {
                    "$ref": "#/types/azuredevops:Build/BuildDefinitionCiTriggerOverride:BuildDefinitionCiTriggerOverride",
                    "description": "Override the azure-pipeline file and use a this configuration for all builds.\n"
                },
                "useYaml": {
                    "type": "boolean",
                    "description": "Use the azure-pipeline file for the build configuration. Defaults to `false`.\n"
                }
            },
            "type": "object"
        },
        "azuredevops:Build/BuildDefinitionCiTriggerOverride:BuildDefinitionCiTriggerOverride": {
            "properties": {
                "batch": {
                    "type": "boolean",
                    "description": "If you set batch to true, when a pipeline is running, the system waits until the run is completed, then starts another run with all changes that have not yet been built. Defaults to `true`.\n"
                },
                "branchFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Build/BuildDefinitionCiTriggerOverrideBranchFilter:BuildDefinitionCiTriggerOverrideBranchFilter"
                    },
                    "description": "The branches to include and exclude from the trigger.\n"
                },
                "maxConcurrentBuildsPerBranch": {
                    "type": "integer",
                    "description": "The number of max builds per branch. Defaults to `1`.\n"
                },
                "pathFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Build/BuildDefinitionCiTriggerOverridePathFilter:BuildDefinitionCiTriggerOverridePathFilter"
                    },
                    "description": "Specify file paths to include or exclude. Note that the wildcard syntax is different between branches/tags and file paths.\n"
                },
                "pollingInterval": {
                    "type": "integer",
                    "description": "How often the external repository is polled. Defaults to `0`.\n"
                },
                "pollingJobId": {
                    "type": "string",
                    "description": "This is the ID of the polling job that polls the external repository. Once the build definition is saved/updated, this value is set.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "pollingJobId"
                    ]
                }
            }
        },
        "azuredevops:Build/BuildDefinitionCiTriggerOverrideBranchFilter:BuildDefinitionCiTriggerOverrideBranchFilter": {
            "properties": {
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to exclude.\n"
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to include.\n"
                }
            },
            "type": "object"
        },
        "azuredevops:Build/BuildDefinitionCiTriggerOverridePathFilter:BuildDefinitionCiTriggerOverridePathFilter": {
            "properties": {
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of path patterns to exclude.\n"
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of path patterns to include.\n"
                }
            },
            "type": "object"
        },
        "azuredevops:Build/BuildDefinitionFeature:BuildDefinitionFeature": {
            "properties": {
                "skipFirstRun": {
                    "type": "boolean",
                    "description": "Trigger the pipeline to run after the creation. Defaults to `true`.\n\n\u003e **Note** The first run(`skip_first_run = false`) will only be triggered on create.\n"
                }
            },
            "type": "object"
        },
        "azuredevops:Build/BuildDefinitionPullRequestTrigger:BuildDefinitionPullRequestTrigger": {
            "properties": {
                "commentRequired": {
                    "type": "string"
                },
                "forks": {
                    "$ref": "#/types/azuredevops:Build/BuildDefinitionPullRequestTriggerForks:BuildDefinitionPullRequestTriggerForks",
                    "description": "Set permissions for Forked repositories.\n"
                },
                "initialBranch": {
                    "type": "string"
                },
                "override": {
                    "$ref": "#/types/azuredevops:Build/BuildDefinitionPullRequestTriggerOverride:BuildDefinitionPullRequestTriggerOverride",
                    "description": "Override the azure-pipeline file and use this configuration for all builds.\n"
                },
                "useYaml": {
                    "type": "boolean",
                    "description": "Use the azure-pipeline file for the build configuration. Defaults to `false`.\n"
                }
            },
            "type": "object",
            "required": [
                "forks"
            ]
        },
        "azuredevops:Build/BuildDefinitionPullRequestTriggerForks:BuildDefinitionPullRequestTriggerForks": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Build pull requests from forks of this repository.\n"
                },
                "shareSecrets": {
                    "type": "boolean",
                    "description": "Make secrets available to builds of forks.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "shareSecrets"
            ]
        },
        "azuredevops:Build/BuildDefinitionPullRequestTriggerOverride:BuildDefinitionPullRequestTriggerOverride": {
            "properties": {
                "autoCancel": {
                    "type": "boolean",
                    "description": ". Defaults to `true`.\n"
                },
                "branchFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Build/BuildDefinitionPullRequestTriggerOverrideBranchFilter:BuildDefinitionPullRequestTriggerOverrideBranchFilter"
                    },
                    "description": "The branches to include and exclude from the trigger.\n"
                },
                "pathFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Build/BuildDefinitionPullRequestTriggerOverridePathFilter:BuildDefinitionPullRequestTriggerOverridePathFilter"
                    },
                    "description": "Specify file paths to include or exclude. Note that the wildcard syntax is different between branches/tags and file paths.\n"
                }
            },
            "type": "object"
        },
        "azuredevops:Build/BuildDefinitionPullRequestTriggerOverrideBranchFilter:BuildDefinitionPullRequestTriggerOverrideBranchFilter": {
            "properties": {
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to exclude.\n"
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to include.\n"
                }
            },
            "type": "object"
        },
        "azuredevops:Build/BuildDefinitionPullRequestTriggerOverridePathFilter:BuildDefinitionPullRequestTriggerOverridePathFilter": {
            "properties": {
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of path patterns to exclude.\n"
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of path patterns to include.\n"
                }
            },
            "type": "object"
        },
        "azuredevops:Build/BuildDefinitionRepository:BuildDefinitionRepository": {
            "properties": {
                "branchName": {
                    "type": "string",
                    "description": "The branch name for which builds are triggered. Defaults to `master`.\n"
                },
                "githubEnterpriseUrl": {
                    "type": "string",
                    "description": "The Github Enterprise URL. Used if `repo_type` is `GithubEnterprise`.\n"
                },
                "repoId": {
                    "type": "string",
                    "description": "The id of the repository. For `TfsGit` repos, this is simply the ID of the repository. For `Github` repos, this will take the form of `\u003cGitHub Org\u003e/\u003cRepo Name\u003e`. For `Bitbucket` repos, this will take the form of `\u003cWorkspace ID\u003e/\u003cRepo Name\u003e`.\n"
                },
                "repoType": {
                    "type": "string",
                    "description": "The repository type. Valid values: `GitHub` or `TfsGit` or `Bitbucket` or `GitHub Enterprise`. Defaults to `GitHub`. If `repo_type` is `GitHubEnterprise`, must use existing project and GitHub Enterprise service connection.\n"
                },
                "reportBuildStatus": {
                    "type": "boolean",
                    "description": "Report build status. Default is true.\n"
                },
                "serviceConnectionId": {
                    "type": "string",
                    "description": "The service connection ID. Used if the `repo_type` is `GitHub` or `GitHubEnterprise`.\n"
                },
                "ymlPath": {
                    "type": "string",
                    "description": "The path of the Yaml file describing the build definition.\n"
                }
            },
            "type": "object",
            "required": [
                "repoId",
                "repoType",
                "ymlPath"
            ]
        },
        "azuredevops:Build/BuildDefinitionSchedule:BuildDefinitionSchedule": {
            "properties": {
                "branchFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Build/BuildDefinitionScheduleBranchFilter:BuildDefinitionScheduleBranchFilter"
                    },
                    "description": "block supports the following:\n"
                },
                "daysToBuilds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "When to build. Valid values: `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat`, `Sun`.\n"
                },
                "scheduleJobId": {
                    "type": "string",
                    "description": "The ID of the schedule job\n"
                },
                "scheduleOnlyWithChanges": {
                    "type": "boolean",
                    "description": "Schedule builds if the source or pipeline has changed. Defaults to `true`.\n"
                },
                "startHours": {
                    "type": "integer",
                    "description": "Build start hour. Defaults to `0`. Valid values: `0 ~ 23`.\n"
                },
                "startMinutes": {
                    "type": "integer",
                    "description": "Build start minute. Defaults to `0`. Valid values: `0 ~ 59`.\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "Build time zone. Defaults to `(UTC) Coordinated Universal Time`. Valid values: \n`(UTC-12:00) International Date Line West`,\n`(UTC-11:00) Coordinated Universal Time-11`,\n`(UTC-10:00) Aleutian Islands`,\n`(UTC-10:00) Hawaii`,\n`(UTC-09:30) Marquesas Islands`,\n`(UTC-09:00) Alaska`,\n`(UTC-09:00) Coordinated Universal Time-09`,\n`(UTC-08:00) Baja California`,\n`(UTC-08:00) Coordinated Universal Time-08`,\n`(UTC-08:00) Pacific Time (US \u0026Canada)`,\n`(UTC-07:00) Arizona`,\n`(UTC-07:00) Chihuahua, La Paz, Mazatlan`,\n`(UTC-07:00) Mountain Time (US \u0026Canada)`,\n`(UTC-07:00) Yukon`,\n`(UTC-06:00) Central America`,\n`(UTC-06:00) Central Time (US \u0026Canada)`,\n`(UTC-06:00) Easter Island`,\n`(UTC-06:00) Guadalajara, Mexico City, Monterrey`,\n`(UTC-06:00) Saskatchewan`,\n`(UTC-05:00) Bogota, Lima, Quito, Rio Branco`,\n`(UTC-05:00) Chetumal`,\n`(UTC-05:00) Eastern Time (US \u0026Canada)`,\n`(UTC-05:00) Haiti`,\n`(UTC-05:00) Havana`,\n`(UTC-05:00) Indiana (East)`,\n`(UTC-05:00) Turks and Caicos`,\n`(UTC-04:00) Asuncion`,\n`(UTC-04:00) Atlantic Time (Canada)`,\n`(UTC-04:00) Caracas`,\n`(UTC-04:00) Cuiaba`,\n`(UTC-04:00) Georgetown, La Paz, Manaus, San Juan`,\n`(UTC-04:00) Santiago`,\n`(UTC-03:30) Newfoundland`,\n`(UTC-03:00) Araguaina`,\n`(UTC-03:00) Brasilia`,\n`(UTC-03:00) Cayenne, Fortaleza`,\n`(UTC-03:00) City of Buenos Aires`,\n`(UTC-03:00) Greenland`,\n`(UTC-03:00) Montevideo`,\n`(UTC-03:00) Punta Arenas`,\n`(UTC-03:00) Saint Pierre and Miquelon`,\n`(UTC-03:00) Salvador`,\n`(UTC-02:00) Coordinated Universal Time-02`,\n`(UTC-02:00) Mid-Atlantic - Old`,\n`(UTC-01:00) Azores`,\n`(UTC-01:00) Cabo Verde Is.`,\n`(UTC) Coordinated Universal Time`,\n`(UTC+00:00) Dublin, Edinburgh, Lisbon, London`,\n`(UTC+00:00) Monrovia, Reykjavik`,\n`(UTC+00:00) Sao Tome`,\n`(UTC+01:00) Casablanca`,\n`(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna`,\n`(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague`,\n`(UTC+01:00) Brussels, Copenhagen, Madrid, Paris`,\n`(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb`,\n`(UTC+01:00) West Central Africa`,\n`(UTC+02:00) Amman`,\n`(UTC+02:00) Athens, Bucharest`,\n`(UTC+02:00) Beirut`,\n`(UTC+02:00) Cairo`,\n`(UTC+02:00) Chisinau`,\n`(UTC+02:00) Damascus`,\n`(UTC+02:00) Gaza, Hebron`,\n`(UTC+02:00) Harare, Pretoria`,\n`(UTC+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius`,\n`(UTC+02:00) Jerusalem`,\n`(UTC+02:00) Juba`,\n`(UTC+02:00) Kaliningrad`,\n`(UTC+02:00) Khartoum`,\n`(UTC+02:00) Tripoli`,\n`(UTC+02:00) Windhoek`,\n`(UTC+03:00) Baghdad`,\n`(UTC+03:00) Istanbul`,\n`(UTC+03:00) Kuwait, Riyadh`,\n`(UTC+03:00) Minsk`,\n`(UTC+03:00) Moscow, St. Petersburg`,\n`(UTC+03:00) Nairobi`,\n`(UTC+03:00) Volgograd`,\n`(UTC+03:30) Tehran`,\n`(UTC+04:00) Abu Dhabi, Muscat`,\n`(UTC+04:00) Astrakhan, Ulyanovsk`,\n`(UTC+04:00) Baku`,\n`(UTC+04:00) Izhevsk, Samara`,\n`(UTC+04:00) Port Louis`,\n`(UTC+04:00) Saratov`,\n`(UTC+04:00) Tbilisi`,\n`(UTC+04:00) Yerevan`,\n`(UTC+04:30) Kabul`,\n`(UTC+05:00) Ashgabat, Tashkent`,\n`(UTC+05:00) Ekaterinburg`,\n`(UTC+05:00) Islamabad, Karachi`,\n`(UTC+05:00) Qyzylorda`,\n`(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi`,\n`(UTC+05:30) Sri Jayawardenepura`,\n`(UTC+05:45) Kathmandu`,\n`(UTC+06:00) Astana`,\n`(UTC+06:00) Dhaka`,\n`(UTC+06:00) Omsk`,\n`(UTC+06:30) Yangon (Rangoon)`,\n`(UTC+07:00) Bangkok, Hanoi, Jakarta`,\n`(UTC+07:00) Barnaul, Gorno-Altaysk`,\n`(UTC+07:00) Hovd`,\n`(UTC+07:00) Krasnoyarsk`,\n`(UTC+07:00) Novosibirsk`,\n`(UTC+07:00) Tomsk`,\n`(UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi`,\n`(UTC+08:00) Irkutsk`,\n`(UTC+08:00) Kuala Lumpur, Singapore`,\n`(UTC+08:00) Perth`,\n`(UTC+08:00) Taipei`,\n`(UTC+08:00) Ulaanbaatar`,\n`(UTC+08:45) Eucla`,\n`(UTC+09:00) Chita`,\n`(UTC+09:00) Osaka, Sapporo, Tokyo`,\n`(UTC+09:00) Pyongyang`,\n`(UTC+09:00) Seoul`,\n`(UTC+09:00) Yakutsk`,\n`(UTC+09:30) Adelaide`,\n`(UTC+09:30) Darwin`,\n`(UTC+10:00) Brisbane`,\n`(UTC+10:00) Canberra, Melbourne, Sydney`,\n`(UTC+10:00) Guam, Port Moresby`,\n`(UTC+10:00) Hobart`,\n`(UTC+10:00) Vladivostok`,\n`(UTC+10:30) Lord Howe Island`,\n`(UTC+11:00) Bougainville Island`,\n`(UTC+11:00) Chokurdakh`,\n`(UTC+11:00) Magadan`,\n`(UTC+11:00) Norfolk Island`,\n`(UTC+11:00) Sakhalin`,\n`(UTC+11:00) Solomon Is., New Caledonia`,\n`(UTC+12:00) Anadyr, Petropavlovsk-Kamchatsky`,\n`(UTC+12:00) Auckland, Wellington`,\n`(UTC+12:00) Coordinated Universal Time+12`,\n`(UTC+12:00) Fiji`,\n`(UTC+12:00) Petropavlovsk-Kamchatsky - Old`,\n`(UTC+12:45) Chatham Islands`,\n`(UTC+13:00) Coordinated Universal Time+13`,\n`(UTC+13:00) Nuku'alofa`,\n`(UTC+13:00) Samoa`,\n`(UTC+14:00) Kiritimati Island`.\n"
                }
            },
            "type": "object",
            "required": [
                "daysToBuilds"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "daysToBuilds",
                        "scheduleJobId"
                    ]
                }
            }
        },
        "azuredevops:Build/BuildDefinitionScheduleBranchFilter:BuildDefinitionScheduleBranchFilter": {
            "properties": {
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to exclude.\n"
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to include.\n"
                }
            },
            "type": "object"
        },
        "azuredevops:Build/BuildDefinitionVariable:BuildDefinitionVariable": {
            "properties": {
                "allowOverride": {
                    "type": "boolean",
                    "description": "True if the variable can be overridden. Defaults to `true`.\n"
                },
                "isSecret": {
                    "type": "boolean",
                    "description": "True if the variable is a secret. Defaults to `false`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the variable.\n"
                },
                "secretValue": {
                    "type": "string",
                    "description": "The secret value of the variable. Used when `is_secret` set to `true`.\n",
                    "secret": true
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variable.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "azuredevops:Core/getProjectsProject:getProjectsProject": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Project, if not specified all projects will be returned.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Project.\n"
                },
                "projectUrl": {
                    "type": "string",
                    "description": "Url to the full version of the object.\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of the Project, if not specified all projects will be returned. Valid values are `all`, `deleting`, `new`, `wellFormed`, `createPending`, `unchanged`,`deleted`.\n\nDataSource without specifying any arguments will return all projects.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "projectId",
                "projectUrl",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:Identities/getUsersUser:getUsersUser": {
            "properties": {
                "descriptor": {
                    "type": "string",
                    "description": "The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The user ID.\n"
                },
                "mailAddress": {
                    "type": "string",
                    "description": "The email address of record for a given graph member. This may be different than the principal name.\n"
                },
                "origin": {
                    "type": "string",
                    "description": "The type of source provider for the `origin_id` parameter (ex:AD, AAD, MSA) The supported origins are listed below.\n"
                },
                "originId": {
                    "type": "string",
                    "description": "The unique identifier from the system of origin.\n\nDataSource without specifying any arguments will return all users inside an organization.\n\nList of possible subject types\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n\nList of possible origins\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n"
                },
                "principalName": {
                    "type": "string",
                    "description": "The PrincipalName of this graph member from the source provider.\n"
                }
            },
            "type": "object",
            "required": [
                "descriptor",
                "displayName",
                "id",
                "mailAddress",
                "origin",
                "principalName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:Pipeline/VariableGroupKeyVault:VariableGroupKeyVault": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the Azure key vault to link secrets from as variables.\n"
                },
                "searchDepth": {
                    "type": "integer",
                    "description": "Set the Azure Key Vault Secret search depth. Defaults to `20`.\n"
                },
                "serviceEndpointId": {
                    "type": "string",
                    "description": "The id of the Azure subscription endpoint to access the key vault.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "serviceEndpointId"
            ]
        },
        "azuredevops:Pipeline/VariableGroupVariable:VariableGroupVariable": {
            "properties": {
                "contentType": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "expires": {
                    "type": "string"
                },
                "isSecret": {
                    "type": "boolean",
                    "description": "A boolean flag describing if the variable value is sensitive. Defaults to `false`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The key value used for the variable. Must be unique within the Variable Group.\n"
                },
                "secretValue": {
                    "type": "string",
                    "description": "The secret value of the variable. If omitted, it will default to empty string. Used when `is_secret` set to `true`.\n",
                    "secret": true
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variable. If omitted, it will default to empty string.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "contentType",
                        "enabled",
                        "expires",
                        "name"
                    ]
                }
            }
        },
        "azuredevops:Policy/BranchPolicyBuildValidationSettings:BranchPolicyBuildValidationSettings": {
            "properties": {
                "buildDefinitionId": {
                    "type": "integer",
                    "description": "The ID of the build to monitor for the policy.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name for the policy.\n"
                },
                "filenamePatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "If a path filter is set, the policy will only apply when files which match the filter are changes. Not setting this field means that the policy will always apply. You can specify absolute paths and wildcards. Example: `[\"/WebApp/Models/Data.cs\", \"/WebApp/*\", \"*.cs\"]`. Paths prefixed with \"!\" are excluded. Example: `[\"/WebApp/*\", \"!/WebApp/Tests/*\"]`. Order is significant.\n"
                },
                "manualQueueOnly": {
                    "type": "boolean",
                    "description": "If set to true, the build will need to be manually queued. Defaults to `false`\n"
                },
                "queueOnSourceUpdateOnly": {
                    "type": "boolean",
                    "description": "True if the build should queue on source updates only. Defaults to `true`.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Policy/BranchPolicyBuildValidationSettingsScope:BranchPolicyBuildValidationSettingsScope"
                    },
                    "description": "Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.\n"
                },
                "validDuration": {
                    "type": "integer",
                    "description": "The number of minutes for which the build is valid. If `0`, the build will not expire. Defaults to `720` (12 hours).\n"
                }
            },
            "type": "object",
            "required": [
                "buildDefinitionId",
                "displayName",
                "scopes"
            ]
        },
        "azuredevops:Policy/BranchPolicyBuildValidationSettingsScope:BranchPolicyBuildValidationSettingsScope": {
            "properties": {
                "matchType": {
                    "type": "string",
                    "description": "The match type to use when applying the policy. Supported values are `Exact` (default), `Prefix` or `DefaultBranch`.\n"
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The repository ID. Needed only if the scope of the policy will be limited to a single repository. If `match_type` is `DefaultBranch`, this should not be defined.\n"
                },
                "repositoryRef": {
                    "type": "string",
                    "description": "The ref pattern to use for the match when `match_type` other than `DefaultBranch`. If `match_type` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `match_type` is `Prefix`, this should be a ref path such as `refs/heads/releases`.\n"
                }
            },
            "type": "object"
        },
        "azuredevops:Policy/BranchPolicyMinReviewersSettings:BranchPolicyMinReviewersSettings": {
            "properties": {
                "allowCompletionWithRejectsOrWaits": {
                    "type": "boolean",
                    "description": "Allow completion even if some reviewers vote to wait or reject. Defaults to `false`.\n"
                },
                "lastPusherCannotApprove": {
                    "type": "boolean",
                    "description": "Prohibit the most recent pusher from approving their own changes. Defaults to `false`.\n"
                },
                "onLastIterationRequireVote": {
                    "type": "boolean",
                    "description": "On last iteration require vote. Defaults to `false`.\n"
                },
                "onPushResetAllVotes": {
                    "type": "boolean",
                    "description": "When new changes are pushed reset all code reviewer votes. Defaults to `false`.\n\n\u003e **Note:** If `on_push_reset_all_votes` is `true` then `on_push_reset_approved_votes` will be set to `true`. To enable `on_push_reset_approved_votes`, you need explicitly set `on_push_reset_all_votes` `false` or not configure.\n"
                },
                "onPushResetApprovedVotes": {
                    "type": "boolean",
                    "description": "When new changes are pushed reset all approval votes (does not reset votes to reject or wait). Defaults to `false`.\n"
                },
                "reviewerCount": {
                    "type": "integer",
                    "description": "The number of reviewers needed to approve.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Policy/BranchPolicyMinReviewersSettingsScope:BranchPolicyMinReviewersSettingsScope"
                    },
                    "description": "A `scope` block as defined below. Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.\n"
                },
                "submitterCanVote": {
                    "type": "boolean",
                    "description": "Allow requesters to approve their own changes. Defaults to `false`.\n"
                }
            },
            "type": "object",
            "required": [
                "scopes"
            ]
        },
        "azuredevops:Policy/BranchPolicyMinReviewersSettingsScope:BranchPolicyMinReviewersSettingsScope": {
            "properties": {
                "matchType": {
                    "type": "string",
                    "description": "The match type to use when applying the policy. Supported values are `Exact` (default), `Prefix` or `DefaultBranch`.\n"
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The repository ID. Needed only if the scope of the policy will be limited to a single repository. If `match_type` is `DefaultBranch`, this should not be defined.\n"
                },
                "repositoryRef": {
                    "type": "string",
                    "description": "The ref pattern to use for the match when `match_type` other than `DefaultBranch`. If `match_type` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `match_type` is `Prefix`, this should be a ref path such as `refs/heads/releases`.\n"
                }
            },
            "type": "object"
        },
        "azuredevops:Repository/GitInitialization:GitInitialization": {
            "properties": {
                "initType": {
                    "type": "string",
                    "description": "The type of repository to create. Valid values: `Uninitialized`, `Clean` or `Import`.\n",
                    "willReplaceOnChanges": true
                },
                "serviceConnectionId": {
                    "type": "string",
                    "description": "The id of service connection used to authenticate to a private repository for import initialization.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "Type of the source repository. Used if the `init_type` is `Import`. Valid values: `Git`.\n",
                    "willReplaceOnChanges": true
                },
                "sourceUrl": {
                    "type": "string",
                    "description": "The URL of the source repository. Used if the `init_type` is `Import`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "initType"
            ]
        },
        "azuredevops:Repository/getRepositoriesRepository:getRepositoriesRepository": {
            "properties": {
                "defaultBranch": {
                    "type": "string",
                    "description": "The ref of the default branch.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Git repository identifier.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Git repository to retrieve; requires `project_id` to be specified as well\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of project to list Git repositories\n"
                },
                "remoteUrl": {
                    "type": "string",
                    "description": "HTTPS Url to clone the Git repository\n"
                },
                "size": {
                    "type": "integer",
                    "description": "Compressed size (bytes) of the repository.\n"
                },
                "sshUrl": {
                    "type": "string",
                    "description": "SSH Url to clone the Git repository\n"
                },
                "url": {
                    "type": "string",
                    "description": "Details REST API endpoint for the Git Repository.\n"
                },
                "webUrl": {
                    "type": "string",
                    "description": "Url of the Git repository web view\n"
                }
            },
            "type": "object",
            "required": [
                "defaultBranch",
                "id",
                "name",
                "projectId",
                "remoteUrl",
                "size",
                "sshUrl",
                "url",
                "webUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:ServiceEndpoint/AzureRMCredentials:AzureRMCredentials": {
            "properties": {
                "serviceprincipalid": {
                    "type": "string",
                    "description": "The service principal application Id\n"
                },
                "serviceprincipalkey": {
                    "type": "string",
                    "description": "The service principal secret. This not required if `service_endpoint_authentication_scheme` is set to `WorkloadIdentityFederation`.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "serviceprincipalid"
            ]
        },
        "azuredevops:ServiceEndpoint/AzureRMFeatures:AzureRMFeatures": {
            "properties": {
                "validate": {
                    "type": "boolean",
                    "description": "Whether or not to validate connection with Azure after create or update operations. Defaults to `false`\n"
                }
            },
            "type": "object"
        },
        "azuredevops:ServiceEndpoint/GitHubAuthOauth:GitHubAuthOauth": {
            "properties": {
                "oauthConfigurationId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "oauthConfigurationId"
            ]
        },
        "azuredevops:ServiceEndpoint/GitHubAuthPersonal:GitHubAuthPersonal": {
            "properties": {
                "personalAccessToken": {
                    "type": "string",
                    "description": "The Personal Access Token for GitHub.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "personalAccessToken"
            ]
        },
        "azuredevops:ServiceEndpoint/KubernetesAzureSubscription:KubernetesAzureSubscription": {
            "properties": {
                "azureEnvironment": {
                    "type": "string",
                    "description": "Azure environment refers to whether the public cloud offering or domestic (government) clouds are being used. Currently, only the public cloud is supported. The value must be AzureCloud. This is also the default-value.\n"
                },
                "clusterAdmin": {
                    "type": "boolean",
                    "description": "Set this option to allow use cluster admin credentials.\n",
                    "willReplaceOnChanges": true
                },
                "clusterName": {
                    "type": "string",
                    "description": "The name of the Kubernetes cluster.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes namespace. Default value is \"default\".\n"
                },
                "resourcegroupId": {
                    "type": "string",
                    "description": "The resource group name, to which the Kubernetes cluster is deployed.\n"
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "The id of the Azure subscription.\n"
                },
                "subscriptionName": {
                    "type": "string",
                    "description": "The name of the Azure subscription.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The id of the tenant used by the subscription.\n"
                }
            },
            "type": "object",
            "required": [
                "clusterName",
                "resourcegroupId",
                "subscriptionId",
                "subscriptionName",
                "tenantId"
            ]
        },
        "azuredevops:ServiceEndpoint/KubernetesKubeconfig:KubernetesKubeconfig": {
            "properties": {
                "acceptUntrustedCerts": {
                    "type": "boolean",
                    "description": "Set this option to allow clients to accept a self-signed certificate.\n"
                },
                "clusterContext": {
                    "type": "string",
                    "description": "Context within the kubeconfig file that is to be used for identifying the cluster. Default value is the current-context set in kubeconfig.\n"
                },
                "kubeConfig": {
                    "type": "string",
                    "description": "The content of the kubeconfig in yaml notation to be used to communicate with the API-Server of Kubernetes.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "kubeConfig"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterContext",
                        "kubeConfig"
                    ]
                }
            }
        },
        "azuredevops:ServiceEndpoint/KubernetesServiceAccount:KubernetesServiceAccount": {
            "properties": {
                "caCert": {
                    "type": "string",
                    "description": "The certificate from a Kubernetes secret object.\n",
                    "secret": true
                },
                "token": {
                    "type": "string",
                    "description": "The token from a Kubernetes secret object.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "caCert",
                "token"
            ]
        },
        "azuredevops:index/BranchPolicyAutoReviewersSettings:BranchPolicyAutoReviewersSettings": {
            "properties": {
                "autoReviewerIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Required reviewers ids. Supports multiples user Ids.\n"
                },
                "message": {
                    "type": "string",
                    "description": "Activity feed message, Message will appear in the activity feed of pull requests with automatically added reviewers.\n"
                },
                "minimumNumberOfReviewers": {
                    "type": "integer",
                    "description": "Minimum number of required reviewers. Defaults to `1`.\n\n\u003e **Note** Has to be greater than `0`. Can only be greater than `1` when attribute `auto_reviewer_ids` contains exactly one group! Only has an effect when attribute `blocking` is set to `true`.\n"
                },
                "pathFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Filter path(s) on which the policy is applied. Supports absolute paths, wildcards and multiple paths. Example: /WebApp/Models/Data.cs, /WebApp/* or *.cs,/WebApp/Models/Data.cs;ClientApp/Models/Data.cs.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/BranchPolicyAutoReviewersSettingsScope:BranchPolicyAutoReviewersSettingsScope"
                    },
                    "description": "Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.\n"
                },
                "submitterCanVote": {
                    "type": "boolean",
                    "description": "Controls whether or not the submitter's vote counts. Defaults to `false`.\n"
                }
            },
            "type": "object",
            "required": [
                "autoReviewerIds",
                "scopes"
            ]
        },
        "azuredevops:index/BranchPolicyAutoReviewersSettingsScope:BranchPolicyAutoReviewersSettingsScope": {
            "properties": {
                "matchType": {
                    "type": "string",
                    "description": "The match type to use when applying the policy. Supported values are `Exact` (default), `Prefix` or `DefaultBranch`.\n"
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The repository ID. Needed only if the scope of the policy will be limited to a single repository. If `match_type` is `DefaultBranch`, this should not be defined.\n"
                },
                "repositoryRef": {
                    "type": "string",
                    "description": "The ref pattern to use for the match when `match_type` other than `DefaultBranch`. If `match_type` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `match_type` is `Prefix`, this should be a ref path such as `refs/heads/releases`.\n"
                }
            },
            "type": "object"
        },
        "azuredevops:index/BranchPolicyBuildValidationSettings:BranchPolicyBuildValidationSettings": {
            "properties": {
                "buildDefinitionId": {
                    "type": "integer",
                    "description": "The ID of the build to monitor for the policy.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name for the policy.\n"
                },
                "filenamePatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "If a path filter is set, the policy will only apply when files which match the filter are changes. Not setting this field means that the policy will always apply. You can specify absolute paths and wildcards. Example: `[\"/WebApp/Models/Data.cs\", \"/WebApp/*\", \"*.cs\"]`. Paths prefixed with \"!\" are excluded. Example: `[\"/WebApp/*\", \"!/WebApp/Tests/*\"]`. Order is significant.\n"
                },
                "manualQueueOnly": {
                    "type": "boolean",
                    "description": "If set to true, the build will need to be manually queued. Defaults to `false`\n"
                },
                "queueOnSourceUpdateOnly": {
                    "type": "boolean",
                    "description": "True if the build should queue on source updates only. Defaults to `true`.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/BranchPolicyBuildValidationSettingsScope:BranchPolicyBuildValidationSettingsScope"
                    },
                    "description": "Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.\n"
                },
                "validDuration": {
                    "type": "integer",
                    "description": "The number of minutes for which the build is valid. If `0`, the build will not expire. Defaults to `720` (12 hours).\n"
                }
            },
            "type": "object",
            "required": [
                "buildDefinitionId",
                "displayName",
                "scopes"
            ]
        },
        "azuredevops:index/BranchPolicyBuildValidationSettingsScope:BranchPolicyBuildValidationSettingsScope": {
            "properties": {
                "matchType": {
                    "type": "string",
                    "description": "The match type to use when applying the policy. Supported values are `Exact` (default), `Prefix` or `DefaultBranch`.\n"
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The repository ID. Needed only if the scope of the policy will be limited to a single repository. If `match_type` is `DefaultBranch`, this should not be defined.\n"
                },
                "repositoryRef": {
                    "type": "string",
                    "description": "The ref pattern to use for the match when `match_type` other than `DefaultBranch`. If `match_type` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `match_type` is `Prefix`, this should be a ref path such as `refs/heads/releases`.\n"
                }
            },
            "type": "object"
        },
        "azuredevops:index/BranchPolicyCommentResolutionSettings:BranchPolicyCommentResolutionSettings": {
            "properties": {
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/BranchPolicyCommentResolutionSettingsScope:BranchPolicyCommentResolutionSettingsScope"
                    },
                    "description": "Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.\n"
                }
            },
            "type": "object",
            "required": [
                "scopes"
            ]
        },
        "azuredevops:index/BranchPolicyCommentResolutionSettingsScope:BranchPolicyCommentResolutionSettingsScope": {
            "properties": {
                "matchType": {
                    "type": "string",
                    "description": "The match type to use when applying the policy. Supported values are `Exact` (default), `Prefix` or `DefaultBranch`.\n"
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The repository ID. Needed only if the scope of the policy will be limited to a single repository. If `match_type` is `DefaultBranch`, this should not be defined.\n"
                },
                "repositoryRef": {
                    "type": "string",
                    "description": "The ref pattern to use for the match when `match_type` other than `DefaultBranch`. If `match_type` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `match_type` is `Prefix`, this should be a ref path such as `refs/heads/releases`.\n"
                }
            },
            "type": "object"
        },
        "azuredevops:index/BranchPolicyMergeTypesSettings:BranchPolicyMergeTypesSettings": {
            "properties": {
                "allowBasicNoFastForward": {
                    "type": "boolean",
                    "description": "Allow basic merge with no fast forward. Defaults to `false`.\n"
                },
                "allowRebaseAndFastForward": {
                    "type": "boolean",
                    "description": "Allow rebase with fast forward. Defaults to `false`.\n"
                },
                "allowRebaseWithMerge": {
                    "type": "boolean",
                    "description": "Allow rebase with merge commit. Defaults to `false`.\n"
                },
                "allowSquash": {
                    "type": "boolean",
                    "description": "Allow squash merge. Defaults to `false`\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/BranchPolicyMergeTypesSettingsScope:BranchPolicyMergeTypesSettingsScope"
                    },
                    "description": "Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.\n"
                }
            },
            "type": "object",
            "required": [
                "scopes"
            ]
        },
        "azuredevops:index/BranchPolicyMergeTypesSettingsScope:BranchPolicyMergeTypesSettingsScope": {
            "properties": {
                "matchType": {
                    "type": "string",
                    "description": "The match type to use when applying the policy. Supported values are `Exact` (default), `Prefix` or `DefaultBranch`.\n"
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The repository ID. Needed only if the scope of the policy will be limited to a single repository. If `match_type` is `DefaultBranch`, this should not be defined.\n"
                },
                "repositoryRef": {
                    "type": "string",
                    "description": "The ref pattern to use for the match when `match_type` other than `DefaultBranch`. If `match_type` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `match_type` is `Prefix`, this should be a ref path such as `refs/heads/releases`.\n"
                }
            },
            "type": "object"
        },
        "azuredevops:index/BranchPolicyMinReviewersSettings:BranchPolicyMinReviewersSettings": {
            "properties": {
                "allowCompletionWithRejectsOrWaits": {
                    "type": "boolean",
                    "description": "Allow completion even if some reviewers vote to wait or reject. Defaults to `false`.\n"
                },
                "lastPusherCannotApprove": {
                    "type": "boolean",
                    "description": "Prohibit the most recent pusher from approving their own changes. Defaults to `false`.\n"
                },
                "onLastIterationRequireVote": {
                    "type": "boolean",
                    "description": "On last iteration require vote. Defaults to `false`.\n"
                },
                "onPushResetAllVotes": {
                    "type": "boolean",
                    "description": "When new changes are pushed reset all code reviewer votes. Defaults to `false`.\n\n\u003e **Note:** If `on_push_reset_all_votes` is `true` then `on_push_reset_approved_votes` will be set to `true`. To enable `on_push_reset_approved_votes`, you need explicitly set `on_push_reset_all_votes` `false` or not configure.\n"
                },
                "onPushResetApprovedVotes": {
                    "type": "boolean",
                    "description": "When new changes are pushed reset all approval votes (does not reset votes to reject or wait). Defaults to `false`.\n"
                },
                "reviewerCount": {
                    "type": "integer",
                    "description": "The number of reviewers needed to approve.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/BranchPolicyMinReviewersSettingsScope:BranchPolicyMinReviewersSettingsScope"
                    },
                    "description": "A `scope` block as defined below. Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.\n"
                },
                "submitterCanVote": {
                    "type": "boolean",
                    "description": "Allow requesters to approve their own changes. Defaults to `false`.\n"
                }
            },
            "type": "object",
            "required": [
                "scopes"
            ]
        },
        "azuredevops:index/BranchPolicyMinReviewersSettingsScope:BranchPolicyMinReviewersSettingsScope": {
            "properties": {
                "matchType": {
                    "type": "string",
                    "description": "The match type to use when applying the policy. Supported values are `Exact` (default), `Prefix` or `DefaultBranch`.\n"
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The repository ID. Needed only if the scope of the policy will be limited to a single repository. If `match_type` is `DefaultBranch`, this should not be defined.\n"
                },
                "repositoryRef": {
                    "type": "string",
                    "description": "The ref pattern to use for the match when `match_type` other than `DefaultBranch`. If `match_type` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `match_type` is `Prefix`, this should be a ref path such as `refs/heads/releases`.\n"
                }
            },
            "type": "object"
        },
        "azuredevops:index/BranchPolicyStatusCheckSettings:BranchPolicyStatusCheckSettings": {
            "properties": {
                "applicability": {
                    "type": "string",
                    "description": "Policy applicability. If policy `applicability` is `default`, apply unless \"Not Applicable\" \nstatus is posted to the pull request. If policy `applicability` is `conditional`, policy is applied only after a status\nis posted to the pull request.\n"
                },
                "authorId": {
                    "type": "string",
                    "description": "The authorized user can post the status.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name.\n"
                },
                "filenamePatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "If a path filter is set, the policy will only apply when files which match the filter are changes. Not setting this field means that the policy will always apply. You can specify absolute paths and wildcards. Example: `[\"/WebApp/Models/Data.cs\", \"/WebApp/*\", \"*.cs\"]`. Paths prefixed with \"!\" are excluded. Example: `[\"/WebApp/*\", \"!/WebApp/Tests/*\"]`. Order is significant.\n"
                },
                "genre": {
                    "type": "string",
                    "description": "The genre of the status to check (see [Microsoft Documentation](https://docs.microsoft.com/en-us/azure/devops/repos/git/pull-request-status?view=azure-devops#status-policy))\n"
                },
                "invalidateOnUpdate": {
                    "type": "boolean",
                    "description": "Reset status whenever there are new changes.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The status name to check.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/BranchPolicyStatusCheckSettingsScope:BranchPolicyStatusCheckSettingsScope"
                    },
                    "description": "Controls which repositories and branches the policy will be enabled for. This block must be defined\nat least once.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "scopes"
            ]
        },
        "azuredevops:index/BranchPolicyStatusCheckSettingsScope:BranchPolicyStatusCheckSettingsScope": {
            "properties": {
                "matchType": {
                    "type": "string",
                    "description": "The match type to use when applying the policy. Supported values are `Exact` (default), `Prefix` or `DefaultBranch`.\n"
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The repository ID. Needed only if the scope of the policy will be limited to a single repository. If `match_type` is `DefaultBranch`, this should not be defined.\n"
                },
                "repositoryRef": {
                    "type": "string",
                    "description": "The ref pattern to use for the match when `match_type` other than `DefaultBranch`. If `match_type` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `match_type` is `Prefix`, this should be a ref path such as `refs/heads/releases`.\n"
                }
            },
            "type": "object"
        },
        "azuredevops:index/BranchPolicyWorkItemLinkingSettings:BranchPolicyWorkItemLinkingSettings": {
            "properties": {
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/BranchPolicyWorkItemLinkingSettingsScope:BranchPolicyWorkItemLinkingSettingsScope"
                    },
                    "description": "Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.\n"
                }
            },
            "type": "object",
            "required": [
                "scopes"
            ]
        },
        "azuredevops:index/BranchPolicyWorkItemLinkingSettingsScope:BranchPolicyWorkItemLinkingSettingsScope": {
            "properties": {
                "matchType": {
                    "type": "string",
                    "description": "The match type to use when applying the policy. Supported values are `Exact` (default), `Prefix` or `DefaultBranch`.\n"
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The repository ID. Needed only if the scope of the policy will be limited to a single repository. If `match_type` is `DefaultBranch`, this should not be defined.\n"
                },
                "repositoryRef": {
                    "type": "string",
                    "description": "The ref pattern to use for the match when `match_type` other than `DefaultBranch`. If `match_type` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `match_type` is `Prefix`, this should be a ref path such as `refs/heads/releases`.\n"
                }
            },
            "type": "object"
        },
        "azuredevops:index/BuildDefinitionCiTrigger:BuildDefinitionCiTrigger": {
            "properties": {
                "override": {
                    "$ref": "#/types/azuredevops:index/BuildDefinitionCiTriggerOverride:BuildDefinitionCiTriggerOverride",
                    "description": "Override the azure-pipeline file and use a this configuration for all builds.\n"
                },
                "useYaml": {
                    "type": "boolean",
                    "description": "Use the azure-pipeline file for the build configuration. Defaults to `false`.\n"
                }
            },
            "type": "object"
        },
        "azuredevops:index/BuildDefinitionCiTriggerOverride:BuildDefinitionCiTriggerOverride": {
            "properties": {
                "batch": {
                    "type": "boolean",
                    "description": "If you set batch to true, when a pipeline is running, the system waits until the run is completed, then starts another run with all changes that have not yet been built. Defaults to `true`.\n"
                },
                "branchFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/BuildDefinitionCiTriggerOverrideBranchFilter:BuildDefinitionCiTriggerOverrideBranchFilter"
                    },
                    "description": "The branches to include and exclude from the trigger.\n"
                },
                "maxConcurrentBuildsPerBranch": {
                    "type": "integer",
                    "description": "The number of max builds per branch. Defaults to `1`.\n"
                },
                "pathFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/BuildDefinitionCiTriggerOverridePathFilter:BuildDefinitionCiTriggerOverridePathFilter"
                    },
                    "description": "Specify file paths to include or exclude. Note that the wildcard syntax is different between branches/tags and file paths.\n"
                },
                "pollingInterval": {
                    "type": "integer",
                    "description": "How often the external repository is polled. Defaults to `0`.\n"
                },
                "pollingJobId": {
                    "type": "string",
                    "description": "This is the ID of the polling job that polls the external repository. Once the build definition is saved/updated, this value is set.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "pollingJobId"
                    ]
                }
            }
        },
        "azuredevops:index/BuildDefinitionCiTriggerOverrideBranchFilter:BuildDefinitionCiTriggerOverrideBranchFilter": {
            "properties": {
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to exclude.\n"
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to include.\n"
                }
            },
            "type": "object"
        },
        "azuredevops:index/BuildDefinitionCiTriggerOverridePathFilter:BuildDefinitionCiTriggerOverridePathFilter": {
            "properties": {
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of path patterns to exclude.\n"
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of path patterns to include.\n"
                }
            },
            "type": "object"
        },
        "azuredevops:index/BuildDefinitionFeature:BuildDefinitionFeature": {
            "properties": {
                "skipFirstRun": {
                    "type": "boolean",
                    "description": "Trigger the pipeline to run after the creation. Defaults to `true`.\n\n\u003e **Note** The first run(`skip_first_run = false`) will only be triggered on create.\n"
                }
            },
            "type": "object"
        },
        "azuredevops:index/BuildDefinitionPullRequestTrigger:BuildDefinitionPullRequestTrigger": {
            "properties": {
                "commentRequired": {
                    "type": "string"
                },
                "forks": {
                    "$ref": "#/types/azuredevops:index/BuildDefinitionPullRequestTriggerForks:BuildDefinitionPullRequestTriggerForks",
                    "description": "Set permissions for Forked repositories.\n"
                },
                "initialBranch": {
                    "type": "string"
                },
                "override": {
                    "$ref": "#/types/azuredevops:index/BuildDefinitionPullRequestTriggerOverride:BuildDefinitionPullRequestTriggerOverride",
                    "description": "Override the azure-pipeline file and use this configuration for all builds.\n"
                },
                "useYaml": {
                    "type": "boolean",
                    "description": "Use the azure-pipeline file for the build configuration. Defaults to `false`.\n"
                }
            },
            "type": "object",
            "required": [
                "forks"
            ]
        },
        "azuredevops:index/BuildDefinitionPullRequestTriggerForks:BuildDefinitionPullRequestTriggerForks": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Build pull requests from forks of this repository.\n"
                },
                "shareSecrets": {
                    "type": "boolean",
                    "description": "Make secrets available to builds of forks.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "shareSecrets"
            ]
        },
        "azuredevops:index/BuildDefinitionPullRequestTriggerOverride:BuildDefinitionPullRequestTriggerOverride": {
            "properties": {
                "autoCancel": {
                    "type": "boolean",
                    "description": ". Defaults to `true`.\n"
                },
                "branchFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/BuildDefinitionPullRequestTriggerOverrideBranchFilter:BuildDefinitionPullRequestTriggerOverrideBranchFilter"
                    },
                    "description": "The branches to include and exclude from the trigger.\n"
                },
                "pathFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/BuildDefinitionPullRequestTriggerOverridePathFilter:BuildDefinitionPullRequestTriggerOverridePathFilter"
                    },
                    "description": "Specify file paths to include or exclude. Note that the wildcard syntax is different between branches/tags and file paths.\n"
                }
            },
            "type": "object"
        },
        "azuredevops:index/BuildDefinitionPullRequestTriggerOverrideBranchFilter:BuildDefinitionPullRequestTriggerOverrideBranchFilter": {
            "properties": {
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to exclude.\n"
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to include.\n"
                }
            },
            "type": "object"
        },
        "azuredevops:index/BuildDefinitionPullRequestTriggerOverridePathFilter:BuildDefinitionPullRequestTriggerOverridePathFilter": {
            "properties": {
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of path patterns to exclude.\n"
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of path patterns to include.\n"
                }
            },
            "type": "object"
        },
        "azuredevops:index/BuildDefinitionRepository:BuildDefinitionRepository": {
            "properties": {
                "branchName": {
                    "type": "string",
                    "description": "The branch name for which builds are triggered. Defaults to `master`.\n"
                },
                "githubEnterpriseUrl": {
                    "type": "string",
                    "description": "The Github Enterprise URL. Used if `repo_type` is `GithubEnterprise`.\n"
                },
                "repoId": {
                    "type": "string",
                    "description": "The id of the repository. For `TfsGit` repos, this is simply the ID of the repository. For `Github` repos, this will take the form of `\u003cGitHub Org\u003e/\u003cRepo Name\u003e`. For `Bitbucket` repos, this will take the form of `\u003cWorkspace ID\u003e/\u003cRepo Name\u003e`.\n"
                },
                "repoType": {
                    "type": "string",
                    "description": "The repository type. Valid values: `GitHub` or `TfsGit` or `Bitbucket` or `GitHub Enterprise`. Defaults to `GitHub`. If `repo_type` is `GitHubEnterprise`, must use existing project and GitHub Enterprise service connection.\n"
                },
                "reportBuildStatus": {
                    "type": "boolean",
                    "description": "Report build status. Default is true.\n"
                },
                "serviceConnectionId": {
                    "type": "string",
                    "description": "The service connection ID. Used if the `repo_type` is `GitHub` or `GitHubEnterprise`.\n"
                },
                "ymlPath": {
                    "type": "string",
                    "description": "The path of the Yaml file describing the build definition.\n"
                }
            },
            "type": "object",
            "required": [
                "repoId",
                "repoType",
                "ymlPath"
            ]
        },
        "azuredevops:index/BuildDefinitionSchedule:BuildDefinitionSchedule": {
            "properties": {
                "branchFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/BuildDefinitionScheduleBranchFilter:BuildDefinitionScheduleBranchFilter"
                    },
                    "description": "block supports the following:\n"
                },
                "daysToBuilds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "When to build. Valid values: `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat`, `Sun`.\n"
                },
                "scheduleJobId": {
                    "type": "string",
                    "description": "The ID of the schedule job\n"
                },
                "scheduleOnlyWithChanges": {
                    "type": "boolean",
                    "description": "Schedule builds if the source or pipeline has changed. Defaults to `true`.\n"
                },
                "startHours": {
                    "type": "integer",
                    "description": "Build start hour. Defaults to `0`. Valid values: `0 ~ 23`.\n"
                },
                "startMinutes": {
                    "type": "integer",
                    "description": "Build start minute. Defaults to `0`. Valid values: `0 ~ 59`.\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "Build time zone. Defaults to `(UTC) Coordinated Universal Time`. Valid values: \n`(UTC-12:00) International Date Line West`,\n`(UTC-11:00) Coordinated Universal Time-11`,\n`(UTC-10:00) Aleutian Islands`,\n`(UTC-10:00) Hawaii`,\n`(UTC-09:30) Marquesas Islands`,\n`(UTC-09:00) Alaska`,\n`(UTC-09:00) Coordinated Universal Time-09`,\n`(UTC-08:00) Baja California`,\n`(UTC-08:00) Coordinated Universal Time-08`,\n`(UTC-08:00) Pacific Time (US \u0026Canada)`,\n`(UTC-07:00) Arizona`,\n`(UTC-07:00) Chihuahua, La Paz, Mazatlan`,\n`(UTC-07:00) Mountain Time (US \u0026Canada)`,\n`(UTC-07:00) Yukon`,\n`(UTC-06:00) Central America`,\n`(UTC-06:00) Central Time (US \u0026Canada)`,\n`(UTC-06:00) Easter Island`,\n`(UTC-06:00) Guadalajara, Mexico City, Monterrey`,\n`(UTC-06:00) Saskatchewan`,\n`(UTC-05:00) Bogota, Lima, Quito, Rio Branco`,\n`(UTC-05:00) Chetumal`,\n`(UTC-05:00) Eastern Time (US \u0026Canada)`,\n`(UTC-05:00) Haiti`,\n`(UTC-05:00) Havana`,\n`(UTC-05:00) Indiana (East)`,\n`(UTC-05:00) Turks and Caicos`,\n`(UTC-04:00) Asuncion`,\n`(UTC-04:00) Atlantic Time (Canada)`,\n`(UTC-04:00) Caracas`,\n`(UTC-04:00) Cuiaba`,\n`(UTC-04:00) Georgetown, La Paz, Manaus, San Juan`,\n`(UTC-04:00) Santiago`,\n`(UTC-03:30) Newfoundland`,\n`(UTC-03:00) Araguaina`,\n`(UTC-03:00) Brasilia`,\n`(UTC-03:00) Cayenne, Fortaleza`,\n`(UTC-03:00) City of Buenos Aires`,\n`(UTC-03:00) Greenland`,\n`(UTC-03:00) Montevideo`,\n`(UTC-03:00) Punta Arenas`,\n`(UTC-03:00) Saint Pierre and Miquelon`,\n`(UTC-03:00) Salvador`,\n`(UTC-02:00) Coordinated Universal Time-02`,\n`(UTC-02:00) Mid-Atlantic - Old`,\n`(UTC-01:00) Azores`,\n`(UTC-01:00) Cabo Verde Is.`,\n`(UTC) Coordinated Universal Time`,\n`(UTC+00:00) Dublin, Edinburgh, Lisbon, London`,\n`(UTC+00:00) Monrovia, Reykjavik`,\n`(UTC+00:00) Sao Tome`,\n`(UTC+01:00) Casablanca`,\n`(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna`,\n`(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague`,\n`(UTC+01:00) Brussels, Copenhagen, Madrid, Paris`,\n`(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb`,\n`(UTC+01:00) West Central Africa`,\n`(UTC+02:00) Amman`,\n`(UTC+02:00) Athens, Bucharest`,\n`(UTC+02:00) Beirut`,\n`(UTC+02:00) Cairo`,\n`(UTC+02:00) Chisinau`,\n`(UTC+02:00) Damascus`,\n`(UTC+02:00) Gaza, Hebron`,\n`(UTC+02:00) Harare, Pretoria`,\n`(UTC+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius`,\n`(UTC+02:00) Jerusalem`,\n`(UTC+02:00) Juba`,\n`(UTC+02:00) Kaliningrad`,\n`(UTC+02:00) Khartoum`,\n`(UTC+02:00) Tripoli`,\n`(UTC+02:00) Windhoek`,\n`(UTC+03:00) Baghdad`,\n`(UTC+03:00) Istanbul`,\n`(UTC+03:00) Kuwait, Riyadh`,\n`(UTC+03:00) Minsk`,\n`(UTC+03:00) Moscow, St. Petersburg`,\n`(UTC+03:00) Nairobi`,\n`(UTC+03:00) Volgograd`,\n`(UTC+03:30) Tehran`,\n`(UTC+04:00) Abu Dhabi, Muscat`,\n`(UTC+04:00) Astrakhan, Ulyanovsk`,\n`(UTC+04:00) Baku`,\n`(UTC+04:00) Izhevsk, Samara`,\n`(UTC+04:00) Port Louis`,\n`(UTC+04:00) Saratov`,\n`(UTC+04:00) Tbilisi`,\n`(UTC+04:00) Yerevan`,\n`(UTC+04:30) Kabul`,\n`(UTC+05:00) Ashgabat, Tashkent`,\n`(UTC+05:00) Ekaterinburg`,\n`(UTC+05:00) Islamabad, Karachi`,\n`(UTC+05:00) Qyzylorda`,\n`(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi`,\n`(UTC+05:30) Sri Jayawardenepura`,\n`(UTC+05:45) Kathmandu`,\n`(UTC+06:00) Astana`,\n`(UTC+06:00) Dhaka`,\n`(UTC+06:00) Omsk`,\n`(UTC+06:30) Yangon (Rangoon)`,\n`(UTC+07:00) Bangkok, Hanoi, Jakarta`,\n`(UTC+07:00) Barnaul, Gorno-Altaysk`,\n`(UTC+07:00) Hovd`,\n`(UTC+07:00) Krasnoyarsk`,\n`(UTC+07:00) Novosibirsk`,\n`(UTC+07:00) Tomsk`,\n`(UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi`,\n`(UTC+08:00) Irkutsk`,\n`(UTC+08:00) Kuala Lumpur, Singapore`,\n`(UTC+08:00) Perth`,\n`(UTC+08:00) Taipei`,\n`(UTC+08:00) Ulaanbaatar`,\n`(UTC+08:45) Eucla`,\n`(UTC+09:00) Chita`,\n`(UTC+09:00) Osaka, Sapporo, Tokyo`,\n`(UTC+09:00) Pyongyang`,\n`(UTC+09:00) Seoul`,\n`(UTC+09:00) Yakutsk`,\n`(UTC+09:30) Adelaide`,\n`(UTC+09:30) Darwin`,\n`(UTC+10:00) Brisbane`,\n`(UTC+10:00) Canberra, Melbourne, Sydney`,\n`(UTC+10:00) Guam, Port Moresby`,\n`(UTC+10:00) Hobart`,\n`(UTC+10:00) Vladivostok`,\n`(UTC+10:30) Lord Howe Island`,\n`(UTC+11:00) Bougainville Island`,\n`(UTC+11:00) Chokurdakh`,\n`(UTC+11:00) Magadan`,\n`(UTC+11:00) Norfolk Island`,\n`(UTC+11:00) Sakhalin`,\n`(UTC+11:00) Solomon Is., New Caledonia`,\n`(UTC+12:00) Anadyr, Petropavlovsk-Kamchatsky`,\n`(UTC+12:00) Auckland, Wellington`,\n`(UTC+12:00) Coordinated Universal Time+12`,\n`(UTC+12:00) Fiji`,\n`(UTC+12:00) Petropavlovsk-Kamchatsky - Old`,\n`(UTC+12:45) Chatham Islands`,\n`(UTC+13:00) Coordinated Universal Time+13`,\n`(UTC+13:00) Nuku'alofa`,\n`(UTC+13:00) Samoa`,\n`(UTC+14:00) Kiritimati Island`.\n"
                }
            },
            "type": "object",
            "required": [
                "daysToBuilds"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "daysToBuilds",
                        "scheduleJobId"
                    ]
                }
            }
        },
        "azuredevops:index/BuildDefinitionScheduleBranchFilter:BuildDefinitionScheduleBranchFilter": {
            "properties": {
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to exclude.\n"
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to include.\n"
                }
            },
            "type": "object"
        },
        "azuredevops:index/BuildDefinitionVariable:BuildDefinitionVariable": {
            "properties": {
                "allowOverride": {
                    "type": "boolean",
                    "description": "True if the variable can be overridden. Defaults to `true`.\n"
                },
                "isSecret": {
                    "type": "boolean",
                    "description": "True if the variable is a secret. Defaults to `false`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the variable.\n"
                },
                "secretValue": {
                    "type": "string",
                    "description": "The secret value of the variable. Used when `is_secret` set to `true`.\n",
                    "secret": true
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variable.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "azuredevops:index/CheckRequiredTemplateRequiredTemplate:CheckRequiredTemplateRequiredTemplate": {
            "properties": {
                "repositoryName": {
                    "type": "string",
                    "description": "The name of the repository storing the template.\n"
                },
                "repositoryRef": {
                    "type": "string",
                    "description": "The branch in which the template will be referenced.\n"
                },
                "repositoryType": {
                    "type": "string",
                    "description": "The type of the repository storing the template. Valid values: `azuregit`, `github`, `bitbucket`. Defaults to `azuregit`.\n"
                },
                "templatePath": {
                    "type": "string",
                    "description": "The path to the template yaml.\n"
                }
            },
            "type": "object",
            "required": [
                "repositoryName",
                "repositoryRef",
                "templatePath"
            ]
        },
        "azuredevops:index/GitInitialization:GitInitialization": {
            "properties": {
                "initType": {
                    "type": "string",
                    "description": "The type of repository to create. Valid values: `Uninitialized`, `Clean` or `Import`.\n",
                    "willReplaceOnChanges": true
                },
                "serviceConnectionId": {
                    "type": "string",
                    "description": "The id of service connection used to authenticate to a private repository for import initialization.\n"
                },
                "sourceType": {
                    "type": "string",
                    "description": "Type of the source repository. Used if the `init_type` is `Import`. Valid values: `Git`.\n",
                    "willReplaceOnChanges": true
                },
                "sourceUrl": {
                    "type": "string",
                    "description": "The URL of the source repository. Used if the `init_type` is `Import`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "initType"
            ]
        },
        "azuredevops:index/ServiceEndpointArtifactoryAuthenticationBasic:ServiceEndpointArtifactoryAuthenticationBasic": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "Artifactory Password.\n",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Artifactory Username.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "password",
                "username"
            ]
        },
        "azuredevops:index/ServiceEndpointArtifactoryAuthenticationToken:ServiceEndpointArtifactoryAuthenticationToken": {
            "properties": {
                "token": {
                    "type": "string",
                    "description": "Authentication Token generated through Artifactory.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "token"
            ]
        },
        "azuredevops:index/ServiceEndpointAzureRMCredentials:ServiceEndpointAzureRMCredentials": {
            "properties": {
                "serviceprincipalid": {
                    "type": "string",
                    "description": "The service principal application Id\n"
                },
                "serviceprincipalkey": {
                    "type": "string",
                    "description": "The service principal secret. This not required if `service_endpoint_authentication_scheme` is set to `WorkloadIdentityFederation`.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "serviceprincipalid"
            ]
        },
        "azuredevops:index/ServiceEndpointAzureRMFeatures:ServiceEndpointAzureRMFeatures": {
            "properties": {
                "validate": {
                    "type": "boolean",
                    "description": "Whether or not to validate connection with Azure after create or update operations. Defaults to `false`\n"
                }
            },
            "type": "object"
        },
        "azuredevops:index/ServiceEndpointGitHubAuthOauth:ServiceEndpointGitHubAuthOauth": {
            "properties": {
                "oauthConfigurationId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "oauthConfigurationId"
            ]
        },
        "azuredevops:index/ServiceEndpointGitHubAuthPersonal:ServiceEndpointGitHubAuthPersonal": {
            "properties": {
                "personalAccessToken": {
                    "type": "string",
                    "description": "The Personal Access Token for GitHub.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "personalAccessToken"
            ]
        },
        "azuredevops:index/ServiceEndpointGitHubEnterpriseAuthPersonal:ServiceEndpointGitHubEnterpriseAuthPersonal": {
            "properties": {
                "personalAccessToken": {
                    "type": "string",
                    "description": "The Personal Access Token for GitHub.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "personalAccessToken"
            ]
        },
        "azuredevops:index/ServiceEndpointKubernetesAzureSubscription:ServiceEndpointKubernetesAzureSubscription": {
            "properties": {
                "azureEnvironment": {
                    "type": "string",
                    "description": "Azure environment refers to whether the public cloud offering or domestic (government) clouds are being used. Currently, only the public cloud is supported. The value must be AzureCloud. This is also the default-value.\n"
                },
                "clusterAdmin": {
                    "type": "boolean",
                    "description": "Set this option to allow use cluster admin credentials.\n",
                    "willReplaceOnChanges": true
                },
                "clusterName": {
                    "type": "string",
                    "description": "The name of the Kubernetes cluster.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes namespace. Default value is \"default\".\n"
                },
                "resourcegroupId": {
                    "type": "string",
                    "description": "The resource group name, to which the Kubernetes cluster is deployed.\n"
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "The id of the Azure subscription.\n"
                },
                "subscriptionName": {
                    "type": "string",
                    "description": "The name of the Azure subscription.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The id of the tenant used by the subscription.\n"
                }
            },
            "type": "object",
            "required": [
                "clusterName",
                "resourcegroupId",
                "subscriptionId",
                "subscriptionName",
                "tenantId"
            ]
        },
        "azuredevops:index/ServiceEndpointKubernetesKubeconfig:ServiceEndpointKubernetesKubeconfig": {
            "properties": {
                "acceptUntrustedCerts": {
                    "type": "boolean",
                    "description": "Set this option to allow clients to accept a self-signed certificate.\n"
                },
                "clusterContext": {
                    "type": "string",
                    "description": "Context within the kubeconfig file that is to be used for identifying the cluster. Default value is the current-context set in kubeconfig.\n"
                },
                "kubeConfig": {
                    "type": "string",
                    "description": "The content of the kubeconfig in yaml notation to be used to communicate with the API-Server of Kubernetes.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "kubeConfig"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterContext",
                        "kubeConfig"
                    ]
                }
            }
        },
        "azuredevops:index/ServiceEndpointKubernetesServiceAccount:ServiceEndpointKubernetesServiceAccount": {
            "properties": {
                "caCert": {
                    "type": "string",
                    "description": "The certificate from a Kubernetes secret object.\n",
                    "secret": true
                },
                "token": {
                    "type": "string",
                    "description": "The token from a Kubernetes secret object.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "caCert",
                "token"
            ]
        },
        "azuredevops:index/ServiceEndpointPipelineAuthPersonal:ServiceEndpointPipelineAuthPersonal": {
            "properties": {
                "personalAccessToken": {
                    "type": "string",
                    "description": "The Personal Access Token for Azure DevOps Pipeline. It also can be set with AZDO_PERSONAL_ACCESS_TOKEN environment variable.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "personalAccessToken"
            ]
        },
        "azuredevops:index/ServiceEndpointServiceFabricAzureActiveDirectory:ServiceEndpointServiceFabricAzureActiveDirectory": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "Password for the Azure Active Directory account.\n",
                    "secret": true
                },
                "serverCertificateCommonName": {
                    "type": "string",
                    "description": "The common name(s) of the cluster's certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple common names with a comma (',')\n"
                },
                "serverCertificateLookup": {
                    "type": "string",
                    "description": "Verification mode for the cluster. Possible values include `Thumbprint` or `CommonName`.\n"
                },
                "serverCertificateThumbprint": {
                    "type": "string",
                    "description": "The thumbprint(s) of the cluster's certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple thumbprints with a comma (',')\n"
                },
                "username": {
                    "type": "string",
                    "description": "Specify an Azure Active Directory account.\n"
                }
            },
            "type": "object",
            "required": [
                "password",
                "serverCertificateLookup",
                "username"
            ]
        },
        "azuredevops:index/ServiceEndpointServiceFabricCertificate:ServiceEndpointServiceFabricCertificate": {
            "properties": {
                "clientCertificate": {
                    "type": "string",
                    "description": "Base64 encoding of the cluster's client certificate file.\n",
                    "secret": true
                },
                "clientCertificatePassword": {
                    "type": "string",
                    "description": "Password for the certificate.\n",
                    "secret": true
                },
                "serverCertificateCommonName": {
                    "type": "string",
                    "description": "The common name(s) of the cluster's certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple common names with a comma (',')\n"
                },
                "serverCertificateLookup": {
                    "type": "string",
                    "description": "Verification mode for the cluster. Possible values include `Thumbprint` or `CommonName`.\n"
                },
                "serverCertificateThumbprint": {
                    "type": "string",
                    "description": "The thumbprint(s) of the cluster's certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple thumbprints with a comma (',')\n"
                }
            },
            "type": "object",
            "required": [
                "clientCertificate",
                "serverCertificateLookup"
            ]
        },
        "azuredevops:index/ServiceEndpointServiceFabricNone:ServiceEndpointServiceFabricNone": {
            "properties": {
                "clusterSpn": {
                    "type": "string",
                    "description": "Fully qualified domain SPN for gMSA account. This is applicable only if `unsecured` option is disabled.\n"
                },
                "unsecured": {
                    "type": "boolean",
                    "description": "Skip using windows security for authentication.\n"
                }
            },
            "type": "object"
        },
        "azuredevops:index/ServiceendpointArgocdAuthenticationBasic:ServiceendpointArgocdAuthenticationBasic": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "ArgoCD Password.\n",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "ArgoCD Username.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "password",
                "username"
            ]
        },
        "azuredevops:index/ServiceendpointArgocdAuthenticationToken:ServiceendpointArgocdAuthenticationToken": {
            "properties": {
                "token": {
                    "type": "string",
                    "description": "Authentication Token generated through ArgoCD.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "token"
            ]
        },
        "azuredevops:index/ServiceendpointExternaltfsAuthPersonal:ServiceendpointExternaltfsAuthPersonal": {
            "properties": {
                "personalAccessToken": {
                    "type": "string",
                    "description": "The Personal Access Token for Azure DevOps Organization.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "personalAccessToken"
            ]
        },
        "azuredevops:index/ServiceendpointJfrogArtifactoryV2AuthenticationBasic:ServiceendpointJfrogArtifactoryV2AuthenticationBasic": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "Artifactory Password.\n",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Artifactory Username.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "password",
                "username"
            ]
        },
        "azuredevops:index/ServiceendpointJfrogArtifactoryV2AuthenticationToken:ServiceendpointJfrogArtifactoryV2AuthenticationToken": {
            "properties": {
                "token": {
                    "type": "string",
                    "description": "Authentication Token generated through Artifactory.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "token"
            ]
        },
        "azuredevops:index/ServiceendpointJfrogDistributionV2AuthenticationBasic:ServiceendpointJfrogDistributionV2AuthenticationBasic": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "Artifactory Password.\n",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Artifactory Username.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "password",
                "username"
            ]
        },
        "azuredevops:index/ServiceendpointJfrogDistributionV2AuthenticationToken:ServiceendpointJfrogDistributionV2AuthenticationToken": {
            "properties": {
                "token": {
                    "type": "string",
                    "description": "Authentication Token generated through Artifactory.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "token"
            ]
        },
        "azuredevops:index/ServiceendpointJfrogPlatformV2AuthenticationBasic:ServiceendpointJfrogPlatformV2AuthenticationBasic": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "Artifactory Password.\n",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Artifactory Username.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "password",
                "username"
            ]
        },
        "azuredevops:index/ServiceendpointJfrogPlatformV2AuthenticationToken:ServiceendpointJfrogPlatformV2AuthenticationToken": {
            "properties": {
                "token": {
                    "type": "string",
                    "description": "Authentication Token generated through Artifactory.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "token"
            ]
        },
        "azuredevops:index/ServiceendpointJfrogXrayV2AuthenticationBasic:ServiceendpointJfrogXrayV2AuthenticationBasic": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "Artifactory Password.\n",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Artifactory Username.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "password",
                "username"
            ]
        },
        "azuredevops:index/ServiceendpointJfrogXrayV2AuthenticationToken:ServiceendpointJfrogXrayV2AuthenticationToken": {
            "properties": {
                "token": {
                    "type": "string",
                    "description": "Authentication Token generated through Artifactory.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "token"
            ]
        },
        "azuredevops:index/ServiceendpointMavenAuthenticationBasic:ServiceendpointMavenAuthenticationBasic": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "The password Maven Repository.\n",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "The Username of the Maven Repository.\n"
                }
            },
            "type": "object",
            "required": [
                "password",
                "username"
            ]
        },
        "azuredevops:index/ServiceendpointMavenAuthenticationToken:ServiceendpointMavenAuthenticationToken": {
            "properties": {
                "token": {
                    "type": "string",
                    "description": "Authentication Token generated through maven repository.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "token"
            ]
        },
        "azuredevops:index/VariableGroupKeyVault:VariableGroupKeyVault": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the Azure key vault to link secrets from as variables.\n"
                },
                "searchDepth": {
                    "type": "integer",
                    "description": "Set the Azure Key Vault Secret search depth. Defaults to `20`.\n"
                },
                "serviceEndpointId": {
                    "type": "string",
                    "description": "The id of the Azure subscription endpoint to access the key vault.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "serviceEndpointId"
            ]
        },
        "azuredevops:index/VariableGroupVariable:VariableGroupVariable": {
            "properties": {
                "contentType": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "expires": {
                    "type": "string"
                },
                "isSecret": {
                    "type": "boolean",
                    "description": "A boolean flag describing if the variable value is sensitive. Defaults to `false`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The key value used for the variable. Must be unique within the Variable Group.\n"
                },
                "secretValue": {
                    "type": "string",
                    "description": "The secret value of the variable. If omitted, it will default to empty string. Used when `is_secret` set to `true`.\n",
                    "secret": true
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variable. If omitted, it will default to empty string.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "contentType",
                        "enabled",
                        "expires",
                        "name"
                    ]
                }
            }
        },
        "azuredevops:index/getAreaChildren:getAreaChildren": {
            "properties": {
                "hasChildren": {
                    "type": "boolean",
                    "description": "Indicator if the child Area node has child nodes\n"
                },
                "id": {
                    "type": "string",
                    "description": "The id of the child Area node\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the child Area node\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path to the Area; _Format_: URL relative; if omitted, or value `\"/\"` is used, the root Area will be returned\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID.\n"
                }
            },
            "type": "object",
            "required": [
                "hasChildren",
                "id",
                "name",
                "path",
                "projectId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:index/getBuildDefinitionCiTrigger:getBuildDefinitionCiTrigger": {
            "properties": {
                "overrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/getBuildDefinitionCiTriggerOverride:getBuildDefinitionCiTriggerOverride"
                    },
                    "description": "A `override` block as defined below.\n"
                },
                "useYaml": {
                    "type": "boolean",
                    "description": "Use the azure-pipeline file for the build configuration.\n"
                }
            },
            "type": "object",
            "required": [
                "overrides",
                "useYaml"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:index/getBuildDefinitionCiTriggerOverride:getBuildDefinitionCiTriggerOverride": {
            "properties": {
                "batch": {
                    "type": "boolean",
                    "description": "If batch is true, when a pipeline is running, the system waits until the run is completed, then starts another run with all changes that have not yet been built.\n"
                },
                "branchFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/getBuildDefinitionCiTriggerOverrideBranchFilter:getBuildDefinitionCiTriggerOverrideBranchFilter"
                    },
                    "description": "A `branch_filter` block as defined above.\n"
                },
                "maxConcurrentBuildsPerBranch": {
                    "type": "integer",
                    "description": "The number of max builds per branch.\n"
                },
                "pathFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/getBuildDefinitionCiTriggerOverridePathFilter:getBuildDefinitionCiTriggerOverridePathFilter"
                    },
                    "description": "block supports the following:\n"
                },
                "pollingInterval": {
                    "type": "integer",
                    "description": "How often the external repository is polled.\n"
                },
                "pollingJobId": {
                    "type": "string",
                    "description": "This is the ID of the polling job that polls the external repository. Once the build definition is saved/updated, this value is set.\n"
                }
            },
            "type": "object",
            "required": [
                "batch",
                "branchFilters",
                "maxConcurrentBuildsPerBranch",
                "pathFilters",
                "pollingInterval",
                "pollingJobId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:index/getBuildDefinitionCiTriggerOverrideBranchFilter:getBuildDefinitionCiTriggerOverrideBranchFilter": {
            "properties": {
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) List of path patterns to exclude.\n"
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) List of path patterns to include.\n"
                }
            },
            "type": "object",
            "required": [
                "excludes",
                "includes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:index/getBuildDefinitionCiTriggerOverridePathFilter:getBuildDefinitionCiTriggerOverridePathFilter": {
            "properties": {
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) List of path patterns to exclude.\n"
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) List of path patterns to include.\n"
                }
            },
            "type": "object",
            "required": [
                "excludes",
                "includes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:index/getBuildDefinitionPullRequestTrigger:getBuildDefinitionPullRequestTrigger": {
            "properties": {
                "commentRequired": {
                    "type": "string",
                    "description": "Is a comment required on the PR?\n"
                },
                "forks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/getBuildDefinitionPullRequestTriggerFork:getBuildDefinitionPullRequestTriggerFork"
                    },
                    "description": "A `forks` block as defined above.\n"
                },
                "initialBranch": {
                    "type": "string",
                    "description": "When use_yaml is true set this to the name of the branch that the azure-pipelines.yml exists on.\n"
                },
                "overrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/getBuildDefinitionPullRequestTriggerOverride:getBuildDefinitionPullRequestTriggerOverride"
                    },
                    "description": "A `override` block as defined below.\n"
                },
                "useYaml": {
                    "type": "boolean",
                    "description": "Use the azure-pipeline file for the build configuration.\n"
                }
            },
            "type": "object",
            "required": [
                "commentRequired",
                "forks",
                "initialBranch",
                "overrides",
                "useYaml"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:index/getBuildDefinitionPullRequestTriggerFork:getBuildDefinitionPullRequestTriggerFork": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Build pull requests from forks of this repository.\n"
                },
                "shareSecrets": {
                    "type": "boolean",
                    "description": "Make secrets available to builds of forks.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "shareSecrets"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:index/getBuildDefinitionPullRequestTriggerOverride:getBuildDefinitionPullRequestTriggerOverride": {
            "properties": {
                "autoCancel": {
                    "type": "boolean",
                    "description": "Should further updates to a PR cancel an in progress validation?\n"
                },
                "branchFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/getBuildDefinitionPullRequestTriggerOverrideBranchFilter:getBuildDefinitionPullRequestTriggerOverrideBranchFilter"
                    },
                    "description": "A `branch_filter` block as defined above.\n"
                },
                "pathFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/getBuildDefinitionPullRequestTriggerOverridePathFilter:getBuildDefinitionPullRequestTriggerOverridePathFilter"
                    },
                    "description": "block supports the following:\n"
                }
            },
            "type": "object",
            "required": [
                "autoCancel",
                "branchFilters",
                "pathFilters"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:index/getBuildDefinitionPullRequestTriggerOverrideBranchFilter:getBuildDefinitionPullRequestTriggerOverrideBranchFilter": {
            "properties": {
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) List of path patterns to exclude.\n"
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) List of path patterns to include.\n"
                }
            },
            "type": "object",
            "required": [
                "excludes",
                "includes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:index/getBuildDefinitionPullRequestTriggerOverridePathFilter:getBuildDefinitionPullRequestTriggerOverridePathFilter": {
            "properties": {
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) List of path patterns to exclude.\n"
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) List of path patterns to include.\n"
                }
            },
            "type": "object",
            "required": [
                "excludes",
                "includes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:index/getBuildDefinitionRepository:getBuildDefinitionRepository": {
            "properties": {
                "branchName": {
                    "type": "string",
                    "description": "The branch name for which builds are triggered.\n"
                },
                "githubEnterpriseUrl": {
                    "type": "string",
                    "description": "The Github Enterprise URL.\n"
                },
                "repoId": {
                    "type": "string",
                    "description": "The id of the repository.\n"
                },
                "repoType": {
                    "type": "string",
                    "description": "The repository type.\n"
                },
                "reportBuildStatus": {
                    "type": "boolean",
                    "description": "Report build status.\n"
                },
                "serviceConnectionId": {
                    "type": "string",
                    "description": "The service connection ID.\n"
                },
                "ymlPath": {
                    "type": "string",
                    "description": "The path of the Yaml file describing the build definition.\n"
                }
            },
            "type": "object",
            "required": [
                "branchName",
                "githubEnterpriseUrl",
                "repoId",
                "repoType",
                "reportBuildStatus",
                "serviceConnectionId",
                "ymlPath"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:index/getBuildDefinitionSchedule:getBuildDefinitionSchedule": {
            "properties": {
                "branchFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/getBuildDefinitionScheduleBranchFilter:getBuildDefinitionScheduleBranchFilter"
                    },
                    "description": "A `branch_filter` block as defined above.\n"
                },
                "daysToBuilds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of days to build on.\n"
                },
                "scheduleJobId": {
                    "type": "string",
                    "description": "The ID of the schedule job.\n"
                },
                "scheduleOnlyWithChanges": {
                    "type": "boolean",
                    "description": "Schedule builds if the source or pipeline has changed.\n"
                },
                "startHours": {
                    "type": "integer",
                    "description": "Build start hour.\n"
                },
                "startMinutes": {
                    "type": "integer",
                    "description": "Build start minute.\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "Build time zone.\n"
                }
            },
            "type": "object",
            "required": [
                "branchFilters",
                "daysToBuilds",
                "scheduleJobId",
                "scheduleOnlyWithChanges",
                "startHours",
                "startMinutes",
                "timeZone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:index/getBuildDefinitionScheduleBranchFilter:getBuildDefinitionScheduleBranchFilter": {
            "properties": {
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) List of path patterns to exclude.\n"
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) List of path patterns to include.\n"
                }
            },
            "type": "object",
            "required": [
                "excludes",
                "includes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:index/getBuildDefinitionVariable:getBuildDefinitionVariable": {
            "properties": {
                "allowOverride": {
                    "type": "boolean",
                    "description": "`true` if the variable can be overridden.\n"
                },
                "isSecret": {
                    "type": "boolean",
                    "description": "`true` if the variable is a secret.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of this Build Definition.\n"
                },
                "secretValue": {
                    "type": "string",
                    "description": "The secret value of the variable.\n",
                    "secret": true
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variable.\n"
                }
            },
            "type": "object",
            "required": [
                "allowOverride",
                "isSecret",
                "name",
                "secretValue",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:index/getGroupsGroup:getGroupsGroup": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A short phrase to help human readers disambiguate groups with similar names\n"
                },
                "descriptor": {
                    "type": "string",
                    "description": "The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "This represents the name of the container of origin for a graph member. (For MSA this is \"Windows Live ID\", for AD the name of the domain, for AAD the tenantID of the directory, for VSTS groups the ScopeId, etc)\n"
                },
                "mailAddress": {
                    "type": "string",
                    "description": "The email address of record for a given graph member. This may be different than the principal name.\n"
                },
                "origin": {
                    "type": "string",
                    "description": "The type of source provider for the origin identifier (ex:AD, AAD, MSA)\n"
                },
                "originId": {
                    "type": "string",
                    "description": "The unique identifier from the system of origin. Typically a sid, object id or Guid. Linking and unlinking operations can cause this value to change for a user because the user is not backed by a different provider and has a different unique id in the new provider.\n"
                },
                "principalName": {
                    "type": "string",
                    "description": "This is the PrincipalName of this graph member from the source provider. The source provider may change this field over time and it is not guaranteed to be immutable for the life of the graph member by VSTS.\n"
                },
                "url": {
                    "type": "string",
                    "description": "This url is the full route to the source resource of this graph subject.\n"
                }
            },
            "type": "object",
            "required": [
                "descriptor",
                "domain",
                "origin",
                "principalName",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:index/getIterationChildren:getIterationChildren": {
            "properties": {
                "hasChildren": {
                    "type": "boolean",
                    "description": "Indicator if the child Iteration node has child nodes\n"
                },
                "id": {
                    "type": "string",
                    "description": "The id of the child Iteration node\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the child Iteration node\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path to the Iteration, _Format_: URL relative; if omitted, or value `\"/\"` is used, the root Iteration will be returned\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID.\n"
                }
            },
            "type": "object",
            "required": [
                "hasChildren",
                "id",
                "name",
                "path",
                "projectId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:index/getPoolsAgentPool:getPoolsAgentPool": {
            "properties": {
                "autoProvision": {
                    "type": "boolean",
                    "description": "Specifies whether or not a queue should be automatically provisioned for each project collection.\n"
                },
                "autoUpdate": {
                    "type": "boolean",
                    "description": "Specifies whether or not agents within the pool should be automatically updated.\n"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the agent pool\n"
                },
                "poolType": {
                    "type": "string",
                    "description": "Specifies whether the agent pool type is Automation or Deployment.\n"
                }
            },
            "type": "object",
            "required": [
                "autoProvision",
                "autoUpdate",
                "id",
                "name",
                "poolType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:index/getProjectsProject:getProjectsProject": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Project, if not specified all projects will be returned.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Project.\n"
                },
                "projectUrl": {
                    "type": "string",
                    "description": "Url to the full version of the object.\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of the Project, if not specified all projects will be returned. Valid values are `all`, `deleting`, `new`, `wellFormed`, `createPending`, `unchanged`,`deleted`.\n\nDataSource without specifying any arguments will return all projects.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "projectId",
                "projectUrl",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:index/getRepositoriesRepository:getRepositoriesRepository": {
            "properties": {
                "defaultBranch": {
                    "type": "string",
                    "description": "The ref of the default branch.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Git repository identifier.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Git repository to retrieve; requires `project_id` to be specified as well\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of project to list Git repositories\n"
                },
                "remoteUrl": {
                    "type": "string",
                    "description": "HTTPS Url to clone the Git repository\n"
                },
                "size": {
                    "type": "integer",
                    "description": "Compressed size (bytes) of the repository.\n"
                },
                "sshUrl": {
                    "type": "string",
                    "description": "SSH Url to clone the Git repository\n"
                },
                "url": {
                    "type": "string",
                    "description": "Details REST API endpoint for the Git Repository.\n"
                },
                "webUrl": {
                    "type": "string",
                    "description": "Url of the Git repository web view\n"
                }
            },
            "type": "object",
            "required": [
                "defaultBranch",
                "id",
                "name",
                "projectId",
                "remoteUrl",
                "size",
                "sshUrl",
                "url",
                "webUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:index/getTeamsTeam:getTeamsTeam": {
            "properties": {
                "administrators": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of subject descriptors for `administrators` of the team.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Team description.\n"
                },
                "id": {
                    "type": "string"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of subject descriptors for `members` of the team.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Team name.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The Project ID. If no project ID all teams of the organization will be returned.\n"
                }
            },
            "type": "object",
            "required": [
                "administrators",
                "description",
                "id",
                "members",
                "name",
                "projectId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:index/getUsersUser:getUsersUser": {
            "properties": {
                "descriptor": {
                    "type": "string",
                    "description": "The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The user ID.\n"
                },
                "mailAddress": {
                    "type": "string",
                    "description": "The email address of record for a given graph member. This may be different than the principal name.\n"
                },
                "origin": {
                    "type": "string",
                    "description": "The type of source provider for the `origin_id` parameter (ex:AD, AAD, MSA) The supported origins are listed below.\n"
                },
                "originId": {
                    "type": "string",
                    "description": "The unique identifier from the system of origin.\n\nDataSource without specifying any arguments will return all users inside an organization.\n\nList of possible subject types\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n\nList of possible origins\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n"
                },
                "principalName": {
                    "type": "string",
                    "description": "The PrincipalName of this graph member from the source provider.\n"
                }
            },
            "type": "object",
            "required": [
                "descriptor",
                "displayName",
                "id",
                "mailAddress",
                "origin",
                "principalName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:index/getVariableGroupKeyVault:getVariableGroupKeyVault": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the Variable Group to retrieve.\n"
                },
                "serviceEndpointId": {
                    "type": "string",
                    "description": "The id of the Azure subscription endpoint to access the key vault.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "serviceEndpointId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:index/getVariableGroupVariable:getVariableGroupVariable": {
            "properties": {
                "contentType": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "expires": {
                    "type": "string"
                },
                "isSecret": {
                    "type": "boolean",
                    "description": "A boolean flag describing if the variable value is sensitive.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Variable Group to retrieve.\n"
                },
                "secretValue": {
                    "type": "string",
                    "description": "The secret value of the variable.\n",
                    "secret": true
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variable.\n"
                }
            },
            "type": "object",
            "required": [
                "contentType",
                "enabled",
                "expires",
                "isSecret",
                "name",
                "secretValue",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the azuredevops package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "orgServiceUrl": {
                "type": "string",
                "description": "The url of the Azure DevOps instance which should be used.\n"
            },
            "personalAccessToken": {
                "type": "string",
                "description": "The personal access token which should be used.\n",
                "secret": true
            }
        },
        "inputProperties": {
            "orgServiceUrl": {
                "type": "string",
                "description": "The url of the Azure DevOps instance which should be used.\n",
                "defaultInfo": {
                    "environment": [
                        "AZDO_ORG_SERVICE_URL"
                    ]
                }
            },
            "personalAccessToken": {
                "type": "string",
                "description": "The personal access token which should be used.\n",
                "secret": true
            }
        }
    },
    "resources": {
        "azuredevops:Agent/pool:Pool": {
            "description": "Manages an agent pool within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = new azuredevops.Pool(\"example\", {\n    autoProvision: false,\n    autoUpdate: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.Pool(\"example\",\n    auto_provision=False,\n    auto_update=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureDevOps.Pool(\"example\", new()\n    {\n        AutoProvision = false,\n        AutoUpdate = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewPool(ctx, \"example\", \u0026azuredevops.PoolArgs{\n\t\t\tAutoProvision: pulumi.Bool(false),\n\t\t\tAutoUpdate:    pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Pool;\nimport com.pulumi.azuredevops.PoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Pool(\"example\", PoolArgs.builder()        \n            .autoProvision(false)\n            .autoUpdate(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuredevops:Pool\n    properties:\n      autoProvision: false\n      autoUpdate: false\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Agent Pools](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/pools?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Agent Pools can be imported using the agent pool ID, e.g.\n\n```sh\n $ pulumi import azuredevops:Agent/pool:Pool example 0\n```\n\n ",
            "properties": {
                "autoProvision": {
                    "type": "boolean",
                    "description": "Specifies whether a queue should be automatically provisioned for each project collection. Defaults to `false`.\n"
                },
                "autoUpdate": {
                    "type": "boolean",
                    "description": "Specifies whether or not agents within the pool should be automatically updated. Defaults to `true`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the agent pool.\n"
                },
                "poolType": {
                    "type": "string",
                    "description": "Specifies whether the agent pool type is Automation or Deployment. Defaults to `automation`.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "autoProvision": {
                    "type": "boolean",
                    "description": "Specifies whether a queue should be automatically provisioned for each project collection. Defaults to `false`.\n"
                },
                "autoUpdate": {
                    "type": "boolean",
                    "description": "Specifies whether or not agents within the pool should be automatically updated. Defaults to `true`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the agent pool.\n"
                },
                "poolType": {
                    "type": "string",
                    "description": "Specifies whether the agent pool type is Automation or Deployment. Defaults to `automation`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Pool resources.\n",
                "properties": {
                    "autoProvision": {
                        "type": "boolean",
                        "description": "Specifies whether a queue should be automatically provisioned for each project collection. Defaults to `false`.\n"
                    },
                    "autoUpdate": {
                        "type": "boolean",
                        "description": "Specifies whether or not agents within the pool should be automatically updated. Defaults to `true`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the agent pool.\n"
                    },
                    "poolType": {
                        "type": "string",
                        "description": "Specifies whether the agent pool type is Automation or Deployment. Defaults to `automation`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.agent.Pool has been deprecated in favor of azuredevops.Pool"
        },
        "azuredevops:Agent/queue:Queue": {
            "description": "Manages an agent queue within Azure DevOps. In the UI, this is equivalent to adding an\nOrganization defined pool to a project.\n\nThe created queue is not authorized for use by all pipelines in the project. However,\nthe `azuredevops.ResourceAuthorization` resource can be used to grant authorization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Creating a Queue from an organization-level pool\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {});\nconst examplePool = azuredevops.getPool({\n    name: \"example-pool\",\n});\nconst exampleQueue = new azuredevops.Queue(\"exampleQueue\", {\n    projectId: exampleProject.id,\n    agentPoolId: examplePool.then(examplePool =\u003e examplePool.id),\n});\n// Grant access to queue to all pipelines in the project\nconst exampleResourceAuthorization = new azuredevops.ResourceAuthorization(\"exampleResourceAuthorization\", {\n    projectId: exampleProject.id,\n    resourceId: exampleQueue.id,\n    type: \"queue\",\n    authorized: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\")\nexample_pool = azuredevops.get_pool(name=\"example-pool\")\nexample_queue = azuredevops.Queue(\"exampleQueue\",\n    project_id=example_project.id,\n    agent_pool_id=example_pool.id)\n# Grant access to queue to all pipelines in the project\nexample_resource_authorization = azuredevops.ResourceAuthorization(\"exampleResourceAuthorization\",\n    project_id=example_project.id,\n    resource_id=example_queue.id,\n    type=\"queue\",\n    authorized=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\");\n\n    var examplePool = AzureDevOps.GetPool.Invoke(new()\n    {\n        Name = \"example-pool\",\n    });\n\n    var exampleQueue = new AzureDevOps.Queue(\"exampleQueue\", new()\n    {\n        ProjectId = exampleProject.Id,\n        AgentPoolId = examplePool.Apply(getPoolResult =\u003e getPoolResult.Id),\n    });\n\n    // Grant access to queue to all pipelines in the project\n    var exampleResourceAuthorization = new AzureDevOps.ResourceAuthorization(\"exampleResourceAuthorization\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ResourceId = exampleQueue.Id,\n        Type = \"queue\",\n        Authorized = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texamplePool, err := azuredevops.LookupPool(ctx, \u0026azuredevops.LookupPoolArgs{\n\t\t\tName: \"example-pool\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleQueue, err := azuredevops.NewQueue(ctx, \"exampleQueue\", \u0026azuredevops.QueueArgs{\n\t\t\tProjectId:   exampleProject.ID(),\n\t\t\tAgentPoolId: *pulumi.String(examplePool.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewResourceAuthorization(ctx, \"exampleResourceAuthorization\", \u0026azuredevops.ResourceAuthorizationArgs{\n\t\t\tProjectId:  exampleProject.ID(),\n\t\t\tResourceId: exampleQueue.ID(),\n\t\t\tType:       pulumi.String(\"queue\"),\n\t\t\tAuthorized: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetPoolArgs;\nimport com.pulumi.azuredevops.Queue;\nimport com.pulumi.azuredevops.QueueArgs;\nimport com.pulumi.azuredevops.ResourceAuthorization;\nimport com.pulumi.azuredevops.ResourceAuthorizationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\");\n\n        final var examplePool = AzuredevopsFunctions.getPool(GetPoolArgs.builder()\n            .name(\"example-pool\")\n            .build());\n\n        var exampleQueue = new Queue(\"exampleQueue\", QueueArgs.builder()        \n            .projectId(exampleProject.id())\n            .agentPoolId(examplePool.applyValue(getPoolResult -\u003e getPoolResult.id()))\n            .build());\n\n        var exampleResourceAuthorization = new ResourceAuthorization(\"exampleResourceAuthorization\", ResourceAuthorizationArgs.builder()        \n            .projectId(exampleProject.id())\n            .resourceId(exampleQueue.id())\n            .type(\"queue\")\n            .authorized(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n  exampleQueue:\n    type: azuredevops:Queue\n    properties:\n      projectId: ${exampleProject.id}\n      agentPoolId: ${examplePool.id}\n  # Grant access to queue to all pipelines in the project\n  exampleResourceAuthorization:\n    type: azuredevops:ResourceAuthorization\n    properties:\n      projectId: ${exampleProject.id}\n      resourceId: ${exampleQueue.id}\n      type: queue\n      authorized: true\nvariables:\n  examplePool:\n    fn::invoke:\n      Function: azuredevops:getPool\n      Arguments:\n        name: example-pool\n```\n{{% /example %}}\n{{% example %}}\n### Creating a Queue at the project level (Organization-level permissions not required)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = azuredevops.getProject({\n    name: \"Example Project\",\n});\nconst exampleQueue = new azuredevops.Queue(\"exampleQueue\", {projectId: exampleProject.then(exampleProject =\u003e exampleProject.id)});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.get_project(name=\"Example Project\")\nexample_queue = azuredevops.Queue(\"exampleQueue\", project_id=example_project.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = AzureDevOps.GetProject.Invoke(new()\n    {\n        Name = \"Example Project\",\n    });\n\n    var exampleQueue = new AzureDevOps.Queue(\"exampleQueue\", new()\n    {\n        ProjectId = exampleProject.Apply(getProjectResult =\u003e getProjectResult.Id),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.LookupProject(ctx, \u0026azuredevops.LookupProjectArgs{\n\t\t\tName: pulumi.StringRef(\"Example Project\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewQueue(ctx, \"exampleQueue\", \u0026azuredevops.QueueArgs{\n\t\t\tProjectId: *pulumi.String(exampleProject.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetProjectArgs;\nimport com.pulumi.azuredevops.Queue;\nimport com.pulumi.azuredevops.QueueArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleProject = AzuredevopsFunctions.getProject(GetProjectArgs.builder()\n            .name(\"Example Project\")\n            .build());\n\n        var exampleQueue = new Queue(\"exampleQueue\", QueueArgs.builder()        \n            .projectId(exampleProject.applyValue(getProjectResult -\u003e getProjectResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleQueue:\n    type: azuredevops:Queue\n    properties:\n      projectId: ${exampleProject.id}\nvariables:\n  exampleProject:\n    fn::invoke:\n      Function: azuredevops:getProject\n      Arguments:\n        name: Example Project\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Agent Queues](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/queues?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Agent Pools can be imported using the project ID and agent queue ID, e.g.\n\n```sh\n $ pulumi import azuredevops:Agent/queue:Queue example 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "agentPoolId": {
                    "type": "integer",
                    "description": "The ID of the organization agent pool. Conflicts with `name`.\n\n\u003e **NOTE:**\nOne of `name` or `agent_pool_id` must be specified, but not both.\nWhen `agent_pool_id` is specified, the agent queue name will be derived from the agent pool name.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the agent queue. Defaults to the ID of the agent pool. Conflicts with `agent_pool_id`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which to create the resource.\n"
                }
            },
            "required": [
                "agentPoolId",
                "name",
                "projectId"
            ],
            "inputProperties": {
                "agentPoolId": {
                    "type": "integer",
                    "description": "The ID of the organization agent pool. Conflicts with `name`.\n\n\u003e **NOTE:**\nOne of `name` or `agent_pool_id` must be specified, but not both.\nWhen `agent_pool_id` is specified, the agent queue name will be derived from the agent pool name.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the agent queue. Defaults to the ID of the agent pool. Conflicts with `agent_pool_id`.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which to create the resource.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Queue resources.\n",
                "properties": {
                    "agentPoolId": {
                        "type": "integer",
                        "description": "The ID of the organization agent pool. Conflicts with `name`.\n\n\u003e **NOTE:**\nOne of `name` or `agent_pool_id` must be specified, but not both.\nWhen `agent_pool_id` is specified, the agent queue name will be derived from the agent pool name.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the agent queue. Defaults to the ID of the agent pool. Conflicts with `agent_pool_id`.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which to create the resource.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.agent.Queue has been deprecated in favor of azuredevops.Queue"
        },
        "azuredevops:Build/buildDefinition:BuildDefinition": {
            "description": "Manages a Build Definition within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Tfs\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst exampleGit = new azuredevops.Git(\"exampleGit\", {\n    projectId: exampleProject.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst exampleVariableGroup = new azuredevops.VariableGroup(\"exampleVariableGroup\", {\n    projectId: exampleProject.id,\n    description: \"Managed by Terraform\",\n    allowAccess: true,\n    variables: [{\n        name: \"FOO\",\n        value: \"BAR\",\n    }],\n});\nconst exampleBuildDefinition = new azuredevops.BuildDefinition(\"exampleBuildDefinition\", {\n    projectId: exampleProject.id,\n    path: \"\\\\ExampleFolder\",\n    ciTrigger: {\n        useYaml: false,\n    },\n    schedules: [{\n        branchFilters: [{\n            includes: [\"master\"],\n            excludes: [\n                \"test\",\n                \"regression\",\n            ],\n        }],\n        daysToBuilds: [\n            \"Wed\",\n            \"Sun\",\n        ],\n        scheduleOnlyWithChanges: true,\n        startHours: 10,\n        startMinutes: 59,\n        timeZone: \"(UTC) Coordinated Universal Time\",\n    }],\n    repository: {\n        repoType: \"TfsGit\",\n        repoId: exampleGit.id,\n        branchName: exampleGit.defaultBranch,\n        ymlPath: \"azure-pipelines.yml\",\n    },\n    variableGroups: [exampleVariableGroup.id],\n    variables: [\n        {\n            name: \"PipelineVariable\",\n            value: \"Go Microsoft!\",\n        },\n        {\n            name: \"PipelineSecret\",\n            secretValue: \"ZGV2cw\",\n            isSecret: true,\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nexample_git = azuredevops.Git(\"exampleGit\",\n    project_id=example_project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nexample_variable_group = azuredevops.VariableGroup(\"exampleVariableGroup\",\n    project_id=example_project.id,\n    description=\"Managed by Terraform\",\n    allow_access=True,\n    variables=[azuredevops.VariableGroupVariableArgs(\n        name=\"FOO\",\n        value=\"BAR\",\n    )])\nexample_build_definition = azuredevops.BuildDefinition(\"exampleBuildDefinition\",\n    project_id=example_project.id,\n    path=\"\\\\ExampleFolder\",\n    ci_trigger=azuredevops.BuildDefinitionCiTriggerArgs(\n        use_yaml=False,\n    ),\n    schedules=[azuredevops.BuildDefinitionScheduleArgs(\n        branch_filters=[azuredevops.BuildDefinitionScheduleBranchFilterArgs(\n            includes=[\"master\"],\n            excludes=[\n                \"test\",\n                \"regression\",\n            ],\n        )],\n        days_to_builds=[\n            \"Wed\",\n            \"Sun\",\n        ],\n        schedule_only_with_changes=True,\n        start_hours=10,\n        start_minutes=59,\n        time_zone=\"(UTC) Coordinated Universal Time\",\n    )],\n    repository=azuredevops.BuildDefinitionRepositoryArgs(\n        repo_type=\"TfsGit\",\n        repo_id=example_git.id,\n        branch_name=example_git.default_branch,\n        yml_path=\"azure-pipelines.yml\",\n    ),\n    variable_groups=[example_variable_group.id],\n    variables=[\n        azuredevops.BuildDefinitionVariableArgs(\n            name=\"PipelineVariable\",\n            value=\"Go Microsoft!\",\n        ),\n        azuredevops.BuildDefinitionVariableArgs(\n            name=\"PipelineSecret\",\n            secret_value=\"ZGV2cw\",\n            is_secret=True,\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n    });\n\n    var exampleGit = new AzureDevOps.Git(\"exampleGit\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n        {\n            InitType = \"Clean\",\n        },\n    });\n\n    var exampleVariableGroup = new AzureDevOps.VariableGroup(\"exampleVariableGroup\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Description = \"Managed by Terraform\",\n        AllowAccess = true,\n        Variables = new[]\n        {\n            new AzureDevOps.Inputs.VariableGroupVariableArgs\n            {\n                Name = \"FOO\",\n                Value = \"BAR\",\n            },\n        },\n    });\n\n    var exampleBuildDefinition = new AzureDevOps.BuildDefinition(\"exampleBuildDefinition\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Path = \"\\\\ExampleFolder\",\n        CiTrigger = new AzureDevOps.Inputs.BuildDefinitionCiTriggerArgs\n        {\n            UseYaml = false,\n        },\n        Schedules = new[]\n        {\n            new AzureDevOps.Inputs.BuildDefinitionScheduleArgs\n            {\n                BranchFilters = new[]\n                {\n                    new AzureDevOps.Inputs.BuildDefinitionScheduleBranchFilterArgs\n                    {\n                        Includes = new[]\n                        {\n                            \"master\",\n                        },\n                        Excludes = new[]\n                        {\n                            \"test\",\n                            \"regression\",\n                        },\n                    },\n                },\n                DaysToBuilds = new[]\n                {\n                    \"Wed\",\n                    \"Sun\",\n                },\n                ScheduleOnlyWithChanges = true,\n                StartHours = 10,\n                StartMinutes = 59,\n                TimeZone = \"(UTC) Coordinated Universal Time\",\n            },\n        },\n        Repository = new AzureDevOps.Inputs.BuildDefinitionRepositoryArgs\n        {\n            RepoType = \"TfsGit\",\n            RepoId = exampleGit.Id,\n            BranchName = exampleGit.DefaultBranch,\n            YmlPath = \"azure-pipelines.yml\",\n        },\n        VariableGroups = new[]\n        {\n            exampleVariableGroup.Id,\n        },\n        Variables = new[]\n        {\n            new AzureDevOps.Inputs.BuildDefinitionVariableArgs\n            {\n                Name = \"PipelineVariable\",\n                Value = \"Go Microsoft!\",\n            },\n            new AzureDevOps.Inputs.BuildDefinitionVariableArgs\n            {\n                Name = \"PipelineSecret\",\n                SecretValue = \"ZGV2cw\",\n                IsSecret = true,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGit, err := azuredevops.NewGit(ctx, \"exampleGit\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tInitialization: \u0026azuredevops.GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleVariableGroup, err := azuredevops.NewVariableGroup(ctx, \"exampleVariableGroup\", \u0026azuredevops.VariableGroupArgs{\n\t\t\tProjectId:   exampleProject.ID(),\n\t\t\tDescription: pulumi.String(\"Managed by Terraform\"),\n\t\t\tAllowAccess: pulumi.Bool(true),\n\t\t\tVariables: azuredevops.VariableGroupVariableArray{\n\t\t\t\t\u0026azuredevops.VariableGroupVariableArgs{\n\t\t\t\t\tName:  pulumi.String(\"FOO\"),\n\t\t\t\t\tValue: pulumi.String(\"BAR\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewBuildDefinition(ctx, \"exampleBuildDefinition\", \u0026azuredevops.BuildDefinitionArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tPath:      pulumi.String(\"\\\\ExampleFolder\"),\n\t\t\tCiTrigger: \u0026azuredevops.BuildDefinitionCiTriggerArgs{\n\t\t\t\tUseYaml: pulumi.Bool(false),\n\t\t\t},\n\t\t\tSchedules: azuredevops.BuildDefinitionScheduleArray{\n\t\t\t\t\u0026azuredevops.BuildDefinitionScheduleArgs{\n\t\t\t\t\tBranchFilters: azuredevops.BuildDefinitionScheduleBranchFilterArray{\n\t\t\t\t\t\t\u0026azuredevops.BuildDefinitionScheduleBranchFilterArgs{\n\t\t\t\t\t\t\tIncludes: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"master\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tExcludes: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"test\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"regression\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tDaysToBuilds: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"Wed\"),\n\t\t\t\t\t\tpulumi.String(\"Sun\"),\n\t\t\t\t\t},\n\t\t\t\t\tScheduleOnlyWithChanges: pulumi.Bool(true),\n\t\t\t\t\tStartHours:              pulumi.Int(10),\n\t\t\t\t\tStartMinutes:            pulumi.Int(59),\n\t\t\t\t\tTimeZone:                pulumi.String(\"(UTC) Coordinated Universal Time\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRepository: \u0026azuredevops.BuildDefinitionRepositoryArgs{\n\t\t\t\tRepoType:   pulumi.String(\"TfsGit\"),\n\t\t\t\tRepoId:     exampleGit.ID(),\n\t\t\t\tBranchName: exampleGit.DefaultBranch,\n\t\t\t\tYmlPath:    pulumi.String(\"azure-pipelines.yml\"),\n\t\t\t},\n\t\t\tVariableGroups: pulumi.IntArray{\n\t\t\t\texampleVariableGroup.ID(),\n\t\t\t},\n\t\t\tVariables: azuredevops.BuildDefinitionVariableArray{\n\t\t\t\t\u0026azuredevops.BuildDefinitionVariableArgs{\n\t\t\t\t\tName:  pulumi.String(\"PipelineVariable\"),\n\t\t\t\t\tValue: pulumi.String(\"Go Microsoft!\"),\n\t\t\t\t},\n\t\t\t\t\u0026azuredevops.BuildDefinitionVariableArgs{\n\t\t\t\t\tName:        pulumi.String(\"PipelineSecret\"),\n\t\t\t\t\tSecretValue: pulumi.String(\"ZGV2cw\"),\n\t\t\t\t\tIsSecret:    pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.Git;\nimport com.pulumi.azuredevops.GitArgs;\nimport com.pulumi.azuredevops.inputs.GitInitializationArgs;\nimport com.pulumi.azuredevops.VariableGroup;\nimport com.pulumi.azuredevops.VariableGroupArgs;\nimport com.pulumi.azuredevops.inputs.VariableGroupVariableArgs;\nimport com.pulumi.azuredevops.BuildDefinition;\nimport com.pulumi.azuredevops.BuildDefinitionArgs;\nimport com.pulumi.azuredevops.inputs.BuildDefinitionCiTriggerArgs;\nimport com.pulumi.azuredevops.inputs.BuildDefinitionScheduleArgs;\nimport com.pulumi.azuredevops.inputs.BuildDefinitionRepositoryArgs;\nimport com.pulumi.azuredevops.inputs.BuildDefinitionVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .build());\n\n        var exampleGit = new Git(\"exampleGit\", GitArgs.builder()        \n            .projectId(exampleProject.id())\n            .initialization(GitInitializationArgs.builder()\n                .initType(\"Clean\")\n                .build())\n            .build());\n\n        var exampleVariableGroup = new VariableGroup(\"exampleVariableGroup\", VariableGroupArgs.builder()        \n            .projectId(exampleProject.id())\n            .description(\"Managed by Terraform\")\n            .allowAccess(true)\n            .variables(VariableGroupVariableArgs.builder()\n                .name(\"FOO\")\n                .value(\"BAR\")\n                .build())\n            .build());\n\n        var exampleBuildDefinition = new BuildDefinition(\"exampleBuildDefinition\", BuildDefinitionArgs.builder()        \n            .projectId(exampleProject.id())\n            .path(\"\\\\ExampleFolder\")\n            .ciTrigger(BuildDefinitionCiTriggerArgs.builder()\n                .useYaml(false)\n                .build())\n            .schedules(BuildDefinitionScheduleArgs.builder()\n                .branchFilters(BuildDefinitionScheduleBranchFilterArgs.builder()\n                    .includes(\"master\")\n                    .excludes(                    \n                        \"test\",\n                        \"regression\")\n                    .build())\n                .daysToBuilds(                \n                    \"Wed\",\n                    \"Sun\")\n                .scheduleOnlyWithChanges(true)\n                .startHours(10)\n                .startMinutes(59)\n                .timeZone(\"(UTC) Coordinated Universal Time\")\n                .build())\n            .repository(BuildDefinitionRepositoryArgs.builder()\n                .repoType(\"TfsGit\")\n                .repoId(exampleGit.id())\n                .branchName(exampleGit.defaultBranch())\n                .ymlPath(\"azure-pipelines.yml\")\n                .build())\n            .variableGroups(exampleVariableGroup.id())\n            .variables(            \n                BuildDefinitionVariableArgs.builder()\n                    .name(\"PipelineVariable\")\n                    .value(\"Go Microsoft!\")\n                    .build(),\n                BuildDefinitionVariableArgs.builder()\n                    .name(\"PipelineSecret\")\n                    .secretValue(\"ZGV2cw\")\n                    .isSecret(true)\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n  exampleGit:\n    type: azuredevops:Git\n    properties:\n      projectId: ${exampleProject.id}\n      initialization:\n        initType: Clean\n  exampleVariableGroup:\n    type: azuredevops:VariableGroup\n    properties:\n      projectId: ${exampleProject.id}\n      description: Managed by Terraform\n      allowAccess: true\n      variables:\n        - name: FOO\n          value: BAR\n  exampleBuildDefinition:\n    type: azuredevops:BuildDefinition\n    properties:\n      projectId: ${exampleProject.id}\n      path: \\ExampleFolder\n      ciTrigger:\n        useYaml: false\n      schedules:\n        - branchFilters:\n            - includes:\n                - master\n              excludes:\n                - test\n                - regression\n          daysToBuilds:\n            - Wed\n            - Sun\n          scheduleOnlyWithChanges: true\n          startHours: 10\n          startMinutes: 59\n          timeZone: (UTC) Coordinated Universal Time\n      repository:\n        repoType: TfsGit\n        repoId: ${exampleGit.id}\n        branchName: ${exampleGit.defaultBranch}\n        ymlPath: azure-pipelines.yml\n      variableGroups:\n        - ${exampleVariableGroup.id}\n      variables:\n        - name: PipelineVariable\n          value: Go Microsoft!\n        - name: PipelineSecret\n          secretValue: ZGV2cw\n          isSecret: true\n```\n{{% /example %}}\n{{% example %}}\n### GitHub Enterprise\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst exampleServiceEndpointGitHubEnterprise = new azuredevops.ServiceEndpointGitHubEnterprise(\"exampleServiceEndpointGitHubEnterprise\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example GitHub Enterprise\",\n    url: \"https://github.contoso.com\",\n    description: \"Managed by Terraform\",\n    authPersonal: {\n        personalAccessToken: \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    },\n});\nconst exampleBuildDefinition = new azuredevops.BuildDefinition(\"exampleBuildDefinition\", {\n    projectId: exampleProject.id,\n    path: \"\\\\ExampleFolder\",\n    ciTrigger: {\n        useYaml: false,\n    },\n    repository: {\n        repoType: \"GitHubEnterprise\",\n        repoId: \"\u003cGitHub Org\u003e/\u003cRepo Name\u003e\",\n        githubEnterpriseUrl: \"https://github.company.com\",\n        branchName: \"master\",\n        ymlPath: \"azure-pipelines.yml\",\n        serviceConnectionId: exampleServiceEndpointGitHubEnterprise.id,\n    },\n    schedules: [{\n        branchFilters: [{\n            includes: [\"main\"],\n            excludes: [\n                \"test\",\n                \"regression\",\n            ],\n        }],\n        daysToBuilds: [\n            \"Wed\",\n            \"Sun\",\n        ],\n        scheduleOnlyWithChanges: true,\n        startHours: 10,\n        startMinutes: 59,\n        timeZone: \"(UTC) Coordinated Universal Time\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nexample_service_endpoint_git_hub_enterprise = azuredevops.ServiceEndpointGitHubEnterprise(\"exampleServiceEndpointGitHubEnterprise\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example GitHub Enterprise\",\n    url=\"https://github.contoso.com\",\n    description=\"Managed by Terraform\",\n    auth_personal=azuredevops.ServiceEndpointGitHubEnterpriseAuthPersonalArgs(\n        personal_access_token=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    ))\nexample_build_definition = azuredevops.BuildDefinition(\"exampleBuildDefinition\",\n    project_id=example_project.id,\n    path=\"\\\\ExampleFolder\",\n    ci_trigger=azuredevops.BuildDefinitionCiTriggerArgs(\n        use_yaml=False,\n    ),\n    repository=azuredevops.BuildDefinitionRepositoryArgs(\n        repo_type=\"GitHubEnterprise\",\n        repo_id=\"\u003cGitHub Org\u003e/\u003cRepo Name\u003e\",\n        github_enterprise_url=\"https://github.company.com\",\n        branch_name=\"master\",\n        yml_path=\"azure-pipelines.yml\",\n        service_connection_id=example_service_endpoint_git_hub_enterprise.id,\n    ),\n    schedules=[azuredevops.BuildDefinitionScheduleArgs(\n        branch_filters=[azuredevops.BuildDefinitionScheduleBranchFilterArgs(\n            includes=[\"main\"],\n            excludes=[\n                \"test\",\n                \"regression\",\n            ],\n        )],\n        days_to_builds=[\n            \"Wed\",\n            \"Sun\",\n        ],\n        schedule_only_with_changes=True,\n        start_hours=10,\n        start_minutes=59,\n        time_zone=\"(UTC) Coordinated Universal Time\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n    });\n\n    var exampleServiceEndpointGitHubEnterprise = new AzureDevOps.ServiceEndpointGitHubEnterprise(\"exampleServiceEndpointGitHubEnterprise\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example GitHub Enterprise\",\n        Url = \"https://github.contoso.com\",\n        Description = \"Managed by Terraform\",\n        AuthPersonal = new AzureDevOps.Inputs.ServiceEndpointGitHubEnterpriseAuthPersonalArgs\n        {\n            PersonalAccessToken = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n        },\n    });\n\n    var exampleBuildDefinition = new AzureDevOps.BuildDefinition(\"exampleBuildDefinition\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Path = \"\\\\ExampleFolder\",\n        CiTrigger = new AzureDevOps.Inputs.BuildDefinitionCiTriggerArgs\n        {\n            UseYaml = false,\n        },\n        Repository = new AzureDevOps.Inputs.BuildDefinitionRepositoryArgs\n        {\n            RepoType = \"GitHubEnterprise\",\n            RepoId = \"\u003cGitHub Org\u003e/\u003cRepo Name\u003e\",\n            GithubEnterpriseUrl = \"https://github.company.com\",\n            BranchName = \"master\",\n            YmlPath = \"azure-pipelines.yml\",\n            ServiceConnectionId = exampleServiceEndpointGitHubEnterprise.Id,\n        },\n        Schedules = new[]\n        {\n            new AzureDevOps.Inputs.BuildDefinitionScheduleArgs\n            {\n                BranchFilters = new[]\n                {\n                    new AzureDevOps.Inputs.BuildDefinitionScheduleBranchFilterArgs\n                    {\n                        Includes = new[]\n                        {\n                            \"main\",\n                        },\n                        Excludes = new[]\n                        {\n                            \"test\",\n                            \"regression\",\n                        },\n                    },\n                },\n                DaysToBuilds = new[]\n                {\n                    \"Wed\",\n                    \"Sun\",\n                },\n                ScheduleOnlyWithChanges = true,\n                StartHours = 10,\n                StartMinutes = 59,\n                TimeZone = \"(UTC) Coordinated Universal Time\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleServiceEndpointGitHubEnterprise, err := azuredevops.NewServiceEndpointGitHubEnterprise(ctx, \"exampleServiceEndpointGitHubEnterprise\", \u0026azuredevops.ServiceEndpointGitHubEnterpriseArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Example GitHub Enterprise\"),\n\t\t\tUrl:                 pulumi.String(\"https://github.contoso.com\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t\tAuthPersonal: \u0026azuredevops.ServiceEndpointGitHubEnterpriseAuthPersonalArgs{\n\t\t\t\tPersonalAccessToken: pulumi.String(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewBuildDefinition(ctx, \"exampleBuildDefinition\", \u0026azuredevops.BuildDefinitionArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tPath:      pulumi.String(\"\\\\ExampleFolder\"),\n\t\t\tCiTrigger: \u0026azuredevops.BuildDefinitionCiTriggerArgs{\n\t\t\t\tUseYaml: pulumi.Bool(false),\n\t\t\t},\n\t\t\tRepository: \u0026azuredevops.BuildDefinitionRepositoryArgs{\n\t\t\t\tRepoType:            pulumi.String(\"GitHubEnterprise\"),\n\t\t\t\tRepoId:              pulumi.String(\"\u003cGitHub Org\u003e/\u003cRepo Name\u003e\"),\n\t\t\t\tGithubEnterpriseUrl: pulumi.String(\"https://github.company.com\"),\n\t\t\t\tBranchName:          pulumi.String(\"master\"),\n\t\t\t\tYmlPath:             pulumi.String(\"azure-pipelines.yml\"),\n\t\t\t\tServiceConnectionId: exampleServiceEndpointGitHubEnterprise.ID(),\n\t\t\t},\n\t\t\tSchedules: azuredevops.BuildDefinitionScheduleArray{\n\t\t\t\t\u0026azuredevops.BuildDefinitionScheduleArgs{\n\t\t\t\t\tBranchFilters: azuredevops.BuildDefinitionScheduleBranchFilterArray{\n\t\t\t\t\t\t\u0026azuredevops.BuildDefinitionScheduleBranchFilterArgs{\n\t\t\t\t\t\t\tIncludes: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"main\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tExcludes: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"test\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"regression\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tDaysToBuilds: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"Wed\"),\n\t\t\t\t\t\tpulumi.String(\"Sun\"),\n\t\t\t\t\t},\n\t\t\t\t\tScheduleOnlyWithChanges: pulumi.Bool(true),\n\t\t\t\t\tStartHours:              pulumi.Int(10),\n\t\t\t\t\tStartMinutes:            pulumi.Int(59),\n\t\t\t\t\tTimeZone:                pulumi.String(\"(UTC) Coordinated Universal Time\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointGitHubEnterprise;\nimport com.pulumi.azuredevops.ServiceEndpointGitHubEnterpriseArgs;\nimport com.pulumi.azuredevops.inputs.ServiceEndpointGitHubEnterpriseAuthPersonalArgs;\nimport com.pulumi.azuredevops.BuildDefinition;\nimport com.pulumi.azuredevops.BuildDefinitionArgs;\nimport com.pulumi.azuredevops.inputs.BuildDefinitionCiTriggerArgs;\nimport com.pulumi.azuredevops.inputs.BuildDefinitionRepositoryArgs;\nimport com.pulumi.azuredevops.inputs.BuildDefinitionScheduleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .build());\n\n        var exampleServiceEndpointGitHubEnterprise = new ServiceEndpointGitHubEnterprise(\"exampleServiceEndpointGitHubEnterprise\", ServiceEndpointGitHubEnterpriseArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example GitHub Enterprise\")\n            .url(\"https://github.contoso.com\")\n            .description(\"Managed by Terraform\")\n            .authPersonal(ServiceEndpointGitHubEnterpriseAuthPersonalArgs.builder()\n                .personalAccessToken(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\")\n                .build())\n            .build());\n\n        var exampleBuildDefinition = new BuildDefinition(\"exampleBuildDefinition\", BuildDefinitionArgs.builder()        \n            .projectId(exampleProject.id())\n            .path(\"\\\\ExampleFolder\")\n            .ciTrigger(BuildDefinitionCiTriggerArgs.builder()\n                .useYaml(false)\n                .build())\n            .repository(BuildDefinitionRepositoryArgs.builder()\n                .repoType(\"GitHubEnterprise\")\n                .repoId(\"\u003cGitHub Org\u003e/\u003cRepo Name\u003e\")\n                .githubEnterpriseUrl(\"https://github.company.com\")\n                .branchName(\"master\")\n                .ymlPath(\"azure-pipelines.yml\")\n                .serviceConnectionId(exampleServiceEndpointGitHubEnterprise.id())\n                .build())\n            .schedules(BuildDefinitionScheduleArgs.builder()\n                .branchFilters(BuildDefinitionScheduleBranchFilterArgs.builder()\n                    .includes(\"main\")\n                    .excludes(                    \n                        \"test\",\n                        \"regression\")\n                    .build())\n                .daysToBuilds(                \n                    \"Wed\",\n                    \"Sun\")\n                .scheduleOnlyWithChanges(true)\n                .startHours(10)\n                .startMinutes(59)\n                .timeZone(\"(UTC) Coordinated Universal Time\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n  exampleServiceEndpointGitHubEnterprise:\n    type: azuredevops:ServiceEndpointGitHubEnterprise\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example GitHub Enterprise\n      url: https://github.contoso.com\n      description: Managed by Terraform\n      authPersonal:\n        personalAccessToken: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n  exampleBuildDefinition:\n    type: azuredevops:BuildDefinition\n    properties:\n      projectId: ${exampleProject.id}\n      path: \\ExampleFolder\n      ciTrigger:\n        useYaml: false\n      repository:\n        repoType: GitHubEnterprise\n        repoId: \u003cGitHub Org\u003e/\u003cRepo Name\u003e\n        githubEnterpriseUrl: https://github.company.com\n        branchName: master\n        ymlPath: azure-pipelines.yml\n        serviceConnectionId: ${exampleServiceEndpointGitHubEnterprise.id}\n      schedules:\n        - branchFilters:\n            - includes:\n                - main\n              excludes:\n                - test\n                - regression\n          daysToBuilds:\n            - Wed\n            - Sun\n          scheduleOnlyWithChanges: true\n          startHours: 10\n          startMinutes: 59\n          timeZone: (UTC) Coordinated Universal Time\n```\n{{% /example %}}\n{{% /examples %}}\n## Remarks\n\nThe path attribute can not end in `\\` unless the path is the root value of `\\`. \n\nValid path values (yaml encoded) include:\n- `\\\\`\n- `\\\\ExampleFolder`\n- `\\\\Nested\\\\Example Folder`\n\nThe value of `\\\\ExampleFolder\\\\` would be invalid.\n\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Build Definitions](https://docs.microsoft.com/en-us/rest/api/azure/devops/build/definitions?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Build Definitions can be imported using the project name/definitions Id or by the project Guid/definitions Id, e.g.\n\n```sh\n $ pulumi import azuredevops:Build/buildDefinition:BuildDefinition example \"Example Project\"/10\n```\n\n or\n\n```sh\n $ pulumi import azuredevops:Build/buildDefinition:BuildDefinition example 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "agentPoolName": {
                    "type": "string",
                    "description": "The agent pool that should execute the build. Defaults to `Azure Pipelines`.\n"
                },
                "ciTrigger": {
                    "$ref": "#/types/azuredevops:Build/BuildDefinitionCiTrigger:BuildDefinitionCiTrigger",
                    "description": "Continuous Integration trigger.\n"
                },
                "features": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Build/BuildDefinitionFeature:BuildDefinitionFeature"
                    },
                    "description": "A `features` blocks as documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the build definition.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The folder path of the build definition.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "pullRequestTrigger": {
                    "$ref": "#/types/azuredevops:Build/BuildDefinitionPullRequestTrigger:BuildDefinitionPullRequestTrigger",
                    "description": "Pull Request Integration trigger.\n"
                },
                "queueStatus": {
                    "type": "string",
                    "description": "The queue status of the build definition. Valid values: `enabled` or `paused` or `disabled`. Defaults to `enabled`.\n"
                },
                "repository": {
                    "$ref": "#/types/azuredevops:Build/BuildDefinitionRepository:BuildDefinitionRepository",
                    "description": "A `repository` block as documented below.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "The revision of the build definition\n"
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Build/BuildDefinitionSchedule:BuildDefinitionSchedule"
                    }
                },
                "variableGroups": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of variable group IDs (integers) to link to the build definition.\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Build/BuildDefinitionVariable:BuildDefinitionVariable"
                    },
                    "description": "A list of `variable` blocks, as documented below.\n"
                }
            },
            "required": [
                "name",
                "projectId",
                "repository",
                "revision"
            ],
            "inputProperties": {
                "agentPoolName": {
                    "type": "string",
                    "description": "The agent pool that should execute the build. Defaults to `Azure Pipelines`.\n"
                },
                "ciTrigger": {
                    "$ref": "#/types/azuredevops:Build/BuildDefinitionCiTrigger:BuildDefinitionCiTrigger",
                    "description": "Continuous Integration trigger.\n"
                },
                "features": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Build/BuildDefinitionFeature:BuildDefinitionFeature"
                    },
                    "description": "A `features` blocks as documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the build definition.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The folder path of the build definition.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n",
                    "willReplaceOnChanges": true
                },
                "pullRequestTrigger": {
                    "$ref": "#/types/azuredevops:Build/BuildDefinitionPullRequestTrigger:BuildDefinitionPullRequestTrigger",
                    "description": "Pull Request Integration trigger.\n"
                },
                "queueStatus": {
                    "type": "string",
                    "description": "The queue status of the build definition. Valid values: `enabled` or `paused` or `disabled`. Defaults to `enabled`.\n"
                },
                "repository": {
                    "$ref": "#/types/azuredevops:Build/BuildDefinitionRepository:BuildDefinitionRepository",
                    "description": "A `repository` block as documented below.\n"
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Build/BuildDefinitionSchedule:BuildDefinitionSchedule"
                    }
                },
                "variableGroups": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of variable group IDs (integers) to link to the build definition.\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Build/BuildDefinitionVariable:BuildDefinitionVariable"
                    },
                    "description": "A list of `variable` blocks, as documented below.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BuildDefinition resources.\n",
                "properties": {
                    "agentPoolName": {
                        "type": "string",
                        "description": "The agent pool that should execute the build. Defaults to `Azure Pipelines`.\n"
                    },
                    "ciTrigger": {
                        "$ref": "#/types/azuredevops:Build/BuildDefinitionCiTrigger:BuildDefinitionCiTrigger",
                        "description": "Continuous Integration trigger.\n"
                    },
                    "features": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:Build/BuildDefinitionFeature:BuildDefinitionFeature"
                        },
                        "description": "A `features` blocks as documented below.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the build definition.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The folder path of the build definition.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n",
                        "willReplaceOnChanges": true
                    },
                    "pullRequestTrigger": {
                        "$ref": "#/types/azuredevops:Build/BuildDefinitionPullRequestTrigger:BuildDefinitionPullRequestTrigger",
                        "description": "Pull Request Integration trigger.\n"
                    },
                    "queueStatus": {
                        "type": "string",
                        "description": "The queue status of the build definition. Valid values: `enabled` or `paused` or `disabled`. Defaults to `enabled`.\n"
                    },
                    "repository": {
                        "$ref": "#/types/azuredevops:Build/BuildDefinitionRepository:BuildDefinitionRepository",
                        "description": "A `repository` block as documented below.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "The revision of the build definition\n"
                    },
                    "schedules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:Build/BuildDefinitionSchedule:BuildDefinitionSchedule"
                        }
                    },
                    "variableGroups": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of variable group IDs (integers) to link to the build definition.\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:Build/BuildDefinitionVariable:BuildDefinitionVariable"
                        },
                        "description": "A list of `variable` blocks, as documented below.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.build.BuildDefinition has been deprecated in favor of azuredevops.BuildDefinition"
        },
        "azuredevops:Core/project:Project": {
            "description": "Manages a project within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = new azuredevops.Project(\"example\", {\n    description: \"Managed by Terraform\",\n    features: {\n        artifacts: \"disabled\",\n        testplans: \"disabled\",\n    },\n    versionControl: \"Git\",\n    visibility: \"private\",\n    workItemTemplate: \"Agile\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.Project(\"example\",\n    description=\"Managed by Terraform\",\n    features={\n        \"artifacts\": \"disabled\",\n        \"testplans\": \"disabled\",\n    },\n    version_control=\"Git\",\n    visibility=\"private\",\n    work_item_template=\"Agile\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureDevOps.Project(\"example\", new()\n    {\n        Description = \"Managed by Terraform\",\n        Features = \n        {\n            { \"artifacts\", \"disabled\" },\n            { \"testplans\", \"disabled\" },\n        },\n        VersionControl = \"Git\",\n        Visibility = \"private\",\n        WorkItemTemplate = \"Agile\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewProject(ctx, \"example\", \u0026azuredevops.ProjectArgs{\n\t\t\tDescription: pulumi.String(\"Managed by Terraform\"),\n\t\t\tFeatures: pulumi.StringMap{\n\t\t\t\t\"artifacts\": pulumi.String(\"disabled\"),\n\t\t\t\t\"testplans\": pulumi.String(\"disabled\"),\n\t\t\t},\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Project(\"example\", ProjectArgs.builder()        \n            .description(\"Managed by Terraform\")\n            .features(Map.ofEntries(\n                Map.entry(\"artifacts\", \"disabled\"),\n                Map.entry(\"testplans\", \"disabled\")\n            ))\n            .versionControl(\"Git\")\n            .visibility(\"private\")\n            .workItemTemplate(\"Agile\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuredevops:Project\n    properties:\n      description: Managed by Terraform\n      features:\n        artifacts: disabled\n        testplans: disabled\n      versionControl: Git\n      visibility: private\n      workItemTemplate: Agile\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Projects](https://docs.microsoft.com/en-us/rest/api/azure/devops/core/projects?view=azure-devops-rest-7.0)\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: Read, Write, \u0026 Manage\n\n\n## Import\n\nAzure DevOps Projects can be imported using the project name or by the project Guid, e.g.\n\n```sh\n $ pulumi import azuredevops:Core/project:Project example \"Example Project\"\n```\n\n or\n\n```sh\n $ pulumi import azuredevops:Core/project:Project example 00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The Description of the Project.\n"
                },
                "features": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Defines the status (`enabled`, `disabled`) of the project features.\nValid features are `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`\n\n\u003e **NOTE:**\n\u003e It's possible to define project features both within the `azuredevops.ProjectFeatures` resource and\n\u003e via the `features` block by using the `azuredevops.Project` resource.\n\u003e However it's not possible to use both methods to manage features, since there'll be conflicts.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Project Name.\n"
                },
                "processTemplateId": {
                    "type": "string",
                    "description": "The Process Template ID used by the Project.\n"
                },
                "versionControl": {
                    "type": "string",
                    "description": "Specifies the version control system. Valid values: `Git` or `Tfvc`. Defaults to `Git`.\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Specifies the visibility of the Project. Valid values: `private` or `public`. Defaults to `private`.\n"
                },
                "workItemTemplate": {
                    "type": "string",
                    "description": "Specifies the work item template. Valid values: `Agile`, `Basic`, `CMMI`, `Scrum` or a custom, pre-existing one. Defaults to `Agile`. An empty string will use the parent organization default.\n"
                }
            },
            "required": [
                "name",
                "processTemplateId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The Description of the Project.\n"
                },
                "features": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Defines the status (`enabled`, `disabled`) of the project features.\nValid features are `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`\n\n\u003e **NOTE:**\n\u003e It's possible to define project features both within the `azuredevops.ProjectFeatures` resource and\n\u003e via the `features` block by using the `azuredevops.Project` resource.\n\u003e However it's not possible to use both methods to manage features, since there'll be conflicts.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Project Name.\n"
                },
                "versionControl": {
                    "type": "string",
                    "description": "Specifies the version control system. Valid values: `Git` or `Tfvc`. Defaults to `Git`.\n",
                    "willReplaceOnChanges": true
                },
                "visibility": {
                    "type": "string",
                    "description": "Specifies the visibility of the Project. Valid values: `private` or `public`. Defaults to `private`.\n"
                },
                "workItemTemplate": {
                    "type": "string",
                    "description": "Specifies the work item template. Valid values: `Agile`, `Basic`, `CMMI`, `Scrum` or a custom, pre-existing one. Defaults to `Agile`. An empty string will use the parent organization default.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The Description of the Project.\n"
                    },
                    "features": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Defines the status (`enabled`, `disabled`) of the project features.\nValid features are `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`\n\n\u003e **NOTE:**\n\u003e It's possible to define project features both within the `azuredevops.ProjectFeatures` resource and\n\u003e via the `features` block by using the `azuredevops.Project` resource.\n\u003e However it's not possible to use both methods to manage features, since there'll be conflicts.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Project Name.\n"
                    },
                    "processTemplateId": {
                        "type": "string",
                        "description": "The Process Template ID used by the Project.\n"
                    },
                    "versionControl": {
                        "type": "string",
                        "description": "Specifies the version control system. Valid values: `Git` or `Tfvc`. Defaults to `Git`.\n",
                        "willReplaceOnChanges": true
                    },
                    "visibility": {
                        "type": "string",
                        "description": "Specifies the visibility of the Project. Valid values: `private` or `public`. Defaults to `private`.\n"
                    },
                    "workItemTemplate": {
                        "type": "string",
                        "description": "Specifies the work item template. Valid values: `Agile`, `Basic`, `CMMI`, `Scrum` or a custom, pre-existing one. Defaults to `Agile`. An empty string will use the parent organization default.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.core.Project has been deprecated in favor of azuredevops.Project"
        },
        "azuredevops:Core/projectFeatures:ProjectFeatures": {
            "description": "Manages features for Azure DevOps projects\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = new azuredevops.Project(\"example\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst example_features = new azuredevops.ProjectFeatures(\"example-features\", {\n    projectId: example.id,\n    features: {\n        testplans: \"disabled\",\n        artifacts: \"enabled\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.Project(\"example\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_features = azuredevops.ProjectFeatures(\"example-features\",\n    project_id=example.id,\n    features={\n        \"testplans\": \"disabled\",\n        \"artifacts\": \"enabled\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureDevOps.Project(\"example\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var example_features = new AzureDevOps.ProjectFeatures(\"example-features\", new()\n    {\n        ProjectId = example.Id,\n        Features = \n        {\n            { \"testplans\", \"disabled\" },\n            { \"artifacts\", \"enabled\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuredevops.NewProject(ctx, \"example\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewProjectFeatures(ctx, \"example-features\", \u0026azuredevops.ProjectFeaturesArgs{\n\t\t\tProjectId: example.ID(),\n\t\t\tFeatures: pulumi.StringMap{\n\t\t\t\t\"testplans\": pulumi.String(\"disabled\"),\n\t\t\t\t\"artifacts\": pulumi.String(\"enabled\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ProjectFeatures;\nimport com.pulumi.azuredevops.ProjectFeaturesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Project(\"example\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var example_features = new ProjectFeatures(\"example-features\", ProjectFeaturesArgs.builder()        \n            .projectId(example.id())\n            .features(Map.ofEntries(\n                Map.entry(\"testplans\", \"disabled\"),\n                Map.entry(\"artifacts\", \"enabled\")\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  example-features:\n    type: azuredevops:ProjectFeatures\n    properties:\n      projectId: ${example.id}\n      features:\n        testplans: disabled\n        artifacts: enabled\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\nNo official documentation available\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: Read, Write, \u0026 Manage\n\n\n## Import\n\nAzure DevOps feature settings can be imported using the project id, e.g.\n\n```sh\n $ pulumi import azuredevops:Core/projectFeatures:ProjectFeatures example 00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "features": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Defines the status (`enabled`, `disabled`) of the project features.  \nValid features `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`\n\n\u003e **NOTE:**\n\u003e It's possible to define project features both within the `azuredevops.ProjectFeatures` resource and\n\u003e via the `features` block by using the `azuredevops.Project` resource.\n\u003e However it's not possible to use both methods to manage features, since there'll be conflicts.\n"
                },
                "projectId": {
                    "type": "string"
                }
            },
            "required": [
                "features",
                "projectId"
            ],
            "inputProperties": {
                "features": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Defines the status (`enabled`, `disabled`) of the project features.  \nValid features `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`\n\n\u003e **NOTE:**\n\u003e It's possible to define project features both within the `azuredevops.ProjectFeatures` resource and\n\u003e via the `features` block by using the `azuredevops.Project` resource.\n\u003e However it's not possible to use both methods to manage features, since there'll be conflicts.\n"
                },
                "projectId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "features",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectFeatures resources.\n",
                "properties": {
                    "features": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Defines the status (`enabled`, `disabled`) of the project features.  \nValid features `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`\n\n\u003e **NOTE:**\n\u003e It's possible to define project features both within the `azuredevops.ProjectFeatures` resource and\n\u003e via the `features` block by using the `azuredevops.Project` resource.\n\u003e However it's not possible to use both methods to manage features, since there'll be conflicts.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.core.ProjectFeatures has been deprecated in favor of azuredevops.ProjectFeatures"
        },
        "azuredevops:Entitlement/user:User": {
            "description": "Manages a user entitlement within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = new azuredevops.User(\"example\", {principalName: \"foo@contoso.com\"});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.User(\"example\", principal_name=\"foo@contoso.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureDevOps.User(\"example\", new()\n    {\n        PrincipalName = \"foo@contoso.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewUser(ctx, \"example\", \u0026azuredevops.UserArgs{\n\t\t\tPrincipalName: pulumi.String(\"foo@contoso.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.User;\nimport com.pulumi.azuredevops.UserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new User(\"example\", UserArgs.builder()        \n            .principalName(\"foo@contoso.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuredevops:User\n    properties:\n      principalName: foo@contoso.com\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - User Entitlements - Add](https://docs.microsoft.com/en-us/rest/api/azure/devops/memberentitlementmanagement/user-entitlements/add?view=azure-devops-rest-7.0)\n- [Programmatic mapping of access levels](https://docs.microsoft.com/en-us/azure/devops/organizations/security/access-levels?view=azure-devops#programmatic-mapping-of-access-levels)\n\n## PAT Permissions Required\n\n- **Member Entitlement Management**: Read \u0026 Write\n\n\n## Import\n\nThe resources allows the import via the UUID of a user entitlement or by using the principal name of a user owning an entitlement. ",
            "properties": {
                "accountLicenseType": {
                    "type": "string",
                    "description": "Type of Account License. Valid values: `advanced`, `earlyAdopter`, `express`, `none`, `professional`, or `stakeholder`. Defaults to `express`. In addition the value `basic` is allowed which is an alias for `express` and reflects the name of the `express` license used in the Azure DevOps web interface.\n"
                },
                "descriptor": {
                    "type": "string",
                    "description": "The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the user graph subject.\n"
                },
                "licensingSource": {
                    "type": "string",
                    "description": "The source of the licensing (e.g. Account. MSDN etc.) Valid values: `account` (Default), `auto`, `msdn`, `none`, `profile`, `trial`\n\n\u003e **NOTE:** A user can only be referenced by it's `principal_name` or by the combination of `origin_id` and `origin`.\n"
                },
                "origin": {
                    "type": "string",
                    "description": "The type of source provider for the origin identifier.\n"
                },
                "originId": {
                    "type": "string",
                    "description": "The unique identifier from the system of origin. Typically a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.\n"
                },
                "principalName": {
                    "type": "string",
                    "description": "The principal name is the PrincipalName of a graph member from the source provider. Usually, e-mail address.\n"
                }
            },
            "required": [
                "descriptor",
                "origin",
                "originId",
                "principalName"
            ],
            "inputProperties": {
                "accountLicenseType": {
                    "type": "string",
                    "description": "Type of Account License. Valid values: `advanced`, `earlyAdopter`, `express`, `none`, `professional`, or `stakeholder`. Defaults to `express`. In addition the value `basic` is allowed which is an alias for `express` and reflects the name of the `express` license used in the Azure DevOps web interface.\n"
                },
                "licensingSource": {
                    "type": "string",
                    "description": "The source of the licensing (e.g. Account. MSDN etc.) Valid values: `account` (Default), `auto`, `msdn`, `none`, `profile`, `trial`\n\n\u003e **NOTE:** A user can only be referenced by it's `principal_name` or by the combination of `origin_id` and `origin`.\n"
                },
                "origin": {
                    "type": "string",
                    "description": "The type of source provider for the origin identifier.\n",
                    "willReplaceOnChanges": true
                },
                "originId": {
                    "type": "string",
                    "description": "The unique identifier from the system of origin. Typically a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.\n",
                    "willReplaceOnChanges": true
                },
                "principalName": {
                    "type": "string",
                    "description": "The principal name is the PrincipalName of a graph member from the source provider. Usually, e-mail address.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "accountLicenseType": {
                        "type": "string",
                        "description": "Type of Account License. Valid values: `advanced`, `earlyAdopter`, `express`, `none`, `professional`, or `stakeholder`. Defaults to `express`. In addition the value `basic` is allowed which is an alias for `express` and reflects the name of the `express` license used in the Azure DevOps web interface.\n"
                    },
                    "descriptor": {
                        "type": "string",
                        "description": "The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the user graph subject.\n"
                    },
                    "licensingSource": {
                        "type": "string",
                        "description": "The source of the licensing (e.g. Account. MSDN etc.) Valid values: `account` (Default), `auto`, `msdn`, `none`, `profile`, `trial`\n\n\u003e **NOTE:** A user can only be referenced by it's `principal_name` or by the combination of `origin_id` and `origin`.\n"
                    },
                    "origin": {
                        "type": "string",
                        "description": "The type of source provider for the origin identifier.\n",
                        "willReplaceOnChanges": true
                    },
                    "originId": {
                        "type": "string",
                        "description": "The unique identifier from the system of origin. Typically a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.\n",
                        "willReplaceOnChanges": true
                    },
                    "principalName": {
                        "type": "string",
                        "description": "The principal name is the PrincipalName of a graph member from the source provider. Usually, e-mail address.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.entitlement.User has been deprecated in favor of azuredevops.User"
        },
        "azuredevops:Identities/group:Group": {
            "description": "Manages a group within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {});\nconst example-readers = azuredevops.getGroupOutput({\n    projectId: exampleProject.id,\n    name: \"Readers\",\n});\nconst example-contributors = azuredevops.getGroupOutput({\n    projectId: exampleProject.id,\n    name: \"Contributors\",\n});\nconst exampleGroup = new azuredevops.Group(\"exampleGroup\", {\n    scope: exampleProject.id,\n    displayName: \"Example group\",\n    description: \"Example description\",\n    members: [\n        example_readers.apply(example_readers =\u003e example_readers.descriptor),\n        example_contributors.apply(example_contributors =\u003e example_contributors.descriptor),\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\")\nexample_readers = azuredevops.get_group_output(project_id=example_project.id,\n    name=\"Readers\")\nexample_contributors = azuredevops.get_group_output(project_id=example_project.id,\n    name=\"Contributors\")\nexample_group = azuredevops.Group(\"exampleGroup\",\n    scope=example_project.id,\n    display_name=\"Example group\",\n    description=\"Example description\",\n    members=[\n        example_readers.descriptor,\n        example_contributors.descriptor,\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\");\n\n    var example_readers = AzureDevOps.GetGroup.Invoke(new()\n    {\n        ProjectId = exampleProject.Id,\n        Name = \"Readers\",\n    });\n\n    var example_contributors = AzureDevOps.GetGroup.Invoke(new()\n    {\n        ProjectId = exampleProject.Id,\n        Name = \"Contributors\",\n    });\n\n    var exampleGroup = new AzureDevOps.Group(\"exampleGroup\", new()\n    {\n        Scope = exampleProject.Id,\n        DisplayName = \"Example group\",\n        Description = \"Example description\",\n        Members = new[]\n        {\n            example_readers.Apply(example_readers =\u003e example_readers.Apply(getGroupResult =\u003e getGroupResult.Descriptor)),\n            example_contributors.Apply(example_contributors =\u003e example_contributors.Apply(getGroupResult =\u003e getGroupResult.Descriptor)),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample_readers := azuredevops.LookupGroupOutput(ctx, azuredevops.GetGroupOutputArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tName:      pulumi.String(\"Readers\"),\n\t\t}, nil)\n\t\texample_contributors := azuredevops.LookupGroupOutput(ctx, azuredevops.GetGroupOutputArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tName:      pulumi.String(\"Contributors\"),\n\t\t}, nil)\n\t\t_, err = azuredevops.NewGroup(ctx, \"exampleGroup\", \u0026azuredevops.GroupArgs{\n\t\t\tScope:       exampleProject.ID(),\n\t\t\tDisplayName: pulumi.String(\"Example group\"),\n\t\t\tDescription: pulumi.String(\"Example description\"),\n\t\t\tMembers: pulumi.StringArray{\n\t\t\t\texample_readers.ApplyT(func(example_readers azuredevops.GetGroupResult) (*string, error) {\n\t\t\t\t\treturn \u0026example_readers.Descriptor, nil\n\t\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\t\texample_contributors.ApplyT(func(example_contributors azuredevops.GetGroupResult) (*string, error) {\n\t\t\t\t\treturn \u0026example_contributors.Descriptor, nil\n\t\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetGroupArgs;\nimport com.pulumi.azuredevops.Group;\nimport com.pulumi.azuredevops.GroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\");\n\n        final var example-readers = AzuredevopsFunctions.getGroup(GetGroupArgs.builder()\n            .projectId(exampleProject.id())\n            .name(\"Readers\")\n            .build());\n\n        final var example-contributors = AzuredevopsFunctions.getGroup(GetGroupArgs.builder()\n            .projectId(exampleProject.id())\n            .name(\"Contributors\")\n            .build());\n\n        var exampleGroup = new Group(\"exampleGroup\", GroupArgs.builder()        \n            .scope(exampleProject.id())\n            .displayName(\"Example group\")\n            .description(\"Example description\")\n            .members(            \n                example_readers.applyValue(example_readers -\u003e example_readers.descriptor()),\n                example_contributors.applyValue(example_contributors -\u003e example_contributors.descriptor()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n  exampleGroup:\n    type: azuredevops:Group\n    properties:\n      scope: ${exampleProject.id}\n      displayName: Example group\n      description: Example description\n      members:\n        - ${[\"example-readers\"].descriptor}\n        - ${[\"example-contributors\"].descriptor}\nvariables:\n  example-readers:\n    fn::invoke:\n      Function: azuredevops:getGroup\n      Arguments:\n        projectId: ${exampleProject.id}\n        name: Readers\n  example-contributors:\n    fn::invoke:\n      Function: azuredevops:getGroup\n      Arguments:\n        projectId: ${exampleProject.id}\n        name: Contributors\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Groups](https://docs.microsoft.com/en-us/rest/api/azure/devops/graph/groups?view=azure-devops-rest-7.0)\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: Read, Write, \u0026 Manage\n\n\n## Import\n\nAzure DevOps groups can be imported using the group identity descriptor, e.g.\n\n```sh\n $ pulumi import azuredevops:Identities/group:Group example aadgp.Uy0xLTktMTU1MTM3NDI0NS0xMjA0NDAwOTY5LTI0MDI5ODY0MTMtMjE3OTQwODYxNi0zLTIxNjc2NjQyNTMtMzI1Nzg0NDI4OS0yMjU4MjcwOTc0LTI2MDYxODY2NDU\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The Description of the Project.\n"
                },
                "descriptor": {
                    "type": "string",
                    "description": "The identity (subject) descriptor of the Group.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of a new Azure DevOps group that is not backed by an external provider. The `origin_id` and `mail` arguments cannot be used simultaneously with `display_name`.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "This represents the name of the container of origin for a graph member.\n"
                },
                "mail": {
                    "type": "string",
                    "description": "The mail address as a reference to an existing group from an external AD or AAD backed provider. The `scope`, `origin_id` and `display_name` arguments cannot be used simultaneously with `mail`.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "\u003e NOTE: It's possible to define group members both within the `azuredevops.Group` resource via the members block and by using the `azuredevops.GroupMembership` resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.\n"
                },
                "origin": {
                    "type": "string",
                    "description": "The type of source provider for the origin identifier (ex:AD, AAD, MSA)\n"
                },
                "originId": {
                    "type": "string",
                    "description": "The OriginID as a reference to a group from an external AD or AAD backed provider. The `scope`, `mail` and `display_name` arguments cannot be used simultaneously with `origin_id`.\n"
                },
                "principalName": {
                    "type": "string",
                    "description": "This is the PrincipalName of this graph member from the source provider.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of the group. A descriptor referencing the scope (collection, project) in which the group should be created. If omitted, will be created in the scope of the enclosing account or organization.x\n"
                },
                "subjectKind": {
                    "type": "string",
                    "description": "This field identifies the type of the graph subject (ex: Group, Scope, User).\n"
                },
                "url": {
                    "type": "string",
                    "description": "This url is the full route to the source resource of this graph subject.\n"
                }
            },
            "required": [
                "descriptor",
                "displayName",
                "domain",
                "mail",
                "members",
                "origin",
                "originId",
                "principalName",
                "subjectKind",
                "url"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The Description of the Project.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of a new Azure DevOps group that is not backed by an external provider. The `origin_id` and `mail` arguments cannot be used simultaneously with `display_name`.\n"
                },
                "mail": {
                    "type": "string",
                    "description": "The mail address as a reference to an existing group from an external AD or AAD backed provider. The `scope`, `origin_id` and `display_name` arguments cannot be used simultaneously with `mail`.\n",
                    "willReplaceOnChanges": true
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "\u003e NOTE: It's possible to define group members both within the `azuredevops.Group` resource via the members block and by using the `azuredevops.GroupMembership` resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.\n"
                },
                "originId": {
                    "type": "string",
                    "description": "The OriginID as a reference to a group from an external AD or AAD backed provider. The `scope`, `mail` and `display_name` arguments cannot be used simultaneously with `origin_id`.\n",
                    "willReplaceOnChanges": true
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of the group. A descriptor referencing the scope (collection, project) in which the group should be created. If omitted, will be created in the scope of the enclosing account or organization.x\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The Description of the Project.\n"
                    },
                    "descriptor": {
                        "type": "string",
                        "description": "The identity (subject) descriptor of the Group.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name of a new Azure DevOps group that is not backed by an external provider. The `origin_id` and `mail` arguments cannot be used simultaneously with `display_name`.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "This represents the name of the container of origin for a graph member.\n"
                    },
                    "mail": {
                        "type": "string",
                        "description": "The mail address as a reference to an existing group from an external AD or AAD backed provider. The `scope`, `origin_id` and `display_name` arguments cannot be used simultaneously with `mail`.\n",
                        "willReplaceOnChanges": true
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "\u003e NOTE: It's possible to define group members both within the `azuredevops.Group` resource via the members block and by using the `azuredevops.GroupMembership` resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.\n"
                    },
                    "origin": {
                        "type": "string",
                        "description": "The type of source provider for the origin identifier (ex:AD, AAD, MSA)\n"
                    },
                    "originId": {
                        "type": "string",
                        "description": "The OriginID as a reference to a group from an external AD or AAD backed provider. The `scope`, `mail` and `display_name` arguments cannot be used simultaneously with `origin_id`.\n",
                        "willReplaceOnChanges": true
                    },
                    "principalName": {
                        "type": "string",
                        "description": "This is the PrincipalName of this graph member from the source provider.\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of the group. A descriptor referencing the scope (collection, project) in which the group should be created. If omitted, will be created in the scope of the enclosing account or organization.x\n",
                        "willReplaceOnChanges": true
                    },
                    "subjectKind": {
                        "type": "string",
                        "description": "This field identifies the type of the graph subject (ex: Group, Scope, User).\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "This url is the full route to the source resource of this graph subject.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.identities.Group has been deprecated in favor of azuredevops.Group"
        },
        "azuredevops:Identities/groupMembership:GroupMembership": {
            "description": "Manages group membership within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {});\nconst exampleUser = new azuredevops.User(\"exampleUser\", {principalName: \"foo@contoso.com\"});\nconst exampleGroup = azuredevops.getGroupOutput({\n    projectId: exampleProject.id,\n    name: \"Build Administrators\",\n});\nconst exampleGroupMembership = new azuredevops.GroupMembership(\"exampleGroupMembership\", {\n    group: exampleGroup.apply(exampleGroup =\u003e exampleGroup.descriptor),\n    members: [exampleUser.descriptor],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\")\nexample_user = azuredevops.User(\"exampleUser\", principal_name=\"foo@contoso.com\")\nexample_group = azuredevops.get_group_output(project_id=example_project.id,\n    name=\"Build Administrators\")\nexample_group_membership = azuredevops.GroupMembership(\"exampleGroupMembership\",\n    group=example_group.descriptor,\n    members=[example_user.descriptor])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\");\n\n    var exampleUser = new AzureDevOps.User(\"exampleUser\", new()\n    {\n        PrincipalName = \"foo@contoso.com\",\n    });\n\n    var exampleGroup = AzureDevOps.GetGroup.Invoke(new()\n    {\n        ProjectId = exampleProject.Id,\n        Name = \"Build Administrators\",\n    });\n\n    var exampleGroupMembership = new AzureDevOps.GroupMembership(\"exampleGroupMembership\", new()\n    {\n        Group = exampleGroup.Apply(getGroupResult =\u003e getGroupResult.Descriptor),\n        Members = new[]\n        {\n            exampleUser.Descriptor,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUser, err := azuredevops.NewUser(ctx, \"exampleUser\", \u0026azuredevops.UserArgs{\n\t\t\tPrincipalName: pulumi.String(\"foo@contoso.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGroup := azuredevops.LookupGroupOutput(ctx, azuredevops.GetGroupOutputArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tName:      pulumi.String(\"Build Administrators\"),\n\t\t}, nil)\n\t\t_, err = azuredevops.NewGroupMembership(ctx, \"exampleGroupMembership\", \u0026azuredevops.GroupMembershipArgs{\n\t\t\tGroup: exampleGroup.ApplyT(func(exampleGroup azuredevops.GetGroupResult) (*string, error) {\n\t\t\t\treturn \u0026exampleGroup.Descriptor, nil\n\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\tMembers: pulumi.StringArray{\n\t\t\t\texampleUser.Descriptor,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.User;\nimport com.pulumi.azuredevops.UserArgs;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetGroupArgs;\nimport com.pulumi.azuredevops.GroupMembership;\nimport com.pulumi.azuredevops.GroupMembershipArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\");\n\n        var exampleUser = new User(\"exampleUser\", UserArgs.builder()        \n            .principalName(\"foo@contoso.com\")\n            .build());\n\n        final var exampleGroup = AzuredevopsFunctions.getGroup(GetGroupArgs.builder()\n            .projectId(exampleProject.id())\n            .name(\"Build Administrators\")\n            .build());\n\n        var exampleGroupMembership = new GroupMembership(\"exampleGroupMembership\", GroupMembershipArgs.builder()        \n            .group(exampleGroup.applyValue(getGroupResult -\u003e getGroupResult).applyValue(exampleGroup -\u003e exampleGroup.applyValue(getGroupResult -\u003e getGroupResult.descriptor())))\n            .members(exampleUser.descriptor())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n  exampleUser:\n    type: azuredevops:User\n    properties:\n      principalName: foo@contoso.com\n  exampleGroupMembership:\n    type: azuredevops:GroupMembership\n    properties:\n      group: ${exampleGroup.descriptor}\n      members:\n        - ${exampleUser.descriptor}\nvariables:\n  exampleGroup:\n    fn::invoke:\n      Function: azuredevops:getGroup\n      Arguments:\n        projectId: ${exampleProject.id}\n        name: Build Administrators\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Memberships](https://docs.microsoft.com/en-us/rest/api/azure/devops/graph/memberships?view=azure-devops-rest-7.0)\n\n## PAT Permissions Required\n\n- **Deployment Groups**: Read \u0026 Manage\n\n\n## Import\n\nNot supported. ",
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The descriptor of the group being managed.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of user or group descriptors that will become members of the group.\n\u003e NOTE: It's possible to define group members both within the `azuredevops.GroupMembership resource` via the members block and by using the `azuredevops.Group` resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "The mode how the resource manages group members.\n- `mode == add`: the resource will ensure that all specified members will be part of the referenced group\n- `mode == overwrite`: the resource will replace all existing members with the members specified within the `members` block\n\u003e NOTE: To clear all members from a group, specify an empty list of descriptors in the `members` attribute and set the `mode` member to `overwrite`.\n"
                }
            },
            "required": [
                "group",
                "members"
            ],
            "inputProperties": {
                "group": {
                    "type": "string",
                    "description": "The descriptor of the group being managed.\n",
                    "willReplaceOnChanges": true
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of user or group descriptors that will become members of the group.\n\u003e NOTE: It's possible to define group members both within the `azuredevops.GroupMembership resource` via the members block and by using the `azuredevops.Group` resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "The mode how the resource manages group members.\n- `mode == add`: the resource will ensure that all specified members will be part of the referenced group\n- `mode == overwrite`: the resource will replace all existing members with the members specified within the `members` block\n\u003e NOTE: To clear all members from a group, specify an empty list of descriptors in the `members` attribute and set the `mode` member to `overwrite`.\n"
                }
            },
            "requiredInputs": [
                "group",
                "members"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupMembership resources.\n",
                "properties": {
                    "group": {
                        "type": "string",
                        "description": "The descriptor of the group being managed.\n",
                        "willReplaceOnChanges": true
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of user or group descriptors that will become members of the group.\n\u003e NOTE: It's possible to define group members both within the `azuredevops.GroupMembership resource` via the members block and by using the `azuredevops.Group` resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.\n"
                    },
                    "mode": {
                        "type": "string",
                        "description": "The mode how the resource manages group members.\n- `mode == add`: the resource will ensure that all specified members will be part of the referenced group\n- `mode == overwrite`: the resource will replace all existing members with the members specified within the `members` block\n\u003e NOTE: To clear all members from a group, specify an empty list of descriptors in the `members` attribute and set the `mode` member to `overwrite`.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.identities.GroupMembership has been deprecated in favor of azuredevops.GroupMembership"
        },
        "azuredevops:Pipeline/variableGroup:VariableGroup": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"Managed by Terraform\",\n});\nconst exampleVariableGroup = new azuredevops.VariableGroup(\"exampleVariableGroup\", {\n    projectId: exampleProject.id,\n    description: \"Example Variable Group Description\",\n    allowAccess: true,\n    variables: [\n        {\n            name: \"key1\",\n            value: \"val1\",\n        },\n        {\n            name: \"key2\",\n            secretValue: \"val2\",\n            isSecret: true,\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"Managed by Terraform\")\nexample_variable_group = azuredevops.VariableGroup(\"exampleVariableGroup\",\n    project_id=example_project.id,\n    description=\"Example Variable Group Description\",\n    allow_access=True,\n    variables=[\n        azuredevops.VariableGroupVariableArgs(\n            name=\"key1\",\n            value=\"val1\",\n        ),\n        azuredevops.VariableGroupVariableArgs(\n            name=\"key2\",\n            secret_value=\"val2\",\n            is_secret=True,\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        WorkItemTemplate = \"Agile\",\n        VersionControl = \"Git\",\n        Visibility = \"private\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleVariableGroup = new AzureDevOps.VariableGroup(\"exampleVariableGroup\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Description = \"Example Variable Group Description\",\n        AllowAccess = true,\n        Variables = new[]\n        {\n            new AzureDevOps.Inputs.VariableGroupVariableArgs\n            {\n                Name = \"key1\",\n                Value = \"val1\",\n            },\n            new AzureDevOps.Inputs.VariableGroupVariableArgs\n            {\n                Name = \"key2\",\n                SecretValue = \"val2\",\n                IsSecret = true,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewVariableGroup(ctx, \"exampleVariableGroup\", \u0026azuredevops.VariableGroupArgs{\n\t\t\tProjectId:   exampleProject.ID(),\n\t\t\tDescription: pulumi.String(\"Example Variable Group Description\"),\n\t\t\tAllowAccess: pulumi.Bool(true),\n\t\t\tVariables: azuredevops.VariableGroupVariableArray{\n\t\t\t\t\u0026azuredevops.VariableGroupVariableArgs{\n\t\t\t\t\tName:  pulumi.String(\"key1\"),\n\t\t\t\t\tValue: pulumi.String(\"val1\"),\n\t\t\t\t},\n\t\t\t\t\u0026azuredevops.VariableGroupVariableArgs{\n\t\t\t\t\tName:        pulumi.String(\"key2\"),\n\t\t\t\t\tSecretValue: pulumi.String(\"val2\"),\n\t\t\t\t\tIsSecret:    pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.VariableGroup;\nimport com.pulumi.azuredevops.VariableGroupArgs;\nimport com.pulumi.azuredevops.inputs.VariableGroupVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .workItemTemplate(\"Agile\")\n            .versionControl(\"Git\")\n            .visibility(\"private\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleVariableGroup = new VariableGroup(\"exampleVariableGroup\", VariableGroupArgs.builder()        \n            .projectId(exampleProject.id())\n            .description(\"Example Variable Group Description\")\n            .allowAccess(true)\n            .variables(            \n                VariableGroupVariableArgs.builder()\n                    .name(\"key1\")\n                    .value(\"val1\")\n                    .build(),\n                VariableGroupVariableArgs.builder()\n                    .name(\"key2\")\n                    .secretValue(\"val2\")\n                    .isSecret(true)\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      workItemTemplate: Agile\n      versionControl: Git\n      visibility: private\n      description: Managed by Terraform\n  exampleVariableGroup:\n    type: azuredevops:VariableGroup\n    properties:\n      projectId: ${exampleProject.id}\n      description: Example Variable Group Description\n      allowAccess: true\n      variables:\n        - name: key1\n          value: val1\n        - name: key2\n          secretValue: val2\n          isSecret: true\n```\n\n{{% /example %}}\n{{% example %}}\n### With AzureRM Key Vault\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceEndpointAzureRM = new azuredevops.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example AzureRM\",\n    description: \"Managed by Terraform\",\n    credentials: {\n        serviceprincipalid: \"00000000-0000-0000-0000-000000000000\",\n        serviceprincipalkey: \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    },\n    azurermSpnTenantid: \"00000000-0000-0000-0000-000000000000\",\n    azurermSubscriptionId: \"00000000-0000-0000-0000-000000000000\",\n    azurermSubscriptionName: \"Example Subscription Name\",\n});\nconst exampleVariableGroup = new azuredevops.VariableGroup(\"exampleVariableGroup\", {\n    projectId: exampleProject.id,\n    description: \"Example Variable Group Description\",\n    allowAccess: true,\n    keyVault: {\n        name: \"example-kv\",\n        serviceEndpointId: exampleServiceEndpointAzureRM.id,\n    },\n    variables: [\n        {\n            name: \"key1\",\n        },\n        {\n            name: \"key2\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"Managed by Terraform\")\nexample_service_endpoint_azure_rm = azuredevops.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example AzureRM\",\n    description=\"Managed by Terraform\",\n    credentials=azuredevops.ServiceEndpointAzureRMCredentialsArgs(\n        serviceprincipalid=\"00000000-0000-0000-0000-000000000000\",\n        serviceprincipalkey=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    ),\n    azurerm_spn_tenantid=\"00000000-0000-0000-0000-000000000000\",\n    azurerm_subscription_id=\"00000000-0000-0000-0000-000000000000\",\n    azurerm_subscription_name=\"Example Subscription Name\")\nexample_variable_group = azuredevops.VariableGroup(\"exampleVariableGroup\",\n    project_id=example_project.id,\n    description=\"Example Variable Group Description\",\n    allow_access=True,\n    key_vault=azuredevops.VariableGroupKeyVaultArgs(\n        name=\"example-kv\",\n        service_endpoint_id=example_service_endpoint_azure_rm.id,\n    ),\n    variables=[\n        azuredevops.VariableGroupVariableArgs(\n            name=\"key1\",\n        ),\n        azuredevops.VariableGroupVariableArgs(\n            name=\"key2\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        WorkItemTemplate = \"Agile\",\n        VersionControl = \"Git\",\n        Visibility = \"private\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceEndpointAzureRM = new AzureDevOps.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example AzureRM\",\n        Description = \"Managed by Terraform\",\n        Credentials = new AzureDevOps.Inputs.ServiceEndpointAzureRMCredentialsArgs\n        {\n            Serviceprincipalid = \"00000000-0000-0000-0000-000000000000\",\n            Serviceprincipalkey = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n        },\n        AzurermSpnTenantid = \"00000000-0000-0000-0000-000000000000\",\n        AzurermSubscriptionId = \"00000000-0000-0000-0000-000000000000\",\n        AzurermSubscriptionName = \"Example Subscription Name\",\n    });\n\n    var exampleVariableGroup = new AzureDevOps.VariableGroup(\"exampleVariableGroup\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Description = \"Example Variable Group Description\",\n        AllowAccess = true,\n        KeyVault = new AzureDevOps.Inputs.VariableGroupKeyVaultArgs\n        {\n            Name = \"example-kv\",\n            ServiceEndpointId = exampleServiceEndpointAzureRM.Id,\n        },\n        Variables = new[]\n        {\n            new AzureDevOps.Inputs.VariableGroupVariableArgs\n            {\n                Name = \"key1\",\n            },\n            new AzureDevOps.Inputs.VariableGroupVariableArgs\n            {\n                Name = \"key2\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleServiceEndpointAzureRM, err := azuredevops.NewServiceEndpointAzureRM(ctx, \"exampleServiceEndpointAzureRM\", \u0026azuredevops.ServiceEndpointAzureRMArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Example AzureRM\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t\tCredentials: \u0026azuredevops.ServiceEndpointAzureRMCredentialsArgs{\n\t\t\t\tServiceprincipalid:  pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\t\tServiceprincipalkey: pulumi.String(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"),\n\t\t\t},\n\t\t\tAzurermSpnTenantid:      pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurermSubscriptionId:   pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurermSubscriptionName: pulumi.String(\"Example Subscription Name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewVariableGroup(ctx, \"exampleVariableGroup\", \u0026azuredevops.VariableGroupArgs{\n\t\t\tProjectId:   exampleProject.ID(),\n\t\t\tDescription: pulumi.String(\"Example Variable Group Description\"),\n\t\t\tAllowAccess: pulumi.Bool(true),\n\t\t\tKeyVault: \u0026azuredevops.VariableGroupKeyVaultArgs{\n\t\t\t\tName:              pulumi.String(\"example-kv\"),\n\t\t\t\tServiceEndpointId: exampleServiceEndpointAzureRM.ID(),\n\t\t\t},\n\t\t\tVariables: azuredevops.VariableGroupVariableArray{\n\t\t\t\t\u0026azuredevops.VariableGroupVariableArgs{\n\t\t\t\t\tName: pulumi.String(\"key1\"),\n\t\t\t\t},\n\t\t\t\t\u0026azuredevops.VariableGroupVariableArgs{\n\t\t\t\t\tName: pulumi.String(\"key2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointAzureRM;\nimport com.pulumi.azuredevops.ServiceEndpointAzureRMArgs;\nimport com.pulumi.azuredevops.inputs.ServiceEndpointAzureRMCredentialsArgs;\nimport com.pulumi.azuredevops.VariableGroup;\nimport com.pulumi.azuredevops.VariableGroupArgs;\nimport com.pulumi.azuredevops.inputs.VariableGroupKeyVaultArgs;\nimport com.pulumi.azuredevops.inputs.VariableGroupVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .workItemTemplate(\"Agile\")\n            .versionControl(\"Git\")\n            .visibility(\"private\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceEndpointAzureRM = new ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", ServiceEndpointAzureRMArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example AzureRM\")\n            .description(\"Managed by Terraform\")\n            .credentials(ServiceEndpointAzureRMCredentialsArgs.builder()\n                .serviceprincipalid(\"00000000-0000-0000-0000-000000000000\")\n                .serviceprincipalkey(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\")\n                .build())\n            .azurermSpnTenantid(\"00000000-0000-0000-0000-000000000000\")\n            .azurermSubscriptionId(\"00000000-0000-0000-0000-000000000000\")\n            .azurermSubscriptionName(\"Example Subscription Name\")\n            .build());\n\n        var exampleVariableGroup = new VariableGroup(\"exampleVariableGroup\", VariableGroupArgs.builder()        \n            .projectId(exampleProject.id())\n            .description(\"Example Variable Group Description\")\n            .allowAccess(true)\n            .keyVault(VariableGroupKeyVaultArgs.builder()\n                .name(\"example-kv\")\n                .serviceEndpointId(exampleServiceEndpointAzureRM.id())\n                .build())\n            .variables(            \n                VariableGroupVariableArgs.builder()\n                    .name(\"key1\")\n                    .build(),\n                VariableGroupVariableArgs.builder()\n                    .name(\"key2\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      workItemTemplate: Agile\n      versionControl: Git\n      visibility: private\n      description: Managed by Terraform\n  exampleServiceEndpointAzureRM:\n    type: azuredevops:ServiceEndpointAzureRM\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example AzureRM\n      description: Managed by Terraform\n      credentials:\n        serviceprincipalid: 00000000-0000-0000-0000-000000000000\n        serviceprincipalkey: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n      azurermSpnTenantid: 00000000-0000-0000-0000-000000000000\n      azurermSubscriptionId: 00000000-0000-0000-0000-000000000000\n      azurermSubscriptionName: Example Subscription Name\n  exampleVariableGroup:\n    type: azuredevops:VariableGroup\n    properties:\n      projectId: ${exampleProject.id}\n      description: Example Variable Group Description\n      allowAccess: true\n      keyVault:\n        name: example-kv\n        serviceEndpointId: ${exampleServiceEndpointAzureRM.id}\n      variables:\n        - name: key1\n        - name: key2\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Variable Groups](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/variablegroups?view=azure-devops-rest-7.0)\n- [Azure DevOps Service REST API 7.0 - Authorized Resources](https://docs.microsoft.com/en-us/rest/api/azure/devops/build/authorizedresources?view=azure-devops-rest-7.0)\n\n## PAT Permissions Required\n\n- **Variable Groups**: Read, Create, \u0026 Manage\n- **Build**: Read \u0026 execute\n- **Project and Team**: Read\n- **Token Administration**: Read \u0026 manage\n- **Tokens**: Read \u0026 manage\n- **Work Items**: Read\n\n\n## Import\n\n**Variable groups containing secret values cannot be imported.** Azure DevOps Variable groups can be imported using the project name/variable group ID or by the project Guid/variable group ID, e.g.\n\n```sh\n $ pulumi import azuredevops:Pipeline/variableGroup:VariableGroup example \"Example Project/10\"\n```\n\n or\n\n```sh\n $ pulumi import azuredevops:Pipeline/variableGroup:VariableGroup example 00000000-0000-0000-0000-000000000000/0\n```\n\n _Note that for secret variables, the import command retrieve blank value in the tfstate._ ",
            "properties": {
                "allowAccess": {
                    "type": "boolean",
                    "description": "Boolean that indicate if this variable group is shared by all pipelines of this project.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Variable Group.\n"
                },
                "keyVault": {
                    "$ref": "#/types/azuredevops:Pipeline/VariableGroupKeyVault:VariableGroupKeyVault",
                    "description": "A list of `key_vault` blocks as documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Variable Group.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Pipeline/VariableGroupVariable:VariableGroupVariable"
                    },
                    "description": "One or more `variable` blocks as documented below.\n"
                }
            },
            "required": [
                "name",
                "projectId",
                "variables"
            ],
            "inputProperties": {
                "allowAccess": {
                    "type": "boolean",
                    "description": "Boolean that indicate if this variable group is shared by all pipelines of this project.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Variable Group.\n"
                },
                "keyVault": {
                    "$ref": "#/types/azuredevops:Pipeline/VariableGroupKeyVault:VariableGroupKeyVault",
                    "description": "A list of `key_vault` blocks as documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Variable Group.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n",
                    "willReplaceOnChanges": true
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Pipeline/VariableGroupVariable:VariableGroupVariable"
                    },
                    "description": "One or more `variable` blocks as documented below.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "variables"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VariableGroup resources.\n",
                "properties": {
                    "allowAccess": {
                        "type": "boolean",
                        "description": "Boolean that indicate if this variable group is shared by all pipelines of this project.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Variable Group.\n"
                    },
                    "keyVault": {
                        "$ref": "#/types/azuredevops:Pipeline/VariableGroupKeyVault:VariableGroupKeyVault",
                        "description": "A list of `key_vault` blocks as documented below.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Variable Group.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:Pipeline/VariableGroupVariable:VariableGroupVariable"
                        },
                        "description": "One or more `variable` blocks as documented below.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.pipeline.VariableGroup has been deprecated in favor of azuredevops.VariableGroup"
        },
        "azuredevops:Policy/branchPolicyBuildValidation:BranchPolicyBuildValidation": {
            "description": "Manages a build validation branch policy within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {});\nconst exampleGit = new azuredevops.Git(\"exampleGit\", {\n    projectId: exampleProject.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst exampleBuildDefinition = new azuredevops.BuildDefinition(\"exampleBuildDefinition\", {\n    projectId: exampleProject.id,\n    repository: {\n        repoType: \"TfsGit\",\n        repoId: exampleGit.id,\n        ymlPath: \"azure-pipelines.yml\",\n    },\n});\nconst exampleBranchPolicyBuildValidation = new azuredevops.BranchPolicyBuildValidation(\"exampleBranchPolicyBuildValidation\", {\n    projectId: exampleProject.id,\n    enabled: true,\n    blocking: true,\n    settings: {\n        displayName: \"Example build validation policy\",\n        buildDefinitionId: exampleBuildDefinition.id,\n        validDuration: 720,\n        filenamePatterns: [\n            \"/WebApp/*\",\n            \"!/WebApp/Tests/*\",\n            \"*.cs\",\n        ],\n        scopes: [\n            {\n                repositoryId: exampleGit.id,\n                repositoryRef: exampleGit.defaultBranch,\n                matchType: \"Exact\",\n            },\n            {\n                repositoryId: exampleGit.id,\n                repositoryRef: \"refs/heads/releases\",\n                matchType: \"Prefix\",\n            },\n            {\n                matchType: \"DefaultBranch\",\n            },\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\")\nexample_git = azuredevops.Git(\"exampleGit\",\n    project_id=example_project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nexample_build_definition = azuredevops.BuildDefinition(\"exampleBuildDefinition\",\n    project_id=example_project.id,\n    repository=azuredevops.BuildDefinitionRepositoryArgs(\n        repo_type=\"TfsGit\",\n        repo_id=example_git.id,\n        yml_path=\"azure-pipelines.yml\",\n    ))\nexample_branch_policy_build_validation = azuredevops.BranchPolicyBuildValidation(\"exampleBranchPolicyBuildValidation\",\n    project_id=example_project.id,\n    enabled=True,\n    blocking=True,\n    settings=azuredevops.BranchPolicyBuildValidationSettingsArgs(\n        display_name=\"Example build validation policy\",\n        build_definition_id=example_build_definition.id,\n        valid_duration=720,\n        filename_patterns=[\n            \"/WebApp/*\",\n            \"!/WebApp/Tests/*\",\n            \"*.cs\",\n        ],\n        scopes=[\n            azuredevops.BranchPolicyBuildValidationSettingsScopeArgs(\n                repository_id=example_git.id,\n                repository_ref=example_git.default_branch,\n                match_type=\"Exact\",\n            ),\n            azuredevops.BranchPolicyBuildValidationSettingsScopeArgs(\n                repository_id=example_git.id,\n                repository_ref=\"refs/heads/releases\",\n                match_type=\"Prefix\",\n            ),\n            azuredevops.BranchPolicyBuildValidationSettingsScopeArgs(\n                match_type=\"DefaultBranch\",\n            ),\n        ],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\");\n\n    var exampleGit = new AzureDevOps.Git(\"exampleGit\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n        {\n            InitType = \"Clean\",\n        },\n    });\n\n    var exampleBuildDefinition = new AzureDevOps.BuildDefinition(\"exampleBuildDefinition\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Repository = new AzureDevOps.Inputs.BuildDefinitionRepositoryArgs\n        {\n            RepoType = \"TfsGit\",\n            RepoId = exampleGit.Id,\n            YmlPath = \"azure-pipelines.yml\",\n        },\n    });\n\n    var exampleBranchPolicyBuildValidation = new AzureDevOps.BranchPolicyBuildValidation(\"exampleBranchPolicyBuildValidation\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Enabled = true,\n        Blocking = true,\n        Settings = new AzureDevOps.Inputs.BranchPolicyBuildValidationSettingsArgs\n        {\n            DisplayName = \"Example build validation policy\",\n            BuildDefinitionId = exampleBuildDefinition.Id,\n            ValidDuration = 720,\n            FilenamePatterns = new[]\n            {\n                \"/WebApp/*\",\n                \"!/WebApp/Tests/*\",\n                \"*.cs\",\n            },\n            Scopes = new[]\n            {\n                new AzureDevOps.Inputs.BranchPolicyBuildValidationSettingsScopeArgs\n                {\n                    RepositoryId = exampleGit.Id,\n                    RepositoryRef = exampleGit.DefaultBranch,\n                    MatchType = \"Exact\",\n                },\n                new AzureDevOps.Inputs.BranchPolicyBuildValidationSettingsScopeArgs\n                {\n                    RepositoryId = exampleGit.Id,\n                    RepositoryRef = \"refs/heads/releases\",\n                    MatchType = \"Prefix\",\n                },\n                new AzureDevOps.Inputs.BranchPolicyBuildValidationSettingsScopeArgs\n                {\n                    MatchType = \"DefaultBranch\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGit, err := azuredevops.NewGit(ctx, \"exampleGit\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tInitialization: \u0026azuredevops.GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleBuildDefinition, err := azuredevops.NewBuildDefinition(ctx, \"exampleBuildDefinition\", \u0026azuredevops.BuildDefinitionArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tRepository: \u0026azuredevops.BuildDefinitionRepositoryArgs{\n\t\t\t\tRepoType: pulumi.String(\"TfsGit\"),\n\t\t\t\tRepoId:   exampleGit.ID(),\n\t\t\t\tYmlPath:  pulumi.String(\"azure-pipelines.yml\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewBranchPolicyBuildValidation(ctx, \"exampleBranchPolicyBuildValidation\", \u0026azuredevops.BranchPolicyBuildValidationArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t\tSettings: \u0026azuredevops.BranchPolicyBuildValidationSettingsArgs{\n\t\t\t\tDisplayName:       pulumi.String(\"Example build validation policy\"),\n\t\t\t\tBuildDefinitionId: exampleBuildDefinition.ID(),\n\t\t\t\tValidDuration:     pulumi.Int(720),\n\t\t\t\tFilenamePatterns: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"/WebApp/*\"),\n\t\t\t\t\tpulumi.String(\"!/WebApp/Tests/*\"),\n\t\t\t\t\tpulumi.String(\"*.cs\"),\n\t\t\t\t},\n\t\t\t\tScopes: azuredevops.BranchPolicyBuildValidationSettingsScopeArray{\n\t\t\t\t\t\u0026azuredevops.BranchPolicyBuildValidationSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  exampleGit.ID(),\n\t\t\t\t\t\tRepositoryRef: exampleGit.DefaultBranch,\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Exact\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026azuredevops.BranchPolicyBuildValidationSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  exampleGit.ID(),\n\t\t\t\t\t\tRepositoryRef: pulumi.String(\"refs/heads/releases\"),\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Prefix\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026azuredevops.BranchPolicyBuildValidationSettingsScopeArgs{\n\t\t\t\t\t\tMatchType: pulumi.String(\"DefaultBranch\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.Git;\nimport com.pulumi.azuredevops.GitArgs;\nimport com.pulumi.azuredevops.inputs.GitInitializationArgs;\nimport com.pulumi.azuredevops.BuildDefinition;\nimport com.pulumi.azuredevops.BuildDefinitionArgs;\nimport com.pulumi.azuredevops.inputs.BuildDefinitionRepositoryArgs;\nimport com.pulumi.azuredevops.BranchPolicyBuildValidation;\nimport com.pulumi.azuredevops.BranchPolicyBuildValidationArgs;\nimport com.pulumi.azuredevops.inputs.BranchPolicyBuildValidationSettingsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\");\n\n        var exampleGit = new Git(\"exampleGit\", GitArgs.builder()        \n            .projectId(exampleProject.id())\n            .initialization(GitInitializationArgs.builder()\n                .initType(\"Clean\")\n                .build())\n            .build());\n\n        var exampleBuildDefinition = new BuildDefinition(\"exampleBuildDefinition\", BuildDefinitionArgs.builder()        \n            .projectId(exampleProject.id())\n            .repository(BuildDefinitionRepositoryArgs.builder()\n                .repoType(\"TfsGit\")\n                .repoId(exampleGit.id())\n                .ymlPath(\"azure-pipelines.yml\")\n                .build())\n            .build());\n\n        var exampleBranchPolicyBuildValidation = new BranchPolicyBuildValidation(\"exampleBranchPolicyBuildValidation\", BranchPolicyBuildValidationArgs.builder()        \n            .projectId(exampleProject.id())\n            .enabled(true)\n            .blocking(true)\n            .settings(BranchPolicyBuildValidationSettingsArgs.builder()\n                .displayName(\"Example build validation policy\")\n                .buildDefinitionId(exampleBuildDefinition.id())\n                .validDuration(720)\n                .filenamePatterns(                \n                    \"/WebApp/*\",\n                    \"!/WebApp/Tests/*\",\n                    \"*.cs\")\n                .scopes(                \n                    BranchPolicyBuildValidationSettingsScopeArgs.builder()\n                        .repositoryId(exampleGit.id())\n                        .repositoryRef(exampleGit.defaultBranch())\n                        .matchType(\"Exact\")\n                        .build(),\n                    BranchPolicyBuildValidationSettingsScopeArgs.builder()\n                        .repositoryId(exampleGit.id())\n                        .repositoryRef(\"refs/heads/releases\")\n                        .matchType(\"Prefix\")\n                        .build(),\n                    BranchPolicyBuildValidationSettingsScopeArgs.builder()\n                        .matchType(\"DefaultBranch\")\n                        .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n  exampleGit:\n    type: azuredevops:Git\n    properties:\n      projectId: ${exampleProject.id}\n      initialization:\n        initType: Clean\n  exampleBuildDefinition:\n    type: azuredevops:BuildDefinition\n    properties:\n      projectId: ${exampleProject.id}\n      repository:\n        repoType: TfsGit\n        repoId: ${exampleGit.id}\n        ymlPath: azure-pipelines.yml\n  exampleBranchPolicyBuildValidation:\n    type: azuredevops:BranchPolicyBuildValidation\n    properties:\n      projectId: ${exampleProject.id}\n      enabled: true\n      blocking: true\n      settings:\n        displayName: Example build validation policy\n        buildDefinitionId: ${exampleBuildDefinition.id}\n        validDuration: 720\n        filenamePatterns:\n          - /WebApp/*\n          - '!/WebApp/Tests/*'\n          - '*.cs'\n        scopes:\n          - repositoryId: ${exampleGit.id}\n            repositoryRef: ${exampleGit.defaultBranch}\n            matchType: Exact\n          - repositoryId: ${exampleGit.id}\n            repositoryRef: refs/heads/releases\n            matchType: Prefix\n          - matchType: DefaultBranch\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Policy Configurations](https://docs.microsoft.com/en-us/rest/api/azure/devops/policy/configurations/create?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Branch Policies can be imported using the project ID and policy configuration ID\n\n```sh\n $ pulumi import azuredevops:Policy/branchPolicyBuildValidation:BranchPolicyBuildValidation example 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "settings": {
                    "$ref": "#/types/azuredevops:Policy/BranchPolicyBuildValidationSettings:BranchPolicyBuildValidationSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "required": [
                "projectId",
                "settings"
            ],
            "inputProperties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n",
                    "willReplaceOnChanges": true
                },
                "settings": {
                    "$ref": "#/types/azuredevops:Policy/BranchPolicyBuildValidationSettings:BranchPolicyBuildValidationSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "settings"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BranchPolicyBuildValidation resources.\n",
                "properties": {
                    "blocking": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the policy will be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "settings": {
                        "$ref": "#/types/azuredevops:Policy/BranchPolicyBuildValidationSettings:BranchPolicyBuildValidationSettings",
                        "description": "Configuration for the policy. This block must be defined exactly once.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.policy.BranchPolicyBuildValidation has been deprecated in favor of azuredevops.BranchPolicyBuildValidation"
        },
        "azuredevops:Policy/branchPolicyMinReviewers:BranchPolicyMinReviewers": {
            "description": "Branch policy for reviewers on pull requests. Includes the minimum number of reviewers and other conditions.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {});\nconst exampleGit = new azuredevops.Git(\"exampleGit\", {\n    projectId: exampleProject.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst exampleBranchPolicyMinReviewers = new azuredevops.BranchPolicyMinReviewers(\"exampleBranchPolicyMinReviewers\", {\n    projectId: exampleProject.id,\n    enabled: true,\n    blocking: true,\n    settings: {\n        reviewerCount: 7,\n        submitterCanVote: false,\n        lastPusherCannotApprove: true,\n        allowCompletionWithRejectsOrWaits: false,\n        onPushResetApprovedVotes: true,\n        onLastIterationRequireVote: false,\n        scopes: [\n            {\n                repositoryId: exampleGit.id,\n                repositoryRef: exampleGit.defaultBranch,\n                matchType: \"Exact\",\n            },\n            {\n                repositoryId: undefined,\n                repositoryRef: \"refs/heads/releases\",\n                matchType: \"Prefix\",\n            },\n            {\n                matchType: \"DefaultBranch\",\n            },\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\")\nexample_git = azuredevops.Git(\"exampleGit\",\n    project_id=example_project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nexample_branch_policy_min_reviewers = azuredevops.BranchPolicyMinReviewers(\"exampleBranchPolicyMinReviewers\",\n    project_id=example_project.id,\n    enabled=True,\n    blocking=True,\n    settings=azuredevops.BranchPolicyMinReviewersSettingsArgs(\n        reviewer_count=7,\n        submitter_can_vote=False,\n        last_pusher_cannot_approve=True,\n        allow_completion_with_rejects_or_waits=False,\n        on_push_reset_approved_votes=True,\n        on_last_iteration_require_vote=False,\n        scopes=[\n            azuredevops.BranchPolicyMinReviewersSettingsScopeArgs(\n                repository_id=example_git.id,\n                repository_ref=example_git.default_branch,\n                match_type=\"Exact\",\n            ),\n            azuredevops.BranchPolicyMinReviewersSettingsScopeArgs(\n                repository_id=None,\n                repository_ref=\"refs/heads/releases\",\n                match_type=\"Prefix\",\n            ),\n            azuredevops.BranchPolicyMinReviewersSettingsScopeArgs(\n                match_type=\"DefaultBranch\",\n            ),\n        ],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\");\n\n    var exampleGit = new AzureDevOps.Git(\"exampleGit\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n        {\n            InitType = \"Clean\",\n        },\n    });\n\n    var exampleBranchPolicyMinReviewers = new AzureDevOps.BranchPolicyMinReviewers(\"exampleBranchPolicyMinReviewers\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Enabled = true,\n        Blocking = true,\n        Settings = new AzureDevOps.Inputs.BranchPolicyMinReviewersSettingsArgs\n        {\n            ReviewerCount = 7,\n            SubmitterCanVote = false,\n            LastPusherCannotApprove = true,\n            AllowCompletionWithRejectsOrWaits = false,\n            OnPushResetApprovedVotes = true,\n            OnLastIterationRequireVote = false,\n            Scopes = new[]\n            {\n                new AzureDevOps.Inputs.BranchPolicyMinReviewersSettingsScopeArgs\n                {\n                    RepositoryId = exampleGit.Id,\n                    RepositoryRef = exampleGit.DefaultBranch,\n                    MatchType = \"Exact\",\n                },\n                new AzureDevOps.Inputs.BranchPolicyMinReviewersSettingsScopeArgs\n                {\n                    RepositoryId = null,\n                    RepositoryRef = \"refs/heads/releases\",\n                    MatchType = \"Prefix\",\n                },\n                new AzureDevOps.Inputs.BranchPolicyMinReviewersSettingsScopeArgs\n                {\n                    MatchType = \"DefaultBranch\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGit, err := azuredevops.NewGit(ctx, \"exampleGit\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tInitialization: \u0026azuredevops.GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewBranchPolicyMinReviewers(ctx, \"exampleBranchPolicyMinReviewers\", \u0026azuredevops.BranchPolicyMinReviewersArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t\tSettings: \u0026azuredevops.BranchPolicyMinReviewersSettingsArgs{\n\t\t\t\tReviewerCount:                     pulumi.Int(7),\n\t\t\t\tSubmitterCanVote:                  pulumi.Bool(false),\n\t\t\t\tLastPusherCannotApprove:           pulumi.Bool(true),\n\t\t\t\tAllowCompletionWithRejectsOrWaits: pulumi.Bool(false),\n\t\t\t\tOnPushResetApprovedVotes:          pulumi.Bool(true),\n\t\t\t\tOnLastIterationRequireVote:        pulumi.Bool(false),\n\t\t\t\tScopes: azuredevops.BranchPolicyMinReviewersSettingsScopeArray{\n\t\t\t\t\t\u0026azuredevops.BranchPolicyMinReviewersSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  exampleGit.ID(),\n\t\t\t\t\t\tRepositoryRef: exampleGit.DefaultBranch,\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Exact\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026azuredevops.BranchPolicyMinReviewersSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  nil,\n\t\t\t\t\t\tRepositoryRef: pulumi.String(\"refs/heads/releases\"),\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Prefix\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026azuredevops.BranchPolicyMinReviewersSettingsScopeArgs{\n\t\t\t\t\t\tMatchType: pulumi.String(\"DefaultBranch\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.Git;\nimport com.pulumi.azuredevops.GitArgs;\nimport com.pulumi.azuredevops.inputs.GitInitializationArgs;\nimport com.pulumi.azuredevops.BranchPolicyMinReviewers;\nimport com.pulumi.azuredevops.BranchPolicyMinReviewersArgs;\nimport com.pulumi.azuredevops.inputs.BranchPolicyMinReviewersSettingsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\");\n\n        var exampleGit = new Git(\"exampleGit\", GitArgs.builder()        \n            .projectId(exampleProject.id())\n            .initialization(GitInitializationArgs.builder()\n                .initType(\"Clean\")\n                .build())\n            .build());\n\n        var exampleBranchPolicyMinReviewers = new BranchPolicyMinReviewers(\"exampleBranchPolicyMinReviewers\", BranchPolicyMinReviewersArgs.builder()        \n            .projectId(exampleProject.id())\n            .enabled(true)\n            .blocking(true)\n            .settings(BranchPolicyMinReviewersSettingsArgs.builder()\n                .reviewerCount(7)\n                .submitterCanVote(false)\n                .lastPusherCannotApprove(true)\n                .allowCompletionWithRejectsOrWaits(false)\n                .onPushResetApprovedVotes(true)\n                .onLastIterationRequireVote(false)\n                .scopes(                \n                    BranchPolicyMinReviewersSettingsScopeArgs.builder()\n                        .repositoryId(exampleGit.id())\n                        .repositoryRef(exampleGit.defaultBranch())\n                        .matchType(\"Exact\")\n                        .build(),\n                    BranchPolicyMinReviewersSettingsScopeArgs.builder()\n                        .repositoryId(null)\n                        .repositoryRef(\"refs/heads/releases\")\n                        .matchType(\"Prefix\")\n                        .build(),\n                    BranchPolicyMinReviewersSettingsScopeArgs.builder()\n                        .matchType(\"DefaultBranch\")\n                        .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n  exampleGit:\n    type: azuredevops:Git\n    properties:\n      projectId: ${exampleProject.id}\n      initialization:\n        initType: Clean\n  exampleBranchPolicyMinReviewers:\n    type: azuredevops:BranchPolicyMinReviewers\n    properties:\n      projectId: ${exampleProject.id}\n      enabled: true\n      blocking: true\n      settings:\n        reviewerCount: 7\n        submitterCanVote: false\n        lastPusherCannotApprove: true\n        allowCompletionWithRejectsOrWaits: false\n        onPushResetApprovedVotes: true\n        onLastIterationRequireVote: false\n        scopes:\n          - repositoryId: ${exampleGit.id}\n            repositoryRef: ${exampleGit.defaultBranch}\n            matchType: Exact\n          - repositoryId: null\n            repositoryRef: refs/heads/releases\n            matchType: Prefix\n          - matchType: DefaultBranch\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Policy Configurations](https://docs.microsoft.com/en-us/rest/api/azure/devops/policy/configurations/create?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Branch Policies can be imported using the project ID and policy configuration ID\n\n```sh\n $ pulumi import azuredevops:Policy/branchPolicyMinReviewers:BranchPolicyMinReviewers example 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "settings": {
                    "$ref": "#/types/azuredevops:Policy/BranchPolicyMinReviewersSettings:BranchPolicyMinReviewersSettings",
                    "description": "A `settings` block as defined below.. This block must be defined exactly once.\n"
                }
            },
            "required": [
                "projectId",
                "settings"
            ],
            "inputProperties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n",
                    "willReplaceOnChanges": true
                },
                "settings": {
                    "$ref": "#/types/azuredevops:Policy/BranchPolicyMinReviewersSettings:BranchPolicyMinReviewersSettings",
                    "description": "A `settings` block as defined below.. This block must be defined exactly once.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "settings"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BranchPolicyMinReviewers resources.\n",
                "properties": {
                    "blocking": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the policy will be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "settings": {
                        "$ref": "#/types/azuredevops:Policy/BranchPolicyMinReviewersSettings:BranchPolicyMinReviewersSettings",
                        "description": "A `settings` block as defined below.. This block must be defined exactly once.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.policy.BranchPolicyMinReviewers has been deprecated in favor of azuredevops.BranchPolicyMinReviewers"
        },
        "azuredevops:Repository/git:Git": {
            "description": "\n\n\n## Import\n\nAzure DevOps Repositories can be imported using the repo name or by the repo Guid e.g.\n\n```sh\n $ pulumi import azuredevops:Repository/git:Git example projectName/repoName\n```\n\n or\n\n```sh\n $ pulumi import azuredevops:Repository/git:Git example projectName/00000000-0000-0000-0000-000000000000\n```\n\n hcl resource \"azuredevops_project\" \"example\" {\n\n name\n\n\n\n\n\n\n\n\n\n\n\n\n\n = \"Example Project\"\n\n visibility\n\n\n\n\n\n\n\n = \"private\"\n\n version_control\n\n\n\n= \"Git\"\n\n work_item_template = \"Agile\" } resource \"azuredevops_git_repository\" \"example\" {\n\n project_id\n\n\n\n = azuredevops_project.example.id\n\n name\n\n\n\n\n\n\n\n\n\n = \"Example Git Repository\"\n\n default_branch = \"refs/heads/main\"\n\n initialization {\n\n\n\n init_type = \"Clean\"\n\n }\n\n lifecycle {\n\n\n\n ignore_changes = [\n\n\n\n\n\n # Ignore changes to initialization to support importing existing repositories\n\n\n\n\n\n # Given that a repo now exists, either imported into terraform state or created by terraform,\n\n\n\n\n\n # we don't care for the configuration of initialization against the existing resource\n\n\n\n\n\n initialization,\n\n\n\n ]\n\n } } ",
            "properties": {
                "defaultBranch": {
                    "type": "string",
                    "description": "The ref of the default branch. Will be used as the branch name for initialized repositories.\n"
                },
                "initialization": {
                    "$ref": "#/types/azuredevops:Repository/GitInitialization:GitInitialization",
                    "description": "An `initialization` block as documented below.\n"
                },
                "isFork": {
                    "type": "boolean",
                    "description": "True if the repository was created as a fork.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the git repository.\n"
                },
                "parentRepositoryId": {
                    "type": "string",
                    "description": "The ID of a Git project from which a fork is to be created.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "remoteUrl": {
                    "type": "string",
                    "description": "Git HTTPS URL of the repository\n"
                },
                "size": {
                    "type": "integer",
                    "description": "Size in bytes.\n"
                },
                "sshUrl": {
                    "type": "string",
                    "description": "Git SSH URL of the repository.\n"
                },
                "url": {
                    "type": "string",
                    "description": "REST API URL of the repository.\n"
                },
                "webUrl": {
                    "type": "string",
                    "description": "Web link to the repository.\n"
                }
            },
            "required": [
                "defaultBranch",
                "initialization",
                "isFork",
                "name",
                "projectId",
                "remoteUrl",
                "size",
                "sshUrl",
                "url",
                "webUrl"
            ],
            "inputProperties": {
                "defaultBranch": {
                    "type": "string",
                    "description": "The ref of the default branch. Will be used as the branch name for initialized repositories.\n"
                },
                "initialization": {
                    "$ref": "#/types/azuredevops:Repository/GitInitialization:GitInitialization",
                    "description": "An `initialization` block as documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the git repository.\n"
                },
                "parentRepositoryId": {
                    "type": "string",
                    "description": "The ID of a Git project from which a fork is to be created.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "initialization",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Git resources.\n",
                "properties": {
                    "defaultBranch": {
                        "type": "string",
                        "description": "The ref of the default branch. Will be used as the branch name for initialized repositories.\n"
                    },
                    "initialization": {
                        "$ref": "#/types/azuredevops:Repository/GitInitialization:GitInitialization",
                        "description": "An `initialization` block as documented below.\n"
                    },
                    "isFork": {
                        "type": "boolean",
                        "description": "True if the repository was created as a fork.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the git repository.\n"
                    },
                    "parentRepositoryId": {
                        "type": "string",
                        "description": "The ID of a Git project from which a fork is to be created.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n",
                        "willReplaceOnChanges": true
                    },
                    "remoteUrl": {
                        "type": "string",
                        "description": "Git HTTPS URL of the repository\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "Size in bytes.\n"
                    },
                    "sshUrl": {
                        "type": "string",
                        "description": "Git SSH URL of the repository.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "REST API URL of the repository.\n"
                    },
                    "webUrl": {
                        "type": "string",
                        "description": "Web link to the repository.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.repository.Git has been deprecated in favor of azuredevops.Git"
        },
        "azuredevops:Security/resourceAuthorization:ResourceAuthorization": {
            "description": "Manages authorization of resources, e.g. for access in build pipelines.\n\nCurrently supported resources: service endpoint (aka service connection, endpoint).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceEndpointBitBucket = new azuredevops.ServiceEndpointBitBucket(\"exampleServiceEndpointBitBucket\", {\n    projectId: exampleProject.id,\n    username: \"username\",\n    password: \"password\",\n    serviceEndpointName: \"example-bitbucket\",\n    description: \"Managed by Terraform\",\n});\nconst exampleResourceAuthorization = new azuredevops.ResourceAuthorization(\"exampleResourceAuthorization\", {\n    projectId: exampleProject.id,\n    resourceId: exampleServiceEndpointBitBucket.id,\n    authorized: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_service_endpoint_bit_bucket = azuredevops.ServiceEndpointBitBucket(\"exampleServiceEndpointBitBucket\",\n    project_id=example_project.id,\n    username=\"username\",\n    password=\"password\",\n    service_endpoint_name=\"example-bitbucket\",\n    description=\"Managed by Terraform\")\nexample_resource_authorization = azuredevops.ResourceAuthorization(\"exampleResourceAuthorization\",\n    project_id=example_project.id,\n    resource_id=example_service_endpoint_bit_bucket.id,\n    authorized=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceEndpointBitBucket = new AzureDevOps.ServiceEndpointBitBucket(\"exampleServiceEndpointBitBucket\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Username = \"username\",\n        Password = \"password\",\n        ServiceEndpointName = \"example-bitbucket\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleResourceAuthorization = new AzureDevOps.ResourceAuthorization(\"exampleResourceAuthorization\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ResourceId = exampleServiceEndpointBitBucket.Id,\n        Authorized = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleServiceEndpointBitBucket, err := azuredevops.NewServiceEndpointBitBucket(ctx, \"exampleServiceEndpointBitBucket\", \u0026azuredevops.ServiceEndpointBitBucketArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tUsername:            pulumi.String(\"username\"),\n\t\t\tPassword:            pulumi.String(\"password\"),\n\t\t\tServiceEndpointName: pulumi.String(\"example-bitbucket\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewResourceAuthorization(ctx, \"exampleResourceAuthorization\", \u0026azuredevops.ResourceAuthorizationArgs{\n\t\t\tProjectId:  exampleProject.ID(),\n\t\t\tResourceId: exampleServiceEndpointBitBucket.ID(),\n\t\t\tAuthorized: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointBitBucket;\nimport com.pulumi.azuredevops.ServiceEndpointBitBucketArgs;\nimport com.pulumi.azuredevops.ResourceAuthorization;\nimport com.pulumi.azuredevops.ResourceAuthorizationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceEndpointBitBucket = new ServiceEndpointBitBucket(\"exampleServiceEndpointBitBucket\", ServiceEndpointBitBucketArgs.builder()        \n            .projectId(exampleProject.id())\n            .username(\"username\")\n            .password(\"password\")\n            .serviceEndpointName(\"example-bitbucket\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleResourceAuthorization = new ResourceAuthorization(\"exampleResourceAuthorization\", ResourceAuthorizationArgs.builder()        \n            .projectId(exampleProject.id())\n            .resourceId(exampleServiceEndpointBitBucket.id())\n            .authorized(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceEndpointBitBucket:\n    type: azuredevops:ServiceEndpointBitBucket\n    properties:\n      projectId: ${exampleProject.id}\n      username: username\n      password: password\n      serviceEndpointName: example-bitbucket\n      description: Managed by Terraform\n  exampleResourceAuthorization:\n    type: azuredevops:ResourceAuthorization\n    properties:\n      projectId: ${exampleProject.id}\n      resourceId: ${exampleServiceEndpointBitBucket.id}\n      authorized: true\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Authorize Definition Resource](https://docs.microsoft.com/en-us/rest/api/azure/devops/build/resources/authorize%20definition%20resources?view=azure-devops-rest-7.0)\n",
            "properties": {
                "authorized": {
                    "type": "boolean",
                    "description": "Set to true to allow public access in the project. Type: boolean.\n"
                },
                "definitionId": {
                    "type": "integer",
                    "description": "The ID of the build definition to authorize. Type: string.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name. Type: string.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The ID of the resource to authorize. Type: string.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the resource to authorize. Type: string. Valid values: `endpoint`, `queue`, `variablegroup`. Default value: `endpoint`.\n"
                }
            },
            "required": [
                "authorized",
                "projectId",
                "resourceId"
            ],
            "inputProperties": {
                "authorized": {
                    "type": "boolean",
                    "description": "Set to true to allow public access in the project. Type: boolean.\n"
                },
                "definitionId": {
                    "type": "integer",
                    "description": "The ID of the build definition to authorize. Type: string.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name. Type: string.\n",
                    "willReplaceOnChanges": true
                },
                "resourceId": {
                    "type": "string",
                    "description": "The ID of the resource to authorize. Type: string.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the resource to authorize. Type: string. Valid values: `endpoint`, `queue`, `variablegroup`. Default value: `endpoint`.\n"
                }
            },
            "requiredInputs": [
                "authorized",
                "projectId",
                "resourceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ResourceAuthorization resources.\n",
                "properties": {
                    "authorized": {
                        "type": "boolean",
                        "description": "Set to true to allow public access in the project. Type: boolean.\n"
                    },
                    "definitionId": {
                        "type": "integer",
                        "description": "The ID of the build definition to authorize. Type: string.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name. Type: string.\n",
                        "willReplaceOnChanges": true
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "The ID of the resource to authorize. Type: string.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the resource to authorize. Type: string. Valid values: `endpoint`, `queue`, `variablegroup`. Default value: `endpoint`.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.security.ResourceAuthorization has been deprecated in favor of azuredevops.ResourceAuthorization"
        },
        "azuredevops:ServiceEndpoint/azureRM:AzureRM": {
            "description": "Manages Manual or Automatic AzureRM service endpoint within Azure DevOps.\n\n## Requirements (Manual AzureRM Service Endpoint)\n\nBefore to create a service end point in Azure DevOps, you need to create a Service Principal in your Azure subscription.\n\nFor detailed steps to create a service principal with Azure cli see the [documentation](https://docs.microsoft.com/en-us/cli/azure/create-an-azure-service-principal-azure-cli?view=azure-cli-latest)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Service Principal Manual AzureRM Service Endpoint (Subscription Scoped)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceEndpointAzureRM = new azuredevops.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example AzureRM\",\n    description: \"Managed by Terraform\",\n    serviceEndpointAuthenticationScheme: \"ServicePrincipal\",\n    credentials: {\n        serviceprincipalid: \"00000000-0000-0000-0000-000000000000\",\n        serviceprincipalkey: \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    },\n    azurermSpnTenantid: \"00000000-0000-0000-0000-000000000000\",\n    azurermSubscriptionId: \"00000000-0000-0000-0000-000000000000\",\n    azurermSubscriptionName: \"Example Subscription Name\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_service_endpoint_azure_rm = azuredevops.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example AzureRM\",\n    description=\"Managed by Terraform\",\n    service_endpoint_authentication_scheme=\"ServicePrincipal\",\n    credentials=azuredevops.ServiceEndpointAzureRMCredentialsArgs(\n        serviceprincipalid=\"00000000-0000-0000-0000-000000000000\",\n        serviceprincipalkey=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    ),\n    azurerm_spn_tenantid=\"00000000-0000-0000-0000-000000000000\",\n    azurerm_subscription_id=\"00000000-0000-0000-0000-000000000000\",\n    azurerm_subscription_name=\"Example Subscription Name\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceEndpointAzureRM = new AzureDevOps.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example AzureRM\",\n        Description = \"Managed by Terraform\",\n        ServiceEndpointAuthenticationScheme = \"ServicePrincipal\",\n        Credentials = new AzureDevOps.Inputs.ServiceEndpointAzureRMCredentialsArgs\n        {\n            Serviceprincipalid = \"00000000-0000-0000-0000-000000000000\",\n            Serviceprincipalkey = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n        },\n        AzurermSpnTenantid = \"00000000-0000-0000-0000-000000000000\",\n        AzurermSubscriptionId = \"00000000-0000-0000-0000-000000000000\",\n        AzurermSubscriptionName = \"Example Subscription Name\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointAzureRM(ctx, \"exampleServiceEndpointAzureRM\", \u0026azuredevops.ServiceEndpointAzureRMArgs{\n\t\t\tProjectId:                           exampleProject.ID(),\n\t\t\tServiceEndpointName:                 pulumi.String(\"Example AzureRM\"),\n\t\t\tDescription:                         pulumi.String(\"Managed by Terraform\"),\n\t\t\tServiceEndpointAuthenticationScheme: pulumi.String(\"ServicePrincipal\"),\n\t\t\tCredentials: \u0026azuredevops.ServiceEndpointAzureRMCredentialsArgs{\n\t\t\t\tServiceprincipalid:  pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\t\tServiceprincipalkey: pulumi.String(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"),\n\t\t\t},\n\t\t\tAzurermSpnTenantid:      pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurermSubscriptionId:   pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurermSubscriptionName: pulumi.String(\"Example Subscription Name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointAzureRM;\nimport com.pulumi.azuredevops.ServiceEndpointAzureRMArgs;\nimport com.pulumi.azuredevops.inputs.ServiceEndpointAzureRMCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceEndpointAzureRM = new ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", ServiceEndpointAzureRMArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example AzureRM\")\n            .description(\"Managed by Terraform\")\n            .serviceEndpointAuthenticationScheme(\"ServicePrincipal\")\n            .credentials(ServiceEndpointAzureRMCredentialsArgs.builder()\n                .serviceprincipalid(\"00000000-0000-0000-0000-000000000000\")\n                .serviceprincipalkey(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\")\n                .build())\n            .azurermSpnTenantid(\"00000000-0000-0000-0000-000000000000\")\n            .azurermSubscriptionId(\"00000000-0000-0000-0000-000000000000\")\n            .azurermSubscriptionName(\"Example Subscription Name\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceEndpointAzureRM:\n    type: azuredevops:ServiceEndpointAzureRM\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example AzureRM\n      description: Managed by Terraform\n      serviceEndpointAuthenticationScheme: ServicePrincipal\n      credentials:\n        serviceprincipalid: 00000000-0000-0000-0000-000000000000\n        serviceprincipalkey: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n      azurermSpnTenantid: 00000000-0000-0000-0000-000000000000\n      azurermSubscriptionId: 00000000-0000-0000-0000-000000000000\n      azurermSubscriptionName: Example Subscription Name\n```\n{{% /example %}}\n{{% example %}}\n### Service Principal Manual AzureRM Service Endpoint (ManagementGroup Scoped)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceEndpointAzureRM = new azuredevops.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example AzureRM\",\n    description: \"Managed by Terraform\",\n    serviceEndpointAuthenticationScheme: \"ServicePrincipal\",\n    credentials: {\n        serviceprincipalid: \"00000000-0000-0000-0000-000000000000\",\n        serviceprincipalkey: \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    },\n    azurermSpnTenantid: \"00000000-0000-0000-0000-000000000000\",\n    azurermManagementGroupId: \"managementGroup\",\n    azurermManagementGroupName: \"managementGroup\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_service_endpoint_azure_rm = azuredevops.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example AzureRM\",\n    description=\"Managed by Terraform\",\n    service_endpoint_authentication_scheme=\"ServicePrincipal\",\n    credentials=azuredevops.ServiceEndpointAzureRMCredentialsArgs(\n        serviceprincipalid=\"00000000-0000-0000-0000-000000000000\",\n        serviceprincipalkey=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    ),\n    azurerm_spn_tenantid=\"00000000-0000-0000-0000-000000000000\",\n    azurerm_management_group_id=\"managementGroup\",\n    azurerm_management_group_name=\"managementGroup\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceEndpointAzureRM = new AzureDevOps.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example AzureRM\",\n        Description = \"Managed by Terraform\",\n        ServiceEndpointAuthenticationScheme = \"ServicePrincipal\",\n        Credentials = new AzureDevOps.Inputs.ServiceEndpointAzureRMCredentialsArgs\n        {\n            Serviceprincipalid = \"00000000-0000-0000-0000-000000000000\",\n            Serviceprincipalkey = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n        },\n        AzurermSpnTenantid = \"00000000-0000-0000-0000-000000000000\",\n        AzurermManagementGroupId = \"managementGroup\",\n        AzurermManagementGroupName = \"managementGroup\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointAzureRM(ctx, \"exampleServiceEndpointAzureRM\", \u0026azuredevops.ServiceEndpointAzureRMArgs{\n\t\t\tProjectId:                           exampleProject.ID(),\n\t\t\tServiceEndpointName:                 pulumi.String(\"Example AzureRM\"),\n\t\t\tDescription:                         pulumi.String(\"Managed by Terraform\"),\n\t\t\tServiceEndpointAuthenticationScheme: pulumi.String(\"ServicePrincipal\"),\n\t\t\tCredentials: \u0026azuredevops.ServiceEndpointAzureRMCredentialsArgs{\n\t\t\t\tServiceprincipalid:  pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\t\tServiceprincipalkey: pulumi.String(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"),\n\t\t\t},\n\t\t\tAzurermSpnTenantid:         pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurermManagementGroupId:   pulumi.String(\"managementGroup\"),\n\t\t\tAzurermManagementGroupName: pulumi.String(\"managementGroup\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointAzureRM;\nimport com.pulumi.azuredevops.ServiceEndpointAzureRMArgs;\nimport com.pulumi.azuredevops.inputs.ServiceEndpointAzureRMCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceEndpointAzureRM = new ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", ServiceEndpointAzureRMArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example AzureRM\")\n            .description(\"Managed by Terraform\")\n            .serviceEndpointAuthenticationScheme(\"ServicePrincipal\")\n            .credentials(ServiceEndpointAzureRMCredentialsArgs.builder()\n                .serviceprincipalid(\"00000000-0000-0000-0000-000000000000\")\n                .serviceprincipalkey(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\")\n                .build())\n            .azurermSpnTenantid(\"00000000-0000-0000-0000-000000000000\")\n            .azurermManagementGroupId(\"managementGroup\")\n            .azurermManagementGroupName(\"managementGroup\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceEndpointAzureRM:\n    type: azuredevops:ServiceEndpointAzureRM\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example AzureRM\n      description: Managed by Terraform\n      serviceEndpointAuthenticationScheme: ServicePrincipal\n      credentials:\n        serviceprincipalid: 00000000-0000-0000-0000-000000000000\n        serviceprincipalkey: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n      azurermSpnTenantid: 00000000-0000-0000-0000-000000000000\n      azurermManagementGroupId: managementGroup\n      azurermManagementGroupName: managementGroup\n```\n{{% /example %}}\n{{% example %}}\n### Service Principal Automatic AzureRM Service Endpoint\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst exampleServiceEndpointAzureRM = new azuredevops.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example AzureRM\",\n    serviceEndpointAuthenticationScheme: \"ServicePrincipal\",\n    azurermSpnTenantid: \"00000000-0000-0000-0000-000000000000\",\n    azurermSubscriptionId: \"00000000-0000-0000-0000-000000000000\",\n    azurermSubscriptionName: \"Example Subscription Name\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nexample_service_endpoint_azure_rm = azuredevops.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example AzureRM\",\n    service_endpoint_authentication_scheme=\"ServicePrincipal\",\n    azurerm_spn_tenantid=\"00000000-0000-0000-0000-000000000000\",\n    azurerm_subscription_id=\"00000000-0000-0000-0000-000000000000\",\n    azurerm_subscription_name=\"Example Subscription Name\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n    });\n\n    var exampleServiceEndpointAzureRM = new AzureDevOps.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example AzureRM\",\n        ServiceEndpointAuthenticationScheme = \"ServicePrincipal\",\n        AzurermSpnTenantid = \"00000000-0000-0000-0000-000000000000\",\n        AzurermSubscriptionId = \"00000000-0000-0000-0000-000000000000\",\n        AzurermSubscriptionName = \"Example Subscription Name\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointAzureRM(ctx, \"exampleServiceEndpointAzureRM\", \u0026azuredevops.ServiceEndpointAzureRMArgs{\n\t\t\tProjectId:                           exampleProject.ID(),\n\t\t\tServiceEndpointName:                 pulumi.String(\"Example AzureRM\"),\n\t\t\tServiceEndpointAuthenticationScheme: pulumi.String(\"ServicePrincipal\"),\n\t\t\tAzurermSpnTenantid:                  pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurermSubscriptionId:               pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurermSubscriptionName:             pulumi.String(\"Example Subscription Name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointAzureRM;\nimport com.pulumi.azuredevops.ServiceEndpointAzureRMArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .build());\n\n        var exampleServiceEndpointAzureRM = new ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", ServiceEndpointAzureRMArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example AzureRM\")\n            .serviceEndpointAuthenticationScheme(\"ServicePrincipal\")\n            .azurermSpnTenantid(\"00000000-0000-0000-0000-000000000000\")\n            .azurermSubscriptionId(\"00000000-0000-0000-0000-000000000000\")\n            .azurermSubscriptionName(\"Example Subscription Name\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n  exampleServiceEndpointAzureRM:\n    type: azuredevops:ServiceEndpointAzureRM\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example AzureRM\n      serviceEndpointAuthenticationScheme: ServicePrincipal\n      azurermSpnTenantid: 00000000-0000-0000-0000-000000000000\n      azurermSubscriptionId: 00000000-0000-0000-0000-000000000000\n      azurermSubscriptionName: Example Subscription Name\n```\n{{% /example %}}\n{{% example %}}\n### Workload Identity Federation Manual AzureRM Service Endpoint (Subscription Scoped)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\nimport * as azurerm from \"@pulumi/azurerm\";\n\nconst serviceConnectionName = \"example-federated-sc\";\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst identity = new azurerm.index.Azurerm_resource_group(\"identity\", {\n    name: \"identity\",\n    location: \"UK South\",\n});\nconst exampleazurerm_user_assigned_identity = new azurerm.index.Azurerm_user_assigned_identity(\"exampleazurerm_user_assigned_identity\", {\n    location: identity.location,\n    name: \"example-identity\",\n    resourceGroupName: \"azurerm_resource_group.identity.name\",\n});\nconst exampleServiceEndpointAzureRM = new azuredevops.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: serviceConnectionName,\n    description: \"Managed by Terraform\",\n    serviceEndpointAuthenticationScheme: \"WorkloadIdentityFederation\",\n    credentials: {\n        serviceprincipalid: exampleazurerm_user_assigned_identity.clientId,\n    },\n    azurermSpnTenantid: \"00000000-0000-0000-0000-000000000000\",\n    azurermSubscriptionId: \"00000000-0000-0000-0000-000000000000\",\n    azurermSubscriptionName: \"Example Subscription Name\",\n});\nconst exampleazurerm_federated_identity_credential = new azurerm.index.Azurerm_federated_identity_credential(\"exampleazurerm_federated_identity_credential\", {\n    name: \"example-federated-credential\",\n    resourceGroupName: identity.name,\n    parentId: exampleazurerm_user_assigned_identity.id,\n    audience: [\"api://AzureADTokenExchange\"],\n    issuer: exampleServiceEndpointAzureRM.workloadIdentityFederationIssuer,\n    subject: exampleServiceEndpointAzureRM.workloadIdentityFederationSubject,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\nimport pulumi_azurerm as azurerm\n\nservice_connection_name = \"example-federated-sc\"\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nidentity = azurerm.index.Azurerm_resource_group(\"identity\",\n    name=identity,\n    location=UK South)\nexampleazurerm_user_assigned_identity = azurerm.index.Azurerm_user_assigned_identity(\"exampleazurerm_user_assigned_identity\",\n    location=identity.location,\n    name=example-identity,\n    resource_group_name=azurerm_resource_group.identity.name)\nexample_service_endpoint_azure_rm = azuredevops.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\",\n    project_id=example_project.id,\n    service_endpoint_name=service_connection_name,\n    description=\"Managed by Terraform\",\n    service_endpoint_authentication_scheme=\"WorkloadIdentityFederation\",\n    credentials=azuredevops.ServiceEndpointAzureRMCredentialsArgs(\n        serviceprincipalid=exampleazurerm_user_assigned_identity[\"clientId\"],\n    ),\n    azurerm_spn_tenantid=\"00000000-0000-0000-0000-000000000000\",\n    azurerm_subscription_id=\"00000000-0000-0000-0000-000000000000\",\n    azurerm_subscription_name=\"Example Subscription Name\")\nexampleazurerm_federated_identity_credential = azurerm.index.Azurerm_federated_identity_credential(\"exampleazurerm_federated_identity_credential\",\n    name=example-federated-credential,\n    resource_group_name=identity.name,\n    parent_id=exampleazurerm_user_assigned_identity.id,\n    audience=[api://AzureADTokenExchange],\n    issuer=example_service_endpoint_azure_rm.workload_identity_federation_issuer,\n    subject=example_service_endpoint_azure_rm.workload_identity_federation_subject)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\nusing Azurerm = Pulumi.Azurerm;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var serviceConnectionName = \"example-federated-sc\";\n\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var identity = new Azurerm.Index.Azurerm_resource_group(\"identity\", new()\n    {\n        Name = \"identity\",\n        Location = \"UK South\",\n    });\n\n    var exampleazurerm_user_assigned_identity = new Azurerm.Index.Azurerm_user_assigned_identity(\"exampleazurerm_user_assigned_identity\", new()\n    {\n        Location = identity.Location,\n        Name = \"example-identity\",\n        ResourceGroupName = \"azurerm_resource_group.identity.name\",\n    });\n\n    var exampleServiceEndpointAzureRM = new AzureDevOps.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = serviceConnectionName,\n        Description = \"Managed by Terraform\",\n        ServiceEndpointAuthenticationScheme = \"WorkloadIdentityFederation\",\n        Credentials = new AzureDevOps.Inputs.ServiceEndpointAzureRMCredentialsArgs\n        {\n            Serviceprincipalid = exampleazurerm_user_assigned_identity.ClientId,\n        },\n        AzurermSpnTenantid = \"00000000-0000-0000-0000-000000000000\",\n        AzurermSubscriptionId = \"00000000-0000-0000-0000-000000000000\",\n        AzurermSubscriptionName = \"Example Subscription Name\",\n    });\n\n    var exampleazurerm_federated_identity_credential = new Azurerm.Index.Azurerm_federated_identity_credential(\"exampleazurerm_federated_identity_credential\", new()\n    {\n        Name = \"example-federated-credential\",\n        ResourceGroupName = identity.Name,\n        ParentId = exampleazurerm_user_assigned_identity.Id,\n        Audience = new[]\n        {\n            \"api://AzureADTokenExchange\",\n        },\n        Issuer = exampleServiceEndpointAzureRM.WorkloadIdentityFederationIssuer,\n        Subject = exampleServiceEndpointAzureRM.WorkloadIdentityFederationSubject,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi-azurerm/sdk/v1/go/azurerm\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tserviceConnectionName := \"example-federated-sc\"\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tidentity, err := index.NewAzurerm_resource_group(ctx, \"identity\", \u0026index.Azurerm_resource_groupArgs{\n\t\t\tName:     \"identity\",\n\t\t\tLocation: \"UK South\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleazurerm_user_assigned_identity, err := index.NewAzurerm_user_assigned_identity(ctx, \"exampleazurerm_user_assigned_identity\", \u0026index.Azurerm_user_assigned_identityArgs{\n\t\t\tLocation:          identity.Location,\n\t\t\tName:              \"example-identity\",\n\t\t\tResourceGroupName: \"azurerm_resource_group.identity.name\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleServiceEndpointAzureRM, err := azuredevops.NewServiceEndpointAzureRM(ctx, \"exampleServiceEndpointAzureRM\", \u0026azuredevops.ServiceEndpointAzureRMArgs{\n\t\t\tProjectId:                           exampleProject.ID(),\n\t\t\tServiceEndpointName:                 pulumi.String(serviceConnectionName),\n\t\t\tDescription:                         pulumi.String(\"Managed by Terraform\"),\n\t\t\tServiceEndpointAuthenticationScheme: pulumi.String(\"WorkloadIdentityFederation\"),\n\t\t\tCredentials: \u0026azuredevops.ServiceEndpointAzureRMCredentialsArgs{\n\t\t\t\tServiceprincipalid: exampleazurerm_user_assigned_identity.ClientId,\n\t\t\t},\n\t\t\tAzurermSpnTenantid:      pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurermSubscriptionId:   pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurermSubscriptionName: pulumi.String(\"Example Subscription Name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = index.NewAzurerm_federated_identity_credential(ctx, \"exampleazurerm_federated_identity_credential\", \u0026index.Azurerm_federated_identity_credentialArgs{\n\t\t\tName:              \"example-federated-credential\",\n\t\t\tResourceGroupName: identity.Name,\n\t\t\tParentId:          exampleazurerm_user_assigned_identity.Id,\n\t\t\tAudience: []string{\n\t\t\t\t\"api://AzureADTokenExchange\",\n\t\t\t},\n\t\t\tIssuer:  exampleServiceEndpointAzureRM.WorkloadIdentityFederationIssuer,\n\t\t\tSubject: exampleServiceEndpointAzureRM.WorkloadIdentityFederationSubject,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azurerm.azurerm_resource_group;\nimport com.pulumi.azurerm.Azurerm_resource_groupArgs;\nimport com.pulumi.azurerm.azurerm_user_assigned_identity;\nimport com.pulumi.azurerm.Azurerm_user_assigned_identityArgs;\nimport com.pulumi.azuredevops.ServiceEndpointAzureRM;\nimport com.pulumi.azuredevops.ServiceEndpointAzureRMArgs;\nimport com.pulumi.azuredevops.inputs.ServiceEndpointAzureRMCredentialsArgs;\nimport com.pulumi.azurerm.azurerm_federated_identity_credential;\nimport com.pulumi.azurerm.Azurerm_federated_identity_credentialArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var serviceConnectionName = \"example-federated-sc\";\n\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var identity = new Azurerm_resource_group(\"identity\", Azurerm_resource_groupArgs.builder()        \n            .name(\"identity\")\n            .location(\"UK South\")\n            .build());\n\n        var exampleazurerm_user_assigned_identity = new Azurerm_user_assigned_identity(\"exampleazurerm_user_assigned_identity\", Azurerm_user_assigned_identityArgs.builder()        \n            .location(identity.location())\n            .name(\"example-identity\")\n            .resourceGroupName(\"azurerm_resource_group.identity.name\")\n            .build());\n\n        var exampleServiceEndpointAzureRM = new ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", ServiceEndpointAzureRMArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(serviceConnectionName)\n            .description(\"Managed by Terraform\")\n            .serviceEndpointAuthenticationScheme(\"WorkloadIdentityFederation\")\n            .credentials(ServiceEndpointAzureRMCredentialsArgs.builder()\n                .serviceprincipalid(exampleazurerm_user_assigned_identity.clientId())\n                .build())\n            .azurermSpnTenantid(\"00000000-0000-0000-0000-000000000000\")\n            .azurermSubscriptionId(\"00000000-0000-0000-0000-000000000000\")\n            .azurermSubscriptionName(\"Example Subscription Name\")\n            .build());\n\n        var exampleazurerm_federated_identity_credential = new Azurerm_federated_identity_credential(\"exampleazurerm_federated_identity_credential\", Azurerm_federated_identity_credentialArgs.builder()        \n            .name(\"example-federated-credential\")\n            .resourceGroupName(identity.name())\n            .parentId(exampleazurerm_user_assigned_identity.id())\n            .audience(\"api://AzureADTokenExchange\")\n            .issuer(exampleServiceEndpointAzureRM.workloadIdentityFederationIssuer())\n            .subject(exampleServiceEndpointAzureRM.workloadIdentityFederationSubject())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  identity:\n    type: azurerm:azurerm_resource_group\n    properties:\n      name: identity\n      location: UK South\n  exampleazurerm_user_assigned_identity:\n    type: azurerm:azurerm_user_assigned_identity\n    properties:\n      location: ${identity.location}\n      name: example-identity\n      resourceGroupName: azurerm_resource_group.identity.name\n  exampleServiceEndpointAzureRM:\n    type: azuredevops:ServiceEndpointAzureRM\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: ${serviceConnectionName}\n      description: Managed by Terraform\n      serviceEndpointAuthenticationScheme: WorkloadIdentityFederation\n      credentials:\n        serviceprincipalid: ${exampleazurerm_user_assigned_identity.clientId}\n      azurermSpnTenantid: 00000000-0000-0000-0000-000000000000\n      azurermSubscriptionId: 00000000-0000-0000-0000-000000000000\n      azurermSubscriptionName: Example Subscription Name\n  exampleazurerm_federated_identity_credential:\n    type: azurerm:azurerm_federated_identity_credential\n    properties:\n      name: example-federated-credential\n      resourceGroupName: ${identity.name}\n      parentId: ${exampleazurerm_user_assigned_identity.id}\n      audience:\n        - api://AzureADTokenExchange\n      issuer: ${exampleServiceEndpointAzureRM.workloadIdentityFederationIssuer}\n      subject: ${exampleServiceEndpointAzureRM.workloadIdentityFederationSubject}\nvariables:\n  serviceConnectionName: example-federated-sc\n```\n{{% /example %}}\n{{% example %}}\n### Workload Identity Federation Automatic AzureRM Service Endpoint\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst exampleServiceEndpointAzureRM = new azuredevops.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example AzureRM\",\n    serviceEndpointAuthenticationScheme: \"WorkloadIdentityFederation\",\n    azurermSpnTenantid: \"00000000-0000-0000-0000-000000000000\",\n    azurermSubscriptionId: \"00000000-0000-0000-0000-000000000000\",\n    azurermSubscriptionName: \"Example Subscription Name\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nexample_service_endpoint_azure_rm = azuredevops.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example AzureRM\",\n    service_endpoint_authentication_scheme=\"WorkloadIdentityFederation\",\n    azurerm_spn_tenantid=\"00000000-0000-0000-0000-000000000000\",\n    azurerm_subscription_id=\"00000000-0000-0000-0000-000000000000\",\n    azurerm_subscription_name=\"Example Subscription Name\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n    });\n\n    var exampleServiceEndpointAzureRM = new AzureDevOps.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example AzureRM\",\n        ServiceEndpointAuthenticationScheme = \"WorkloadIdentityFederation\",\n        AzurermSpnTenantid = \"00000000-0000-0000-0000-000000000000\",\n        AzurermSubscriptionId = \"00000000-0000-0000-0000-000000000000\",\n        AzurermSubscriptionName = \"Example Subscription Name\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointAzureRM(ctx, \"exampleServiceEndpointAzureRM\", \u0026azuredevops.ServiceEndpointAzureRMArgs{\n\t\t\tProjectId:                           exampleProject.ID(),\n\t\t\tServiceEndpointName:                 pulumi.String(\"Example AzureRM\"),\n\t\t\tServiceEndpointAuthenticationScheme: pulumi.String(\"WorkloadIdentityFederation\"),\n\t\t\tAzurermSpnTenantid:                  pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurermSubscriptionId:               pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurermSubscriptionName:             pulumi.String(\"Example Subscription Name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointAzureRM;\nimport com.pulumi.azuredevops.ServiceEndpointAzureRMArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .build());\n\n        var exampleServiceEndpointAzureRM = new ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", ServiceEndpointAzureRMArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example AzureRM\")\n            .serviceEndpointAuthenticationScheme(\"WorkloadIdentityFederation\")\n            .azurermSpnTenantid(\"00000000-0000-0000-0000-000000000000\")\n            .azurermSubscriptionId(\"00000000-0000-0000-0000-000000000000\")\n            .azurermSubscriptionName(\"Example Subscription Name\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n  exampleServiceEndpointAzureRM:\n    type: azuredevops:ServiceEndpointAzureRM\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example AzureRM\n      serviceEndpointAuthenticationScheme: WorkloadIdentityFederation\n      azurermSpnTenantid: 00000000-0000-0000-0000-000000000000\n      azurermSubscriptionId: 00000000-0000-0000-0000-000000000000\n      azurermSubscriptionName: Example Subscription Name\n```\n{{% /example %}}\n{{% example %}}\n### Managed Identity AzureRM Service Endpoint\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst exampleServiceEndpointAzureRM = new azuredevops.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example AzureRM\",\n    serviceEndpointAuthenticationScheme: \"ManagedServiceIdentity\",\n    azurermSpnTenantid: \"00000000-0000-0000-0000-000000000000\",\n    azurermSubscriptionId: \"00000000-0000-0000-0000-000000000000\",\n    azurermSubscriptionName: \"Example Subscription Name\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nexample_service_endpoint_azure_rm = azuredevops.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example AzureRM\",\n    service_endpoint_authentication_scheme=\"ManagedServiceIdentity\",\n    azurerm_spn_tenantid=\"00000000-0000-0000-0000-000000000000\",\n    azurerm_subscription_id=\"00000000-0000-0000-0000-000000000000\",\n    azurerm_subscription_name=\"Example Subscription Name\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n    });\n\n    var exampleServiceEndpointAzureRM = new AzureDevOps.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example AzureRM\",\n        ServiceEndpointAuthenticationScheme = \"ManagedServiceIdentity\",\n        AzurermSpnTenantid = \"00000000-0000-0000-0000-000000000000\",\n        AzurermSubscriptionId = \"00000000-0000-0000-0000-000000000000\",\n        AzurermSubscriptionName = \"Example Subscription Name\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointAzureRM(ctx, \"exampleServiceEndpointAzureRM\", \u0026azuredevops.ServiceEndpointAzureRMArgs{\n\t\t\tProjectId:                           exampleProject.ID(),\n\t\t\tServiceEndpointName:                 pulumi.String(\"Example AzureRM\"),\n\t\t\tServiceEndpointAuthenticationScheme: pulumi.String(\"ManagedServiceIdentity\"),\n\t\t\tAzurermSpnTenantid:                  pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurermSubscriptionId:               pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurermSubscriptionName:             pulumi.String(\"Example Subscription Name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointAzureRM;\nimport com.pulumi.azuredevops.ServiceEndpointAzureRMArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .build());\n\n        var exampleServiceEndpointAzureRM = new ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", ServiceEndpointAzureRMArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example AzureRM\")\n            .serviceEndpointAuthenticationScheme(\"ManagedServiceIdentity\")\n            .azurermSpnTenantid(\"00000000-0000-0000-0000-000000000000\")\n            .azurermSubscriptionId(\"00000000-0000-0000-0000-000000000000\")\n            .azurermSubscriptionName(\"Example Subscription Name\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n  exampleServiceEndpointAzureRM:\n    type: azuredevops:ServiceEndpointAzureRM\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example AzureRM\n      serviceEndpointAuthenticationScheme: ManagedServiceIdentity\n      azurermSpnTenantid: 00000000-0000-0000-0000-000000000000\n      azurermSubscriptionId: 00000000-0000-0000-0000-000000000000\n      azurermSubscriptionName: Example Subscription Name\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Service End points](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Service Endpoint Azure Resource Manage can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:ServiceEndpoint/azureRM:AzureRM example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "azurermManagementGroupId": {
                    "type": "string",
                    "description": "The Management group ID of the Azure targets.\n"
                },
                "azurermManagementGroupName": {
                    "type": "string",
                    "description": "The Management group Name of the targets.\n"
                },
                "azurermSpnTenantid": {
                    "type": "string",
                    "description": "The Tenant ID if the service principal.\n"
                },
                "azurermSubscriptionId": {
                    "type": "string",
                    "description": "The Subscription ID of the Azure targets.\n"
                },
                "azurermSubscriptionName": {
                    "type": "string",
                    "description": "The Subscription Name of the targets.\n"
                },
                "credentials": {
                    "$ref": "#/types/azuredevops:ServiceEndpoint/AzureRMCredentials:AzureRMCredentials",
                    "description": "A `credentials` block.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Service connection description.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "The Cloud Environment to use. Defaults to `AzureCloud`. Possible values are `AzureCloud`, `AzureChinaCloud`. Changing this forces a new resource to be created.\n\n\u003e **NOTE:** One of either `Subscription` scoped i.e. `azurerm_subscription_id`, `azurerm_subscription_name` or `ManagementGroup` scoped i.e. `azurerm_management_group_id`, `azurerm_management_group_name` values must be specified.\n"
                },
                "features": {
                    "$ref": "#/types/azuredevops:ServiceEndpoint/AzureRMFeatures:AzureRMFeatures",
                    "description": "A `features` block.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "resourceGroup": {
                    "type": "string",
                    "description": "The resource group used for scope of automatic service endpoint.\n"
                },
                "serviceEndpointAuthenticationScheme": {
                    "type": "string",
                    "description": "Specifies the type of azurerm endpoint, either `WorkloadIdentityFederation`, `ManagedServiceIdentity` or `ServicePrincipal`. Defaults to `ServicePrincipal` for backwards compatibility.\n\n\u003e **NOTE:** The `WorkloadIdentityFederation` authentication scheme is currently in private preview. Your organisation must be part of the preview and the feature toggle must be turned on to use it. More details can be found [here](https://aka.ms/azdo-rm-workload-identity).\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint Name.\n"
                },
                "servicePrincipalId": {
                    "type": "string",
                    "description": "The Application(Client) ID of the Service Principal.\n"
                },
                "workloadIdentityFederationIssuer": {
                    "type": "string",
                    "description": "The issuer if `service_endpoint_authentication_scheme` is set to `WorkloadIdentityFederation`. This looks like `https://vstoken.dev.azure.com/00000000-0000-0000-0000-000000000000`, where the GUID is the Organization ID of your Azure DevOps Organisation.\n"
                },
                "workloadIdentityFederationSubject": {
                    "type": "string",
                    "description": "The subject if `service_endpoint_authentication_scheme` is set to `WorkloadIdentityFederation`. This looks like `sc://\u003corganisation\u003e/\u003cproject\u003e/\u003cservice-connection-name\u003e`.\n"
                }
            },
            "required": [
                "authorization",
                "azurermSpnTenantid",
                "projectId",
                "serviceEndpointName",
                "servicePrincipalId",
                "workloadIdentityFederationIssuer",
                "workloadIdentityFederationSubject"
            ],
            "inputProperties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "azurermManagementGroupId": {
                    "type": "string",
                    "description": "The Management group ID of the Azure targets.\n"
                },
                "azurermManagementGroupName": {
                    "type": "string",
                    "description": "The Management group Name of the targets.\n"
                },
                "azurermSpnTenantid": {
                    "type": "string",
                    "description": "The Tenant ID if the service principal.\n"
                },
                "azurermSubscriptionId": {
                    "type": "string",
                    "description": "The Subscription ID of the Azure targets.\n"
                },
                "azurermSubscriptionName": {
                    "type": "string",
                    "description": "The Subscription Name of the targets.\n"
                },
                "credentials": {
                    "$ref": "#/types/azuredevops:ServiceEndpoint/AzureRMCredentials:AzureRMCredentials",
                    "description": "A `credentials` block.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Service connection description.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "The Cloud Environment to use. Defaults to `AzureCloud`. Possible values are `AzureCloud`, `AzureChinaCloud`. Changing this forces a new resource to be created.\n\n\u003e **NOTE:** One of either `Subscription` scoped i.e. `azurerm_subscription_id`, `azurerm_subscription_name` or `ManagementGroup` scoped i.e. `azurerm_management_group_id`, `azurerm_management_group_name` values must be specified.\n",
                    "willReplaceOnChanges": true
                },
                "features": {
                    "$ref": "#/types/azuredevops:ServiceEndpoint/AzureRMFeatures:AzureRMFeatures",
                    "description": "A `features` block.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n",
                    "willReplaceOnChanges": true
                },
                "resourceGroup": {
                    "type": "string",
                    "description": "The resource group used for scope of automatic service endpoint.\n",
                    "willReplaceOnChanges": true
                },
                "serviceEndpointAuthenticationScheme": {
                    "type": "string",
                    "description": "Specifies the type of azurerm endpoint, either `WorkloadIdentityFederation`, `ManagedServiceIdentity` or `ServicePrincipal`. Defaults to `ServicePrincipal` for backwards compatibility.\n\n\u003e **NOTE:** The `WorkloadIdentityFederation` authentication scheme is currently in private preview. Your organisation must be part of the preview and the feature toggle must be turned on to use it. More details can be found [here](https://aka.ms/azdo-rm-workload-identity).\n",
                    "willReplaceOnChanges": true
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint Name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "azurermSpnTenantid",
                "projectId",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureRM resources.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "azurermManagementGroupId": {
                        "type": "string",
                        "description": "The Management group ID of the Azure targets.\n"
                    },
                    "azurermManagementGroupName": {
                        "type": "string",
                        "description": "The Management group Name of the targets.\n"
                    },
                    "azurermSpnTenantid": {
                        "type": "string",
                        "description": "The Tenant ID if the service principal.\n"
                    },
                    "azurermSubscriptionId": {
                        "type": "string",
                        "description": "The Subscription ID of the Azure targets.\n"
                    },
                    "azurermSubscriptionName": {
                        "type": "string",
                        "description": "The Subscription Name of the targets.\n"
                    },
                    "credentials": {
                        "$ref": "#/types/azuredevops:ServiceEndpoint/AzureRMCredentials:AzureRMCredentials",
                        "description": "A `credentials` block.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Service connection description.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "The Cloud Environment to use. Defaults to `AzureCloud`. Possible values are `AzureCloud`, `AzureChinaCloud`. Changing this forces a new resource to be created.\n\n\u003e **NOTE:** One of either `Subscription` scoped i.e. `azurerm_subscription_id`, `azurerm_subscription_name` or `ManagementGroup` scoped i.e. `azurerm_management_group_id`, `azurerm_management_group_name` values must be specified.\n",
                        "willReplaceOnChanges": true
                    },
                    "features": {
                        "$ref": "#/types/azuredevops:ServiceEndpoint/AzureRMFeatures:AzureRMFeatures",
                        "description": "A `features` block.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "resourceGroup": {
                        "type": "string",
                        "description": "The resource group used for scope of automatic service endpoint.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceEndpointAuthenticationScheme": {
                        "type": "string",
                        "description": "Specifies the type of azurerm endpoint, either `WorkloadIdentityFederation`, `ManagedServiceIdentity` or `ServicePrincipal`. Defaults to `ServicePrincipal` for backwards compatibility.\n\n\u003e **NOTE:** The `WorkloadIdentityFederation` authentication scheme is currently in private preview. Your organisation must be part of the preview and the feature toggle must be turned on to use it. More details can be found [here](https://aka.ms/azdo-rm-workload-identity).\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint Name.\n",
                        "willReplaceOnChanges": true
                    },
                    "servicePrincipalId": {
                        "type": "string",
                        "description": "The Application(Client) ID of the Service Principal.\n"
                    },
                    "workloadIdentityFederationIssuer": {
                        "type": "string",
                        "description": "The issuer if `service_endpoint_authentication_scheme` is set to `WorkloadIdentityFederation`. This looks like `https://vstoken.dev.azure.com/00000000-0000-0000-0000-000000000000`, where the GUID is the Organization ID of your Azure DevOps Organisation.\n"
                    },
                    "workloadIdentityFederationSubject": {
                        "type": "string",
                        "description": "The subject if `service_endpoint_authentication_scheme` is set to `WorkloadIdentityFederation`. This looks like `sc://\u003corganisation\u003e/\u003cproject\u003e/\u003cservice-connection-name\u003e`.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.serviceendpoint.AzureRM has been deprecated in favor of azuredevops.ServiceEndpointAzureRM"
        },
        "azuredevops:ServiceEndpoint/bitBucket:BitBucket": {
            "description": "Manages a Bitbucket service endpoint within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceEndpointBitBucket = new azuredevops.ServiceEndpointBitBucket(\"exampleServiceEndpointBitBucket\", {\n    projectId: exampleProject.id,\n    username: \"username\",\n    password: \"password\",\n    serviceEndpointName: \"Example Bitbucket\",\n    description: \"Managed by Terraform\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_service_endpoint_bit_bucket = azuredevops.ServiceEndpointBitBucket(\"exampleServiceEndpointBitBucket\",\n    project_id=example_project.id,\n    username=\"username\",\n    password=\"password\",\n    service_endpoint_name=\"Example Bitbucket\",\n    description=\"Managed by Terraform\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceEndpointBitBucket = new AzureDevOps.ServiceEndpointBitBucket(\"exampleServiceEndpointBitBucket\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Username = \"username\",\n        Password = \"password\",\n        ServiceEndpointName = \"Example Bitbucket\",\n        Description = \"Managed by Terraform\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointBitBucket(ctx, \"exampleServiceEndpointBitBucket\", \u0026azuredevops.ServiceEndpointBitBucketArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tUsername:            pulumi.String(\"username\"),\n\t\t\tPassword:            pulumi.String(\"password\"),\n\t\t\tServiceEndpointName: pulumi.String(\"Example Bitbucket\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointBitBucket;\nimport com.pulumi.azuredevops.ServiceEndpointBitBucketArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceEndpointBitBucket = new ServiceEndpointBitBucket(\"exampleServiceEndpointBitBucket\", ServiceEndpointBitBucketArgs.builder()        \n            .projectId(exampleProject.id())\n            .username(\"username\")\n            .password(\"password\")\n            .serviceEndpointName(\"Example Bitbucket\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceEndpointBitBucket:\n    type: azuredevops:ServiceEndpointBitBucket\n    properties:\n      projectId: ${exampleProject.id}\n      username: username\n      password: password\n      serviceEndpointName: Example Bitbucket\n      description: Managed by Terraform\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Agent Pools](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Service Endpoint Bitbucket can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:ServiceEndpoint/bitBucket:BitBucket example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "description": "Bitbucket account password.\n",
                    "secret": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Bitbucket account username.\n"
                }
            },
            "required": [
                "authorization",
                "password",
                "projectId",
                "serviceEndpointName",
                "username"
            ],
            "inputProperties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "description": "Bitbucket account password.\n",
                    "secret": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n",
                    "willReplaceOnChanges": true
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n",
                    "willReplaceOnChanges": true
                },
                "username": {
                    "type": "string",
                    "description": "Bitbucket account username.\n"
                }
            },
            "requiredInputs": [
                "password",
                "projectId",
                "serviceEndpointName",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BitBucket resources.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string",
                        "description": "Bitbucket account password.\n",
                        "secret": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n",
                        "willReplaceOnChanges": true
                    },
                    "username": {
                        "type": "string",
                        "description": "Bitbucket account username.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.serviceendpoint.BitBucket has been deprecated in favor of azuredevops.ServiceEndpointBitBucket"
        },
        "azuredevops:ServiceEndpoint/dockerRegistry:DockerRegistry": {
            "description": "Manages a Docker Registry service endpoint within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\n// dockerhub registry service connection\nconst exampleServiceEndpointDockerRegistry = new azuredevops.ServiceEndpointDockerRegistry(\"exampleServiceEndpointDockerRegistry\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example Docker Hub\",\n    dockerUsername: \"example\",\n    dockerEmail: \"email@example.com\",\n    dockerPassword: \"12345\",\n    registryType: \"DockerHub\",\n});\n// other docker registry service connection\nconst example_other = new azuredevops.ServiceEndpointDockerRegistry(\"example-other\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example Docker Registry\",\n    dockerRegistry: \"https://sample.azurecr.io/v1\",\n    dockerUsername: \"sample\",\n    dockerPassword: \"12345\",\n    registryType: \"Others\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\n# dockerhub registry service connection\nexample_service_endpoint_docker_registry = azuredevops.ServiceEndpointDockerRegistry(\"exampleServiceEndpointDockerRegistry\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example Docker Hub\",\n    docker_username=\"example\",\n    docker_email=\"email@example.com\",\n    docker_password=\"12345\",\n    registry_type=\"DockerHub\")\n# other docker registry service connection\nexample_other = azuredevops.ServiceEndpointDockerRegistry(\"example-other\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example Docker Registry\",\n    docker_registry=\"https://sample.azurecr.io/v1\",\n    docker_username=\"sample\",\n    docker_password=\"12345\",\n    registry_type=\"Others\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    // dockerhub registry service connection\n    var exampleServiceEndpointDockerRegistry = new AzureDevOps.ServiceEndpointDockerRegistry(\"exampleServiceEndpointDockerRegistry\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example Docker Hub\",\n        DockerUsername = \"example\",\n        DockerEmail = \"email@example.com\",\n        DockerPassword = \"12345\",\n        RegistryType = \"DockerHub\",\n    });\n\n    // other docker registry service connection\n    var example_other = new AzureDevOps.ServiceEndpointDockerRegistry(\"example-other\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example Docker Registry\",\n        DockerRegistryUrl = \"https://sample.azurecr.io/v1\",\n        DockerUsername = \"sample\",\n        DockerPassword = \"12345\",\n        RegistryType = \"Others\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointDockerRegistry(ctx, \"exampleServiceEndpointDockerRegistry\", \u0026azuredevops.ServiceEndpointDockerRegistryArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Example Docker Hub\"),\n\t\t\tDockerUsername:      pulumi.String(\"example\"),\n\t\t\tDockerEmail:         pulumi.String(\"email@example.com\"),\n\t\t\tDockerPassword:      pulumi.String(\"12345\"),\n\t\t\tRegistryType:        pulumi.String(\"DockerHub\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointDockerRegistry(ctx, \"example-other\", \u0026azuredevops.ServiceEndpointDockerRegistryArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Example Docker Registry\"),\n\t\t\tDockerRegistry:      pulumi.String(\"https://sample.azurecr.io/v1\"),\n\t\t\tDockerUsername:      pulumi.String(\"sample\"),\n\t\t\tDockerPassword:      pulumi.String(\"12345\"),\n\t\t\tRegistryType:        pulumi.String(\"Others\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointDockerRegistry;\nimport com.pulumi.azuredevops.ServiceEndpointDockerRegistryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceEndpointDockerRegistry = new ServiceEndpointDockerRegistry(\"exampleServiceEndpointDockerRegistry\", ServiceEndpointDockerRegistryArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example Docker Hub\")\n            .dockerUsername(\"example\")\n            .dockerEmail(\"email@example.com\")\n            .dockerPassword(\"12345\")\n            .registryType(\"DockerHub\")\n            .build());\n\n        var example_other = new ServiceEndpointDockerRegistry(\"example-other\", ServiceEndpointDockerRegistryArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example Docker Registry\")\n            .dockerRegistry(\"https://sample.azurecr.io/v1\")\n            .dockerUsername(\"sample\")\n            .dockerPassword(\"12345\")\n            .registryType(\"Others\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  # dockerhub registry service connection\n  exampleServiceEndpointDockerRegistry:\n    type: azuredevops:ServiceEndpointDockerRegistry\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example Docker Hub\n      dockerUsername: example\n      dockerEmail: email@example.com\n      dockerPassword: '12345'\n      registryType: DockerHub\n  # other docker registry service connection\n  example-other:\n    type: azuredevops:ServiceEndpointDockerRegistry\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example Docker Registry\n      dockerRegistry: https://sample.azurecr.io/v1\n      dockerUsername: sample\n      dockerPassword: '12345'\n      registryType: Others\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Service Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-7.0)\n- [Docker Registry Service Connection](https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops\u0026tabs=yaml#sep-docreg)\n\n\n## Import\n\nAzure DevOps Service Endpoint Docker Registry can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:ServiceEndpoint/dockerRegistry:DockerRegistry example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "dockerEmail": {
                    "type": "string",
                    "description": "The email for Docker account user.\n"
                },
                "dockerPassword": {
                    "type": "string",
                    "description": "The password for the account user identified above.\n",
                    "secret": true
                },
                "dockerRegistry": {
                    "type": "string",
                    "description": "The URL of the Docker registry. (Default: \"https://index.docker.io/v1/\")\n",
                    "language": {
                        "csharp": {
                            "name": "DockerRegistryUrl"
                        }
                    }
                },
                "dockerUsername": {
                    "type": "string",
                    "description": "The identifier of the Docker account user.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "registryType": {
                    "type": "string",
                    "description": "Can be \"DockerHub\" or \"Others\" (Default \"DockerHub\")\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The name you will use to refer to this service connection in task inputs.\n"
                }
            },
            "required": [
                "authorization",
                "dockerRegistry",
                "projectId",
                "registryType",
                "serviceEndpointName"
            ],
            "inputProperties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "dockerEmail": {
                    "type": "string",
                    "description": "The email for Docker account user.\n"
                },
                "dockerPassword": {
                    "type": "string",
                    "description": "The password for the account user identified above.\n",
                    "secret": true
                },
                "dockerRegistry": {
                    "type": "string",
                    "description": "The URL of the Docker registry. (Default: \"https://index.docker.io/v1/\")\n",
                    "language": {
                        "csharp": {
                            "name": "DockerRegistryUrl"
                        }
                    }
                },
                "dockerUsername": {
                    "type": "string",
                    "description": "The identifier of the Docker account user.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n",
                    "willReplaceOnChanges": true
                },
                "registryType": {
                    "type": "string",
                    "description": "Can be \"DockerHub\" or \"Others\" (Default \"DockerHub\")\n",
                    "willReplaceOnChanges": true
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The name you will use to refer to this service connection in task inputs.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "dockerRegistry",
                "projectId",
                "registryType",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DockerRegistry resources.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "dockerEmail": {
                        "type": "string",
                        "description": "The email for Docker account user.\n"
                    },
                    "dockerPassword": {
                        "type": "string",
                        "description": "The password for the account user identified above.\n",
                        "secret": true
                    },
                    "dockerRegistry": {
                        "type": "string",
                        "description": "The URL of the Docker registry. (Default: \"https://index.docker.io/v1/\")\n",
                        "language": {
                            "csharp": {
                                "name": "DockerRegistryUrl"
                            }
                        }
                    },
                    "dockerUsername": {
                        "type": "string",
                        "description": "The identifier of the Docker account user.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "registryType": {
                        "type": "string",
                        "description": "Can be \"DockerHub\" or \"Others\" (Default \"DockerHub\")\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The name you will use to refer to this service connection in task inputs.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.serviceendpoint.DockerRegistry has been deprecated in favor of azuredevops.ServiceEndpointDockerRegistry"
        },
        "azuredevops:ServiceEndpoint/gitHub:GitHub": {
            "description": "Manages a GitHub service endpoint within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceEndpointGitHub = new azuredevops.ServiceEndpointGitHub(\"exampleServiceEndpointGitHub\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example GitHub Personal Access Token\",\n    authPersonal: {\n        personalAccessToken: \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_service_endpoint_git_hub = azuredevops.ServiceEndpointGitHub(\"exampleServiceEndpointGitHub\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example GitHub Personal Access Token\",\n    auth_personal=azuredevops.ServiceEndpointGitHubAuthPersonalArgs(\n        personal_access_token=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceEndpointGitHub = new AzureDevOps.ServiceEndpointGitHub(\"exampleServiceEndpointGitHub\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example GitHub Personal Access Token\",\n        AuthPersonal = new AzureDevOps.Inputs.ServiceEndpointGitHubAuthPersonalArgs\n        {\n            PersonalAccessToken = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointGitHub(ctx, \"exampleServiceEndpointGitHub\", \u0026azuredevops.ServiceEndpointGitHubArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Example GitHub Personal Access Token\"),\n\t\t\tAuthPersonal: \u0026azuredevops.ServiceEndpointGitHubAuthPersonalArgs{\n\t\t\t\tPersonalAccessToken: pulumi.String(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointGitHub;\nimport com.pulumi.azuredevops.ServiceEndpointGitHubArgs;\nimport com.pulumi.azuredevops.inputs.ServiceEndpointGitHubAuthPersonalArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceEndpointGitHub = new ServiceEndpointGitHub(\"exampleServiceEndpointGitHub\", ServiceEndpointGitHubArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example GitHub Personal Access Token\")\n            .authPersonal(ServiceEndpointGitHubAuthPersonalArgs.builder()\n                .personalAccessToken(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceEndpointGitHub:\n    type: azuredevops:ServiceEndpointGitHub\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example GitHub Personal Access Token\n      authPersonal:\n        personalAccessToken: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceEndpointGitHub = new azuredevops.ServiceEndpointGitHub(\"exampleServiceEndpointGitHub\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example GitHub\",\n    authOauth: {\n        oauthConfigurationId: \"00000000-0000-0000-0000-000000000000\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_service_endpoint_git_hub = azuredevops.ServiceEndpointGitHub(\"exampleServiceEndpointGitHub\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example GitHub\",\n    auth_oauth=azuredevops.ServiceEndpointGitHubAuthOauthArgs(\n        oauth_configuration_id=\"00000000-0000-0000-0000-000000000000\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceEndpointGitHub = new AzureDevOps.ServiceEndpointGitHub(\"exampleServiceEndpointGitHub\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example GitHub\",\n        AuthOauth = new AzureDevOps.Inputs.ServiceEndpointGitHubAuthOauthArgs\n        {\n            OauthConfigurationId = \"00000000-0000-0000-0000-000000000000\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointGitHub(ctx, \"exampleServiceEndpointGitHub\", \u0026azuredevops.ServiceEndpointGitHubArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Example GitHub\"),\n\t\t\tAuthOauth: \u0026azuredevops.ServiceEndpointGitHubAuthOauthArgs{\n\t\t\t\tOauthConfigurationId: pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointGitHub;\nimport com.pulumi.azuredevops.ServiceEndpointGitHubArgs;\nimport com.pulumi.azuredevops.inputs.ServiceEndpointGitHubAuthOauthArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceEndpointGitHub = new ServiceEndpointGitHub(\"exampleServiceEndpointGitHub\", ServiceEndpointGitHubArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example GitHub\")\n            .authOauth(ServiceEndpointGitHubAuthOauthArgs.builder()\n                .oauthConfigurationId(\"00000000-0000-0000-0000-000000000000\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceEndpointGitHub:\n    type: azuredevops:ServiceEndpointGitHub\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example GitHub\n      authOauth:\n        oauthConfigurationId: 00000000-0000-0000-0000-000000000000\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceEndpointGitHub = new azuredevops.ServiceEndpointGitHub(\"exampleServiceEndpointGitHub\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example GitHub Apps: Azure Pipelines\",\n    description: \"Managed by Terraform\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_service_endpoint_git_hub = azuredevops.ServiceEndpointGitHub(\"exampleServiceEndpointGitHub\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example GitHub Apps: Azure Pipelines\",\n    description=\"Managed by Terraform\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceEndpointGitHub = new AzureDevOps.ServiceEndpointGitHub(\"exampleServiceEndpointGitHub\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example GitHub Apps: Azure Pipelines\",\n        Description = \"Managed by Terraform\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointGitHub(ctx, \"exampleServiceEndpointGitHub\", \u0026azuredevops.ServiceEndpointGitHubArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Example GitHub Apps: Azure Pipelines\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointGitHub;\nimport com.pulumi.azuredevops.ServiceEndpointGitHubArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceEndpointGitHub = new ServiceEndpointGitHub(\"exampleServiceEndpointGitHub\", ServiceEndpointGitHubArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example GitHub Apps: Azure Pipelines\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceEndpointGitHub:\n    type: azuredevops:ServiceEndpointGitHub\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: 'Example GitHub Apps: Azure Pipelines'\n      # Note Github Apps do not support a description and will always be empty string. Must be explicitly set to override the default value.\n      description: Managed by Terraform\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Service Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Service Endpoint GitHub can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:ServiceEndpoint/gitHub:GitHub example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authOauth": {
                    "$ref": "#/types/azuredevops:ServiceEndpoint/GitHubAuthOauth:GitHubAuthOauth"
                },
                "authPersonal": {
                    "$ref": "#/types/azuredevops:ServiceEndpoint/GitHubAuthPersonal:GitHubAuthPersonal",
                    "description": "An `auth_personal` block as documented below. Allows connecting using a personal access token.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "required": [
                "authorization",
                "projectId",
                "serviceEndpointName"
            ],
            "inputProperties": {
                "authOauth": {
                    "$ref": "#/types/azuredevops:ServiceEndpoint/GitHubAuthOauth:GitHubAuthOauth"
                },
                "authPersonal": {
                    "$ref": "#/types/azuredevops:ServiceEndpoint/GitHubAuthPersonal:GitHubAuthPersonal",
                    "description": "An `auth_personal` block as documented below. Allows connecting using a personal access token.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n",
                    "willReplaceOnChanges": true
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "projectId",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GitHub resources.\n",
                "properties": {
                    "authOauth": {
                        "$ref": "#/types/azuredevops:ServiceEndpoint/GitHubAuthOauth:GitHubAuthOauth"
                    },
                    "authPersonal": {
                        "$ref": "#/types/azuredevops:ServiceEndpoint/GitHubAuthPersonal:GitHubAuthPersonal",
                        "description": "An `auth_personal` block as documented below. Allows connecting using a personal access token.\n"
                    },
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.serviceendpoint.GitHub has been deprecated in favor of azuredevops.ServiceEndpointGitHub"
        },
        "azuredevops:ServiceEndpoint/kubernetes:Kubernetes": {
            "description": "Manages a Kubernetes service endpoint within Azure DevOps.\n\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Service Endpoint Kubernetes can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:ServiceEndpoint/kubernetes:Kubernetes example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "apiserverUrl": {
                    "type": "string",
                    "description": "The hostname (in form of URI) of the Kubernetes API.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "authorizationType": {
                    "type": "string",
                    "description": "The authentication method used to authenticate on the Kubernetes cluster. The value should be one of AzureSubscription, Kubeconfig, ServiceAccount.\n"
                },
                "azureSubscriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:ServiceEndpoint/KubernetesAzureSubscription:KubernetesAzureSubscription"
                    },
                    "description": "A `azure_subscription` block defined blow.\n"
                },
                "description": {
                    "type": "string"
                },
                "kubeconfig": {
                    "$ref": "#/types/azuredevops:ServiceEndpoint/KubernetesKubeconfig:KubernetesKubeconfig",
                    "description": "A `kubeconfig` block defined blow.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "serviceAccount": {
                    "$ref": "#/types/azuredevops:ServiceEndpoint/KubernetesServiceAccount:KubernetesServiceAccount",
                    "description": "A `service_account` block defined blow.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "required": [
                "apiserverUrl",
                "authorization",
                "authorizationType",
                "projectId",
                "serviceEndpointName"
            ],
            "inputProperties": {
                "apiserverUrl": {
                    "type": "string",
                    "description": "The hostname (in form of URI) of the Kubernetes API.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "authorizationType": {
                    "type": "string",
                    "description": "The authentication method used to authenticate on the Kubernetes cluster. The value should be one of AzureSubscription, Kubeconfig, ServiceAccount.\n"
                },
                "azureSubscriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:ServiceEndpoint/KubernetesAzureSubscription:KubernetesAzureSubscription"
                    },
                    "description": "A `azure_subscription` block defined blow.\n"
                },
                "description": {
                    "type": "string"
                },
                "kubeconfig": {
                    "$ref": "#/types/azuredevops:ServiceEndpoint/KubernetesKubeconfig:KubernetesKubeconfig",
                    "description": "A `kubeconfig` block defined blow.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n",
                    "willReplaceOnChanges": true
                },
                "serviceAccount": {
                    "$ref": "#/types/azuredevops:ServiceEndpoint/KubernetesServiceAccount:KubernetesServiceAccount",
                    "description": "A `service_account` block defined blow.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "apiserverUrl",
                "authorizationType",
                "projectId",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Kubernetes resources.\n",
                "properties": {
                    "apiserverUrl": {
                        "type": "string",
                        "description": "The hostname (in form of URI) of the Kubernetes API.\n"
                    },
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "authorizationType": {
                        "type": "string",
                        "description": "The authentication method used to authenticate on the Kubernetes cluster. The value should be one of AzureSubscription, Kubeconfig, ServiceAccount.\n"
                    },
                    "azureSubscriptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:ServiceEndpoint/KubernetesAzureSubscription:KubernetesAzureSubscription"
                        },
                        "description": "A `azure_subscription` block defined blow.\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "kubeconfig": {
                        "$ref": "#/types/azuredevops:ServiceEndpoint/KubernetesKubeconfig:KubernetesKubeconfig",
                        "description": "A `kubeconfig` block defined blow.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceAccount": {
                        "$ref": "#/types/azuredevops:ServiceEndpoint/KubernetesServiceAccount:KubernetesServiceAccount",
                        "description": "A `service_account` block defined blow.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.serviceendpoint.Kubernetes has been deprecated in favor of azuredevops.ServiceEndpointKubernetes"
        },
        "azuredevops:index/areaPermissions:AreaPermissions": {
            "description": "Manages permissions for an Area (Component)\n\n\u003e **Note** Permissions can be assigned to group principals and not to single user principals.\n\n## Permission levels\n\nPermission for Areas within Azure DevOps can be applied on two different levels.\nThose levels are reflected by specifying (or omitting) values for the arguments `project_id` and `path`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = new azuredevops.Project(\"example\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"Managed by Terraform\",\n});\nconst example-project-readers = azuredevops.getGroupOutput({\n    projectId: example.id,\n    name: \"Readers\",\n});\nconst example_root_permissions = new azuredevops.AreaPermissions(\"example-root-permissions\", {\n    projectId: example.id,\n    principal: example_project_readers.apply(example_project_readers =\u003e example_project_readers.id),\n    path: \"/\",\n    permissions: {\n        CREATE_CHILDREN: \"Deny\",\n        GENERIC_READ: \"Allow\",\n        DELETE: \"Deny\",\n        WORK_ITEM_READ: \"Allow\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.Project(\"example\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"Managed by Terraform\")\nexample_project_readers = azuredevops.get_group_output(project_id=example.id,\n    name=\"Readers\")\nexample_root_permissions = azuredevops.AreaPermissions(\"example-root-permissions\",\n    project_id=example.id,\n    principal=example_project_readers.id,\n    path=\"/\",\n    permissions={\n        \"CREATE_CHILDREN\": \"Deny\",\n        \"GENERIC_READ\": \"Allow\",\n        \"DELETE\": \"Deny\",\n        \"WORK_ITEM_READ\": \"Allow\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureDevOps.Project(\"example\", new()\n    {\n        WorkItemTemplate = \"Agile\",\n        VersionControl = \"Git\",\n        Visibility = \"private\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var example_project_readers = AzureDevOps.GetGroup.Invoke(new()\n    {\n        ProjectId = example.Id,\n        Name = \"Readers\",\n    });\n\n    var example_root_permissions = new AzureDevOps.AreaPermissions(\"example-root-permissions\", new()\n    {\n        ProjectId = example.Id,\n        Principal = example_project_readers.Apply(example_project_readers =\u003e example_project_readers.Apply(getGroupResult =\u003e getGroupResult.Id)),\n        Path = \"/\",\n        Permissions = \n        {\n            { \"CREATE_CHILDREN\", \"Deny\" },\n            { \"GENERIC_READ\", \"Allow\" },\n            { \"DELETE\", \"Deny\" },\n            { \"WORK_ITEM_READ\", \"Allow\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuredevops.NewProject(ctx, \"example\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample_project_readers := azuredevops.LookupGroupOutput(ctx, azuredevops.GetGroupOutputArgs{\n\t\t\tProjectId: example.ID(),\n\t\t\tName:      pulumi.String(\"Readers\"),\n\t\t}, nil)\n\t\t_, err = azuredevops.NewAreaPermissions(ctx, \"example-root-permissions\", \u0026azuredevops.AreaPermissionsArgs{\n\t\t\tProjectId: example.ID(),\n\t\t\tPrincipal: example_project_readers.ApplyT(func(example_project_readers azuredevops.GetGroupResult) (*string, error) {\n\t\t\t\treturn \u0026example_project_readers.Id, nil\n\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\tPath: pulumi.String(\"/\"),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"CREATE_CHILDREN\": pulumi.String(\"Deny\"),\n\t\t\t\t\"GENERIC_READ\":    pulumi.String(\"Allow\"),\n\t\t\t\t\"DELETE\":          pulumi.String(\"Deny\"),\n\t\t\t\t\"WORK_ITEM_READ\":  pulumi.String(\"Allow\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetGroupArgs;\nimport com.pulumi.azuredevops.AreaPermissions;\nimport com.pulumi.azuredevops.AreaPermissionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Project(\"example\", ProjectArgs.builder()        \n            .workItemTemplate(\"Agile\")\n            .versionControl(\"Git\")\n            .visibility(\"private\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        final var example-project-readers = AzuredevopsFunctions.getGroup(GetGroupArgs.builder()\n            .projectId(example.id())\n            .name(\"Readers\")\n            .build());\n\n        var example_root_permissions = new AreaPermissions(\"example-root-permissions\", AreaPermissionsArgs.builder()        \n            .projectId(example.id())\n            .principal(example_project_readers.applyValue(example_project_readers -\u003e example_project_readers.id()))\n            .path(\"/\")\n            .permissions(Map.ofEntries(\n                Map.entry(\"CREATE_CHILDREN\", \"Deny\"),\n                Map.entry(\"GENERIC_READ\", \"Allow\"),\n                Map.entry(\"DELETE\", \"Deny\"),\n                Map.entry(\"WORK_ITEM_READ\", \"Allow\")\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuredevops:Project\n    properties:\n      workItemTemplate: Agile\n      versionControl: Git\n      visibility: private\n      description: Managed by Terraform\n  example-root-permissions:\n    type: azuredevops:AreaPermissions\n    properties:\n      projectId: ${example.id}\n      principal: ${[\"example-project-readers\"].id}\n      path: /\n      permissions:\n        CREATE_CHILDREN: Deny\n        GENERIC_READ: Allow\n        DELETE: Deny\n        WORK_ITEM_READ: Allow\nvariables:\n  example-project-readers:\n    fn::invoke:\n      Function: azuredevops:getGroup\n      Arguments:\n        projectId: ${example.id}\n        name: Readers\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 7.0 - Security](https://docs.microsoft.com/en-us/rest/api/azure/devops/security/?view=azure-devops-rest-7.0)\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: vso.security_manage - Grants the ability to read, write, and manage security permissions.\n\n\n## Import\n\nThe resource does not support import. ",
            "properties": {
                "path": {
                    "type": "string",
                    "description": "The name of the branch to assign the permissions.\n"
                },
                "permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "the permissions to assign. The following permissions are available.\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The **group** principal to assign the permissions.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project to assign the permissions.\n"
                },
                "replace": {
                    "type": "boolean",
                    "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`.\n\n| Permission             | Description                          |\n|------------------------|--------------------------------------|\n| GENERIC_READ           | View permissions for this node       |\n| GENERIC_WRITE          | Edit this node                       |\n| CREATE_CHILDREN        | Create child nodes                   |\n| DELETE                 | Delete this node                     |\n| WORK_ITEM_READ         | View work items in this node         |\n| WORK_ITEM_WRITE        | Edit work items in this node         |\n| MANAGE_TEST_PLANS      | Manage test plans                    |\n| MANAGE_TEST_SUITES     | Manage test suites                   |\n| WORK_ITEM_SAVE_COMMENT | Edit work item comments in this node |\n"
                }
            },
            "required": [
                "permissions",
                "principal",
                "projectId"
            ],
            "inputProperties": {
                "path": {
                    "type": "string",
                    "description": "The name of the branch to assign the permissions.\n",
                    "willReplaceOnChanges": true
                },
                "permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "the permissions to assign. The following permissions are available.\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The **group** principal to assign the permissions.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project to assign the permissions.\n",
                    "willReplaceOnChanges": true
                },
                "replace": {
                    "type": "boolean",
                    "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`.\n\n| Permission             | Description                          |\n|------------------------|--------------------------------------|\n| GENERIC_READ           | View permissions for this node       |\n| GENERIC_WRITE          | Edit this node                       |\n| CREATE_CHILDREN        | Create child nodes                   |\n| DELETE                 | Delete this node                     |\n| WORK_ITEM_READ         | View work items in this node         |\n| WORK_ITEM_WRITE        | Edit work items in this node         |\n| MANAGE_TEST_PLANS      | Manage test plans                    |\n| MANAGE_TEST_SUITES     | Manage test suites                   |\n| WORK_ITEM_SAVE_COMMENT | Edit work item comments in this node |\n"
                }
            },
            "requiredInputs": [
                "permissions",
                "principal",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AreaPermissions resources.\n",
                "properties": {
                    "path": {
                        "type": "string",
                        "description": "The name of the branch to assign the permissions.\n",
                        "willReplaceOnChanges": true
                    },
                    "permissions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "the permissions to assign. The following permissions are available.\n"
                    },
                    "principal": {
                        "type": "string",
                        "description": "The **group** principal to assign the permissions.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project to assign the permissions.\n",
                        "willReplaceOnChanges": true
                    },
                    "replace": {
                        "type": "boolean",
                        "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`.\n\n| Permission             | Description                          |\n|------------------------|--------------------------------------|\n| GENERIC_READ           | View permissions for this node       |\n| GENERIC_WRITE          | Edit this node                       |\n| CREATE_CHILDREN        | Create child nodes                   |\n| DELETE                 | Delete this node                     |\n| WORK_ITEM_READ         | View work items in this node         |\n| WORK_ITEM_WRITE        | Edit work items in this node         |\n| MANAGE_TEST_PLANS      | Manage test plans                    |\n| MANAGE_TEST_SUITES     | Manage test suites                   |\n| WORK_ITEM_SAVE_COMMENT | Edit work item comments in this node |\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/branchPolicyAutoReviewers:BranchPolicyAutoReviewers": {
            "description": "Manages required reviewer policy branch policy within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {});\nconst exampleGit = new azuredevops.Git(\"exampleGit\", {\n    projectId: exampleProject.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst exampleUser = new azuredevops.User(\"exampleUser\", {\n    principalName: \"mail@email.com\",\n    accountLicenseType: \"basic\",\n});\nconst exampleBranchPolicyAutoReviewers = new azuredevops.BranchPolicyAutoReviewers(\"exampleBranchPolicyAutoReviewers\", {\n    projectId: exampleProject.id,\n    enabled: true,\n    blocking: true,\n    settings: {\n        autoReviewerIds: [exampleUser.id],\n        submitterCanVote: false,\n        message: \"Auto reviewer\",\n        pathFilters: [\"*/src/*.ts\"],\n        scopes: [{\n            repositoryId: exampleGit.id,\n            repositoryRef: exampleGit.defaultBranch,\n            matchType: \"Exact\",\n        }],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\")\nexample_git = azuredevops.Git(\"exampleGit\",\n    project_id=example_project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nexample_user = azuredevops.User(\"exampleUser\",\n    principal_name=\"mail@email.com\",\n    account_license_type=\"basic\")\nexample_branch_policy_auto_reviewers = azuredevops.BranchPolicyAutoReviewers(\"exampleBranchPolicyAutoReviewers\",\n    project_id=example_project.id,\n    enabled=True,\n    blocking=True,\n    settings=azuredevops.BranchPolicyAutoReviewersSettingsArgs(\n        auto_reviewer_ids=[example_user.id],\n        submitter_can_vote=False,\n        message=\"Auto reviewer\",\n        path_filters=[\"*/src/*.ts\"],\n        scopes=[azuredevops.BranchPolicyAutoReviewersSettingsScopeArgs(\n            repository_id=example_git.id,\n            repository_ref=example_git.default_branch,\n            match_type=\"Exact\",\n        )],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\");\n\n    var exampleGit = new AzureDevOps.Git(\"exampleGit\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n        {\n            InitType = \"Clean\",\n        },\n    });\n\n    var exampleUser = new AzureDevOps.User(\"exampleUser\", new()\n    {\n        PrincipalName = \"mail@email.com\",\n        AccountLicenseType = \"basic\",\n    });\n\n    var exampleBranchPolicyAutoReviewers = new AzureDevOps.BranchPolicyAutoReviewers(\"exampleBranchPolicyAutoReviewers\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Enabled = true,\n        Blocking = true,\n        Settings = new AzureDevOps.Inputs.BranchPolicyAutoReviewersSettingsArgs\n        {\n            AutoReviewerIds = new[]\n            {\n                exampleUser.Id,\n            },\n            SubmitterCanVote = false,\n            Message = \"Auto reviewer\",\n            PathFilters = new[]\n            {\n                \"*/src/*.ts\",\n            },\n            Scopes = new[]\n            {\n                new AzureDevOps.Inputs.BranchPolicyAutoReviewersSettingsScopeArgs\n                {\n                    RepositoryId = exampleGit.Id,\n                    RepositoryRef = exampleGit.DefaultBranch,\n                    MatchType = \"Exact\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGit, err := azuredevops.NewGit(ctx, \"exampleGit\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tInitialization: \u0026azuredevops.GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUser, err := azuredevops.NewUser(ctx, \"exampleUser\", \u0026azuredevops.UserArgs{\n\t\t\tPrincipalName:      pulumi.String(\"mail@email.com\"),\n\t\t\tAccountLicenseType: pulumi.String(\"basic\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewBranchPolicyAutoReviewers(ctx, \"exampleBranchPolicyAutoReviewers\", \u0026azuredevops.BranchPolicyAutoReviewersArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t\tSettings: \u0026azuredevops.BranchPolicyAutoReviewersSettingsArgs{\n\t\t\t\tAutoReviewerIds: pulumi.StringArray{\n\t\t\t\t\texampleUser.ID(),\n\t\t\t\t},\n\t\t\t\tSubmitterCanVote: pulumi.Bool(false),\n\t\t\t\tMessage:          pulumi.String(\"Auto reviewer\"),\n\t\t\t\tPathFilters: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"*/src/*.ts\"),\n\t\t\t\t},\n\t\t\t\tScopes: azuredevops.BranchPolicyAutoReviewersSettingsScopeArray{\n\t\t\t\t\t\u0026azuredevops.BranchPolicyAutoReviewersSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  exampleGit.ID(),\n\t\t\t\t\t\tRepositoryRef: exampleGit.DefaultBranch,\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Exact\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.Git;\nimport com.pulumi.azuredevops.GitArgs;\nimport com.pulumi.azuredevops.inputs.GitInitializationArgs;\nimport com.pulumi.azuredevops.User;\nimport com.pulumi.azuredevops.UserArgs;\nimport com.pulumi.azuredevops.BranchPolicyAutoReviewers;\nimport com.pulumi.azuredevops.BranchPolicyAutoReviewersArgs;\nimport com.pulumi.azuredevops.inputs.BranchPolicyAutoReviewersSettingsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\");\n\n        var exampleGit = new Git(\"exampleGit\", GitArgs.builder()        \n            .projectId(exampleProject.id())\n            .initialization(GitInitializationArgs.builder()\n                .initType(\"Clean\")\n                .build())\n            .build());\n\n        var exampleUser = new User(\"exampleUser\", UserArgs.builder()        \n            .principalName(\"mail@email.com\")\n            .accountLicenseType(\"basic\")\n            .build());\n\n        var exampleBranchPolicyAutoReviewers = new BranchPolicyAutoReviewers(\"exampleBranchPolicyAutoReviewers\", BranchPolicyAutoReviewersArgs.builder()        \n            .projectId(exampleProject.id())\n            .enabled(true)\n            .blocking(true)\n            .settings(BranchPolicyAutoReviewersSettingsArgs.builder()\n                .autoReviewerIds(exampleUser.id())\n                .submitterCanVote(false)\n                .message(\"Auto reviewer\")\n                .pathFilters(\"*/src/*.ts\")\n                .scopes(BranchPolicyAutoReviewersSettingsScopeArgs.builder()\n                    .repositoryId(exampleGit.id())\n                    .repositoryRef(exampleGit.defaultBranch())\n                    .matchType(\"Exact\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n  exampleGit:\n    type: azuredevops:Git\n    properties:\n      projectId: ${exampleProject.id}\n      initialization:\n        initType: Clean\n  exampleUser:\n    type: azuredevops:User\n    properties:\n      principalName: mail@email.com\n      accountLicenseType: basic\n  exampleBranchPolicyAutoReviewers:\n    type: azuredevops:BranchPolicyAutoReviewers\n    properties:\n      projectId: ${exampleProject.id}\n      enabled: true\n      blocking: true\n      settings:\n        autoReviewerIds:\n          - ${exampleUser.id}\n        submitterCanVote: false\n        message: Auto reviewer\n        pathFilters:\n          - '*/src/*.ts'\n        scopes:\n          - repositoryId: ${exampleGit.id}\n            repositoryRef: ${exampleGit.defaultBranch}\n            matchType: Exact\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Policy Configurations](https://docs.microsoft.com/en-us/rest/api/azure/devops/policy/configurations/create?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Branch Policies can be imported using the project ID and policy configuration ID\n\n```sh\n $ pulumi import azuredevops:index/branchPolicyAutoReviewers:BranchPolicyAutoReviewers example 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. This relates to the Azure DevOps terms \"optional\" and \"required\" reviewers. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "settings": {
                    "$ref": "#/types/azuredevops:index/BranchPolicyAutoReviewersSettings:BranchPolicyAutoReviewersSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "required": [
                "projectId",
                "settings"
            ],
            "inputProperties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. This relates to the Azure DevOps terms \"optional\" and \"required\" reviewers. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n",
                    "willReplaceOnChanges": true
                },
                "settings": {
                    "$ref": "#/types/azuredevops:index/BranchPolicyAutoReviewersSettings:BranchPolicyAutoReviewersSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "settings"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BranchPolicyAutoReviewers resources.\n",
                "properties": {
                    "blocking": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be blocking. This relates to the Azure DevOps terms \"optional\" and \"required\" reviewers. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the policy will be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "settings": {
                        "$ref": "#/types/azuredevops:index/BranchPolicyAutoReviewersSettings:BranchPolicyAutoReviewersSettings",
                        "description": "Configuration for the policy. This block must be defined exactly once.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/branchPolicyBuildValidation:BranchPolicyBuildValidation": {
            "description": "Manages a build validation branch policy within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {});\nconst exampleGit = new azuredevops.Git(\"exampleGit\", {\n    projectId: exampleProject.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst exampleBuildDefinition = new azuredevops.BuildDefinition(\"exampleBuildDefinition\", {\n    projectId: exampleProject.id,\n    repository: {\n        repoType: \"TfsGit\",\n        repoId: exampleGit.id,\n        ymlPath: \"azure-pipelines.yml\",\n    },\n});\nconst exampleBranchPolicyBuildValidation = new azuredevops.BranchPolicyBuildValidation(\"exampleBranchPolicyBuildValidation\", {\n    projectId: exampleProject.id,\n    enabled: true,\n    blocking: true,\n    settings: {\n        displayName: \"Example build validation policy\",\n        buildDefinitionId: exampleBuildDefinition.id,\n        validDuration: 720,\n        filenamePatterns: [\n            \"/WebApp/*\",\n            \"!/WebApp/Tests/*\",\n            \"*.cs\",\n        ],\n        scopes: [\n            {\n                repositoryId: exampleGit.id,\n                repositoryRef: exampleGit.defaultBranch,\n                matchType: \"Exact\",\n            },\n            {\n                repositoryId: exampleGit.id,\n                repositoryRef: \"refs/heads/releases\",\n                matchType: \"Prefix\",\n            },\n            {\n                matchType: \"DefaultBranch\",\n            },\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\")\nexample_git = azuredevops.Git(\"exampleGit\",\n    project_id=example_project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nexample_build_definition = azuredevops.BuildDefinition(\"exampleBuildDefinition\",\n    project_id=example_project.id,\n    repository=azuredevops.BuildDefinitionRepositoryArgs(\n        repo_type=\"TfsGit\",\n        repo_id=example_git.id,\n        yml_path=\"azure-pipelines.yml\",\n    ))\nexample_branch_policy_build_validation = azuredevops.BranchPolicyBuildValidation(\"exampleBranchPolicyBuildValidation\",\n    project_id=example_project.id,\n    enabled=True,\n    blocking=True,\n    settings=azuredevops.BranchPolicyBuildValidationSettingsArgs(\n        display_name=\"Example build validation policy\",\n        build_definition_id=example_build_definition.id,\n        valid_duration=720,\n        filename_patterns=[\n            \"/WebApp/*\",\n            \"!/WebApp/Tests/*\",\n            \"*.cs\",\n        ],\n        scopes=[\n            azuredevops.BranchPolicyBuildValidationSettingsScopeArgs(\n                repository_id=example_git.id,\n                repository_ref=example_git.default_branch,\n                match_type=\"Exact\",\n            ),\n            azuredevops.BranchPolicyBuildValidationSettingsScopeArgs(\n                repository_id=example_git.id,\n                repository_ref=\"refs/heads/releases\",\n                match_type=\"Prefix\",\n            ),\n            azuredevops.BranchPolicyBuildValidationSettingsScopeArgs(\n                match_type=\"DefaultBranch\",\n            ),\n        ],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\");\n\n    var exampleGit = new AzureDevOps.Git(\"exampleGit\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n        {\n            InitType = \"Clean\",\n        },\n    });\n\n    var exampleBuildDefinition = new AzureDevOps.BuildDefinition(\"exampleBuildDefinition\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Repository = new AzureDevOps.Inputs.BuildDefinitionRepositoryArgs\n        {\n            RepoType = \"TfsGit\",\n            RepoId = exampleGit.Id,\n            YmlPath = \"azure-pipelines.yml\",\n        },\n    });\n\n    var exampleBranchPolicyBuildValidation = new AzureDevOps.BranchPolicyBuildValidation(\"exampleBranchPolicyBuildValidation\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Enabled = true,\n        Blocking = true,\n        Settings = new AzureDevOps.Inputs.BranchPolicyBuildValidationSettingsArgs\n        {\n            DisplayName = \"Example build validation policy\",\n            BuildDefinitionId = exampleBuildDefinition.Id,\n            ValidDuration = 720,\n            FilenamePatterns = new[]\n            {\n                \"/WebApp/*\",\n                \"!/WebApp/Tests/*\",\n                \"*.cs\",\n            },\n            Scopes = new[]\n            {\n                new AzureDevOps.Inputs.BranchPolicyBuildValidationSettingsScopeArgs\n                {\n                    RepositoryId = exampleGit.Id,\n                    RepositoryRef = exampleGit.DefaultBranch,\n                    MatchType = \"Exact\",\n                },\n                new AzureDevOps.Inputs.BranchPolicyBuildValidationSettingsScopeArgs\n                {\n                    RepositoryId = exampleGit.Id,\n                    RepositoryRef = \"refs/heads/releases\",\n                    MatchType = \"Prefix\",\n                },\n                new AzureDevOps.Inputs.BranchPolicyBuildValidationSettingsScopeArgs\n                {\n                    MatchType = \"DefaultBranch\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGit, err := azuredevops.NewGit(ctx, \"exampleGit\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tInitialization: \u0026azuredevops.GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleBuildDefinition, err := azuredevops.NewBuildDefinition(ctx, \"exampleBuildDefinition\", \u0026azuredevops.BuildDefinitionArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tRepository: \u0026azuredevops.BuildDefinitionRepositoryArgs{\n\t\t\t\tRepoType: pulumi.String(\"TfsGit\"),\n\t\t\t\tRepoId:   exampleGit.ID(),\n\t\t\t\tYmlPath:  pulumi.String(\"azure-pipelines.yml\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewBranchPolicyBuildValidation(ctx, \"exampleBranchPolicyBuildValidation\", \u0026azuredevops.BranchPolicyBuildValidationArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t\tSettings: \u0026azuredevops.BranchPolicyBuildValidationSettingsArgs{\n\t\t\t\tDisplayName:       pulumi.String(\"Example build validation policy\"),\n\t\t\t\tBuildDefinitionId: exampleBuildDefinition.ID(),\n\t\t\t\tValidDuration:     pulumi.Int(720),\n\t\t\t\tFilenamePatterns: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"/WebApp/*\"),\n\t\t\t\t\tpulumi.String(\"!/WebApp/Tests/*\"),\n\t\t\t\t\tpulumi.String(\"*.cs\"),\n\t\t\t\t},\n\t\t\t\tScopes: azuredevops.BranchPolicyBuildValidationSettingsScopeArray{\n\t\t\t\t\t\u0026azuredevops.BranchPolicyBuildValidationSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  exampleGit.ID(),\n\t\t\t\t\t\tRepositoryRef: exampleGit.DefaultBranch,\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Exact\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026azuredevops.BranchPolicyBuildValidationSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  exampleGit.ID(),\n\t\t\t\t\t\tRepositoryRef: pulumi.String(\"refs/heads/releases\"),\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Prefix\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026azuredevops.BranchPolicyBuildValidationSettingsScopeArgs{\n\t\t\t\t\t\tMatchType: pulumi.String(\"DefaultBranch\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.Git;\nimport com.pulumi.azuredevops.GitArgs;\nimport com.pulumi.azuredevops.inputs.GitInitializationArgs;\nimport com.pulumi.azuredevops.BuildDefinition;\nimport com.pulumi.azuredevops.BuildDefinitionArgs;\nimport com.pulumi.azuredevops.inputs.BuildDefinitionRepositoryArgs;\nimport com.pulumi.azuredevops.BranchPolicyBuildValidation;\nimport com.pulumi.azuredevops.BranchPolicyBuildValidationArgs;\nimport com.pulumi.azuredevops.inputs.BranchPolicyBuildValidationSettingsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\");\n\n        var exampleGit = new Git(\"exampleGit\", GitArgs.builder()        \n            .projectId(exampleProject.id())\n            .initialization(GitInitializationArgs.builder()\n                .initType(\"Clean\")\n                .build())\n            .build());\n\n        var exampleBuildDefinition = new BuildDefinition(\"exampleBuildDefinition\", BuildDefinitionArgs.builder()        \n            .projectId(exampleProject.id())\n            .repository(BuildDefinitionRepositoryArgs.builder()\n                .repoType(\"TfsGit\")\n                .repoId(exampleGit.id())\n                .ymlPath(\"azure-pipelines.yml\")\n                .build())\n            .build());\n\n        var exampleBranchPolicyBuildValidation = new BranchPolicyBuildValidation(\"exampleBranchPolicyBuildValidation\", BranchPolicyBuildValidationArgs.builder()        \n            .projectId(exampleProject.id())\n            .enabled(true)\n            .blocking(true)\n            .settings(BranchPolicyBuildValidationSettingsArgs.builder()\n                .displayName(\"Example build validation policy\")\n                .buildDefinitionId(exampleBuildDefinition.id())\n                .validDuration(720)\n                .filenamePatterns(                \n                    \"/WebApp/*\",\n                    \"!/WebApp/Tests/*\",\n                    \"*.cs\")\n                .scopes(                \n                    BranchPolicyBuildValidationSettingsScopeArgs.builder()\n                        .repositoryId(exampleGit.id())\n                        .repositoryRef(exampleGit.defaultBranch())\n                        .matchType(\"Exact\")\n                        .build(),\n                    BranchPolicyBuildValidationSettingsScopeArgs.builder()\n                        .repositoryId(exampleGit.id())\n                        .repositoryRef(\"refs/heads/releases\")\n                        .matchType(\"Prefix\")\n                        .build(),\n                    BranchPolicyBuildValidationSettingsScopeArgs.builder()\n                        .matchType(\"DefaultBranch\")\n                        .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n  exampleGit:\n    type: azuredevops:Git\n    properties:\n      projectId: ${exampleProject.id}\n      initialization:\n        initType: Clean\n  exampleBuildDefinition:\n    type: azuredevops:BuildDefinition\n    properties:\n      projectId: ${exampleProject.id}\n      repository:\n        repoType: TfsGit\n        repoId: ${exampleGit.id}\n        ymlPath: azure-pipelines.yml\n  exampleBranchPolicyBuildValidation:\n    type: azuredevops:BranchPolicyBuildValidation\n    properties:\n      projectId: ${exampleProject.id}\n      enabled: true\n      blocking: true\n      settings:\n        displayName: Example build validation policy\n        buildDefinitionId: ${exampleBuildDefinition.id}\n        validDuration: 720\n        filenamePatterns:\n          - /WebApp/*\n          - '!/WebApp/Tests/*'\n          - '*.cs'\n        scopes:\n          - repositoryId: ${exampleGit.id}\n            repositoryRef: ${exampleGit.defaultBranch}\n            matchType: Exact\n          - repositoryId: ${exampleGit.id}\n            repositoryRef: refs/heads/releases\n            matchType: Prefix\n          - matchType: DefaultBranch\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Policy Configurations](https://docs.microsoft.com/en-us/rest/api/azure/devops/policy/configurations/create?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Branch Policies can be imported using the project ID and policy configuration ID\n\n```sh\n $ pulumi import azuredevops:index/branchPolicyBuildValidation:BranchPolicyBuildValidation example 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "settings": {
                    "$ref": "#/types/azuredevops:index/BranchPolicyBuildValidationSettings:BranchPolicyBuildValidationSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "required": [
                "projectId",
                "settings"
            ],
            "inputProperties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n",
                    "willReplaceOnChanges": true
                },
                "settings": {
                    "$ref": "#/types/azuredevops:index/BranchPolicyBuildValidationSettings:BranchPolicyBuildValidationSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "settings"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BranchPolicyBuildValidation resources.\n",
                "properties": {
                    "blocking": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the policy will be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "settings": {
                        "$ref": "#/types/azuredevops:index/BranchPolicyBuildValidationSettings:BranchPolicyBuildValidationSettings",
                        "description": "Configuration for the policy. This block must be defined exactly once.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Policy/branchPolicyBuildValidation:BranchPolicyBuildValidation"
                }
            ]
        },
        "azuredevops:index/branchPolicyCommentResolution:BranchPolicyCommentResolution": {
            "description": "Configure a comment resolution policy for your branch within Azure DevOps project.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {});\nconst exampleGit = new azuredevops.Git(\"exampleGit\", {\n    projectId: exampleProject.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst exampleBranchPolicyCommentResolution = new azuredevops.BranchPolicyCommentResolution(\"exampleBranchPolicyCommentResolution\", {\n    projectId: exampleProject.id,\n    enabled: true,\n    blocking: true,\n    settings: {\n        scopes: [\n            {\n                repositoryId: exampleGit.id,\n                repositoryRef: exampleGit.defaultBranch,\n                matchType: \"Exact\",\n            },\n            {\n                repositoryId: exampleGit.id,\n                repositoryRef: \"refs/heads/releases\",\n                matchType: \"Prefix\",\n            },\n            {\n                matchType: \"DefaultBranch\",\n            },\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\")\nexample_git = azuredevops.Git(\"exampleGit\",\n    project_id=example_project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nexample_branch_policy_comment_resolution = azuredevops.BranchPolicyCommentResolution(\"exampleBranchPolicyCommentResolution\",\n    project_id=example_project.id,\n    enabled=True,\n    blocking=True,\n    settings=azuredevops.BranchPolicyCommentResolutionSettingsArgs(\n        scopes=[\n            azuredevops.BranchPolicyCommentResolutionSettingsScopeArgs(\n                repository_id=example_git.id,\n                repository_ref=example_git.default_branch,\n                match_type=\"Exact\",\n            ),\n            azuredevops.BranchPolicyCommentResolutionSettingsScopeArgs(\n                repository_id=example_git.id,\n                repository_ref=\"refs/heads/releases\",\n                match_type=\"Prefix\",\n            ),\n            azuredevops.BranchPolicyCommentResolutionSettingsScopeArgs(\n                match_type=\"DefaultBranch\",\n            ),\n        ],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\");\n\n    var exampleGit = new AzureDevOps.Git(\"exampleGit\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n        {\n            InitType = \"Clean\",\n        },\n    });\n\n    var exampleBranchPolicyCommentResolution = new AzureDevOps.BranchPolicyCommentResolution(\"exampleBranchPolicyCommentResolution\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Enabled = true,\n        Blocking = true,\n        Settings = new AzureDevOps.Inputs.BranchPolicyCommentResolutionSettingsArgs\n        {\n            Scopes = new[]\n            {\n                new AzureDevOps.Inputs.BranchPolicyCommentResolutionSettingsScopeArgs\n                {\n                    RepositoryId = exampleGit.Id,\n                    RepositoryRef = exampleGit.DefaultBranch,\n                    MatchType = \"Exact\",\n                },\n                new AzureDevOps.Inputs.BranchPolicyCommentResolutionSettingsScopeArgs\n                {\n                    RepositoryId = exampleGit.Id,\n                    RepositoryRef = \"refs/heads/releases\",\n                    MatchType = \"Prefix\",\n                },\n                new AzureDevOps.Inputs.BranchPolicyCommentResolutionSettingsScopeArgs\n                {\n                    MatchType = \"DefaultBranch\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGit, err := azuredevops.NewGit(ctx, \"exampleGit\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tInitialization: \u0026azuredevops.GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewBranchPolicyCommentResolution(ctx, \"exampleBranchPolicyCommentResolution\", \u0026azuredevops.BranchPolicyCommentResolutionArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t\tSettings: \u0026azuredevops.BranchPolicyCommentResolutionSettingsArgs{\n\t\t\t\tScopes: azuredevops.BranchPolicyCommentResolutionSettingsScopeArray{\n\t\t\t\t\t\u0026azuredevops.BranchPolicyCommentResolutionSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  exampleGit.ID(),\n\t\t\t\t\t\tRepositoryRef: exampleGit.DefaultBranch,\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Exact\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026azuredevops.BranchPolicyCommentResolutionSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  exampleGit.ID(),\n\t\t\t\t\t\tRepositoryRef: pulumi.String(\"refs/heads/releases\"),\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Prefix\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026azuredevops.BranchPolicyCommentResolutionSettingsScopeArgs{\n\t\t\t\t\t\tMatchType: pulumi.String(\"DefaultBranch\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.Git;\nimport com.pulumi.azuredevops.GitArgs;\nimport com.pulumi.azuredevops.inputs.GitInitializationArgs;\nimport com.pulumi.azuredevops.BranchPolicyCommentResolution;\nimport com.pulumi.azuredevops.BranchPolicyCommentResolutionArgs;\nimport com.pulumi.azuredevops.inputs.BranchPolicyCommentResolutionSettingsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\");\n\n        var exampleGit = new Git(\"exampleGit\", GitArgs.builder()        \n            .projectId(exampleProject.id())\n            .initialization(GitInitializationArgs.builder()\n                .initType(\"Clean\")\n                .build())\n            .build());\n\n        var exampleBranchPolicyCommentResolution = new BranchPolicyCommentResolution(\"exampleBranchPolicyCommentResolution\", BranchPolicyCommentResolutionArgs.builder()        \n            .projectId(exampleProject.id())\n            .enabled(true)\n            .blocking(true)\n            .settings(BranchPolicyCommentResolutionSettingsArgs.builder()\n                .scopes(                \n                    BranchPolicyCommentResolutionSettingsScopeArgs.builder()\n                        .repositoryId(exampleGit.id())\n                        .repositoryRef(exampleGit.defaultBranch())\n                        .matchType(\"Exact\")\n                        .build(),\n                    BranchPolicyCommentResolutionSettingsScopeArgs.builder()\n                        .repositoryId(exampleGit.id())\n                        .repositoryRef(\"refs/heads/releases\")\n                        .matchType(\"Prefix\")\n                        .build(),\n                    BranchPolicyCommentResolutionSettingsScopeArgs.builder()\n                        .matchType(\"DefaultBranch\")\n                        .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n  exampleGit:\n    type: azuredevops:Git\n    properties:\n      projectId: ${exampleProject.id}\n      initialization:\n        initType: Clean\n  exampleBranchPolicyCommentResolution:\n    type: azuredevops:BranchPolicyCommentResolution\n    properties:\n      projectId: ${exampleProject.id}\n      enabled: true\n      blocking: true\n      settings:\n        scopes:\n          - repositoryId: ${exampleGit.id}\n            repositoryRef: ${exampleGit.defaultBranch}\n            matchType: Exact\n          - repositoryId: ${exampleGit.id}\n            repositoryRef: refs/heads/releases\n            matchType: Prefix\n          - matchType: DefaultBranch\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Policy Configurations](https://docs.microsoft.com/en-us/rest/api/azure/devops/policy/configurations/create?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Branch Policies can be imported using the project ID and policy configuration ID\n\n```sh\n $ pulumi import azuredevops:index/branchPolicyCommentResolution:BranchPolicyCommentResolution example 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "settings": {
                    "$ref": "#/types/azuredevops:index/BranchPolicyCommentResolutionSettings:BranchPolicyCommentResolutionSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "required": [
                "projectId",
                "settings"
            ],
            "inputProperties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n",
                    "willReplaceOnChanges": true
                },
                "settings": {
                    "$ref": "#/types/azuredevops:index/BranchPolicyCommentResolutionSettings:BranchPolicyCommentResolutionSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "settings"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BranchPolicyCommentResolution resources.\n",
                "properties": {
                    "blocking": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the policy will be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "settings": {
                        "$ref": "#/types/azuredevops:index/BranchPolicyCommentResolutionSettings:BranchPolicyCommentResolutionSettings",
                        "description": "Configuration for the policy. This block must be defined exactly once.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/branchPolicyMergeTypes:BranchPolicyMergeTypes": {
            "description": "Branch policy for merge types allowed on a specified branch.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {});\nconst exampleGit = new azuredevops.Git(\"exampleGit\", {\n    projectId: exampleProject.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst exampleBranchPolicyMergeTypes = new azuredevops.BranchPolicyMergeTypes(\"exampleBranchPolicyMergeTypes\", {\n    projectId: exampleProject.id,\n    enabled: true,\n    blocking: true,\n    settings: {\n        allowSquash: true,\n        allowRebaseAndFastForward: true,\n        allowBasicNoFastForward: true,\n        allowRebaseWithMerge: true,\n        scopes: [\n            {\n                repositoryId: exampleGit.id,\n                repositoryRef: exampleGit.defaultBranch,\n                matchType: \"Exact\",\n            },\n            {\n                repositoryId: undefined,\n                repositoryRef: \"refs/heads/releases\",\n                matchType: \"Prefix\",\n            },\n            {\n                matchType: \"DefaultBranch\",\n            },\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\")\nexample_git = azuredevops.Git(\"exampleGit\",\n    project_id=example_project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nexample_branch_policy_merge_types = azuredevops.BranchPolicyMergeTypes(\"exampleBranchPolicyMergeTypes\",\n    project_id=example_project.id,\n    enabled=True,\n    blocking=True,\n    settings=azuredevops.BranchPolicyMergeTypesSettingsArgs(\n        allow_squash=True,\n        allow_rebase_and_fast_forward=True,\n        allow_basic_no_fast_forward=True,\n        allow_rebase_with_merge=True,\n        scopes=[\n            azuredevops.BranchPolicyMergeTypesSettingsScopeArgs(\n                repository_id=example_git.id,\n                repository_ref=example_git.default_branch,\n                match_type=\"Exact\",\n            ),\n            azuredevops.BranchPolicyMergeTypesSettingsScopeArgs(\n                repository_id=None,\n                repository_ref=\"refs/heads/releases\",\n                match_type=\"Prefix\",\n            ),\n            azuredevops.BranchPolicyMergeTypesSettingsScopeArgs(\n                match_type=\"DefaultBranch\",\n            ),\n        ],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\");\n\n    var exampleGit = new AzureDevOps.Git(\"exampleGit\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n        {\n            InitType = \"Clean\",\n        },\n    });\n\n    var exampleBranchPolicyMergeTypes = new AzureDevOps.BranchPolicyMergeTypes(\"exampleBranchPolicyMergeTypes\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Enabled = true,\n        Blocking = true,\n        Settings = new AzureDevOps.Inputs.BranchPolicyMergeTypesSettingsArgs\n        {\n            AllowSquash = true,\n            AllowRebaseAndFastForward = true,\n            AllowBasicNoFastForward = true,\n            AllowRebaseWithMerge = true,\n            Scopes = new[]\n            {\n                new AzureDevOps.Inputs.BranchPolicyMergeTypesSettingsScopeArgs\n                {\n                    RepositoryId = exampleGit.Id,\n                    RepositoryRef = exampleGit.DefaultBranch,\n                    MatchType = \"Exact\",\n                },\n                new AzureDevOps.Inputs.BranchPolicyMergeTypesSettingsScopeArgs\n                {\n                    RepositoryId = null,\n                    RepositoryRef = \"refs/heads/releases\",\n                    MatchType = \"Prefix\",\n                },\n                new AzureDevOps.Inputs.BranchPolicyMergeTypesSettingsScopeArgs\n                {\n                    MatchType = \"DefaultBranch\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGit, err := azuredevops.NewGit(ctx, \"exampleGit\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tInitialization: \u0026azuredevops.GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewBranchPolicyMergeTypes(ctx, \"exampleBranchPolicyMergeTypes\", \u0026azuredevops.BranchPolicyMergeTypesArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t\tSettings: \u0026azuredevops.BranchPolicyMergeTypesSettingsArgs{\n\t\t\t\tAllowSquash:               pulumi.Bool(true),\n\t\t\t\tAllowRebaseAndFastForward: pulumi.Bool(true),\n\t\t\t\tAllowBasicNoFastForward:   pulumi.Bool(true),\n\t\t\t\tAllowRebaseWithMerge:      pulumi.Bool(true),\n\t\t\t\tScopes: azuredevops.BranchPolicyMergeTypesSettingsScopeArray{\n\t\t\t\t\t\u0026azuredevops.BranchPolicyMergeTypesSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  exampleGit.ID(),\n\t\t\t\t\t\tRepositoryRef: exampleGit.DefaultBranch,\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Exact\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026azuredevops.BranchPolicyMergeTypesSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  nil,\n\t\t\t\t\t\tRepositoryRef: pulumi.String(\"refs/heads/releases\"),\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Prefix\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026azuredevops.BranchPolicyMergeTypesSettingsScopeArgs{\n\t\t\t\t\t\tMatchType: pulumi.String(\"DefaultBranch\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.Git;\nimport com.pulumi.azuredevops.GitArgs;\nimport com.pulumi.azuredevops.inputs.GitInitializationArgs;\nimport com.pulumi.azuredevops.BranchPolicyMergeTypes;\nimport com.pulumi.azuredevops.BranchPolicyMergeTypesArgs;\nimport com.pulumi.azuredevops.inputs.BranchPolicyMergeTypesSettingsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\");\n\n        var exampleGit = new Git(\"exampleGit\", GitArgs.builder()        \n            .projectId(exampleProject.id())\n            .initialization(GitInitializationArgs.builder()\n                .initType(\"Clean\")\n                .build())\n            .build());\n\n        var exampleBranchPolicyMergeTypes = new BranchPolicyMergeTypes(\"exampleBranchPolicyMergeTypes\", BranchPolicyMergeTypesArgs.builder()        \n            .projectId(exampleProject.id())\n            .enabled(true)\n            .blocking(true)\n            .settings(BranchPolicyMergeTypesSettingsArgs.builder()\n                .allowSquash(true)\n                .allowRebaseAndFastForward(true)\n                .allowBasicNoFastForward(true)\n                .allowRebaseWithMerge(true)\n                .scopes(                \n                    BranchPolicyMergeTypesSettingsScopeArgs.builder()\n                        .repositoryId(exampleGit.id())\n                        .repositoryRef(exampleGit.defaultBranch())\n                        .matchType(\"Exact\")\n                        .build(),\n                    BranchPolicyMergeTypesSettingsScopeArgs.builder()\n                        .repositoryId(null)\n                        .repositoryRef(\"refs/heads/releases\")\n                        .matchType(\"Prefix\")\n                        .build(),\n                    BranchPolicyMergeTypesSettingsScopeArgs.builder()\n                        .matchType(\"DefaultBranch\")\n                        .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n  exampleGit:\n    type: azuredevops:Git\n    properties:\n      projectId: ${exampleProject.id}\n      initialization:\n        initType: Clean\n  exampleBranchPolicyMergeTypes:\n    type: azuredevops:BranchPolicyMergeTypes\n    properties:\n      projectId: ${exampleProject.id}\n      enabled: true\n      blocking: true\n      settings:\n        allowSquash: true\n        allowRebaseAndFastForward: true\n        allowBasicNoFastForward: true\n        allowRebaseWithMerge: true\n        scopes:\n          - repositoryId: ${exampleGit.id}\n            repositoryRef: ${exampleGit.defaultBranch}\n            matchType: Exact\n          - repositoryId: null\n            repositoryRef: refs/heads/releases\n            matchType: Prefix\n          - matchType: DefaultBranch\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Policy Configurations](https://docs.microsoft.com/en-us/rest/api/azure/devops/policy/configurations/create?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Branch Policies can be imported using the project ID and policy configuration ID\n\n```sh\n $ pulumi import azuredevops:index/branchPolicyMergeTypes:BranchPolicyMergeTypes example 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "settings": {
                    "$ref": "#/types/azuredevops:index/BranchPolicyMergeTypesSettings:BranchPolicyMergeTypesSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "required": [
                "projectId",
                "settings"
            ],
            "inputProperties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n",
                    "willReplaceOnChanges": true
                },
                "settings": {
                    "$ref": "#/types/azuredevops:index/BranchPolicyMergeTypesSettings:BranchPolicyMergeTypesSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "settings"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BranchPolicyMergeTypes resources.\n",
                "properties": {
                    "blocking": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the policy will be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "settings": {
                        "$ref": "#/types/azuredevops:index/BranchPolicyMergeTypesSettings:BranchPolicyMergeTypesSettings",
                        "description": "Configuration for the policy. This block must be defined exactly once.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/branchPolicyMinReviewers:BranchPolicyMinReviewers": {
            "description": "Branch policy for reviewers on pull requests. Includes the minimum number of reviewers and other conditions.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {});\nconst exampleGit = new azuredevops.Git(\"exampleGit\", {\n    projectId: exampleProject.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst exampleBranchPolicyMinReviewers = new azuredevops.BranchPolicyMinReviewers(\"exampleBranchPolicyMinReviewers\", {\n    projectId: exampleProject.id,\n    enabled: true,\n    blocking: true,\n    settings: {\n        reviewerCount: 7,\n        submitterCanVote: false,\n        lastPusherCannotApprove: true,\n        allowCompletionWithRejectsOrWaits: false,\n        onPushResetApprovedVotes: true,\n        onLastIterationRequireVote: false,\n        scopes: [\n            {\n                repositoryId: exampleGit.id,\n                repositoryRef: exampleGit.defaultBranch,\n                matchType: \"Exact\",\n            },\n            {\n                repositoryId: undefined,\n                repositoryRef: \"refs/heads/releases\",\n                matchType: \"Prefix\",\n            },\n            {\n                matchType: \"DefaultBranch\",\n            },\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\")\nexample_git = azuredevops.Git(\"exampleGit\",\n    project_id=example_project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nexample_branch_policy_min_reviewers = azuredevops.BranchPolicyMinReviewers(\"exampleBranchPolicyMinReviewers\",\n    project_id=example_project.id,\n    enabled=True,\n    blocking=True,\n    settings=azuredevops.BranchPolicyMinReviewersSettingsArgs(\n        reviewer_count=7,\n        submitter_can_vote=False,\n        last_pusher_cannot_approve=True,\n        allow_completion_with_rejects_or_waits=False,\n        on_push_reset_approved_votes=True,\n        on_last_iteration_require_vote=False,\n        scopes=[\n            azuredevops.BranchPolicyMinReviewersSettingsScopeArgs(\n                repository_id=example_git.id,\n                repository_ref=example_git.default_branch,\n                match_type=\"Exact\",\n            ),\n            azuredevops.BranchPolicyMinReviewersSettingsScopeArgs(\n                repository_id=None,\n                repository_ref=\"refs/heads/releases\",\n                match_type=\"Prefix\",\n            ),\n            azuredevops.BranchPolicyMinReviewersSettingsScopeArgs(\n                match_type=\"DefaultBranch\",\n            ),\n        ],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\");\n\n    var exampleGit = new AzureDevOps.Git(\"exampleGit\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n        {\n            InitType = \"Clean\",\n        },\n    });\n\n    var exampleBranchPolicyMinReviewers = new AzureDevOps.BranchPolicyMinReviewers(\"exampleBranchPolicyMinReviewers\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Enabled = true,\n        Blocking = true,\n        Settings = new AzureDevOps.Inputs.BranchPolicyMinReviewersSettingsArgs\n        {\n            ReviewerCount = 7,\n            SubmitterCanVote = false,\n            LastPusherCannotApprove = true,\n            AllowCompletionWithRejectsOrWaits = false,\n            OnPushResetApprovedVotes = true,\n            OnLastIterationRequireVote = false,\n            Scopes = new[]\n            {\n                new AzureDevOps.Inputs.BranchPolicyMinReviewersSettingsScopeArgs\n                {\n                    RepositoryId = exampleGit.Id,\n                    RepositoryRef = exampleGit.DefaultBranch,\n                    MatchType = \"Exact\",\n                },\n                new AzureDevOps.Inputs.BranchPolicyMinReviewersSettingsScopeArgs\n                {\n                    RepositoryId = null,\n                    RepositoryRef = \"refs/heads/releases\",\n                    MatchType = \"Prefix\",\n                },\n                new AzureDevOps.Inputs.BranchPolicyMinReviewersSettingsScopeArgs\n                {\n                    MatchType = \"DefaultBranch\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGit, err := azuredevops.NewGit(ctx, \"exampleGit\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tInitialization: \u0026azuredevops.GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewBranchPolicyMinReviewers(ctx, \"exampleBranchPolicyMinReviewers\", \u0026azuredevops.BranchPolicyMinReviewersArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t\tSettings: \u0026azuredevops.BranchPolicyMinReviewersSettingsArgs{\n\t\t\t\tReviewerCount:                     pulumi.Int(7),\n\t\t\t\tSubmitterCanVote:                  pulumi.Bool(false),\n\t\t\t\tLastPusherCannotApprove:           pulumi.Bool(true),\n\t\t\t\tAllowCompletionWithRejectsOrWaits: pulumi.Bool(false),\n\t\t\t\tOnPushResetApprovedVotes:          pulumi.Bool(true),\n\t\t\t\tOnLastIterationRequireVote:        pulumi.Bool(false),\n\t\t\t\tScopes: azuredevops.BranchPolicyMinReviewersSettingsScopeArray{\n\t\t\t\t\t\u0026azuredevops.BranchPolicyMinReviewersSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  exampleGit.ID(),\n\t\t\t\t\t\tRepositoryRef: exampleGit.DefaultBranch,\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Exact\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026azuredevops.BranchPolicyMinReviewersSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  nil,\n\t\t\t\t\t\tRepositoryRef: pulumi.String(\"refs/heads/releases\"),\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Prefix\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026azuredevops.BranchPolicyMinReviewersSettingsScopeArgs{\n\t\t\t\t\t\tMatchType: pulumi.String(\"DefaultBranch\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.Git;\nimport com.pulumi.azuredevops.GitArgs;\nimport com.pulumi.azuredevops.inputs.GitInitializationArgs;\nimport com.pulumi.azuredevops.BranchPolicyMinReviewers;\nimport com.pulumi.azuredevops.BranchPolicyMinReviewersArgs;\nimport com.pulumi.azuredevops.inputs.BranchPolicyMinReviewersSettingsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\");\n\n        var exampleGit = new Git(\"exampleGit\", GitArgs.builder()        \n            .projectId(exampleProject.id())\n            .initialization(GitInitializationArgs.builder()\n                .initType(\"Clean\")\n                .build())\n            .build());\n\n        var exampleBranchPolicyMinReviewers = new BranchPolicyMinReviewers(\"exampleBranchPolicyMinReviewers\", BranchPolicyMinReviewersArgs.builder()        \n            .projectId(exampleProject.id())\n            .enabled(true)\n            .blocking(true)\n            .settings(BranchPolicyMinReviewersSettingsArgs.builder()\n                .reviewerCount(7)\n                .submitterCanVote(false)\n                .lastPusherCannotApprove(true)\n                .allowCompletionWithRejectsOrWaits(false)\n                .onPushResetApprovedVotes(true)\n                .onLastIterationRequireVote(false)\n                .scopes(                \n                    BranchPolicyMinReviewersSettingsScopeArgs.builder()\n                        .repositoryId(exampleGit.id())\n                        .repositoryRef(exampleGit.defaultBranch())\n                        .matchType(\"Exact\")\n                        .build(),\n                    BranchPolicyMinReviewersSettingsScopeArgs.builder()\n                        .repositoryId(null)\n                        .repositoryRef(\"refs/heads/releases\")\n                        .matchType(\"Prefix\")\n                        .build(),\n                    BranchPolicyMinReviewersSettingsScopeArgs.builder()\n                        .matchType(\"DefaultBranch\")\n                        .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n  exampleGit:\n    type: azuredevops:Git\n    properties:\n      projectId: ${exampleProject.id}\n      initialization:\n        initType: Clean\n  exampleBranchPolicyMinReviewers:\n    type: azuredevops:BranchPolicyMinReviewers\n    properties:\n      projectId: ${exampleProject.id}\n      enabled: true\n      blocking: true\n      settings:\n        reviewerCount: 7\n        submitterCanVote: false\n        lastPusherCannotApprove: true\n        allowCompletionWithRejectsOrWaits: false\n        onPushResetApprovedVotes: true\n        onLastIterationRequireVote: false\n        scopes:\n          - repositoryId: ${exampleGit.id}\n            repositoryRef: ${exampleGit.defaultBranch}\n            matchType: Exact\n          - repositoryId: null\n            repositoryRef: refs/heads/releases\n            matchType: Prefix\n          - matchType: DefaultBranch\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Policy Configurations](https://docs.microsoft.com/en-us/rest/api/azure/devops/policy/configurations/create?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Branch Policies can be imported using the project ID and policy configuration ID\n\n```sh\n $ pulumi import azuredevops:index/branchPolicyMinReviewers:BranchPolicyMinReviewers example 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "settings": {
                    "$ref": "#/types/azuredevops:index/BranchPolicyMinReviewersSettings:BranchPolicyMinReviewersSettings",
                    "description": "A `settings` block as defined below.. This block must be defined exactly once.\n"
                }
            },
            "required": [
                "projectId",
                "settings"
            ],
            "inputProperties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n",
                    "willReplaceOnChanges": true
                },
                "settings": {
                    "$ref": "#/types/azuredevops:index/BranchPolicyMinReviewersSettings:BranchPolicyMinReviewersSettings",
                    "description": "A `settings` block as defined below.. This block must be defined exactly once.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "settings"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BranchPolicyMinReviewers resources.\n",
                "properties": {
                    "blocking": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the policy will be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "settings": {
                        "$ref": "#/types/azuredevops:index/BranchPolicyMinReviewersSettings:BranchPolicyMinReviewersSettings",
                        "description": "A `settings` block as defined below.. This block must be defined exactly once.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Policy/branchPolicyMinReviewers:BranchPolicyMinReviewers"
                }
            ]
        },
        "azuredevops:index/branchPolicyStatusCheck:BranchPolicyStatusCheck": {
            "description": "Manages a status check branch policy within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    features: {\n        testplans: \"disabled\",\n        artifacts: \"disabled\",\n    },\n    description: \"Managed by Terraform\",\n});\nconst exampleGit = new azuredevops.Git(\"exampleGit\", {\n    projectId: exampleProject.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst exampleUser = new azuredevops.User(\"exampleUser\", {\n    principalName: \"mail@email.com\",\n    accountLicenseType: \"basic\",\n});\nconst exampleBranchPolicyStatusCheck = new azuredevops.BranchPolicyStatusCheck(\"exampleBranchPolicyStatusCheck\", {\n    projectId: exampleProject.id,\n    enabled: true,\n    blocking: true,\n    settings: {\n        name: \"Release\",\n        authorId: exampleUser.id,\n        invalidateOnUpdate: true,\n        applicability: \"conditional\",\n        displayName: \"PreCheck\",\n        scopes: [\n            {\n                repositoryId: exampleGit.id,\n                repositoryRef: exampleGit.defaultBranch,\n                matchType: \"Exact\",\n            },\n            {\n                matchType: \"DefaultBranch\",\n            },\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    features={\n        \"testplans\": \"disabled\",\n        \"artifacts\": \"disabled\",\n    },\n    description=\"Managed by Terraform\")\nexample_git = azuredevops.Git(\"exampleGit\",\n    project_id=example_project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nexample_user = azuredevops.User(\"exampleUser\",\n    principal_name=\"mail@email.com\",\n    account_license_type=\"basic\")\nexample_branch_policy_status_check = azuredevops.BranchPolicyStatusCheck(\"exampleBranchPolicyStatusCheck\",\n    project_id=example_project.id,\n    enabled=True,\n    blocking=True,\n    settings=azuredevops.BranchPolicyStatusCheckSettingsArgs(\n        name=\"Release\",\n        author_id=example_user.id,\n        invalidate_on_update=True,\n        applicability=\"conditional\",\n        display_name=\"PreCheck\",\n        scopes=[\n            azuredevops.BranchPolicyStatusCheckSettingsScopeArgs(\n                repository_id=example_git.id,\n                repository_ref=example_git.default_branch,\n                match_type=\"Exact\",\n            ),\n            azuredevops.BranchPolicyStatusCheckSettingsScopeArgs(\n                match_type=\"DefaultBranch\",\n            ),\n        ],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Features = \n        {\n            { \"testplans\", \"disabled\" },\n            { \"artifacts\", \"disabled\" },\n        },\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleGit = new AzureDevOps.Git(\"exampleGit\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n        {\n            InitType = \"Clean\",\n        },\n    });\n\n    var exampleUser = new AzureDevOps.User(\"exampleUser\", new()\n    {\n        PrincipalName = \"mail@email.com\",\n        AccountLicenseType = \"basic\",\n    });\n\n    var exampleBranchPolicyStatusCheck = new AzureDevOps.BranchPolicyStatusCheck(\"exampleBranchPolicyStatusCheck\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Enabled = true,\n        Blocking = true,\n        Settings = new AzureDevOps.Inputs.BranchPolicyStatusCheckSettingsArgs\n        {\n            Name = \"Release\",\n            AuthorId = exampleUser.Id,\n            InvalidateOnUpdate = true,\n            Applicability = \"conditional\",\n            DisplayName = \"PreCheck\",\n            Scopes = new[]\n            {\n                new AzureDevOps.Inputs.BranchPolicyStatusCheckSettingsScopeArgs\n                {\n                    RepositoryId = exampleGit.Id,\n                    RepositoryRef = exampleGit.DefaultBranch,\n                    MatchType = \"Exact\",\n                },\n                new AzureDevOps.Inputs.BranchPolicyStatusCheckSettingsScopeArgs\n                {\n                    MatchType = \"DefaultBranch\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tFeatures: pulumi.StringMap{\n\t\t\t\t\"testplans\": pulumi.String(\"disabled\"),\n\t\t\t\t\"artifacts\": pulumi.String(\"disabled\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGit, err := azuredevops.NewGit(ctx, \"exampleGit\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tInitialization: \u0026azuredevops.GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUser, err := azuredevops.NewUser(ctx, \"exampleUser\", \u0026azuredevops.UserArgs{\n\t\t\tPrincipalName:      pulumi.String(\"mail@email.com\"),\n\t\t\tAccountLicenseType: pulumi.String(\"basic\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewBranchPolicyStatusCheck(ctx, \"exampleBranchPolicyStatusCheck\", \u0026azuredevops.BranchPolicyStatusCheckArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t\tSettings: \u0026azuredevops.BranchPolicyStatusCheckSettingsArgs{\n\t\t\t\tName:               pulumi.String(\"Release\"),\n\t\t\t\tAuthorId:           exampleUser.ID(),\n\t\t\t\tInvalidateOnUpdate: pulumi.Bool(true),\n\t\t\t\tApplicability:      pulumi.String(\"conditional\"),\n\t\t\t\tDisplayName:        pulumi.String(\"PreCheck\"),\n\t\t\t\tScopes: azuredevops.BranchPolicyStatusCheckSettingsScopeArray{\n\t\t\t\t\t\u0026azuredevops.BranchPolicyStatusCheckSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  exampleGit.ID(),\n\t\t\t\t\t\tRepositoryRef: exampleGit.DefaultBranch,\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Exact\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026azuredevops.BranchPolicyStatusCheckSettingsScopeArgs{\n\t\t\t\t\t\tMatchType: pulumi.String(\"DefaultBranch\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.Git;\nimport com.pulumi.azuredevops.GitArgs;\nimport com.pulumi.azuredevops.inputs.GitInitializationArgs;\nimport com.pulumi.azuredevops.User;\nimport com.pulumi.azuredevops.UserArgs;\nimport com.pulumi.azuredevops.BranchPolicyStatusCheck;\nimport com.pulumi.azuredevops.BranchPolicyStatusCheckArgs;\nimport com.pulumi.azuredevops.inputs.BranchPolicyStatusCheckSettingsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .features(Map.ofEntries(\n                Map.entry(\"testplans\", \"disabled\"),\n                Map.entry(\"artifacts\", \"disabled\")\n            ))\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleGit = new Git(\"exampleGit\", GitArgs.builder()        \n            .projectId(exampleProject.id())\n            .initialization(GitInitializationArgs.builder()\n                .initType(\"Clean\")\n                .build())\n            .build());\n\n        var exampleUser = new User(\"exampleUser\", UserArgs.builder()        \n            .principalName(\"mail@email.com\")\n            .accountLicenseType(\"basic\")\n            .build());\n\n        var exampleBranchPolicyStatusCheck = new BranchPolicyStatusCheck(\"exampleBranchPolicyStatusCheck\", BranchPolicyStatusCheckArgs.builder()        \n            .projectId(exampleProject.id())\n            .enabled(true)\n            .blocking(true)\n            .settings(BranchPolicyStatusCheckSettingsArgs.builder()\n                .name(\"Release\")\n                .authorId(exampleUser.id())\n                .invalidateOnUpdate(true)\n                .applicability(\"conditional\")\n                .displayName(\"PreCheck\")\n                .scopes(                \n                    BranchPolicyStatusCheckSettingsScopeArgs.builder()\n                        .repositoryId(exampleGit.id())\n                        .repositoryRef(exampleGit.defaultBranch())\n                        .matchType(\"Exact\")\n                        .build(),\n                    BranchPolicyStatusCheckSettingsScopeArgs.builder()\n                        .matchType(\"DefaultBranch\")\n                        .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      features:\n        testplans: disabled\n        artifacts: disabled\n      description: Managed by Terraform\n  exampleGit:\n    type: azuredevops:Git\n    properties:\n      projectId: ${exampleProject.id}\n      initialization:\n        initType: Clean\n  exampleUser:\n    type: azuredevops:User\n    properties:\n      principalName: mail@email.com\n      accountLicenseType: basic\n  exampleBranchPolicyStatusCheck:\n    type: azuredevops:BranchPolicyStatusCheck\n    properties:\n      projectId: ${exampleProject.id}\n      enabled: true\n      blocking: true\n      settings:\n        name: Release\n        authorId: ${exampleUser.id}\n        invalidateOnUpdate: true\n        applicability: conditional\n        displayName: PreCheck\n        scopes:\n          - repositoryId: ${exampleGit.id}\n            repositoryRef: ${exampleGit.defaultBranch}\n            matchType: Exact\n          - matchType: DefaultBranch\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Policy Configurations](https://docs.microsoft.com/en-us/rest/api/azure/devops/policy/configurations/create?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Branch Policies can be imported using the project ID and policy configuration ID\n\n```sh\n $ pulumi import azuredevops:index/branchPolicyStatusCheck:BranchPolicyStatusCheck example 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "settings": {
                    "$ref": "#/types/azuredevops:index/BranchPolicyStatusCheckSettings:BranchPolicyStatusCheckSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "required": [
                "projectId",
                "settings"
            ],
            "inputProperties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n",
                    "willReplaceOnChanges": true
                },
                "settings": {
                    "$ref": "#/types/azuredevops:index/BranchPolicyStatusCheckSettings:BranchPolicyStatusCheckSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "settings"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BranchPolicyStatusCheck resources.\n",
                "properties": {
                    "blocking": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the policy will be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "settings": {
                        "$ref": "#/types/azuredevops:index/BranchPolicyStatusCheckSettings:BranchPolicyStatusCheckSettings",
                        "description": "Configuration for the policy. This block must be defined exactly once.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/branchPolicyWorkItemLinking:BranchPolicyWorkItemLinking": {
            "description": "Require associations between branches and a work item within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {});\nconst exampleGit = new azuredevops.Git(\"exampleGit\", {\n    projectId: exampleProject.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst exampleBranchPolicyWorkItemLinking = new azuredevops.BranchPolicyWorkItemLinking(\"exampleBranchPolicyWorkItemLinking\", {\n    projectId: exampleProject.id,\n    enabled: true,\n    blocking: true,\n    settings: {\n        scopes: [\n            {\n                repositoryId: exampleGit.id,\n                repositoryRef: exampleGit.defaultBranch,\n                matchType: \"Exact\",\n            },\n            {\n                repositoryId: exampleGit.id,\n                repositoryRef: \"refs/heads/releases\",\n                matchType: \"Prefix\",\n            },\n            {\n                matchType: \"DefaultBranch\",\n            },\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\")\nexample_git = azuredevops.Git(\"exampleGit\",\n    project_id=example_project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nexample_branch_policy_work_item_linking = azuredevops.BranchPolicyWorkItemLinking(\"exampleBranchPolicyWorkItemLinking\",\n    project_id=example_project.id,\n    enabled=True,\n    blocking=True,\n    settings=azuredevops.BranchPolicyWorkItemLinkingSettingsArgs(\n        scopes=[\n            azuredevops.BranchPolicyWorkItemLinkingSettingsScopeArgs(\n                repository_id=example_git.id,\n                repository_ref=example_git.default_branch,\n                match_type=\"Exact\",\n            ),\n            azuredevops.BranchPolicyWorkItemLinkingSettingsScopeArgs(\n                repository_id=example_git.id,\n                repository_ref=\"refs/heads/releases\",\n                match_type=\"Prefix\",\n            ),\n            azuredevops.BranchPolicyWorkItemLinkingSettingsScopeArgs(\n                match_type=\"DefaultBranch\",\n            ),\n        ],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\");\n\n    var exampleGit = new AzureDevOps.Git(\"exampleGit\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n        {\n            InitType = \"Clean\",\n        },\n    });\n\n    var exampleBranchPolicyWorkItemLinking = new AzureDevOps.BranchPolicyWorkItemLinking(\"exampleBranchPolicyWorkItemLinking\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Enabled = true,\n        Blocking = true,\n        Settings = new AzureDevOps.Inputs.BranchPolicyWorkItemLinkingSettingsArgs\n        {\n            Scopes = new[]\n            {\n                new AzureDevOps.Inputs.BranchPolicyWorkItemLinkingSettingsScopeArgs\n                {\n                    RepositoryId = exampleGit.Id,\n                    RepositoryRef = exampleGit.DefaultBranch,\n                    MatchType = \"Exact\",\n                },\n                new AzureDevOps.Inputs.BranchPolicyWorkItemLinkingSettingsScopeArgs\n                {\n                    RepositoryId = exampleGit.Id,\n                    RepositoryRef = \"refs/heads/releases\",\n                    MatchType = \"Prefix\",\n                },\n                new AzureDevOps.Inputs.BranchPolicyWorkItemLinkingSettingsScopeArgs\n                {\n                    MatchType = \"DefaultBranch\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGit, err := azuredevops.NewGit(ctx, \"exampleGit\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tInitialization: \u0026azuredevops.GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewBranchPolicyWorkItemLinking(ctx, \"exampleBranchPolicyWorkItemLinking\", \u0026azuredevops.BranchPolicyWorkItemLinkingArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t\tSettings: \u0026azuredevops.BranchPolicyWorkItemLinkingSettingsArgs{\n\t\t\t\tScopes: azuredevops.BranchPolicyWorkItemLinkingSettingsScopeArray{\n\t\t\t\t\t\u0026azuredevops.BranchPolicyWorkItemLinkingSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  exampleGit.ID(),\n\t\t\t\t\t\tRepositoryRef: exampleGit.DefaultBranch,\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Exact\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026azuredevops.BranchPolicyWorkItemLinkingSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  exampleGit.ID(),\n\t\t\t\t\t\tRepositoryRef: pulumi.String(\"refs/heads/releases\"),\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Prefix\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026azuredevops.BranchPolicyWorkItemLinkingSettingsScopeArgs{\n\t\t\t\t\t\tMatchType: pulumi.String(\"DefaultBranch\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.Git;\nimport com.pulumi.azuredevops.GitArgs;\nimport com.pulumi.azuredevops.inputs.GitInitializationArgs;\nimport com.pulumi.azuredevops.BranchPolicyWorkItemLinking;\nimport com.pulumi.azuredevops.BranchPolicyWorkItemLinkingArgs;\nimport com.pulumi.azuredevops.inputs.BranchPolicyWorkItemLinkingSettingsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\");\n\n        var exampleGit = new Git(\"exampleGit\", GitArgs.builder()        \n            .projectId(exampleProject.id())\n            .initialization(GitInitializationArgs.builder()\n                .initType(\"Clean\")\n                .build())\n            .build());\n\n        var exampleBranchPolicyWorkItemLinking = new BranchPolicyWorkItemLinking(\"exampleBranchPolicyWorkItemLinking\", BranchPolicyWorkItemLinkingArgs.builder()        \n            .projectId(exampleProject.id())\n            .enabled(true)\n            .blocking(true)\n            .settings(BranchPolicyWorkItemLinkingSettingsArgs.builder()\n                .scopes(                \n                    BranchPolicyWorkItemLinkingSettingsScopeArgs.builder()\n                        .repositoryId(exampleGit.id())\n                        .repositoryRef(exampleGit.defaultBranch())\n                        .matchType(\"Exact\")\n                        .build(),\n                    BranchPolicyWorkItemLinkingSettingsScopeArgs.builder()\n                        .repositoryId(exampleGit.id())\n                        .repositoryRef(\"refs/heads/releases\")\n                        .matchType(\"Prefix\")\n                        .build(),\n                    BranchPolicyWorkItemLinkingSettingsScopeArgs.builder()\n                        .matchType(\"DefaultBranch\")\n                        .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n  exampleGit:\n    type: azuredevops:Git\n    properties:\n      projectId: ${exampleProject.id}\n      initialization:\n        initType: Clean\n  exampleBranchPolicyWorkItemLinking:\n    type: azuredevops:BranchPolicyWorkItemLinking\n    properties:\n      projectId: ${exampleProject.id}\n      enabled: true\n      blocking: true\n      settings:\n        scopes:\n          - repositoryId: ${exampleGit.id}\n            repositoryRef: ${exampleGit.defaultBranch}\n            matchType: Exact\n          - repositoryId: ${exampleGit.id}\n            repositoryRef: refs/heads/releases\n            matchType: Prefix\n          - matchType: DefaultBranch\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Policy Configurations](https://docs.microsoft.com/en-us/rest/api/azure/devops/policy/configurations/create?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Branch Policies can be imported using the project ID and policy configuration ID\n\n```sh\n $ pulumi import azuredevops:index/branchPolicyWorkItemLinking:BranchPolicyWorkItemLinking example 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "settings": {
                    "$ref": "#/types/azuredevops:index/BranchPolicyWorkItemLinkingSettings:BranchPolicyWorkItemLinkingSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "required": [
                "projectId",
                "settings"
            ],
            "inputProperties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n",
                    "willReplaceOnChanges": true
                },
                "settings": {
                    "$ref": "#/types/azuredevops:index/BranchPolicyWorkItemLinkingSettings:BranchPolicyWorkItemLinkingSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "settings"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BranchPolicyWorkItemLinking resources.\n",
                "properties": {
                    "blocking": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the policy will be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "settings": {
                        "$ref": "#/types/azuredevops:index/BranchPolicyWorkItemLinkingSettings:BranchPolicyWorkItemLinkingSettings",
                        "description": "Configuration for the policy. This block must be defined exactly once.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/buildDefinition:BuildDefinition": {
            "description": "Manages a Build Definition within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Tfs\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst exampleGit = new azuredevops.Git(\"exampleGit\", {\n    projectId: exampleProject.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst exampleVariableGroup = new azuredevops.VariableGroup(\"exampleVariableGroup\", {\n    projectId: exampleProject.id,\n    description: \"Managed by Terraform\",\n    allowAccess: true,\n    variables: [{\n        name: \"FOO\",\n        value: \"BAR\",\n    }],\n});\nconst exampleBuildDefinition = new azuredevops.BuildDefinition(\"exampleBuildDefinition\", {\n    projectId: exampleProject.id,\n    path: \"\\\\ExampleFolder\",\n    ciTrigger: {\n        useYaml: false,\n    },\n    schedules: [{\n        branchFilters: [{\n            includes: [\"master\"],\n            excludes: [\n                \"test\",\n                \"regression\",\n            ],\n        }],\n        daysToBuilds: [\n            \"Wed\",\n            \"Sun\",\n        ],\n        scheduleOnlyWithChanges: true,\n        startHours: 10,\n        startMinutes: 59,\n        timeZone: \"(UTC) Coordinated Universal Time\",\n    }],\n    repository: {\n        repoType: \"TfsGit\",\n        repoId: exampleGit.id,\n        branchName: exampleGit.defaultBranch,\n        ymlPath: \"azure-pipelines.yml\",\n    },\n    variableGroups: [exampleVariableGroup.id],\n    variables: [\n        {\n            name: \"PipelineVariable\",\n            value: \"Go Microsoft!\",\n        },\n        {\n            name: \"PipelineSecret\",\n            secretValue: \"ZGV2cw\",\n            isSecret: true,\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nexample_git = azuredevops.Git(\"exampleGit\",\n    project_id=example_project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nexample_variable_group = azuredevops.VariableGroup(\"exampleVariableGroup\",\n    project_id=example_project.id,\n    description=\"Managed by Terraform\",\n    allow_access=True,\n    variables=[azuredevops.VariableGroupVariableArgs(\n        name=\"FOO\",\n        value=\"BAR\",\n    )])\nexample_build_definition = azuredevops.BuildDefinition(\"exampleBuildDefinition\",\n    project_id=example_project.id,\n    path=\"\\\\ExampleFolder\",\n    ci_trigger=azuredevops.BuildDefinitionCiTriggerArgs(\n        use_yaml=False,\n    ),\n    schedules=[azuredevops.BuildDefinitionScheduleArgs(\n        branch_filters=[azuredevops.BuildDefinitionScheduleBranchFilterArgs(\n            includes=[\"master\"],\n            excludes=[\n                \"test\",\n                \"regression\",\n            ],\n        )],\n        days_to_builds=[\n            \"Wed\",\n            \"Sun\",\n        ],\n        schedule_only_with_changes=True,\n        start_hours=10,\n        start_minutes=59,\n        time_zone=\"(UTC) Coordinated Universal Time\",\n    )],\n    repository=azuredevops.BuildDefinitionRepositoryArgs(\n        repo_type=\"TfsGit\",\n        repo_id=example_git.id,\n        branch_name=example_git.default_branch,\n        yml_path=\"azure-pipelines.yml\",\n    ),\n    variable_groups=[example_variable_group.id],\n    variables=[\n        azuredevops.BuildDefinitionVariableArgs(\n            name=\"PipelineVariable\",\n            value=\"Go Microsoft!\",\n        ),\n        azuredevops.BuildDefinitionVariableArgs(\n            name=\"PipelineSecret\",\n            secret_value=\"ZGV2cw\",\n            is_secret=True,\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n    });\n\n    var exampleGit = new AzureDevOps.Git(\"exampleGit\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n        {\n            InitType = \"Clean\",\n        },\n    });\n\n    var exampleVariableGroup = new AzureDevOps.VariableGroup(\"exampleVariableGroup\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Description = \"Managed by Terraform\",\n        AllowAccess = true,\n        Variables = new[]\n        {\n            new AzureDevOps.Inputs.VariableGroupVariableArgs\n            {\n                Name = \"FOO\",\n                Value = \"BAR\",\n            },\n        },\n    });\n\n    var exampleBuildDefinition = new AzureDevOps.BuildDefinition(\"exampleBuildDefinition\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Path = \"\\\\ExampleFolder\",\n        CiTrigger = new AzureDevOps.Inputs.BuildDefinitionCiTriggerArgs\n        {\n            UseYaml = false,\n        },\n        Schedules = new[]\n        {\n            new AzureDevOps.Inputs.BuildDefinitionScheduleArgs\n            {\n                BranchFilters = new[]\n                {\n                    new AzureDevOps.Inputs.BuildDefinitionScheduleBranchFilterArgs\n                    {\n                        Includes = new[]\n                        {\n                            \"master\",\n                        },\n                        Excludes = new[]\n                        {\n                            \"test\",\n                            \"regression\",\n                        },\n                    },\n                },\n                DaysToBuilds = new[]\n                {\n                    \"Wed\",\n                    \"Sun\",\n                },\n                ScheduleOnlyWithChanges = true,\n                StartHours = 10,\n                StartMinutes = 59,\n                TimeZone = \"(UTC) Coordinated Universal Time\",\n            },\n        },\n        Repository = new AzureDevOps.Inputs.BuildDefinitionRepositoryArgs\n        {\n            RepoType = \"TfsGit\",\n            RepoId = exampleGit.Id,\n            BranchName = exampleGit.DefaultBranch,\n            YmlPath = \"azure-pipelines.yml\",\n        },\n        VariableGroups = new[]\n        {\n            exampleVariableGroup.Id,\n        },\n        Variables = new[]\n        {\n            new AzureDevOps.Inputs.BuildDefinitionVariableArgs\n            {\n                Name = \"PipelineVariable\",\n                Value = \"Go Microsoft!\",\n            },\n            new AzureDevOps.Inputs.BuildDefinitionVariableArgs\n            {\n                Name = \"PipelineSecret\",\n                SecretValue = \"ZGV2cw\",\n                IsSecret = true,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGit, err := azuredevops.NewGit(ctx, \"exampleGit\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tInitialization: \u0026azuredevops.GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleVariableGroup, err := azuredevops.NewVariableGroup(ctx, \"exampleVariableGroup\", \u0026azuredevops.VariableGroupArgs{\n\t\t\tProjectId:   exampleProject.ID(),\n\t\t\tDescription: pulumi.String(\"Managed by Terraform\"),\n\t\t\tAllowAccess: pulumi.Bool(true),\n\t\t\tVariables: azuredevops.VariableGroupVariableArray{\n\t\t\t\t\u0026azuredevops.VariableGroupVariableArgs{\n\t\t\t\t\tName:  pulumi.String(\"FOO\"),\n\t\t\t\t\tValue: pulumi.String(\"BAR\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewBuildDefinition(ctx, \"exampleBuildDefinition\", \u0026azuredevops.BuildDefinitionArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tPath:      pulumi.String(\"\\\\ExampleFolder\"),\n\t\t\tCiTrigger: \u0026azuredevops.BuildDefinitionCiTriggerArgs{\n\t\t\t\tUseYaml: pulumi.Bool(false),\n\t\t\t},\n\t\t\tSchedules: azuredevops.BuildDefinitionScheduleArray{\n\t\t\t\t\u0026azuredevops.BuildDefinitionScheduleArgs{\n\t\t\t\t\tBranchFilters: azuredevops.BuildDefinitionScheduleBranchFilterArray{\n\t\t\t\t\t\t\u0026azuredevops.BuildDefinitionScheduleBranchFilterArgs{\n\t\t\t\t\t\t\tIncludes: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"master\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tExcludes: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"test\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"regression\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tDaysToBuilds: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"Wed\"),\n\t\t\t\t\t\tpulumi.String(\"Sun\"),\n\t\t\t\t\t},\n\t\t\t\t\tScheduleOnlyWithChanges: pulumi.Bool(true),\n\t\t\t\t\tStartHours:              pulumi.Int(10),\n\t\t\t\t\tStartMinutes:            pulumi.Int(59),\n\t\t\t\t\tTimeZone:                pulumi.String(\"(UTC) Coordinated Universal Time\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRepository: \u0026azuredevops.BuildDefinitionRepositoryArgs{\n\t\t\t\tRepoType:   pulumi.String(\"TfsGit\"),\n\t\t\t\tRepoId:     exampleGit.ID(),\n\t\t\t\tBranchName: exampleGit.DefaultBranch,\n\t\t\t\tYmlPath:    pulumi.String(\"azure-pipelines.yml\"),\n\t\t\t},\n\t\t\tVariableGroups: pulumi.IntArray{\n\t\t\t\texampleVariableGroup.ID(),\n\t\t\t},\n\t\t\tVariables: azuredevops.BuildDefinitionVariableArray{\n\t\t\t\t\u0026azuredevops.BuildDefinitionVariableArgs{\n\t\t\t\t\tName:  pulumi.String(\"PipelineVariable\"),\n\t\t\t\t\tValue: pulumi.String(\"Go Microsoft!\"),\n\t\t\t\t},\n\t\t\t\t\u0026azuredevops.BuildDefinitionVariableArgs{\n\t\t\t\t\tName:        pulumi.String(\"PipelineSecret\"),\n\t\t\t\t\tSecretValue: pulumi.String(\"ZGV2cw\"),\n\t\t\t\t\tIsSecret:    pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.Git;\nimport com.pulumi.azuredevops.GitArgs;\nimport com.pulumi.azuredevops.inputs.GitInitializationArgs;\nimport com.pulumi.azuredevops.VariableGroup;\nimport com.pulumi.azuredevops.VariableGroupArgs;\nimport com.pulumi.azuredevops.inputs.VariableGroupVariableArgs;\nimport com.pulumi.azuredevops.BuildDefinition;\nimport com.pulumi.azuredevops.BuildDefinitionArgs;\nimport com.pulumi.azuredevops.inputs.BuildDefinitionCiTriggerArgs;\nimport com.pulumi.azuredevops.inputs.BuildDefinitionScheduleArgs;\nimport com.pulumi.azuredevops.inputs.BuildDefinitionRepositoryArgs;\nimport com.pulumi.azuredevops.inputs.BuildDefinitionVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .build());\n\n        var exampleGit = new Git(\"exampleGit\", GitArgs.builder()        \n            .projectId(exampleProject.id())\n            .initialization(GitInitializationArgs.builder()\n                .initType(\"Clean\")\n                .build())\n            .build());\n\n        var exampleVariableGroup = new VariableGroup(\"exampleVariableGroup\", VariableGroupArgs.builder()        \n            .projectId(exampleProject.id())\n            .description(\"Managed by Terraform\")\n            .allowAccess(true)\n            .variables(VariableGroupVariableArgs.builder()\n                .name(\"FOO\")\n                .value(\"BAR\")\n                .build())\n            .build());\n\n        var exampleBuildDefinition = new BuildDefinition(\"exampleBuildDefinition\", BuildDefinitionArgs.builder()        \n            .projectId(exampleProject.id())\n            .path(\"\\\\ExampleFolder\")\n            .ciTrigger(BuildDefinitionCiTriggerArgs.builder()\n                .useYaml(false)\n                .build())\n            .schedules(BuildDefinitionScheduleArgs.builder()\n                .branchFilters(BuildDefinitionScheduleBranchFilterArgs.builder()\n                    .includes(\"master\")\n                    .excludes(                    \n                        \"test\",\n                        \"regression\")\n                    .build())\n                .daysToBuilds(                \n                    \"Wed\",\n                    \"Sun\")\n                .scheduleOnlyWithChanges(true)\n                .startHours(10)\n                .startMinutes(59)\n                .timeZone(\"(UTC) Coordinated Universal Time\")\n                .build())\n            .repository(BuildDefinitionRepositoryArgs.builder()\n                .repoType(\"TfsGit\")\n                .repoId(exampleGit.id())\n                .branchName(exampleGit.defaultBranch())\n                .ymlPath(\"azure-pipelines.yml\")\n                .build())\n            .variableGroups(exampleVariableGroup.id())\n            .variables(            \n                BuildDefinitionVariableArgs.builder()\n                    .name(\"PipelineVariable\")\n                    .value(\"Go Microsoft!\")\n                    .build(),\n                BuildDefinitionVariableArgs.builder()\n                    .name(\"PipelineSecret\")\n                    .secretValue(\"ZGV2cw\")\n                    .isSecret(true)\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n  exampleGit:\n    type: azuredevops:Git\n    properties:\n      projectId: ${exampleProject.id}\n      initialization:\n        initType: Clean\n  exampleVariableGroup:\n    type: azuredevops:VariableGroup\n    properties:\n      projectId: ${exampleProject.id}\n      description: Managed by Terraform\n      allowAccess: true\n      variables:\n        - name: FOO\n          value: BAR\n  exampleBuildDefinition:\n    type: azuredevops:BuildDefinition\n    properties:\n      projectId: ${exampleProject.id}\n      path: \\ExampleFolder\n      ciTrigger:\n        useYaml: false\n      schedules:\n        - branchFilters:\n            - includes:\n                - master\n              excludes:\n                - test\n                - regression\n          daysToBuilds:\n            - Wed\n            - Sun\n          scheduleOnlyWithChanges: true\n          startHours: 10\n          startMinutes: 59\n          timeZone: (UTC) Coordinated Universal Time\n      repository:\n        repoType: TfsGit\n        repoId: ${exampleGit.id}\n        branchName: ${exampleGit.defaultBranch}\n        ymlPath: azure-pipelines.yml\n      variableGroups:\n        - ${exampleVariableGroup.id}\n      variables:\n        - name: PipelineVariable\n          value: Go Microsoft!\n        - name: PipelineSecret\n          secretValue: ZGV2cw\n          isSecret: true\n```\n{{% /example %}}\n{{% example %}}\n### GitHub Enterprise\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst exampleServiceEndpointGitHubEnterprise = new azuredevops.ServiceEndpointGitHubEnterprise(\"exampleServiceEndpointGitHubEnterprise\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example GitHub Enterprise\",\n    url: \"https://github.contoso.com\",\n    description: \"Managed by Terraform\",\n    authPersonal: {\n        personalAccessToken: \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    },\n});\nconst exampleBuildDefinition = new azuredevops.BuildDefinition(\"exampleBuildDefinition\", {\n    projectId: exampleProject.id,\n    path: \"\\\\ExampleFolder\",\n    ciTrigger: {\n        useYaml: false,\n    },\n    repository: {\n        repoType: \"GitHubEnterprise\",\n        repoId: \"\u003cGitHub Org\u003e/\u003cRepo Name\u003e\",\n        githubEnterpriseUrl: \"https://github.company.com\",\n        branchName: \"master\",\n        ymlPath: \"azure-pipelines.yml\",\n        serviceConnectionId: exampleServiceEndpointGitHubEnterprise.id,\n    },\n    schedules: [{\n        branchFilters: [{\n            includes: [\"main\"],\n            excludes: [\n                \"test\",\n                \"regression\",\n            ],\n        }],\n        daysToBuilds: [\n            \"Wed\",\n            \"Sun\",\n        ],\n        scheduleOnlyWithChanges: true,\n        startHours: 10,\n        startMinutes: 59,\n        timeZone: \"(UTC) Coordinated Universal Time\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nexample_service_endpoint_git_hub_enterprise = azuredevops.ServiceEndpointGitHubEnterprise(\"exampleServiceEndpointGitHubEnterprise\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example GitHub Enterprise\",\n    url=\"https://github.contoso.com\",\n    description=\"Managed by Terraform\",\n    auth_personal=azuredevops.ServiceEndpointGitHubEnterpriseAuthPersonalArgs(\n        personal_access_token=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    ))\nexample_build_definition = azuredevops.BuildDefinition(\"exampleBuildDefinition\",\n    project_id=example_project.id,\n    path=\"\\\\ExampleFolder\",\n    ci_trigger=azuredevops.BuildDefinitionCiTriggerArgs(\n        use_yaml=False,\n    ),\n    repository=azuredevops.BuildDefinitionRepositoryArgs(\n        repo_type=\"GitHubEnterprise\",\n        repo_id=\"\u003cGitHub Org\u003e/\u003cRepo Name\u003e\",\n        github_enterprise_url=\"https://github.company.com\",\n        branch_name=\"master\",\n        yml_path=\"azure-pipelines.yml\",\n        service_connection_id=example_service_endpoint_git_hub_enterprise.id,\n    ),\n    schedules=[azuredevops.BuildDefinitionScheduleArgs(\n        branch_filters=[azuredevops.BuildDefinitionScheduleBranchFilterArgs(\n            includes=[\"main\"],\n            excludes=[\n                \"test\",\n                \"regression\",\n            ],\n        )],\n        days_to_builds=[\n            \"Wed\",\n            \"Sun\",\n        ],\n        schedule_only_with_changes=True,\n        start_hours=10,\n        start_minutes=59,\n        time_zone=\"(UTC) Coordinated Universal Time\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n    });\n\n    var exampleServiceEndpointGitHubEnterprise = new AzureDevOps.ServiceEndpointGitHubEnterprise(\"exampleServiceEndpointGitHubEnterprise\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example GitHub Enterprise\",\n        Url = \"https://github.contoso.com\",\n        Description = \"Managed by Terraform\",\n        AuthPersonal = new AzureDevOps.Inputs.ServiceEndpointGitHubEnterpriseAuthPersonalArgs\n        {\n            PersonalAccessToken = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n        },\n    });\n\n    var exampleBuildDefinition = new AzureDevOps.BuildDefinition(\"exampleBuildDefinition\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Path = \"\\\\ExampleFolder\",\n        CiTrigger = new AzureDevOps.Inputs.BuildDefinitionCiTriggerArgs\n        {\n            UseYaml = false,\n        },\n        Repository = new AzureDevOps.Inputs.BuildDefinitionRepositoryArgs\n        {\n            RepoType = \"GitHubEnterprise\",\n            RepoId = \"\u003cGitHub Org\u003e/\u003cRepo Name\u003e\",\n            GithubEnterpriseUrl = \"https://github.company.com\",\n            BranchName = \"master\",\n            YmlPath = \"azure-pipelines.yml\",\n            ServiceConnectionId = exampleServiceEndpointGitHubEnterprise.Id,\n        },\n        Schedules = new[]\n        {\n            new AzureDevOps.Inputs.BuildDefinitionScheduleArgs\n            {\n                BranchFilters = new[]\n                {\n                    new AzureDevOps.Inputs.BuildDefinitionScheduleBranchFilterArgs\n                    {\n                        Includes = new[]\n                        {\n                            \"main\",\n                        },\n                        Excludes = new[]\n                        {\n                            \"test\",\n                            \"regression\",\n                        },\n                    },\n                },\n                DaysToBuilds = new[]\n                {\n                    \"Wed\",\n                    \"Sun\",\n                },\n                ScheduleOnlyWithChanges = true,\n                StartHours = 10,\n                StartMinutes = 59,\n                TimeZone = \"(UTC) Coordinated Universal Time\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleServiceEndpointGitHubEnterprise, err := azuredevops.NewServiceEndpointGitHubEnterprise(ctx, \"exampleServiceEndpointGitHubEnterprise\", \u0026azuredevops.ServiceEndpointGitHubEnterpriseArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Example GitHub Enterprise\"),\n\t\t\tUrl:                 pulumi.String(\"https://github.contoso.com\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t\tAuthPersonal: \u0026azuredevops.ServiceEndpointGitHubEnterpriseAuthPersonalArgs{\n\t\t\t\tPersonalAccessToken: pulumi.String(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewBuildDefinition(ctx, \"exampleBuildDefinition\", \u0026azuredevops.BuildDefinitionArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tPath:      pulumi.String(\"\\\\ExampleFolder\"),\n\t\t\tCiTrigger: \u0026azuredevops.BuildDefinitionCiTriggerArgs{\n\t\t\t\tUseYaml: pulumi.Bool(false),\n\t\t\t},\n\t\t\tRepository: \u0026azuredevops.BuildDefinitionRepositoryArgs{\n\t\t\t\tRepoType:            pulumi.String(\"GitHubEnterprise\"),\n\t\t\t\tRepoId:              pulumi.String(\"\u003cGitHub Org\u003e/\u003cRepo Name\u003e\"),\n\t\t\t\tGithubEnterpriseUrl: pulumi.String(\"https://github.company.com\"),\n\t\t\t\tBranchName:          pulumi.String(\"master\"),\n\t\t\t\tYmlPath:             pulumi.String(\"azure-pipelines.yml\"),\n\t\t\t\tServiceConnectionId: exampleServiceEndpointGitHubEnterprise.ID(),\n\t\t\t},\n\t\t\tSchedules: azuredevops.BuildDefinitionScheduleArray{\n\t\t\t\t\u0026azuredevops.BuildDefinitionScheduleArgs{\n\t\t\t\t\tBranchFilters: azuredevops.BuildDefinitionScheduleBranchFilterArray{\n\t\t\t\t\t\t\u0026azuredevops.BuildDefinitionScheduleBranchFilterArgs{\n\t\t\t\t\t\t\tIncludes: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"main\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tExcludes: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"test\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"regression\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tDaysToBuilds: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"Wed\"),\n\t\t\t\t\t\tpulumi.String(\"Sun\"),\n\t\t\t\t\t},\n\t\t\t\t\tScheduleOnlyWithChanges: pulumi.Bool(true),\n\t\t\t\t\tStartHours:              pulumi.Int(10),\n\t\t\t\t\tStartMinutes:            pulumi.Int(59),\n\t\t\t\t\tTimeZone:                pulumi.String(\"(UTC) Coordinated Universal Time\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointGitHubEnterprise;\nimport com.pulumi.azuredevops.ServiceEndpointGitHubEnterpriseArgs;\nimport com.pulumi.azuredevops.inputs.ServiceEndpointGitHubEnterpriseAuthPersonalArgs;\nimport com.pulumi.azuredevops.BuildDefinition;\nimport com.pulumi.azuredevops.BuildDefinitionArgs;\nimport com.pulumi.azuredevops.inputs.BuildDefinitionCiTriggerArgs;\nimport com.pulumi.azuredevops.inputs.BuildDefinitionRepositoryArgs;\nimport com.pulumi.azuredevops.inputs.BuildDefinitionScheduleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .build());\n\n        var exampleServiceEndpointGitHubEnterprise = new ServiceEndpointGitHubEnterprise(\"exampleServiceEndpointGitHubEnterprise\", ServiceEndpointGitHubEnterpriseArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example GitHub Enterprise\")\n            .url(\"https://github.contoso.com\")\n            .description(\"Managed by Terraform\")\n            .authPersonal(ServiceEndpointGitHubEnterpriseAuthPersonalArgs.builder()\n                .personalAccessToken(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\")\n                .build())\n            .build());\n\n        var exampleBuildDefinition = new BuildDefinition(\"exampleBuildDefinition\", BuildDefinitionArgs.builder()        \n            .projectId(exampleProject.id())\n            .path(\"\\\\ExampleFolder\")\n            .ciTrigger(BuildDefinitionCiTriggerArgs.builder()\n                .useYaml(false)\n                .build())\n            .repository(BuildDefinitionRepositoryArgs.builder()\n                .repoType(\"GitHubEnterprise\")\n                .repoId(\"\u003cGitHub Org\u003e/\u003cRepo Name\u003e\")\n                .githubEnterpriseUrl(\"https://github.company.com\")\n                .branchName(\"master\")\n                .ymlPath(\"azure-pipelines.yml\")\n                .serviceConnectionId(exampleServiceEndpointGitHubEnterprise.id())\n                .build())\n            .schedules(BuildDefinitionScheduleArgs.builder()\n                .branchFilters(BuildDefinitionScheduleBranchFilterArgs.builder()\n                    .includes(\"main\")\n                    .excludes(                    \n                        \"test\",\n                        \"regression\")\n                    .build())\n                .daysToBuilds(                \n                    \"Wed\",\n                    \"Sun\")\n                .scheduleOnlyWithChanges(true)\n                .startHours(10)\n                .startMinutes(59)\n                .timeZone(\"(UTC) Coordinated Universal Time\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n  exampleServiceEndpointGitHubEnterprise:\n    type: azuredevops:ServiceEndpointGitHubEnterprise\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example GitHub Enterprise\n      url: https://github.contoso.com\n      description: Managed by Terraform\n      authPersonal:\n        personalAccessToken: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n  exampleBuildDefinition:\n    type: azuredevops:BuildDefinition\n    properties:\n      projectId: ${exampleProject.id}\n      path: \\ExampleFolder\n      ciTrigger:\n        useYaml: false\n      repository:\n        repoType: GitHubEnterprise\n        repoId: \u003cGitHub Org\u003e/\u003cRepo Name\u003e\n        githubEnterpriseUrl: https://github.company.com\n        branchName: master\n        ymlPath: azure-pipelines.yml\n        serviceConnectionId: ${exampleServiceEndpointGitHubEnterprise.id}\n      schedules:\n        - branchFilters:\n            - includes:\n                - main\n              excludes:\n                - test\n                - regression\n          daysToBuilds:\n            - Wed\n            - Sun\n          scheduleOnlyWithChanges: true\n          startHours: 10\n          startMinutes: 59\n          timeZone: (UTC) Coordinated Universal Time\n```\n{{% /example %}}\n{{% /examples %}}\n## Remarks\n\nThe path attribute can not end in `\\` unless the path is the root value of `\\`. \n\nValid path values (yaml encoded) include:\n- `\\\\`\n- `\\\\ExampleFolder`\n- `\\\\Nested\\\\Example Folder`\n\nThe value of `\\\\ExampleFolder\\\\` would be invalid.\n\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Build Definitions](https://docs.microsoft.com/en-us/rest/api/azure/devops/build/definitions?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Build Definitions can be imported using the project name/definitions Id or by the project Guid/definitions Id, e.g.\n\n```sh\n $ pulumi import azuredevops:index/buildDefinition:BuildDefinition example \"Example Project\"/10\n```\n\n or\n\n```sh\n $ pulumi import azuredevops:index/buildDefinition:BuildDefinition example 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "agentPoolName": {
                    "type": "string",
                    "description": "The agent pool that should execute the build. Defaults to `Azure Pipelines`.\n"
                },
                "ciTrigger": {
                    "$ref": "#/types/azuredevops:index/BuildDefinitionCiTrigger:BuildDefinitionCiTrigger",
                    "description": "Continuous Integration trigger.\n"
                },
                "features": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/BuildDefinitionFeature:BuildDefinitionFeature"
                    },
                    "description": "A `features` blocks as documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the build definition.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The folder path of the build definition.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "pullRequestTrigger": {
                    "$ref": "#/types/azuredevops:index/BuildDefinitionPullRequestTrigger:BuildDefinitionPullRequestTrigger",
                    "description": "Pull Request Integration trigger.\n"
                },
                "queueStatus": {
                    "type": "string",
                    "description": "The queue status of the build definition. Valid values: `enabled` or `paused` or `disabled`. Defaults to `enabled`.\n"
                },
                "repository": {
                    "$ref": "#/types/azuredevops:index/BuildDefinitionRepository:BuildDefinitionRepository",
                    "description": "A `repository` block as documented below.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "The revision of the build definition\n"
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/BuildDefinitionSchedule:BuildDefinitionSchedule"
                    }
                },
                "variableGroups": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of variable group IDs (integers) to link to the build definition.\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/BuildDefinitionVariable:BuildDefinitionVariable"
                    },
                    "description": "A list of `variable` blocks, as documented below.\n"
                }
            },
            "required": [
                "name",
                "projectId",
                "repository",
                "revision"
            ],
            "inputProperties": {
                "agentPoolName": {
                    "type": "string",
                    "description": "The agent pool that should execute the build. Defaults to `Azure Pipelines`.\n"
                },
                "ciTrigger": {
                    "$ref": "#/types/azuredevops:index/BuildDefinitionCiTrigger:BuildDefinitionCiTrigger",
                    "description": "Continuous Integration trigger.\n"
                },
                "features": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/BuildDefinitionFeature:BuildDefinitionFeature"
                    },
                    "description": "A `features` blocks as documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the build definition.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The folder path of the build definition.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n",
                    "willReplaceOnChanges": true
                },
                "pullRequestTrigger": {
                    "$ref": "#/types/azuredevops:index/BuildDefinitionPullRequestTrigger:BuildDefinitionPullRequestTrigger",
                    "description": "Pull Request Integration trigger.\n"
                },
                "queueStatus": {
                    "type": "string",
                    "description": "The queue status of the build definition. Valid values: `enabled` or `paused` or `disabled`. Defaults to `enabled`.\n"
                },
                "repository": {
                    "$ref": "#/types/azuredevops:index/BuildDefinitionRepository:BuildDefinitionRepository",
                    "description": "A `repository` block as documented below.\n"
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/BuildDefinitionSchedule:BuildDefinitionSchedule"
                    }
                },
                "variableGroups": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of variable group IDs (integers) to link to the build definition.\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/BuildDefinitionVariable:BuildDefinitionVariable"
                    },
                    "description": "A list of `variable` blocks, as documented below.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BuildDefinition resources.\n",
                "properties": {
                    "agentPoolName": {
                        "type": "string",
                        "description": "The agent pool that should execute the build. Defaults to `Azure Pipelines`.\n"
                    },
                    "ciTrigger": {
                        "$ref": "#/types/azuredevops:index/BuildDefinitionCiTrigger:BuildDefinitionCiTrigger",
                        "description": "Continuous Integration trigger.\n"
                    },
                    "features": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:index/BuildDefinitionFeature:BuildDefinitionFeature"
                        },
                        "description": "A `features` blocks as documented below.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the build definition.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The folder path of the build definition.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n",
                        "willReplaceOnChanges": true
                    },
                    "pullRequestTrigger": {
                        "$ref": "#/types/azuredevops:index/BuildDefinitionPullRequestTrigger:BuildDefinitionPullRequestTrigger",
                        "description": "Pull Request Integration trigger.\n"
                    },
                    "queueStatus": {
                        "type": "string",
                        "description": "The queue status of the build definition. Valid values: `enabled` or `paused` or `disabled`. Defaults to `enabled`.\n"
                    },
                    "repository": {
                        "$ref": "#/types/azuredevops:index/BuildDefinitionRepository:BuildDefinitionRepository",
                        "description": "A `repository` block as documented below.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "The revision of the build definition\n"
                    },
                    "schedules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:index/BuildDefinitionSchedule:BuildDefinitionSchedule"
                        }
                    },
                    "variableGroups": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of variable group IDs (integers) to link to the build definition.\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:index/BuildDefinitionVariable:BuildDefinitionVariable"
                        },
                        "description": "A list of `variable` blocks, as documented below.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Build/buildDefinition:BuildDefinition"
                }
            ]
        },
        "azuredevops:index/buildDefinitionPermissions:BuildDefinitionPermissions": {
            "description": "Manages permissions for a Build Definition\n\n\u003e **Note** Permissions can be assigned to group principals and not to single user principals.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"Managed by Terraform\",\n});\nconst example-readers = azuredevops.getGroupOutput({\n    projectId: exampleProject.id,\n    name: \"Readers\",\n});\nconst exampleGit = new azuredevops.Git(\"exampleGit\", {\n    projectId: exampleProject.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst exampleBuildDefinition = new azuredevops.BuildDefinition(\"exampleBuildDefinition\", {\n    projectId: exampleProject.id,\n    path: \"\\\\ExampleFolder\",\n    ciTrigger: {\n        useYaml: true,\n    },\n    repository: {\n        repoType: \"TfsGit\",\n        repoId: exampleGit.id,\n        branchName: exampleGit.defaultBranch,\n        ymlPath: \"azure-pipelines.yml\",\n    },\n});\nconst exampleBuildDefinitionPermissions = new azuredevops.BuildDefinitionPermissions(\"exampleBuildDefinitionPermissions\", {\n    projectId: exampleProject.id,\n    principal: example_readers.apply(example_readers =\u003e example_readers.id),\n    buildDefinitionId: exampleBuildDefinition.id,\n    permissions: {\n        ViewBuilds: \"Allow\",\n        EditBuildQuality: \"Deny\",\n        DeleteBuilds: \"Deny\",\n        StopBuilds: \"Allow\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"Managed by Terraform\")\nexample_readers = azuredevops.get_group_output(project_id=example_project.id,\n    name=\"Readers\")\nexample_git = azuredevops.Git(\"exampleGit\",\n    project_id=example_project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nexample_build_definition = azuredevops.BuildDefinition(\"exampleBuildDefinition\",\n    project_id=example_project.id,\n    path=\"\\\\ExampleFolder\",\n    ci_trigger=azuredevops.BuildDefinitionCiTriggerArgs(\n        use_yaml=True,\n    ),\n    repository=azuredevops.BuildDefinitionRepositoryArgs(\n        repo_type=\"TfsGit\",\n        repo_id=example_git.id,\n        branch_name=example_git.default_branch,\n        yml_path=\"azure-pipelines.yml\",\n    ))\nexample_build_definition_permissions = azuredevops.BuildDefinitionPermissions(\"exampleBuildDefinitionPermissions\",\n    project_id=example_project.id,\n    principal=example_readers.id,\n    build_definition_id=example_build_definition.id,\n    permissions={\n        \"ViewBuilds\": \"Allow\",\n        \"EditBuildQuality\": \"Deny\",\n        \"DeleteBuilds\": \"Deny\",\n        \"StopBuilds\": \"Allow\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        WorkItemTemplate = \"Agile\",\n        VersionControl = \"Git\",\n        Visibility = \"private\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var example_readers = AzureDevOps.GetGroup.Invoke(new()\n    {\n        ProjectId = exampleProject.Id,\n        Name = \"Readers\",\n    });\n\n    var exampleGit = new AzureDevOps.Git(\"exampleGit\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n        {\n            InitType = \"Clean\",\n        },\n    });\n\n    var exampleBuildDefinition = new AzureDevOps.BuildDefinition(\"exampleBuildDefinition\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Path = \"\\\\ExampleFolder\",\n        CiTrigger = new AzureDevOps.Inputs.BuildDefinitionCiTriggerArgs\n        {\n            UseYaml = true,\n        },\n        Repository = new AzureDevOps.Inputs.BuildDefinitionRepositoryArgs\n        {\n            RepoType = \"TfsGit\",\n            RepoId = exampleGit.Id,\n            BranchName = exampleGit.DefaultBranch,\n            YmlPath = \"azure-pipelines.yml\",\n        },\n    });\n\n    var exampleBuildDefinitionPermissions = new AzureDevOps.BuildDefinitionPermissions(\"exampleBuildDefinitionPermissions\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Principal = example_readers.Apply(example_readers =\u003e example_readers.Apply(getGroupResult =\u003e getGroupResult.Id)),\n        BuildDefinitionId = exampleBuildDefinition.Id,\n        Permissions = \n        {\n            { \"ViewBuilds\", \"Allow\" },\n            { \"EditBuildQuality\", \"Deny\" },\n            { \"DeleteBuilds\", \"Deny\" },\n            { \"StopBuilds\", \"Allow\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample_readers := azuredevops.LookupGroupOutput(ctx, azuredevops.GetGroupOutputArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tName:      pulumi.String(\"Readers\"),\n\t\t}, nil)\n\t\texampleGit, err := azuredevops.NewGit(ctx, \"exampleGit\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tInitialization: \u0026azuredevops.GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleBuildDefinition, err := azuredevops.NewBuildDefinition(ctx, \"exampleBuildDefinition\", \u0026azuredevops.BuildDefinitionArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tPath:      pulumi.String(\"\\\\ExampleFolder\"),\n\t\t\tCiTrigger: \u0026azuredevops.BuildDefinitionCiTriggerArgs{\n\t\t\t\tUseYaml: pulumi.Bool(true),\n\t\t\t},\n\t\t\tRepository: \u0026azuredevops.BuildDefinitionRepositoryArgs{\n\t\t\t\tRepoType:   pulumi.String(\"TfsGit\"),\n\t\t\t\tRepoId:     exampleGit.ID(),\n\t\t\t\tBranchName: exampleGit.DefaultBranch,\n\t\t\t\tYmlPath:    pulumi.String(\"azure-pipelines.yml\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewBuildDefinitionPermissions(ctx, \"exampleBuildDefinitionPermissions\", \u0026azuredevops.BuildDefinitionPermissionsArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tPrincipal: example_readers.ApplyT(func(example_readers azuredevops.GetGroupResult) (*string, error) {\n\t\t\t\treturn \u0026example_readers.Id, nil\n\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\tBuildDefinitionId: exampleBuildDefinition.ID(),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"ViewBuilds\":       pulumi.String(\"Allow\"),\n\t\t\t\t\"EditBuildQuality\": pulumi.String(\"Deny\"),\n\t\t\t\t\"DeleteBuilds\":     pulumi.String(\"Deny\"),\n\t\t\t\t\"StopBuilds\":       pulumi.String(\"Allow\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetGroupArgs;\nimport com.pulumi.azuredevops.Git;\nimport com.pulumi.azuredevops.GitArgs;\nimport com.pulumi.azuredevops.inputs.GitInitializationArgs;\nimport com.pulumi.azuredevops.BuildDefinition;\nimport com.pulumi.azuredevops.BuildDefinitionArgs;\nimport com.pulumi.azuredevops.inputs.BuildDefinitionCiTriggerArgs;\nimport com.pulumi.azuredevops.inputs.BuildDefinitionRepositoryArgs;\nimport com.pulumi.azuredevops.BuildDefinitionPermissions;\nimport com.pulumi.azuredevops.BuildDefinitionPermissionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .workItemTemplate(\"Agile\")\n            .versionControl(\"Git\")\n            .visibility(\"private\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        final var example-readers = AzuredevopsFunctions.getGroup(GetGroupArgs.builder()\n            .projectId(exampleProject.id())\n            .name(\"Readers\")\n            .build());\n\n        var exampleGit = new Git(\"exampleGit\", GitArgs.builder()        \n            .projectId(exampleProject.id())\n            .initialization(GitInitializationArgs.builder()\n                .initType(\"Clean\")\n                .build())\n            .build());\n\n        var exampleBuildDefinition = new BuildDefinition(\"exampleBuildDefinition\", BuildDefinitionArgs.builder()        \n            .projectId(exampleProject.id())\n            .path(\"\\\\ExampleFolder\")\n            .ciTrigger(BuildDefinitionCiTriggerArgs.builder()\n                .useYaml(true)\n                .build())\n            .repository(BuildDefinitionRepositoryArgs.builder()\n                .repoType(\"TfsGit\")\n                .repoId(exampleGit.id())\n                .branchName(exampleGit.defaultBranch())\n                .ymlPath(\"azure-pipelines.yml\")\n                .build())\n            .build());\n\n        var exampleBuildDefinitionPermissions = new BuildDefinitionPermissions(\"exampleBuildDefinitionPermissions\", BuildDefinitionPermissionsArgs.builder()        \n            .projectId(exampleProject.id())\n            .principal(example_readers.applyValue(example_readers -\u003e example_readers.id()))\n            .buildDefinitionId(exampleBuildDefinition.id())\n            .permissions(Map.ofEntries(\n                Map.entry(\"ViewBuilds\", \"Allow\"),\n                Map.entry(\"EditBuildQuality\", \"Deny\"),\n                Map.entry(\"DeleteBuilds\", \"Deny\"),\n                Map.entry(\"StopBuilds\", \"Allow\")\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      workItemTemplate: Agile\n      versionControl: Git\n      visibility: private\n      description: Managed by Terraform\n  exampleGit:\n    type: azuredevops:Git\n    properties:\n      projectId: ${exampleProject.id}\n      initialization:\n        initType: Clean\n  exampleBuildDefinition:\n    type: azuredevops:BuildDefinition\n    properties:\n      projectId: ${exampleProject.id}\n      path: \\ExampleFolder\n      ciTrigger:\n        useYaml: true\n      repository:\n        repoType: TfsGit\n        repoId: ${exampleGit.id}\n        branchName: ${exampleGit.defaultBranch}\n        ymlPath: azure-pipelines.yml\n  exampleBuildDefinitionPermissions:\n    type: azuredevops:BuildDefinitionPermissions\n    properties:\n      projectId: ${exampleProject.id}\n      principal: ${[\"example-readers\"].id}\n      buildDefinitionId: ${exampleBuildDefinition.id}\n      permissions:\n        ViewBuilds: Allow\n        EditBuildQuality: Deny\n        DeleteBuilds: Deny\n        StopBuilds: Allow\nvariables:\n  example-readers:\n    fn::invoke:\n      Function: azuredevops:getGroup\n      Arguments:\n        projectId: ${exampleProject.id}\n        name: Readers\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 7.0 - Security](https://docs.microsoft.com/en-us/rest/api/azure/devops/security/?view=azure-devops-rest-7.0)\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: vso.security_manage - Grants the ability to read, write, and manage security permissions.\n\n\n## Import\n\nThe resource does not support import. ",
            "properties": {
                "buildDefinitionId": {
                    "type": "string",
                    "description": "The id of the build definition to assign the permissions.\n"
                },
                "permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "the permissions to assign. The following permissions are available.\n\n| Permission                     | Description                           |\n|--------------------------------|---------------------------------------|\n| ViewBuilds                     | View builds                           |\n| EditBuildQuality               | Edit build quality                    |\n| RetainIndefinitely             | Retain indefinitely                   |\n| DeleteBuilds                   | Delete builds                         |\n| ManageBuildQualities           | Manage build qualities                |\n| DestroyBuilds                  | Destroy builds                        |\n| UpdateBuildInformation         | Update build information              |\n| QueueBuilds                    | Queue builds                          |\n| ManageBuildQueue               | Manage build queue                    |\n| StopBuilds                     | Stop builds                           |\n| ViewBuildDefinition            | View build pipeline                   |\n| EditBuildDefinition            | Edit build pipeline                   |\n| DeleteBuildDefinition          | Delete build pipeline                 |\n| OverrideBuildCheckInValidation | Override check-in validation by build |\n| AdministerBuildPermissions     | Administer build permissions          |\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The **group** principal to assign the permissions.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project to assign the permissions.\n"
                },
                "replace": {
                    "type": "boolean",
                    "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`.\n"
                }
            },
            "required": [
                "buildDefinitionId",
                "permissions",
                "principal",
                "projectId"
            ],
            "inputProperties": {
                "buildDefinitionId": {
                    "type": "string",
                    "description": "The id of the build definition to assign the permissions.\n",
                    "willReplaceOnChanges": true
                },
                "permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "the permissions to assign. The following permissions are available.\n\n| Permission                     | Description                           |\n|--------------------------------|---------------------------------------|\n| ViewBuilds                     | View builds                           |\n| EditBuildQuality               | Edit build quality                    |\n| RetainIndefinitely             | Retain indefinitely                   |\n| DeleteBuilds                   | Delete builds                         |\n| ManageBuildQualities           | Manage build qualities                |\n| DestroyBuilds                  | Destroy builds                        |\n| UpdateBuildInformation         | Update build information              |\n| QueueBuilds                    | Queue builds                          |\n| ManageBuildQueue               | Manage build queue                    |\n| StopBuilds                     | Stop builds                           |\n| ViewBuildDefinition            | View build pipeline                   |\n| EditBuildDefinition            | Edit build pipeline                   |\n| DeleteBuildDefinition          | Delete build pipeline                 |\n| OverrideBuildCheckInValidation | Override check-in validation by build |\n| AdministerBuildPermissions     | Administer build permissions          |\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The **group** principal to assign the permissions.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project to assign the permissions.\n",
                    "willReplaceOnChanges": true
                },
                "replace": {
                    "type": "boolean",
                    "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`.\n"
                }
            },
            "requiredInputs": [
                "buildDefinitionId",
                "permissions",
                "principal",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BuildDefinitionPermissions resources.\n",
                "properties": {
                    "buildDefinitionId": {
                        "type": "string",
                        "description": "The id of the build definition to assign the permissions.\n",
                        "willReplaceOnChanges": true
                    },
                    "permissions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "the permissions to assign. The following permissions are available.\n\n| Permission                     | Description                           |\n|--------------------------------|---------------------------------------|\n| ViewBuilds                     | View builds                           |\n| EditBuildQuality               | Edit build quality                    |\n| RetainIndefinitely             | Retain indefinitely                   |\n| DeleteBuilds                   | Delete builds                         |\n| ManageBuildQualities           | Manage build qualities                |\n| DestroyBuilds                  | Destroy builds                        |\n| UpdateBuildInformation         | Update build information              |\n| QueueBuilds                    | Queue builds                          |\n| ManageBuildQueue               | Manage build queue                    |\n| StopBuilds                     | Stop builds                           |\n| ViewBuildDefinition            | View build pipeline                   |\n| EditBuildDefinition            | Edit build pipeline                   |\n| DeleteBuildDefinition          | Delete build pipeline                 |\n| OverrideBuildCheckInValidation | Override check-in validation by build |\n| AdministerBuildPermissions     | Administer build permissions          |\n"
                    },
                    "principal": {
                        "type": "string",
                        "description": "The **group** principal to assign the permissions.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project to assign the permissions.\n",
                        "willReplaceOnChanges": true
                    },
                    "replace": {
                        "type": "boolean",
                        "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/buildFolder:BuildFolder": {
            "description": "Manages a Build Folder.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst exampleBuildFolder = new azuredevops.BuildFolder(\"exampleBuildFolder\", {\n    projectId: exampleProject.id,\n    path: \"\\\\ExampleFolder\",\n    description: \"ExampleFolder description\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nexample_build_folder = azuredevops.BuildFolder(\"exampleBuildFolder\",\n    project_id=example_project.id,\n    path=\"\\\\ExampleFolder\",\n    description=\"ExampleFolder description\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n    });\n\n    var exampleBuildFolder = new AzureDevOps.BuildFolder(\"exampleBuildFolder\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Path = \"\\\\ExampleFolder\",\n        Description = \"ExampleFolder description\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewBuildFolder(ctx, \"exampleBuildFolder\", \u0026azuredevops.BuildFolderArgs{\n\t\t\tProjectId:   exampleProject.ID(),\n\t\t\tPath:        pulumi.String(\"\\\\ExampleFolder\"),\n\t\t\tDescription: pulumi.String(\"ExampleFolder description\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.BuildFolder;\nimport com.pulumi.azuredevops.BuildFolderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .build());\n\n        var exampleBuildFolder = new BuildFolder(\"exampleBuildFolder\", BuildFolderArgs.builder()        \n            .projectId(exampleProject.id())\n            .path(\"\\\\ExampleFolder\")\n            .description(\"ExampleFolder description\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n  exampleBuildFolder:\n    type: azuredevops:BuildFolder\n    properties:\n      projectId: ${exampleProject.id}\n      path: \\ExampleFolder\n      description: ExampleFolder description\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nBuild Folders can be imported using the `project name/path` or `project id/path`, e.g.\n\n```sh\n $ pulumi import azuredevops:index/buildFolder:BuildFolder example \"Example Project/\\\\ExampleFolder\"\n```\n\n or\n\n```sh\n $ pulumi import azuredevops:index/buildFolder:BuildFolder example 00000000-0000-0000-0000-000000000000/\\\\ExampleFolder\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Folder Description.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The folder path.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the folder will be created.\n"
                }
            },
            "required": [
                "path",
                "projectId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Folder Description.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The folder path.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the folder will be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "path",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BuildFolder resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Folder Description.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The folder path.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the folder will be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/buildFolderPermissions:BuildFolderPermissions": {
            "description": "Manages permissions for a Build Folder\n\n\u003e **Note** Permissions can be assigned to group principals and not to single user principals.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Set specific folder permissions\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"Managed by Terraform\",\n});\nconst example-readers = azuredevops.getGroupOutput({\n    projectId: exampleProject.id,\n    name: \"Readers\",\n});\nconst exampleBuildFolder = new azuredevops.BuildFolder(\"exampleBuildFolder\", {\n    projectId: exampleProject.id,\n    path: \"\\\\ExampleFolder\",\n    description: \"ExampleFolder description\",\n});\nconst exampleBuildFolderPermissions = new azuredevops.BuildFolderPermissions(\"exampleBuildFolderPermissions\", {\n    projectId: exampleProject.id,\n    path: \"\\\\ExampleFolder\",\n    principal: example_readers.apply(example_readers =\u003e example_readers.id),\n    permissions: {\n        ViewBuilds: \"Allow\",\n        EditBuildQuality: \"Allow\",\n        RetainIndefinitely: \"Allow\",\n        DeleteBuilds: \"Deny\",\n        ManageBuildQualities: \"Deny\",\n        DestroyBuilds: \"Deny\",\n        UpdateBuildInformation: \"Deny\",\n        QueueBuilds: \"Allow\",\n        ManageBuildQueue: \"Deny\",\n        StopBuilds: \"Allow\",\n        ViewBuildDefinition: \"Allow\",\n        EditBuildDefinition: \"Deny\",\n        DeleteBuildDefinition: \"Deny\",\n        AdministerBuildPermissions: \"NotSet\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"Managed by Terraform\")\nexample_readers = azuredevops.get_group_output(project_id=example_project.id,\n    name=\"Readers\")\nexample_build_folder = azuredevops.BuildFolder(\"exampleBuildFolder\",\n    project_id=example_project.id,\n    path=\"\\\\ExampleFolder\",\n    description=\"ExampleFolder description\")\nexample_build_folder_permissions = azuredevops.BuildFolderPermissions(\"exampleBuildFolderPermissions\",\n    project_id=example_project.id,\n    path=\"\\\\ExampleFolder\",\n    principal=example_readers.id,\n    permissions={\n        \"ViewBuilds\": \"Allow\",\n        \"EditBuildQuality\": \"Allow\",\n        \"RetainIndefinitely\": \"Allow\",\n        \"DeleteBuilds\": \"Deny\",\n        \"ManageBuildQualities\": \"Deny\",\n        \"DestroyBuilds\": \"Deny\",\n        \"UpdateBuildInformation\": \"Deny\",\n        \"QueueBuilds\": \"Allow\",\n        \"ManageBuildQueue\": \"Deny\",\n        \"StopBuilds\": \"Allow\",\n        \"ViewBuildDefinition\": \"Allow\",\n        \"EditBuildDefinition\": \"Deny\",\n        \"DeleteBuildDefinition\": \"Deny\",\n        \"AdministerBuildPermissions\": \"NotSet\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        WorkItemTemplate = \"Agile\",\n        VersionControl = \"Git\",\n        Visibility = \"private\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var example_readers = AzureDevOps.GetGroup.Invoke(new()\n    {\n        ProjectId = exampleProject.Id,\n        Name = \"Readers\",\n    });\n\n    var exampleBuildFolder = new AzureDevOps.BuildFolder(\"exampleBuildFolder\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Path = \"\\\\ExampleFolder\",\n        Description = \"ExampleFolder description\",\n    });\n\n    var exampleBuildFolderPermissions = new AzureDevOps.BuildFolderPermissions(\"exampleBuildFolderPermissions\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Path = \"\\\\ExampleFolder\",\n        Principal = example_readers.Apply(example_readers =\u003e example_readers.Apply(getGroupResult =\u003e getGroupResult.Id)),\n        Permissions = \n        {\n            { \"ViewBuilds\", \"Allow\" },\n            { \"EditBuildQuality\", \"Allow\" },\n            { \"RetainIndefinitely\", \"Allow\" },\n            { \"DeleteBuilds\", \"Deny\" },\n            { \"ManageBuildQualities\", \"Deny\" },\n            { \"DestroyBuilds\", \"Deny\" },\n            { \"UpdateBuildInformation\", \"Deny\" },\n            { \"QueueBuilds\", \"Allow\" },\n            { \"ManageBuildQueue\", \"Deny\" },\n            { \"StopBuilds\", \"Allow\" },\n            { \"ViewBuildDefinition\", \"Allow\" },\n            { \"EditBuildDefinition\", \"Deny\" },\n            { \"DeleteBuildDefinition\", \"Deny\" },\n            { \"AdministerBuildPermissions\", \"NotSet\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample_readers := azuredevops.LookupGroupOutput(ctx, azuredevops.GetGroupOutputArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tName:      pulumi.String(\"Readers\"),\n\t\t}, nil)\n\t\t_, err = azuredevops.NewBuildFolder(ctx, \"exampleBuildFolder\", \u0026azuredevops.BuildFolderArgs{\n\t\t\tProjectId:   exampleProject.ID(),\n\t\t\tPath:        pulumi.String(\"\\\\ExampleFolder\"),\n\t\t\tDescription: pulumi.String(\"ExampleFolder description\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewBuildFolderPermissions(ctx, \"exampleBuildFolderPermissions\", \u0026azuredevops.BuildFolderPermissionsArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tPath:      pulumi.String(\"\\\\ExampleFolder\"),\n\t\t\tPrincipal: example_readers.ApplyT(func(example_readers azuredevops.GetGroupResult) (*string, error) {\n\t\t\t\treturn \u0026example_readers.Id, nil\n\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"ViewBuilds\":                 pulumi.String(\"Allow\"),\n\t\t\t\t\"EditBuildQuality\":           pulumi.String(\"Allow\"),\n\t\t\t\t\"RetainIndefinitely\":         pulumi.String(\"Allow\"),\n\t\t\t\t\"DeleteBuilds\":               pulumi.String(\"Deny\"),\n\t\t\t\t\"ManageBuildQualities\":       pulumi.String(\"Deny\"),\n\t\t\t\t\"DestroyBuilds\":              pulumi.String(\"Deny\"),\n\t\t\t\t\"UpdateBuildInformation\":     pulumi.String(\"Deny\"),\n\t\t\t\t\"QueueBuilds\":                pulumi.String(\"Allow\"),\n\t\t\t\t\"ManageBuildQueue\":           pulumi.String(\"Deny\"),\n\t\t\t\t\"StopBuilds\":                 pulumi.String(\"Allow\"),\n\t\t\t\t\"ViewBuildDefinition\":        pulumi.String(\"Allow\"),\n\t\t\t\t\"EditBuildDefinition\":        pulumi.String(\"Deny\"),\n\t\t\t\t\"DeleteBuildDefinition\":      pulumi.String(\"Deny\"),\n\t\t\t\t\"AdministerBuildPermissions\": pulumi.String(\"NotSet\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetGroupArgs;\nimport com.pulumi.azuredevops.BuildFolder;\nimport com.pulumi.azuredevops.BuildFolderArgs;\nimport com.pulumi.azuredevops.BuildFolderPermissions;\nimport com.pulumi.azuredevops.BuildFolderPermissionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .workItemTemplate(\"Agile\")\n            .versionControl(\"Git\")\n            .visibility(\"private\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        final var example-readers = AzuredevopsFunctions.getGroup(GetGroupArgs.builder()\n            .projectId(exampleProject.id())\n            .name(\"Readers\")\n            .build());\n\n        var exampleBuildFolder = new BuildFolder(\"exampleBuildFolder\", BuildFolderArgs.builder()        \n            .projectId(exampleProject.id())\n            .path(\"\\\\ExampleFolder\")\n            .description(\"ExampleFolder description\")\n            .build());\n\n        var exampleBuildFolderPermissions = new BuildFolderPermissions(\"exampleBuildFolderPermissions\", BuildFolderPermissionsArgs.builder()        \n            .projectId(exampleProject.id())\n            .path(\"\\\\ExampleFolder\")\n            .principal(example_readers.applyValue(example_readers -\u003e example_readers.id()))\n            .permissions(Map.ofEntries(\n                Map.entry(\"ViewBuilds\", \"Allow\"),\n                Map.entry(\"EditBuildQuality\", \"Allow\"),\n                Map.entry(\"RetainIndefinitely\", \"Allow\"),\n                Map.entry(\"DeleteBuilds\", \"Deny\"),\n                Map.entry(\"ManageBuildQualities\", \"Deny\"),\n                Map.entry(\"DestroyBuilds\", \"Deny\"),\n                Map.entry(\"UpdateBuildInformation\", \"Deny\"),\n                Map.entry(\"QueueBuilds\", \"Allow\"),\n                Map.entry(\"ManageBuildQueue\", \"Deny\"),\n                Map.entry(\"StopBuilds\", \"Allow\"),\n                Map.entry(\"ViewBuildDefinition\", \"Allow\"),\n                Map.entry(\"EditBuildDefinition\", \"Deny\"),\n                Map.entry(\"DeleteBuildDefinition\", \"Deny\"),\n                Map.entry(\"AdministerBuildPermissions\", \"NotSet\")\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      workItemTemplate: Agile\n      versionControl: Git\n      visibility: private\n      description: Managed by Terraform\n  exampleBuildFolder:\n    type: azuredevops:BuildFolder\n    properties:\n      projectId: ${exampleProject.id}\n      path: \\ExampleFolder\n      description: ExampleFolder description\n  exampleBuildFolderPermissions:\n    type: azuredevops:BuildFolderPermissions\n    properties:\n      projectId: ${exampleProject.id}\n      path: \\ExampleFolder\n      principal: ${[\"example-readers\"].id}\n      permissions:\n        ViewBuilds: Allow\n        EditBuildQuality: Allow\n        RetainIndefinitely: Allow\n        DeleteBuilds: Deny\n        ManageBuildQualities: Deny\n        DestroyBuilds: Deny\n        UpdateBuildInformation: Deny\n        QueueBuilds: Allow\n        ManageBuildQueue: Deny\n        StopBuilds: Allow\n        ViewBuildDefinition: Allow\n        EditBuildDefinition: Deny\n        DeleteBuildDefinition: Deny\n        AdministerBuildPermissions: NotSet\nvariables:\n  example-readers:\n    fn::invoke:\n      Function: azuredevops:getGroup\n      Arguments:\n        projectId: ${exampleProject.id}\n        name: Readers\n```\n{{% /example %}}\n{{% example %}}\n### Set root folder permissions\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"Managed by Terraform\",\n});\nconst example-readers = azuredevops.getGroupOutput({\n    projectId: exampleProject.id,\n    name: \"Readers\",\n});\nconst exampleBuildFolderPermissions = new azuredevops.BuildFolderPermissions(\"exampleBuildFolderPermissions\", {\n    projectId: exampleProject.id,\n    path: \"\\\\\",\n    principal: example_readers.apply(example_readers =\u003e example_readers.id),\n    permissions: {\n        RetainIndefinitely: \"Allow\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"Managed by Terraform\")\nexample_readers = azuredevops.get_group_output(project_id=example_project.id,\n    name=\"Readers\")\nexample_build_folder_permissions = azuredevops.BuildFolderPermissions(\"exampleBuildFolderPermissions\",\n    project_id=example_project.id,\n    path=\"\\\\\",\n    principal=example_readers.id,\n    permissions={\n        \"RetainIndefinitely\": \"Allow\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        WorkItemTemplate = \"Agile\",\n        VersionControl = \"Git\",\n        Visibility = \"private\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var example_readers = AzureDevOps.GetGroup.Invoke(new()\n    {\n        ProjectId = exampleProject.Id,\n        Name = \"Readers\",\n    });\n\n    var exampleBuildFolderPermissions = new AzureDevOps.BuildFolderPermissions(\"exampleBuildFolderPermissions\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Path = \"\\\\\",\n        Principal = example_readers.Apply(example_readers =\u003e example_readers.Apply(getGroupResult =\u003e getGroupResult.Id)),\n        Permissions = \n        {\n            { \"RetainIndefinitely\", \"Allow\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample_readers := azuredevops.LookupGroupOutput(ctx, azuredevops.GetGroupOutputArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tName:      pulumi.String(\"Readers\"),\n\t\t}, nil)\n\t\t_, err = azuredevops.NewBuildFolderPermissions(ctx, \"exampleBuildFolderPermissions\", \u0026azuredevops.BuildFolderPermissionsArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tPath:      pulumi.String(\"\\\\\"),\n\t\t\tPrincipal: example_readers.ApplyT(func(example_readers azuredevops.GetGroupResult) (*string, error) {\n\t\t\t\treturn \u0026example_readers.Id, nil\n\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"RetainIndefinitely\": pulumi.String(\"Allow\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetGroupArgs;\nimport com.pulumi.azuredevops.BuildFolderPermissions;\nimport com.pulumi.azuredevops.BuildFolderPermissionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .workItemTemplate(\"Agile\")\n            .versionControl(\"Git\")\n            .visibility(\"private\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        final var example-readers = AzuredevopsFunctions.getGroup(GetGroupArgs.builder()\n            .projectId(exampleProject.id())\n            .name(\"Readers\")\n            .build());\n\n        var exampleBuildFolderPermissions = new BuildFolderPermissions(\"exampleBuildFolderPermissions\", BuildFolderPermissionsArgs.builder()        \n            .projectId(exampleProject.id())\n            .path(\"\\\\\")\n            .principal(example_readers.applyValue(example_readers -\u003e example_readers.id()))\n            .permissions(Map.of(\"RetainIndefinitely\", \"Allow\"))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      workItemTemplate: Agile\n      versionControl: Git\n      visibility: private\n      description: Managed by Terraform\n  exampleBuildFolderPermissions:\n    type: azuredevops:BuildFolderPermissions\n    properties:\n      projectId: ${exampleProject.id}\n      path: \\\n      principal: ${[\"example-readers\"].id}\n      permissions:\n        RetainIndefinitely: Allow\nvariables:\n  example-readers:\n    fn::invoke:\n      Function: azuredevops:getGroup\n      Arguments:\n        projectId: ${exampleProject.id}\n        name: Readers\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 7.0 - Security](https://docs.microsoft.com/en-us/rest/api/azure/devops/security/?view=azure-devops-rest-7.0)\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: vso.security_manage - Grants the ability to read, write, and manage security permissions.\n\n\n## Import\n\nThe resource does not support import. ",
            "properties": {
                "path": {
                    "type": "string",
                    "description": "The folder path to assign the permissions.\n"
                },
                "permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "the permissions to assign. The following permissions are available.\n\n| Permission                     | Description                           |\n|--------------------------------|---------------------------------------|\n| ViewBuilds                     | View builds                           |\n| EditBuildQuality               | Edit build quality                    |\n| RetainIndefinitely             | Retain indefinitely                   |\n| DeleteBuilds                   | Delete builds                         |\n| ManageBuildQualities           | Manage build qualities                |\n| DestroyBuilds                  | Destroy builds                        |\n| UpdateBuildInformation         | Update build information              |\n| QueueBuilds                    | Queue builds                          |\n| ManageBuildQueue               | Manage build queue                    |\n| StopBuilds                     | Stop builds                           |\n| ViewBuildDefinition            | View build pipeline                   |\n| EditBuildDefinition            | Edit build pipeline                   |\n| DeleteBuildDefinition          | Delete build pipeline                 |\n| OverrideBuildCheckInValidation | Override check-in validation by build |\n| AdministerBuildPermissions     | Administer build permissions          |\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The **group** principal to assign the permissions.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project to assign the permissions.\n"
                },
                "replace": {
                    "type": "boolean",
                    "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`.\n"
                }
            },
            "required": [
                "path",
                "permissions",
                "principal",
                "projectId"
            ],
            "inputProperties": {
                "path": {
                    "type": "string",
                    "description": "The folder path to assign the permissions.\n",
                    "willReplaceOnChanges": true
                },
                "permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "the permissions to assign. The following permissions are available.\n\n| Permission                     | Description                           |\n|--------------------------------|---------------------------------------|\n| ViewBuilds                     | View builds                           |\n| EditBuildQuality               | Edit build quality                    |\n| RetainIndefinitely             | Retain indefinitely                   |\n| DeleteBuilds                   | Delete builds                         |\n| ManageBuildQualities           | Manage build qualities                |\n| DestroyBuilds                  | Destroy builds                        |\n| UpdateBuildInformation         | Update build information              |\n| QueueBuilds                    | Queue builds                          |\n| ManageBuildQueue               | Manage build queue                    |\n| StopBuilds                     | Stop builds                           |\n| ViewBuildDefinition            | View build pipeline                   |\n| EditBuildDefinition            | Edit build pipeline                   |\n| DeleteBuildDefinition          | Delete build pipeline                 |\n| OverrideBuildCheckInValidation | Override check-in validation by build |\n| AdministerBuildPermissions     | Administer build permissions          |\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The **group** principal to assign the permissions.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project to assign the permissions.\n",
                    "willReplaceOnChanges": true
                },
                "replace": {
                    "type": "boolean",
                    "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`.\n"
                }
            },
            "requiredInputs": [
                "path",
                "permissions",
                "principal",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BuildFolderPermissions resources.\n",
                "properties": {
                    "path": {
                        "type": "string",
                        "description": "The folder path to assign the permissions.\n",
                        "willReplaceOnChanges": true
                    },
                    "permissions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "the permissions to assign. The following permissions are available.\n\n| Permission                     | Description                           |\n|--------------------------------|---------------------------------------|\n| ViewBuilds                     | View builds                           |\n| EditBuildQuality               | Edit build quality                    |\n| RetainIndefinitely             | Retain indefinitely                   |\n| DeleteBuilds                   | Delete builds                         |\n| ManageBuildQualities           | Manage build qualities                |\n| DestroyBuilds                  | Destroy builds                        |\n| UpdateBuildInformation         | Update build information              |\n| QueueBuilds                    | Queue builds                          |\n| ManageBuildQueue               | Manage build queue                    |\n| StopBuilds                     | Stop builds                           |\n| ViewBuildDefinition            | View build pipeline                   |\n| EditBuildDefinition            | Edit build pipeline                   |\n| DeleteBuildDefinition          | Delete build pipeline                 |\n| OverrideBuildCheckInValidation | Override check-in validation by build |\n| AdministerBuildPermissions     | Administer build permissions          |\n"
                    },
                    "principal": {
                        "type": "string",
                        "description": "The **group** principal to assign the permissions.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project to assign the permissions.\n",
                        "willReplaceOnChanges": true
                    },
                    "replace": {
                        "type": "boolean",
                        "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/checkApproval:CheckApproval": {
            "description": "Manages a Approval Check.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Protect an environment\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {});\nconst exampleEnvironment = new azuredevops.Environment(\"exampleEnvironment\", {projectId: exampleProject.id});\nconst exampleGroup = new azuredevops.Group(\"exampleGroup\", {displayName: \"some-azdo-group\"});\nconst exampleCheckApproval = new azuredevops.CheckApproval(\"exampleCheckApproval\", {\n    projectId: exampleProject.id,\n    targetResourceId: exampleEnvironment.id,\n    targetResourceType: \"environment\",\n    requesterCanApprove: true,\n    approvers: [exampleGroup.originId],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\")\nexample_environment = azuredevops.Environment(\"exampleEnvironment\", project_id=example_project.id)\nexample_group = azuredevops.Group(\"exampleGroup\", display_name=\"some-azdo-group\")\nexample_check_approval = azuredevops.CheckApproval(\"exampleCheckApproval\",\n    project_id=example_project.id,\n    target_resource_id=example_environment.id,\n    target_resource_type=\"environment\",\n    requester_can_approve=True,\n    approvers=[example_group.origin_id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\");\n\n    var exampleEnvironment = new AzureDevOps.Environment(\"exampleEnvironment\", new()\n    {\n        ProjectId = exampleProject.Id,\n    });\n\n    var exampleGroup = new AzureDevOps.Group(\"exampleGroup\", new()\n    {\n        DisplayName = \"some-azdo-group\",\n    });\n\n    var exampleCheckApproval = new AzureDevOps.CheckApproval(\"exampleCheckApproval\", new()\n    {\n        ProjectId = exampleProject.Id,\n        TargetResourceId = exampleEnvironment.Id,\n        TargetResourceType = \"environment\",\n        RequesterCanApprove = true,\n        Approvers = new[]\n        {\n            exampleGroup.OriginId,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleEnvironment, err := azuredevops.NewEnvironment(ctx, \"exampleEnvironment\", \u0026azuredevops.EnvironmentArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGroup, err := azuredevops.NewGroup(ctx, \"exampleGroup\", \u0026azuredevops.GroupArgs{\n\t\t\tDisplayName: pulumi.String(\"some-azdo-group\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewCheckApproval(ctx, \"exampleCheckApproval\", \u0026azuredevops.CheckApprovalArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tTargetResourceId:    exampleEnvironment.ID(),\n\t\t\tTargetResourceType:  pulumi.String(\"environment\"),\n\t\t\tRequesterCanApprove: pulumi.Bool(true),\n\t\t\tApprovers: pulumi.StringArray{\n\t\t\t\texampleGroup.OriginId,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.Environment;\nimport com.pulumi.azuredevops.EnvironmentArgs;\nimport com.pulumi.azuredevops.Group;\nimport com.pulumi.azuredevops.GroupArgs;\nimport com.pulumi.azuredevops.CheckApproval;\nimport com.pulumi.azuredevops.CheckApprovalArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\");\n\n        var exampleEnvironment = new Environment(\"exampleEnvironment\", EnvironmentArgs.builder()        \n            .projectId(exampleProject.id())\n            .build());\n\n        var exampleGroup = new Group(\"exampleGroup\", GroupArgs.builder()        \n            .displayName(\"some-azdo-group\")\n            .build());\n\n        var exampleCheckApproval = new CheckApproval(\"exampleCheckApproval\", CheckApprovalArgs.builder()        \n            .projectId(exampleProject.id())\n            .targetResourceId(exampleEnvironment.id())\n            .targetResourceType(\"environment\")\n            .requesterCanApprove(true)\n            .approvers(exampleGroup.originId())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n  exampleEnvironment:\n    type: azuredevops:Environment\n    properties:\n      projectId: ${exampleProject.id}\n  exampleGroup:\n    type: azuredevops:Group\n    properties:\n      displayName: some-azdo-group\n  exampleCheckApproval:\n    type: azuredevops:CheckApproval\n    properties:\n      projectId: ${exampleProject.id}\n      targetResourceId: ${exampleEnvironment.id}\n      targetResourceType: environment\n      requesterCanApprove: true\n      approvers:\n        - ${exampleGroup.originId}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImporting this resource is not supported. ",
            "properties": {
                "approvers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of approver IDs.\n"
                },
                "instructions": {
                    "type": "string",
                    "description": "The instructions for the approvers.\n"
                },
                "minimumRequiredApprovers": {
                    "type": "integer",
                    "description": "The minimum number of approvers. This property is applicable when there is more than 1 approver.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID. Changing this forces a new Approval Check to be created.\n"
                },
                "requesterCanApprove": {
                    "type": "boolean",
                    "description": "Can the requestor approve? Defaults to `false`.\n"
                },
                "targetResourceId": {
                    "type": "string",
                    "description": "The ID of the resource being protected by the check. Changing this forces a new Approval Check to be created.\n"
                },
                "targetResourceType": {
                    "type": "string",
                    "description": "The type of resource being protected by the check. Valid values: `endpoint`, `environment`, `queue`, `repository`, `securefile`, `variablegroup`. Changing this forces a new Approval Check to be created.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "The timeout in minutes for the approval.  Defaults to `43200`.\n"
                }
            },
            "required": [
                "approvers",
                "projectId",
                "targetResourceId",
                "targetResourceType"
            ],
            "inputProperties": {
                "approvers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of approver IDs.\n"
                },
                "instructions": {
                    "type": "string",
                    "description": "The instructions for the approvers.\n"
                },
                "minimumRequiredApprovers": {
                    "type": "integer",
                    "description": "The minimum number of approvers. This property is applicable when there is more than 1 approver.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID. Changing this forces a new Approval Check to be created.\n",
                    "willReplaceOnChanges": true
                },
                "requesterCanApprove": {
                    "type": "boolean",
                    "description": "Can the requestor approve? Defaults to `false`.\n"
                },
                "targetResourceId": {
                    "type": "string",
                    "description": "The ID of the resource being protected by the check. Changing this forces a new Approval Check to be created.\n",
                    "willReplaceOnChanges": true
                },
                "targetResourceType": {
                    "type": "string",
                    "description": "The type of resource being protected by the check. Valid values: `endpoint`, `environment`, `queue`, `repository`, `securefile`, `variablegroup`. Changing this forces a new Approval Check to be created.\n",
                    "willReplaceOnChanges": true
                },
                "timeout": {
                    "type": "integer",
                    "description": "The timeout in minutes for the approval.  Defaults to `43200`.\n"
                }
            },
            "requiredInputs": [
                "approvers",
                "projectId",
                "targetResourceId",
                "targetResourceType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CheckApproval resources.\n",
                "properties": {
                    "approvers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies a list of approver IDs.\n"
                    },
                    "instructions": {
                        "type": "string",
                        "description": "The instructions for the approvers.\n"
                    },
                    "minimumRequiredApprovers": {
                        "type": "integer",
                        "description": "The minimum number of approvers. This property is applicable when there is more than 1 approver.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID. Changing this forces a new Approval Check to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "requesterCanApprove": {
                        "type": "boolean",
                        "description": "Can the requestor approve? Defaults to `false`.\n"
                    },
                    "targetResourceId": {
                        "type": "string",
                        "description": "The ID of the resource being protected by the check. Changing this forces a new Approval Check to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "targetResourceType": {
                        "type": "string",
                        "description": "The type of resource being protected by the check. Valid values: `endpoint`, `environment`, `queue`, `repository`, `securefile`, `variablegroup`. Changing this forces a new Approval Check to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "The timeout in minutes for the approval.  Defaults to `43200`.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/checkBranchControl:CheckBranchControl": {
            "description": "Manages a branch control check on a resource within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Protect a service connection\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {});\nconst exampleServiceEndpointGeneric = new azuredevops.ServiceEndpointGeneric(\"exampleServiceEndpointGeneric\", {\n    projectId: exampleProject.id,\n    serverUrl: \"https://some-server.example.com\",\n    username: \"username\",\n    password: \"password\",\n    serviceEndpointName: \"Example Generic\",\n    description: \"Managed by Terraform\",\n});\nconst exampleCheckBranchControl = new azuredevops.CheckBranchControl(\"exampleCheckBranchControl\", {\n    projectId: exampleProject.id,\n    displayName: \"Managed by Terraform\",\n    targetResourceId: exampleServiceEndpointGeneric.id,\n    targetResourceType: \"endpoint\",\n    allowedBranches: \"refs/heads/main, refs/heads/features/*\",\n    timeout: 1440,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\")\nexample_service_endpoint_generic = azuredevops.ServiceEndpointGeneric(\"exampleServiceEndpointGeneric\",\n    project_id=example_project.id,\n    server_url=\"https://some-server.example.com\",\n    username=\"username\",\n    password=\"password\",\n    service_endpoint_name=\"Example Generic\",\n    description=\"Managed by Terraform\")\nexample_check_branch_control = azuredevops.CheckBranchControl(\"exampleCheckBranchControl\",\n    project_id=example_project.id,\n    display_name=\"Managed by Terraform\",\n    target_resource_id=example_service_endpoint_generic.id,\n    target_resource_type=\"endpoint\",\n    allowed_branches=\"refs/heads/main, refs/heads/features/*\",\n    timeout=1440)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\");\n\n    var exampleServiceEndpointGeneric = new AzureDevOps.ServiceEndpointGeneric(\"exampleServiceEndpointGeneric\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServerUrl = \"https://some-server.example.com\",\n        Username = \"username\",\n        Password = \"password\",\n        ServiceEndpointName = \"Example Generic\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleCheckBranchControl = new AzureDevOps.CheckBranchControl(\"exampleCheckBranchControl\", new()\n    {\n        ProjectId = exampleProject.Id,\n        DisplayName = \"Managed by Terraform\",\n        TargetResourceId = exampleServiceEndpointGeneric.Id,\n        TargetResourceType = \"endpoint\",\n        AllowedBranches = \"refs/heads/main, refs/heads/features/*\",\n        Timeout = 1440,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleServiceEndpointGeneric, err := azuredevops.NewServiceEndpointGeneric(ctx, \"exampleServiceEndpointGeneric\", \u0026azuredevops.ServiceEndpointGenericArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServerUrl:           pulumi.String(\"https://some-server.example.com\"),\n\t\t\tUsername:            pulumi.String(\"username\"),\n\t\t\tPassword:            pulumi.String(\"password\"),\n\t\t\tServiceEndpointName: pulumi.String(\"Example Generic\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewCheckBranchControl(ctx, \"exampleCheckBranchControl\", \u0026azuredevops.CheckBranchControlArgs{\n\t\t\tProjectId:          exampleProject.ID(),\n\t\t\tDisplayName:        pulumi.String(\"Managed by Terraform\"),\n\t\t\tTargetResourceId:   exampleServiceEndpointGeneric.ID(),\n\t\t\tTargetResourceType: pulumi.String(\"endpoint\"),\n\t\t\tAllowedBranches:    pulumi.String(\"refs/heads/main, refs/heads/features/*\"),\n\t\t\tTimeout:            pulumi.Int(1440),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ServiceEndpointGeneric;\nimport com.pulumi.azuredevops.ServiceEndpointGenericArgs;\nimport com.pulumi.azuredevops.CheckBranchControl;\nimport com.pulumi.azuredevops.CheckBranchControlArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\");\n\n        var exampleServiceEndpointGeneric = new ServiceEndpointGeneric(\"exampleServiceEndpointGeneric\", ServiceEndpointGenericArgs.builder()        \n            .projectId(exampleProject.id())\n            .serverUrl(\"https://some-server.example.com\")\n            .username(\"username\")\n            .password(\"password\")\n            .serviceEndpointName(\"Example Generic\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleCheckBranchControl = new CheckBranchControl(\"exampleCheckBranchControl\", CheckBranchControlArgs.builder()        \n            .projectId(exampleProject.id())\n            .displayName(\"Managed by Terraform\")\n            .targetResourceId(exampleServiceEndpointGeneric.id())\n            .targetResourceType(\"endpoint\")\n            .allowedBranches(\"refs/heads/main, refs/heads/features/*\")\n            .timeout(1440)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n  exampleServiceEndpointGeneric:\n    type: azuredevops:ServiceEndpointGeneric\n    properties:\n      projectId: ${exampleProject.id}\n      serverUrl: https://some-server.example.com\n      username: username\n      password: password\n      serviceEndpointName: Example Generic\n      description: Managed by Terraform\n  exampleCheckBranchControl:\n    type: azuredevops:CheckBranchControl\n    properties:\n      projectId: ${exampleProject.id}\n      displayName: Managed by Terraform\n      targetResourceId: ${exampleServiceEndpointGeneric.id}\n      targetResourceType: endpoint\n      allowedBranches: refs/heads/main, refs/heads/features/*\n      timeout: 1440\n```\n{{% /example %}}\n{{% example %}}\n### Protect an environment\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {});\nconst exampleEnvironment = new azuredevops.Environment(\"exampleEnvironment\", {projectId: exampleProject.id});\nconst exampleCheckBranchControl = new azuredevops.CheckBranchControl(\"exampleCheckBranchControl\", {\n    projectId: exampleProject.id,\n    displayName: \"Managed by Terraform\",\n    targetResourceId: exampleEnvironment.id,\n    targetResourceType: \"environment\",\n    allowedBranches: \"refs/heads/main, refs/heads/features/*\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\")\nexample_environment = azuredevops.Environment(\"exampleEnvironment\", project_id=example_project.id)\nexample_check_branch_control = azuredevops.CheckBranchControl(\"exampleCheckBranchControl\",\n    project_id=example_project.id,\n    display_name=\"Managed by Terraform\",\n    target_resource_id=example_environment.id,\n    target_resource_type=\"environment\",\n    allowed_branches=\"refs/heads/main, refs/heads/features/*\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\");\n\n    var exampleEnvironment = new AzureDevOps.Environment(\"exampleEnvironment\", new()\n    {\n        ProjectId = exampleProject.Id,\n    });\n\n    var exampleCheckBranchControl = new AzureDevOps.CheckBranchControl(\"exampleCheckBranchControl\", new()\n    {\n        ProjectId = exampleProject.Id,\n        DisplayName = \"Managed by Terraform\",\n        TargetResourceId = exampleEnvironment.Id,\n        TargetResourceType = \"environment\",\n        AllowedBranches = \"refs/heads/main, refs/heads/features/*\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleEnvironment, err := azuredevops.NewEnvironment(ctx, \"exampleEnvironment\", \u0026azuredevops.EnvironmentArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewCheckBranchControl(ctx, \"exampleCheckBranchControl\", \u0026azuredevops.CheckBranchControlArgs{\n\t\t\tProjectId:          exampleProject.ID(),\n\t\t\tDisplayName:        pulumi.String(\"Managed by Terraform\"),\n\t\t\tTargetResourceId:   exampleEnvironment.ID(),\n\t\t\tTargetResourceType: pulumi.String(\"environment\"),\n\t\t\tAllowedBranches:    pulumi.String(\"refs/heads/main, refs/heads/features/*\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.Environment;\nimport com.pulumi.azuredevops.EnvironmentArgs;\nimport com.pulumi.azuredevops.CheckBranchControl;\nimport com.pulumi.azuredevops.CheckBranchControlArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\");\n\n        var exampleEnvironment = new Environment(\"exampleEnvironment\", EnvironmentArgs.builder()        \n            .projectId(exampleProject.id())\n            .build());\n\n        var exampleCheckBranchControl = new CheckBranchControl(\"exampleCheckBranchControl\", CheckBranchControlArgs.builder()        \n            .projectId(exampleProject.id())\n            .displayName(\"Managed by Terraform\")\n            .targetResourceId(exampleEnvironment.id())\n            .targetResourceType(\"environment\")\n            .allowedBranches(\"refs/heads/main, refs/heads/features/*\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n  exampleEnvironment:\n    type: azuredevops:Environment\n    properties:\n      projectId: ${exampleProject.id}\n  exampleCheckBranchControl:\n    type: azuredevops:CheckBranchControl\n    properties:\n      projectId: ${exampleProject.id}\n      displayName: Managed by Terraform\n      targetResourceId: ${exampleEnvironment.id}\n      targetResourceType: environment\n      allowedBranches: refs/heads/main, refs/heads/features/*\n```\n{{% /example %}}\n{{% example %}}\n### Protect an agent queue\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {});\nconst examplePool = new azuredevops.Pool(\"examplePool\", {});\nconst exampleQueue = new azuredevops.Queue(\"exampleQueue\", {\n    projectId: exampleProject.id,\n    agentPoolId: examplePool.id,\n});\nconst exampleCheckBranchControl = new azuredevops.CheckBranchControl(\"exampleCheckBranchControl\", {\n    projectId: exampleProject.id,\n    displayName: \"Managed by Terraform\",\n    targetResourceId: exampleQueue.id,\n    targetResourceType: \"queue\",\n    allowedBranches: \"refs/heads/main, refs/heads/features/*\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\")\nexample_pool = azuredevops.Pool(\"examplePool\")\nexample_queue = azuredevops.Queue(\"exampleQueue\",\n    project_id=example_project.id,\n    agent_pool_id=example_pool.id)\nexample_check_branch_control = azuredevops.CheckBranchControl(\"exampleCheckBranchControl\",\n    project_id=example_project.id,\n    display_name=\"Managed by Terraform\",\n    target_resource_id=example_queue.id,\n    target_resource_type=\"queue\",\n    allowed_branches=\"refs/heads/main, refs/heads/features/*\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\");\n\n    var examplePool = new AzureDevOps.Pool(\"examplePool\");\n\n    var exampleQueue = new AzureDevOps.Queue(\"exampleQueue\", new()\n    {\n        ProjectId = exampleProject.Id,\n        AgentPoolId = examplePool.Id,\n    });\n\n    var exampleCheckBranchControl = new AzureDevOps.CheckBranchControl(\"exampleCheckBranchControl\", new()\n    {\n        ProjectId = exampleProject.Id,\n        DisplayName = \"Managed by Terraform\",\n        TargetResourceId = exampleQueue.Id,\n        TargetResourceType = \"queue\",\n        AllowedBranches = \"refs/heads/main, refs/heads/features/*\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texamplePool, err := azuredevops.NewPool(ctx, \"examplePool\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleQueue, err := azuredevops.NewQueue(ctx, \"exampleQueue\", \u0026azuredevops.QueueArgs{\n\t\t\tProjectId:   exampleProject.ID(),\n\t\t\tAgentPoolId: examplePool.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewCheckBranchControl(ctx, \"exampleCheckBranchControl\", \u0026azuredevops.CheckBranchControlArgs{\n\t\t\tProjectId:          exampleProject.ID(),\n\t\t\tDisplayName:        pulumi.String(\"Managed by Terraform\"),\n\t\t\tTargetResourceId:   exampleQueue.ID(),\n\t\t\tTargetResourceType: pulumi.String(\"queue\"),\n\t\t\tAllowedBranches:    pulumi.String(\"refs/heads/main, refs/heads/features/*\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.Pool;\nimport com.pulumi.azuredevops.Queue;\nimport com.pulumi.azuredevops.QueueArgs;\nimport com.pulumi.azuredevops.CheckBranchControl;\nimport com.pulumi.azuredevops.CheckBranchControlArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\");\n\n        var examplePool = new Pool(\"examplePool\");\n\n        var exampleQueue = new Queue(\"exampleQueue\", QueueArgs.builder()        \n            .projectId(exampleProject.id())\n            .agentPoolId(examplePool.id())\n            .build());\n\n        var exampleCheckBranchControl = new CheckBranchControl(\"exampleCheckBranchControl\", CheckBranchControlArgs.builder()        \n            .projectId(exampleProject.id())\n            .displayName(\"Managed by Terraform\")\n            .targetResourceId(exampleQueue.id())\n            .targetResourceType(\"queue\")\n            .allowedBranches(\"refs/heads/main, refs/heads/features/*\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n  examplePool:\n    type: azuredevops:Pool\n  exampleQueue:\n    type: azuredevops:Queue\n    properties:\n      projectId: ${exampleProject.id}\n      agentPoolId: ${examplePool.id}\n  exampleCheckBranchControl:\n    type: azuredevops:CheckBranchControl\n    properties:\n      projectId: ${exampleProject.id}\n      displayName: Managed by Terraform\n      targetResourceId: ${exampleQueue.id}\n      targetResourceType: queue\n      allowedBranches: refs/heads/main, refs/heads/features/*\n```\n{{% /example %}}\n{{% example %}}\n### Protect a repository\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {});\nconst exampleGit = new azuredevops.Git(\"exampleGit\", {\n    projectId: exampleProject.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst exampleCheckBranchControl = new azuredevops.CheckBranchControl(\"exampleCheckBranchControl\", {\n    projectId: exampleProject.id,\n    displayName: \"Managed by Terraform\",\n    targetResourceId: pulumi.interpolate`${exampleProject.id}.${exampleGit.id}`,\n    targetResourceType: \"repository\",\n    allowedBranches: \"refs/heads/main, refs/heads/features/*\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\")\nexample_git = azuredevops.Git(\"exampleGit\",\n    project_id=example_project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nexample_check_branch_control = azuredevops.CheckBranchControl(\"exampleCheckBranchControl\",\n    project_id=example_project.id,\n    display_name=\"Managed by Terraform\",\n    target_resource_id=pulumi.Output.all(example_project.id, example_git.id).apply(lambda exampleProjectId, exampleGitId: f\"{example_project_id}.{example_git_id}\"),\n    target_resource_type=\"repository\",\n    allowed_branches=\"refs/heads/main, refs/heads/features/*\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\");\n\n    var exampleGit = new AzureDevOps.Git(\"exampleGit\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n        {\n            InitType = \"Clean\",\n        },\n    });\n\n    var exampleCheckBranchControl = new AzureDevOps.CheckBranchControl(\"exampleCheckBranchControl\", new()\n    {\n        ProjectId = exampleProject.Id,\n        DisplayName = \"Managed by Terraform\",\n        TargetResourceId = Output.Tuple(exampleProject.Id, exampleGit.Id).Apply(values =\u003e\n        {\n            var exampleProjectId = values.Item1;\n            var exampleGitId = values.Item2;\n            return $\"{exampleProjectId}.{exampleGitId}\";\n        }),\n        TargetResourceType = \"repository\",\n        AllowedBranches = \"refs/heads/main, refs/heads/features/*\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGit, err := azuredevops.NewGit(ctx, \"exampleGit\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tInitialization: \u0026azuredevops.GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewCheckBranchControl(ctx, \"exampleCheckBranchControl\", \u0026azuredevops.CheckBranchControlArgs{\n\t\t\tProjectId:   exampleProject.ID(),\n\t\t\tDisplayName: pulumi.String(\"Managed by Terraform\"),\n\t\t\tTargetResourceId: pulumi.All(exampleProject.ID(), exampleGit.ID()).ApplyT(func(_args []interface{}) (string, error) {\n\t\t\t\texampleProjectId := _args[0].(string)\n\t\t\t\texampleGitId := _args[1].(string)\n\t\t\t\treturn fmt.Sprintf(\"%v.%v\", exampleProjectId, exampleGitId), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tTargetResourceType: pulumi.String(\"repository\"),\n\t\t\tAllowedBranches:    pulumi.String(\"refs/heads/main, refs/heads/features/*\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.Git;\nimport com.pulumi.azuredevops.GitArgs;\nimport com.pulumi.azuredevops.inputs.GitInitializationArgs;\nimport com.pulumi.azuredevops.CheckBranchControl;\nimport com.pulumi.azuredevops.CheckBranchControlArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\");\n\n        var exampleGit = new Git(\"exampleGit\", GitArgs.builder()        \n            .projectId(exampleProject.id())\n            .initialization(GitInitializationArgs.builder()\n                .initType(\"Clean\")\n                .build())\n            .build());\n\n        var exampleCheckBranchControl = new CheckBranchControl(\"exampleCheckBranchControl\", CheckBranchControlArgs.builder()        \n            .projectId(exampleProject.id())\n            .displayName(\"Managed by Terraform\")\n            .targetResourceId(Output.tuple(exampleProject.id(), exampleGit.id()).applyValue(values -\u003e {\n                var exampleProjectId = values.t1;\n                var exampleGitId = values.t2;\n                return String.format(\"%s.%s\", exampleProjectId,exampleGitId);\n            }))\n            .targetResourceType(\"repository\")\n            .allowedBranches(\"refs/heads/main, refs/heads/features/*\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n  exampleGit:\n    type: azuredevops:Git\n    properties:\n      projectId: ${exampleProject.id}\n      initialization:\n        initType: Clean\n  exampleCheckBranchControl:\n    type: azuredevops:CheckBranchControl\n    properties:\n      projectId: ${exampleProject.id}\n      displayName: Managed by Terraform\n      targetResourceId: ${exampleProject.id}.${exampleGit.id}\n      targetResourceType: repository\n      allowedBranches: refs/heads/main, refs/heads/features/*\n```\n{{% /example %}}\n{{% example %}}\n### Protect a variable group\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {});\nconst exampleVariableGroup = new azuredevops.VariableGroup(\"exampleVariableGroup\", {\n    projectId: exampleProject.id,\n    description: \"Example Variable Group Description\",\n    allowAccess: true,\n    variables: [\n        {\n            name: \"key1\",\n            value: \"val1\",\n        },\n        {\n            name: \"key2\",\n            secretValue: \"val2\",\n            isSecret: true,\n        },\n    ],\n});\nconst exampleCheckBranchControl = new azuredevops.CheckBranchControl(\"exampleCheckBranchControl\", {\n    projectId: exampleProject.id,\n    displayName: \"Managed by Terraform\",\n    targetResourceId: exampleVariableGroup.id,\n    targetResourceType: \"variablegroup\",\n    allowedBranches: \"refs/heads/main, refs/heads/features/*\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\")\nexample_variable_group = azuredevops.VariableGroup(\"exampleVariableGroup\",\n    project_id=example_project.id,\n    description=\"Example Variable Group Description\",\n    allow_access=True,\n    variables=[\n        azuredevops.VariableGroupVariableArgs(\n            name=\"key1\",\n            value=\"val1\",\n        ),\n        azuredevops.VariableGroupVariableArgs(\n            name=\"key2\",\n            secret_value=\"val2\",\n            is_secret=True,\n        ),\n    ])\nexample_check_branch_control = azuredevops.CheckBranchControl(\"exampleCheckBranchControl\",\n    project_id=example_project.id,\n    display_name=\"Managed by Terraform\",\n    target_resource_id=example_variable_group.id,\n    target_resource_type=\"variablegroup\",\n    allowed_branches=\"refs/heads/main, refs/heads/features/*\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\");\n\n    var exampleVariableGroup = new AzureDevOps.VariableGroup(\"exampleVariableGroup\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Description = \"Example Variable Group Description\",\n        AllowAccess = true,\n        Variables = new[]\n        {\n            new AzureDevOps.Inputs.VariableGroupVariableArgs\n            {\n                Name = \"key1\",\n                Value = \"val1\",\n            },\n            new AzureDevOps.Inputs.VariableGroupVariableArgs\n            {\n                Name = \"key2\",\n                SecretValue = \"val2\",\n                IsSecret = true,\n            },\n        },\n    });\n\n    var exampleCheckBranchControl = new AzureDevOps.CheckBranchControl(\"exampleCheckBranchControl\", new()\n    {\n        ProjectId = exampleProject.Id,\n        DisplayName = \"Managed by Terraform\",\n        TargetResourceId = exampleVariableGroup.Id,\n        TargetResourceType = \"variablegroup\",\n        AllowedBranches = \"refs/heads/main, refs/heads/features/*\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleVariableGroup, err := azuredevops.NewVariableGroup(ctx, \"exampleVariableGroup\", \u0026azuredevops.VariableGroupArgs{\n\t\t\tProjectId:   exampleProject.ID(),\n\t\t\tDescription: pulumi.String(\"Example Variable Group Description\"),\n\t\t\tAllowAccess: pulumi.Bool(true),\n\t\t\tVariables: azuredevops.VariableGroupVariableArray{\n\t\t\t\t\u0026azuredevops.VariableGroupVariableArgs{\n\t\t\t\t\tName:  pulumi.String(\"key1\"),\n\t\t\t\t\tValue: pulumi.String(\"val1\"),\n\t\t\t\t},\n\t\t\t\t\u0026azuredevops.VariableGroupVariableArgs{\n\t\t\t\t\tName:        pulumi.String(\"key2\"),\n\t\t\t\t\tSecretValue: pulumi.String(\"val2\"),\n\t\t\t\t\tIsSecret:    pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewCheckBranchControl(ctx, \"exampleCheckBranchControl\", \u0026azuredevops.CheckBranchControlArgs{\n\t\t\tProjectId:          exampleProject.ID(),\n\t\t\tDisplayName:        pulumi.String(\"Managed by Terraform\"),\n\t\t\tTargetResourceId:   exampleVariableGroup.ID(),\n\t\t\tTargetResourceType: pulumi.String(\"variablegroup\"),\n\t\t\tAllowedBranches:    pulumi.String(\"refs/heads/main, refs/heads/features/*\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.VariableGroup;\nimport com.pulumi.azuredevops.VariableGroupArgs;\nimport com.pulumi.azuredevops.inputs.VariableGroupVariableArgs;\nimport com.pulumi.azuredevops.CheckBranchControl;\nimport com.pulumi.azuredevops.CheckBranchControlArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\");\n\n        var exampleVariableGroup = new VariableGroup(\"exampleVariableGroup\", VariableGroupArgs.builder()        \n            .projectId(exampleProject.id())\n            .description(\"Example Variable Group Description\")\n            .allowAccess(true)\n            .variables(            \n                VariableGroupVariableArgs.builder()\n                    .name(\"key1\")\n                    .value(\"val1\")\n                    .build(),\n                VariableGroupVariableArgs.builder()\n                    .name(\"key2\")\n                    .secretValue(\"val2\")\n                    .isSecret(true)\n                    .build())\n            .build());\n\n        var exampleCheckBranchControl = new CheckBranchControl(\"exampleCheckBranchControl\", CheckBranchControlArgs.builder()        \n            .projectId(exampleProject.id())\n            .displayName(\"Managed by Terraform\")\n            .targetResourceId(exampleVariableGroup.id())\n            .targetResourceType(\"variablegroup\")\n            .allowedBranches(\"refs/heads/main, refs/heads/features/*\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n  exampleVariableGroup:\n    type: azuredevops:VariableGroup\n    properties:\n      projectId: ${exampleProject.id}\n      description: Example Variable Group Description\n      allowAccess: true\n      variables:\n        - name: key1\n          value: val1\n        - name: key2\n          secretValue: val2\n          isSecret: true\n  exampleCheckBranchControl:\n    type: azuredevops:CheckBranchControl\n    properties:\n      projectId: ${exampleProject.id}\n      displayName: Managed by Terraform\n      targetResourceId: ${exampleVariableGroup.id}\n      targetResourceType: variablegroup\n      allowedBranches: refs/heads/main, refs/heads/features/*\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Define approvals and checks](https://learn.microsoft.com/en-us/azure/devops/pipelines/process/approvals?view=azure-devops\u0026tabs=check-pass)\n\n\n## Import\n\nImporting this resource is not supported. ",
            "properties": {
                "allowedBranches": {
                    "type": "string",
                    "description": "The branches allowed to use the resource. Specify a comma separated list of allowed branches in `refs/heads/branch_name` format. To allow deployments from all branches, specify ` * ` . `refs/heads/features/* , refs/heads/releases/*` restricts deployments to all branches under features/ or releases/ . Defaults to `*`.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the branch control check displayed in the web UI.\n"
                },
                "ignoreUnknownProtectionStatus": {
                    "type": "boolean",
                    "description": "Allow deployment from branches for which protection status could not be obtained. Only relevant when verify_branch_protection is `true`. Defaults to `false`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID.\n"
                },
                "targetResourceId": {
                    "type": "string",
                    "description": "The ID of the resource being protected by the check.\n"
                },
                "targetResourceType": {
                    "type": "string",
                    "description": "The type of resource being protected by the check. Valid values: `endpoint`, `environment`, `queue`, `repository`, `securefile`, `variablegroup`.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "The timeout in minutes for the branch control check. Defaults to `1440`.\n"
                },
                "verifyBranchProtection": {
                    "type": "boolean",
                    "description": "Validate the branches being deployed are protected. Defaults to `false`.\n"
                }
            },
            "required": [
                "projectId",
                "targetResourceId",
                "targetResourceType"
            ],
            "inputProperties": {
                "allowedBranches": {
                    "type": "string",
                    "description": "The branches allowed to use the resource. Specify a comma separated list of allowed branches in `refs/heads/branch_name` format. To allow deployments from all branches, specify ` * ` . `refs/heads/features/* , refs/heads/releases/*` restricts deployments to all branches under features/ or releases/ . Defaults to `*`.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the branch control check displayed in the web UI.\n"
                },
                "ignoreUnknownProtectionStatus": {
                    "type": "boolean",
                    "description": "Allow deployment from branches for which protection status could not be obtained. Only relevant when verify_branch_protection is `true`. Defaults to `false`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID.\n",
                    "willReplaceOnChanges": true
                },
                "targetResourceId": {
                    "type": "string",
                    "description": "The ID of the resource being protected by the check.\n",
                    "willReplaceOnChanges": true
                },
                "targetResourceType": {
                    "type": "string",
                    "description": "The type of resource being protected by the check. Valid values: `endpoint`, `environment`, `queue`, `repository`, `securefile`, `variablegroup`.\n",
                    "willReplaceOnChanges": true
                },
                "timeout": {
                    "type": "integer",
                    "description": "The timeout in minutes for the branch control check. Defaults to `1440`.\n"
                },
                "verifyBranchProtection": {
                    "type": "boolean",
                    "description": "Validate the branches being deployed are protected. Defaults to `false`.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "targetResourceId",
                "targetResourceType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CheckBranchControl resources.\n",
                "properties": {
                    "allowedBranches": {
                        "type": "string",
                        "description": "The branches allowed to use the resource. Specify a comma separated list of allowed branches in `refs/heads/branch_name` format. To allow deployments from all branches, specify ` * ` . `refs/heads/features/* , refs/heads/releases/*` restricts deployments to all branches under features/ or releases/ . Defaults to `*`.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name of the branch control check displayed in the web UI.\n"
                    },
                    "ignoreUnknownProtectionStatus": {
                        "type": "boolean",
                        "description": "Allow deployment from branches for which protection status could not be obtained. Only relevant when verify_branch_protection is `true`. Defaults to `false`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "targetResourceId": {
                        "type": "string",
                        "description": "The ID of the resource being protected by the check.\n",
                        "willReplaceOnChanges": true
                    },
                    "targetResourceType": {
                        "type": "string",
                        "description": "The type of resource being protected by the check. Valid values: `endpoint`, `environment`, `queue`, `repository`, `securefile`, `variablegroup`.\n",
                        "willReplaceOnChanges": true
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "The timeout in minutes for the branch control check. Defaults to `1440`.\n"
                    },
                    "verifyBranchProtection": {
                        "type": "boolean",
                        "description": "Validate the branches being deployed are protected. Defaults to `false`.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/checkBusinessHours:CheckBusinessHours": {
            "description": "Manages a business hours check on a resource within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Protect a service connection\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {});\nconst exampleServiceEndpointGeneric = new azuredevops.ServiceEndpointGeneric(\"exampleServiceEndpointGeneric\", {\n    projectId: exampleProject.id,\n    serverUrl: \"https://some-server.example.com\",\n    username: \"username\",\n    password: \"password\",\n    serviceEndpointName: \"Example Generic\",\n    description: \"Managed by Terraform\",\n});\nconst exampleCheckBusinessHours = new azuredevops.CheckBusinessHours(\"exampleCheckBusinessHours\", {\n    projectId: exampleProject.id,\n    displayName: \"Managed by Terraform\",\n    targetResourceId: exampleServiceEndpointGeneric.id,\n    targetResourceType: \"endpoint\",\n    startTime: \"07:00\",\n    endTime: \"15:30\",\n    timeZone: \"UTC\",\n    monday: true,\n    tuesday: true,\n    timeout: 1440,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\")\nexample_service_endpoint_generic = azuredevops.ServiceEndpointGeneric(\"exampleServiceEndpointGeneric\",\n    project_id=example_project.id,\n    server_url=\"https://some-server.example.com\",\n    username=\"username\",\n    password=\"password\",\n    service_endpoint_name=\"Example Generic\",\n    description=\"Managed by Terraform\")\nexample_check_business_hours = azuredevops.CheckBusinessHours(\"exampleCheckBusinessHours\",\n    project_id=example_project.id,\n    display_name=\"Managed by Terraform\",\n    target_resource_id=example_service_endpoint_generic.id,\n    target_resource_type=\"endpoint\",\n    start_time=\"07:00\",\n    end_time=\"15:30\",\n    time_zone=\"UTC\",\n    monday=True,\n    tuesday=True,\n    timeout=1440)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\");\n\n    var exampleServiceEndpointGeneric = new AzureDevOps.ServiceEndpointGeneric(\"exampleServiceEndpointGeneric\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServerUrl = \"https://some-server.example.com\",\n        Username = \"username\",\n        Password = \"password\",\n        ServiceEndpointName = \"Example Generic\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleCheckBusinessHours = new AzureDevOps.CheckBusinessHours(\"exampleCheckBusinessHours\", new()\n    {\n        ProjectId = exampleProject.Id,\n        DisplayName = \"Managed by Terraform\",\n        TargetResourceId = exampleServiceEndpointGeneric.Id,\n        TargetResourceType = \"endpoint\",\n        StartTime = \"07:00\",\n        EndTime = \"15:30\",\n        TimeZone = \"UTC\",\n        Monday = true,\n        Tuesday = true,\n        Timeout = 1440,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleServiceEndpointGeneric, err := azuredevops.NewServiceEndpointGeneric(ctx, \"exampleServiceEndpointGeneric\", \u0026azuredevops.ServiceEndpointGenericArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServerUrl:           pulumi.String(\"https://some-server.example.com\"),\n\t\t\tUsername:            pulumi.String(\"username\"),\n\t\t\tPassword:            pulumi.String(\"password\"),\n\t\t\tServiceEndpointName: pulumi.String(\"Example Generic\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewCheckBusinessHours(ctx, \"exampleCheckBusinessHours\", \u0026azuredevops.CheckBusinessHoursArgs{\n\t\t\tProjectId:          exampleProject.ID(),\n\t\t\tDisplayName:        pulumi.String(\"Managed by Terraform\"),\n\t\t\tTargetResourceId:   exampleServiceEndpointGeneric.ID(),\n\t\t\tTargetResourceType: pulumi.String(\"endpoint\"),\n\t\t\tStartTime:          pulumi.String(\"07:00\"),\n\t\t\tEndTime:            pulumi.String(\"15:30\"),\n\t\t\tTimeZone:           pulumi.String(\"UTC\"),\n\t\t\tMonday:             pulumi.Bool(true),\n\t\t\tTuesday:            pulumi.Bool(true),\n\t\t\tTimeout:            pulumi.Int(1440),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ServiceEndpointGeneric;\nimport com.pulumi.azuredevops.ServiceEndpointGenericArgs;\nimport com.pulumi.azuredevops.CheckBusinessHours;\nimport com.pulumi.azuredevops.CheckBusinessHoursArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\");\n\n        var exampleServiceEndpointGeneric = new ServiceEndpointGeneric(\"exampleServiceEndpointGeneric\", ServiceEndpointGenericArgs.builder()        \n            .projectId(exampleProject.id())\n            .serverUrl(\"https://some-server.example.com\")\n            .username(\"username\")\n            .password(\"password\")\n            .serviceEndpointName(\"Example Generic\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleCheckBusinessHours = new CheckBusinessHours(\"exampleCheckBusinessHours\", CheckBusinessHoursArgs.builder()        \n            .projectId(exampleProject.id())\n            .displayName(\"Managed by Terraform\")\n            .targetResourceId(exampleServiceEndpointGeneric.id())\n            .targetResourceType(\"endpoint\")\n            .startTime(\"07:00\")\n            .endTime(\"15:30\")\n            .timeZone(\"UTC\")\n            .monday(true)\n            .tuesday(true)\n            .timeout(1440)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n  exampleServiceEndpointGeneric:\n    type: azuredevops:ServiceEndpointGeneric\n    properties:\n      projectId: ${exampleProject.id}\n      serverUrl: https://some-server.example.com\n      username: username\n      password: password\n      serviceEndpointName: Example Generic\n      description: Managed by Terraform\n  exampleCheckBusinessHours:\n    type: azuredevops:CheckBusinessHours\n    properties:\n      projectId: ${exampleProject.id}\n      displayName: Managed by Terraform\n      targetResourceId: ${exampleServiceEndpointGeneric.id}\n      targetResourceType: endpoint\n      startTime: 07:00\n      endTime: 15:30\n      timeZone: UTC\n      monday: true\n      tuesday: true\n      timeout: 1440\n```\n{{% /example %}}\n{{% example %}}\n### Protect an environment\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {});\nconst exampleEnvironment = new azuredevops.Environment(\"exampleEnvironment\", {projectId: exampleProject.id});\nconst exampleCheckBusinessHours = new azuredevops.CheckBusinessHours(\"exampleCheckBusinessHours\", {\n    projectId: exampleProject.id,\n    displayName: \"Managed by Terraform\",\n    targetResourceId: exampleEnvironment.id,\n    targetResourceType: \"environment\",\n    startTime: \"07:00\",\n    endTime: \"15:30\",\n    timeZone: \"UTC\",\n    monday: true,\n    tuesday: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\")\nexample_environment = azuredevops.Environment(\"exampleEnvironment\", project_id=example_project.id)\nexample_check_business_hours = azuredevops.CheckBusinessHours(\"exampleCheckBusinessHours\",\n    project_id=example_project.id,\n    display_name=\"Managed by Terraform\",\n    target_resource_id=example_environment.id,\n    target_resource_type=\"environment\",\n    start_time=\"07:00\",\n    end_time=\"15:30\",\n    time_zone=\"UTC\",\n    monday=True,\n    tuesday=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\");\n\n    var exampleEnvironment = new AzureDevOps.Environment(\"exampleEnvironment\", new()\n    {\n        ProjectId = exampleProject.Id,\n    });\n\n    var exampleCheckBusinessHours = new AzureDevOps.CheckBusinessHours(\"exampleCheckBusinessHours\", new()\n    {\n        ProjectId = exampleProject.Id,\n        DisplayName = \"Managed by Terraform\",\n        TargetResourceId = exampleEnvironment.Id,\n        TargetResourceType = \"environment\",\n        StartTime = \"07:00\",\n        EndTime = \"15:30\",\n        TimeZone = \"UTC\",\n        Monday = true,\n        Tuesday = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleEnvironment, err := azuredevops.NewEnvironment(ctx, \"exampleEnvironment\", \u0026azuredevops.EnvironmentArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewCheckBusinessHours(ctx, \"exampleCheckBusinessHours\", \u0026azuredevops.CheckBusinessHoursArgs{\n\t\t\tProjectId:          exampleProject.ID(),\n\t\t\tDisplayName:        pulumi.String(\"Managed by Terraform\"),\n\t\t\tTargetResourceId:   exampleEnvironment.ID(),\n\t\t\tTargetResourceType: pulumi.String(\"environment\"),\n\t\t\tStartTime:          pulumi.String(\"07:00\"),\n\t\t\tEndTime:            pulumi.String(\"15:30\"),\n\t\t\tTimeZone:           pulumi.String(\"UTC\"),\n\t\t\tMonday:             pulumi.Bool(true),\n\t\t\tTuesday:            pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.Environment;\nimport com.pulumi.azuredevops.EnvironmentArgs;\nimport com.pulumi.azuredevops.CheckBusinessHours;\nimport com.pulumi.azuredevops.CheckBusinessHoursArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\");\n\n        var exampleEnvironment = new Environment(\"exampleEnvironment\", EnvironmentArgs.builder()        \n            .projectId(exampleProject.id())\n            .build());\n\n        var exampleCheckBusinessHours = new CheckBusinessHours(\"exampleCheckBusinessHours\", CheckBusinessHoursArgs.builder()        \n            .projectId(exampleProject.id())\n            .displayName(\"Managed by Terraform\")\n            .targetResourceId(exampleEnvironment.id())\n            .targetResourceType(\"environment\")\n            .startTime(\"07:00\")\n            .endTime(\"15:30\")\n            .timeZone(\"UTC\")\n            .monday(true)\n            .tuesday(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n  exampleEnvironment:\n    type: azuredevops:Environment\n    properties:\n      projectId: ${exampleProject.id}\n  exampleCheckBusinessHours:\n    type: azuredevops:CheckBusinessHours\n    properties:\n      projectId: ${exampleProject.id}\n      displayName: Managed by Terraform\n      targetResourceId: ${exampleEnvironment.id}\n      targetResourceType: environment\n      startTime: 07:00\n      endTime: 15:30\n      timeZone: UTC\n      monday: true\n      tuesday: true\n```\n{{% /example %}}\n{{% example %}}\n### Protect an agent queue\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {});\nconst examplePool = new azuredevops.Pool(\"examplePool\", {});\nconst exampleQueue = new azuredevops.Queue(\"exampleQueue\", {\n    projectId: exampleProject.id,\n    agentPoolId: examplePool.id,\n});\nconst exampleCheckBusinessHours = new azuredevops.CheckBusinessHours(\"exampleCheckBusinessHours\", {\n    projectId: exampleProject.id,\n    displayName: \"Managed by Terraform\",\n    targetResourceId: exampleQueue.id,\n    targetResourceType: \"queue\",\n    startTime: \"07:00\",\n    endTime: \"15:30\",\n    timeZone: \"UTC\",\n    monday: true,\n    tuesday: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\")\nexample_pool = azuredevops.Pool(\"examplePool\")\nexample_queue = azuredevops.Queue(\"exampleQueue\",\n    project_id=example_project.id,\n    agent_pool_id=example_pool.id)\nexample_check_business_hours = azuredevops.CheckBusinessHours(\"exampleCheckBusinessHours\",\n    project_id=example_project.id,\n    display_name=\"Managed by Terraform\",\n    target_resource_id=example_queue.id,\n    target_resource_type=\"queue\",\n    start_time=\"07:00\",\n    end_time=\"15:30\",\n    time_zone=\"UTC\",\n    monday=True,\n    tuesday=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\");\n\n    var examplePool = new AzureDevOps.Pool(\"examplePool\");\n\n    var exampleQueue = new AzureDevOps.Queue(\"exampleQueue\", new()\n    {\n        ProjectId = exampleProject.Id,\n        AgentPoolId = examplePool.Id,\n    });\n\n    var exampleCheckBusinessHours = new AzureDevOps.CheckBusinessHours(\"exampleCheckBusinessHours\", new()\n    {\n        ProjectId = exampleProject.Id,\n        DisplayName = \"Managed by Terraform\",\n        TargetResourceId = exampleQueue.Id,\n        TargetResourceType = \"queue\",\n        StartTime = \"07:00\",\n        EndTime = \"15:30\",\n        TimeZone = \"UTC\",\n        Monday = true,\n        Tuesday = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texamplePool, err := azuredevops.NewPool(ctx, \"examplePool\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleQueue, err := azuredevops.NewQueue(ctx, \"exampleQueue\", \u0026azuredevops.QueueArgs{\n\t\t\tProjectId:   exampleProject.ID(),\n\t\t\tAgentPoolId: examplePool.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewCheckBusinessHours(ctx, \"exampleCheckBusinessHours\", \u0026azuredevops.CheckBusinessHoursArgs{\n\t\t\tProjectId:          exampleProject.ID(),\n\t\t\tDisplayName:        pulumi.String(\"Managed by Terraform\"),\n\t\t\tTargetResourceId:   exampleQueue.ID(),\n\t\t\tTargetResourceType: pulumi.String(\"queue\"),\n\t\t\tStartTime:          pulumi.String(\"07:00\"),\n\t\t\tEndTime:            pulumi.String(\"15:30\"),\n\t\t\tTimeZone:           pulumi.String(\"UTC\"),\n\t\t\tMonday:             pulumi.Bool(true),\n\t\t\tTuesday:            pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.Pool;\nimport com.pulumi.azuredevops.Queue;\nimport com.pulumi.azuredevops.QueueArgs;\nimport com.pulumi.azuredevops.CheckBusinessHours;\nimport com.pulumi.azuredevops.CheckBusinessHoursArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\");\n\n        var examplePool = new Pool(\"examplePool\");\n\n        var exampleQueue = new Queue(\"exampleQueue\", QueueArgs.builder()        \n            .projectId(exampleProject.id())\n            .agentPoolId(examplePool.id())\n            .build());\n\n        var exampleCheckBusinessHours = new CheckBusinessHours(\"exampleCheckBusinessHours\", CheckBusinessHoursArgs.builder()        \n            .projectId(exampleProject.id())\n            .displayName(\"Managed by Terraform\")\n            .targetResourceId(exampleQueue.id())\n            .targetResourceType(\"queue\")\n            .startTime(\"07:00\")\n            .endTime(\"15:30\")\n            .timeZone(\"UTC\")\n            .monday(true)\n            .tuesday(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n  examplePool:\n    type: azuredevops:Pool\n  exampleQueue:\n    type: azuredevops:Queue\n    properties:\n      projectId: ${exampleProject.id}\n      agentPoolId: ${examplePool.id}\n  exampleCheckBusinessHours:\n    type: azuredevops:CheckBusinessHours\n    properties:\n      projectId: ${exampleProject.id}\n      displayName: Managed by Terraform\n      targetResourceId: ${exampleQueue.id}\n      targetResourceType: queue\n      startTime: 07:00\n      endTime: 15:30\n      timeZone: UTC\n      monday: true\n      tuesday: true\n```\n{{% /example %}}\n{{% example %}}\n### Protect a repository\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {});\nconst exampleGit = new azuredevops.Git(\"exampleGit\", {\n    projectId: exampleProject.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst exampleCheckBusinessHours = new azuredevops.CheckBusinessHours(\"exampleCheckBusinessHours\", {\n    projectId: exampleProject.id,\n    displayName: \"Managed by Terraform\",\n    targetResourceId: pulumi.interpolate`${exampleProject.id}.${exampleGit.id}`,\n    targetResourceType: \"repository\",\n    startTime: \"07:00\",\n    endTime: \"15:30\",\n    timeZone: \"UTC\",\n    monday: true,\n    tuesday: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\")\nexample_git = azuredevops.Git(\"exampleGit\",\n    project_id=example_project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nexample_check_business_hours = azuredevops.CheckBusinessHours(\"exampleCheckBusinessHours\",\n    project_id=example_project.id,\n    display_name=\"Managed by Terraform\",\n    target_resource_id=pulumi.Output.all(example_project.id, example_git.id).apply(lambda exampleProjectId, exampleGitId: f\"{example_project_id}.{example_git_id}\"),\n    target_resource_type=\"repository\",\n    start_time=\"07:00\",\n    end_time=\"15:30\",\n    time_zone=\"UTC\",\n    monday=True,\n    tuesday=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\");\n\n    var exampleGit = new AzureDevOps.Git(\"exampleGit\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n        {\n            InitType = \"Clean\",\n        },\n    });\n\n    var exampleCheckBusinessHours = new AzureDevOps.CheckBusinessHours(\"exampleCheckBusinessHours\", new()\n    {\n        ProjectId = exampleProject.Id,\n        DisplayName = \"Managed by Terraform\",\n        TargetResourceId = Output.Tuple(exampleProject.Id, exampleGit.Id).Apply(values =\u003e\n        {\n            var exampleProjectId = values.Item1;\n            var exampleGitId = values.Item2;\n            return $\"{exampleProjectId}.{exampleGitId}\";\n        }),\n        TargetResourceType = \"repository\",\n        StartTime = \"07:00\",\n        EndTime = \"15:30\",\n        TimeZone = \"UTC\",\n        Monday = true,\n        Tuesday = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGit, err := azuredevops.NewGit(ctx, \"exampleGit\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tInitialization: \u0026azuredevops.GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewCheckBusinessHours(ctx, \"exampleCheckBusinessHours\", \u0026azuredevops.CheckBusinessHoursArgs{\n\t\t\tProjectId:   exampleProject.ID(),\n\t\t\tDisplayName: pulumi.String(\"Managed by Terraform\"),\n\t\t\tTargetResourceId: pulumi.All(exampleProject.ID(), exampleGit.ID()).ApplyT(func(_args []interface{}) (string, error) {\n\t\t\t\texampleProjectId := _args[0].(string)\n\t\t\t\texampleGitId := _args[1].(string)\n\t\t\t\treturn fmt.Sprintf(\"%v.%v\", exampleProjectId, exampleGitId), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tTargetResourceType: pulumi.String(\"repository\"),\n\t\t\tStartTime:          pulumi.String(\"07:00\"),\n\t\t\tEndTime:            pulumi.String(\"15:30\"),\n\t\t\tTimeZone:           pulumi.String(\"UTC\"),\n\t\t\tMonday:             pulumi.Bool(true),\n\t\t\tTuesday:            pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.Git;\nimport com.pulumi.azuredevops.GitArgs;\nimport com.pulumi.azuredevops.inputs.GitInitializationArgs;\nimport com.pulumi.azuredevops.CheckBusinessHours;\nimport com.pulumi.azuredevops.CheckBusinessHoursArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\");\n\n        var exampleGit = new Git(\"exampleGit\", GitArgs.builder()        \n            .projectId(exampleProject.id())\n            .initialization(GitInitializationArgs.builder()\n                .initType(\"Clean\")\n                .build())\n            .build());\n\n        var exampleCheckBusinessHours = new CheckBusinessHours(\"exampleCheckBusinessHours\", CheckBusinessHoursArgs.builder()        \n            .projectId(exampleProject.id())\n            .displayName(\"Managed by Terraform\")\n            .targetResourceId(Output.tuple(exampleProject.id(), exampleGit.id()).applyValue(values -\u003e {\n                var exampleProjectId = values.t1;\n                var exampleGitId = values.t2;\n                return String.format(\"%s.%s\", exampleProjectId,exampleGitId);\n            }))\n            .targetResourceType(\"repository\")\n            .startTime(\"07:00\")\n            .endTime(\"15:30\")\n            .timeZone(\"UTC\")\n            .monday(true)\n            .tuesday(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n  exampleGit:\n    type: azuredevops:Git\n    properties:\n      projectId: ${exampleProject.id}\n      initialization:\n        initType: Clean\n  exampleCheckBusinessHours:\n    type: azuredevops:CheckBusinessHours\n    properties:\n      projectId: ${exampleProject.id}\n      displayName: Managed by Terraform\n      targetResourceId: ${exampleProject.id}.${exampleGit.id}\n      targetResourceType: repository\n      startTime: 07:00\n      endTime: 15:30\n      timeZone: UTC\n      monday: true\n      tuesday: true\n```\n{{% /example %}}\n{{% example %}}\n### Protect a variable group\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {});\nconst exampleVariableGroup = new azuredevops.VariableGroup(\"exampleVariableGroup\", {\n    projectId: exampleProject.id,\n    description: \"Example Variable Group Description\",\n    allowAccess: true,\n    variables: [\n        {\n            name: \"key1\",\n            value: \"val1\",\n        },\n        {\n            name: \"key2\",\n            secretValue: \"val2\",\n            isSecret: true,\n        },\n    ],\n});\nconst exampleCheckBusinessHours = new azuredevops.CheckBusinessHours(\"exampleCheckBusinessHours\", {\n    projectId: exampleProject.id,\n    displayName: \"Managed by Terraform\",\n    targetResourceId: exampleVariableGroup.id,\n    targetResourceType: \"variablegroup\",\n    startTime: \"07:00\",\n    endTime: \"15:30\",\n    timeZone: \"UTC\",\n    monday: true,\n    tuesday: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\")\nexample_variable_group = azuredevops.VariableGroup(\"exampleVariableGroup\",\n    project_id=example_project.id,\n    description=\"Example Variable Group Description\",\n    allow_access=True,\n    variables=[\n        azuredevops.VariableGroupVariableArgs(\n            name=\"key1\",\n            value=\"val1\",\n        ),\n        azuredevops.VariableGroupVariableArgs(\n            name=\"key2\",\n            secret_value=\"val2\",\n            is_secret=True,\n        ),\n    ])\nexample_check_business_hours = azuredevops.CheckBusinessHours(\"exampleCheckBusinessHours\",\n    project_id=example_project.id,\n    display_name=\"Managed by Terraform\",\n    target_resource_id=example_variable_group.id,\n    target_resource_type=\"variablegroup\",\n    start_time=\"07:00\",\n    end_time=\"15:30\",\n    time_zone=\"UTC\",\n    monday=True,\n    tuesday=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\");\n\n    var exampleVariableGroup = new AzureDevOps.VariableGroup(\"exampleVariableGroup\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Description = \"Example Variable Group Description\",\n        AllowAccess = true,\n        Variables = new[]\n        {\n            new AzureDevOps.Inputs.VariableGroupVariableArgs\n            {\n                Name = \"key1\",\n                Value = \"val1\",\n            },\n            new AzureDevOps.Inputs.VariableGroupVariableArgs\n            {\n                Name = \"key2\",\n                SecretValue = \"val2\",\n                IsSecret = true,\n            },\n        },\n    });\n\n    var exampleCheckBusinessHours = new AzureDevOps.CheckBusinessHours(\"exampleCheckBusinessHours\", new()\n    {\n        ProjectId = exampleProject.Id,\n        DisplayName = \"Managed by Terraform\",\n        TargetResourceId = exampleVariableGroup.Id,\n        TargetResourceType = \"variablegroup\",\n        StartTime = \"07:00\",\n        EndTime = \"15:30\",\n        TimeZone = \"UTC\",\n        Monday = true,\n        Tuesday = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleVariableGroup, err := azuredevops.NewVariableGroup(ctx, \"exampleVariableGroup\", \u0026azuredevops.VariableGroupArgs{\n\t\t\tProjectId:   exampleProject.ID(),\n\t\t\tDescription: pulumi.String(\"Example Variable Group Description\"),\n\t\t\tAllowAccess: pulumi.Bool(true),\n\t\t\tVariables: azuredevops.VariableGroupVariableArray{\n\t\t\t\t\u0026azuredevops.VariableGroupVariableArgs{\n\t\t\t\t\tName:  pulumi.String(\"key1\"),\n\t\t\t\t\tValue: pulumi.String(\"val1\"),\n\t\t\t\t},\n\t\t\t\t\u0026azuredevops.VariableGroupVariableArgs{\n\t\t\t\t\tName:        pulumi.String(\"key2\"),\n\t\t\t\t\tSecretValue: pulumi.String(\"val2\"),\n\t\t\t\t\tIsSecret:    pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewCheckBusinessHours(ctx, \"exampleCheckBusinessHours\", \u0026azuredevops.CheckBusinessHoursArgs{\n\t\t\tProjectId:          exampleProject.ID(),\n\t\t\tDisplayName:        pulumi.String(\"Managed by Terraform\"),\n\t\t\tTargetResourceId:   exampleVariableGroup.ID(),\n\t\t\tTargetResourceType: pulumi.String(\"variablegroup\"),\n\t\t\tStartTime:          pulumi.String(\"07:00\"),\n\t\t\tEndTime:            pulumi.String(\"15:30\"),\n\t\t\tTimeZone:           pulumi.String(\"UTC\"),\n\t\t\tMonday:             pulumi.Bool(true),\n\t\t\tTuesday:            pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.VariableGroup;\nimport com.pulumi.azuredevops.VariableGroupArgs;\nimport com.pulumi.azuredevops.inputs.VariableGroupVariableArgs;\nimport com.pulumi.azuredevops.CheckBusinessHours;\nimport com.pulumi.azuredevops.CheckBusinessHoursArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\");\n\n        var exampleVariableGroup = new VariableGroup(\"exampleVariableGroup\", VariableGroupArgs.builder()        \n            .projectId(exampleProject.id())\n            .description(\"Example Variable Group Description\")\n            .allowAccess(true)\n            .variables(            \n                VariableGroupVariableArgs.builder()\n                    .name(\"key1\")\n                    .value(\"val1\")\n                    .build(),\n                VariableGroupVariableArgs.builder()\n                    .name(\"key2\")\n                    .secretValue(\"val2\")\n                    .isSecret(true)\n                    .build())\n            .build());\n\n        var exampleCheckBusinessHours = new CheckBusinessHours(\"exampleCheckBusinessHours\", CheckBusinessHoursArgs.builder()        \n            .projectId(exampleProject.id())\n            .displayName(\"Managed by Terraform\")\n            .targetResourceId(exampleVariableGroup.id())\n            .targetResourceType(\"variablegroup\")\n            .startTime(\"07:00\")\n            .endTime(\"15:30\")\n            .timeZone(\"UTC\")\n            .monday(true)\n            .tuesday(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n  exampleVariableGroup:\n    type: azuredevops:VariableGroup\n    properties:\n      projectId: ${exampleProject.id}\n      description: Example Variable Group Description\n      allowAccess: true\n      variables:\n        - name: key1\n          value: val1\n        - name: key2\n          secretValue: val2\n          isSecret: true\n  exampleCheckBusinessHours:\n    type: azuredevops:CheckBusinessHours\n    properties:\n      projectId: ${exampleProject.id}\n      displayName: Managed by Terraform\n      targetResourceId: ${exampleVariableGroup.id}\n      targetResourceType: variablegroup\n      startTime: 07:00\n      endTime: 15:30\n      timeZone: UTC\n      monday: true\n      tuesday: true\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Define approvals and checks](https://learn.microsoft.com/en-us/azure/devops/pipelines/process/approvals?view=azure-devops\u0026tabs=check-pass)\n\n## Supported Time Zones\n\n- AUS Central Standard Time\n- AUS Eastern Standard Time\n- Afghanistan Standard Time\n- Alaskan Standard Time\n- Aleutian Standard Time\n- Altai Standard Time\n- Arab Standard Time\n- Arabian Standard Time\n- Arabic Standard Time\n- Argentina Standard Time\n- Astrakhan Standard Time\n- Atlantic Standard Time\n- Aus Central W. Standard Time\n- Azerbaijan Standard Time\n- Azores Standard Time\n- Bahia Standard Time\n- Bangladesh Standard Time\n- Belarus Standard Time\n- Bougainville Standard Time\n- Canada Central Standard Time\n- Cape Verde Standard Time\n- Caucasus Standard Time\n- Cen. Australia Standard Time\n- Central America Standard Time\n- Central Asia Standard Time\n- Central Brazilian Standard Time\n- Central Europe Standard Time\n- Central European Standard Time\n- Central Pacific Standard Time\n- Central Standard Time (Mexico)\n- Central Standard Time\n- Chatham Islands Standard Time\n- China Standard Time\n- Cuba Standard Time\n- Dateline Standard Time\n- E. Africa Standard Time\n- E. Australia Standard Time\n- E. Europe Standard Time\n- E. South America Standard Time\n- Easter Island Standard Time\n- Eastern Standard Time (Mexico)\n- Eastern Standard Time\n- Egypt Standard Time\n- Ekaterinburg Standard Time\n- FLE Standard Time\n- Fiji Standard Time\n- GMT Standard Time\n- GTB Standard Time\n- Georgian Standard Time\n- Greenland Standard Time\n- Greenwich Standard Time\n- Haiti Standard Time\n- Hawaiian Standard Time\n- India Standard Time\n- Iran Standard Time\n- Israel Standard Time\n- Jordan Standard Time\n- Kaliningrad Standard Time\n- Kamchatka Standard Time\n- Korea Standard Time\n- Libya Standard Time\n- Line Islands Standard Time\n- Lord Howe Standard Time\n- Magadan Standard Time\n- Magallanes Standard Time\n- Marquesas Standard Time\n- Mauritius Standard Time\n- Mid-Atlantic Standard Time\n- Middle East Standard Time\n- Montevideo Standard Time\n- Morocco Standard Time\n- Mountain Standard Time (Mexico)\n- Mountain Standard Time\n- Myanmar Standard Time\n- N. Central Asia Standard Time\n- Namibia Standard Time\n- Nepal Standard Time\n- New Zealand Standard Time\n- Newfoundland Standard Time\n- Norfolk Standard Time\n- North Asia East Standard Time\n- North Asia Standard Time\n- North Korea Standard Time\n- Omsk Standard Time\n- Pacific SA Standard Time\n- Pacific Standard Time (Mexico)\n- Pacific Standard Time\n- Pakistan Standard Time\n- Paraguay Standard Time\n- Qyzylorda Standard Time\n- Romance Standard Time\n- Russia Time Zone 10\n- Russia Time Zone 11\n- Russia Time Zone 3\n- Russian Standard Time\n- SA Eastern Standard Time\n- SA Pacific Standard Time\n- SA Western Standard Time\n- SE Asia Standard Time\n- Saint Pierre Standard Time\n- Sakhalin Standard Time\n- Samoa Standard Time\n- Sao Tome Standard Time\n- Saratov Standard Time\n- Singapore Standard Time\n- South Africa Standard Time\n- South Sudan Standard Time\n- Sri Lanka Standard Time\n- Sudan Standard Time\n- Syria Standard Time\n- Taipei Standard Time\n- Tasmania Standard Time\n- Tocantins Standard Time\n- Tokyo Standard Time\n- Tomsk Standard Time\n- Tonga Standard Time\n- Transbaikal Standard Time\n- Turkey Standard Time\n- Turks And Caicos Standard Time\n- US Eastern Standard Time\n- US Mountain Standard Time\n- UTC\n- UTC+12\n- UTC+13\n- UTC-02\n- UTC-08\n- UTC-09\n- UTC-11\n- Ulaanbaatar Standard Time\n- Venezuela Standard Time\n- Vladivostok Standard Time\n- Volgograd Standard Time\n- W. Australia Standard Time\n- W. Central Africa Standard Time\n- W. Europe Standard Time\n- W. Mongolia Standard Time\n- West Asia Standard Time\n- West Bank Standard Time\n- West Pacific Standard Time\n- Yakutsk Standard Time\n- Yukon Standard Time\n\n\n## Import\n\nImporting this resource is not supported. ",
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "The name of the business hours check displayed in the web UI.\n"
                },
                "endTime": {
                    "type": "string",
                    "description": "The end of the time period that this check will be allowed to pass, specified as 24-hour time with leading zeros.\n"
                },
                "friday": {
                    "type": "boolean",
                    "description": "This check will pass on Fridays. Defaults to `false`.\n"
                },
                "monday": {
                    "type": "boolean",
                    "description": "This check will pass on Mondays. Defaults to `false`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID.\n"
                },
                "saturday": {
                    "type": "boolean",
                    "description": "This check will pass on Saturdays. Defaults to `false`.\n"
                },
                "startTime": {
                    "type": "string",
                    "description": "The beginning of the time period that this check will be allowed to pass, specified as 24-hour time with leading zeros.\n"
                },
                "sunday": {
                    "type": "boolean",
                    "description": "This check will pass on Sundays. Defaults to `false`.\n"
                },
                "targetResourceId": {
                    "type": "string",
                    "description": "The ID of the resource being protected by the check.\n"
                },
                "targetResourceType": {
                    "type": "string",
                    "description": "The type of resource being protected by the check. Valid values: `endpoint`, `environment`, `queue`, `repository`, `securefile`, `variablegroup`.\n"
                },
                "thursday": {
                    "type": "boolean",
                    "description": "This check will pass on Thursdays. Defaults to `false`.\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "The time zone this check will be evaluated in. See below for supported values.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "The timeout in minutes for the business hours check. Defaults to `1440`.\n"
                },
                "tuesday": {
                    "type": "boolean",
                    "description": "This check will pass on Tuesday. Defaults to `false`.\n"
                },
                "wednesday": {
                    "type": "boolean",
                    "description": "This check will pass on Wednesdays. Defaults to `false`.\n"
                }
            },
            "required": [
                "endTime",
                "projectId",
                "startTime",
                "targetResourceId",
                "targetResourceType",
                "timeZone"
            ],
            "inputProperties": {
                "displayName": {
                    "type": "string",
                    "description": "The name of the business hours check displayed in the web UI.\n"
                },
                "endTime": {
                    "type": "string",
                    "description": "The end of the time period that this check will be allowed to pass, specified as 24-hour time with leading zeros.\n"
                },
                "friday": {
                    "type": "boolean",
                    "description": "This check will pass on Fridays. Defaults to `false`.\n"
                },
                "monday": {
                    "type": "boolean",
                    "description": "This check will pass on Mondays. Defaults to `false`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID.\n",
                    "willReplaceOnChanges": true
                },
                "saturday": {
                    "type": "boolean",
                    "description": "This check will pass on Saturdays. Defaults to `false`.\n"
                },
                "startTime": {
                    "type": "string",
                    "description": "The beginning of the time period that this check will be allowed to pass, specified as 24-hour time with leading zeros.\n"
                },
                "sunday": {
                    "type": "boolean",
                    "description": "This check will pass on Sundays. Defaults to `false`.\n"
                },
                "targetResourceId": {
                    "type": "string",
                    "description": "The ID of the resource being protected by the check.\n",
                    "willReplaceOnChanges": true
                },
                "targetResourceType": {
                    "type": "string",
                    "description": "The type of resource being protected by the check. Valid values: `endpoint`, `environment`, `queue`, `repository`, `securefile`, `variablegroup`.\n",
                    "willReplaceOnChanges": true
                },
                "thursday": {
                    "type": "boolean",
                    "description": "This check will pass on Thursdays. Defaults to `false`.\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "The time zone this check will be evaluated in. See below for supported values.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "The timeout in minutes for the business hours check. Defaults to `1440`.\n"
                },
                "tuesday": {
                    "type": "boolean",
                    "description": "This check will pass on Tuesday. Defaults to `false`.\n"
                },
                "wednesday": {
                    "type": "boolean",
                    "description": "This check will pass on Wednesdays. Defaults to `false`.\n"
                }
            },
            "requiredInputs": [
                "endTime",
                "projectId",
                "startTime",
                "targetResourceId",
                "targetResourceType",
                "timeZone"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CheckBusinessHours resources.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "The name of the business hours check displayed in the web UI.\n"
                    },
                    "endTime": {
                        "type": "string",
                        "description": "The end of the time period that this check will be allowed to pass, specified as 24-hour time with leading zeros.\n"
                    },
                    "friday": {
                        "type": "boolean",
                        "description": "This check will pass on Fridays. Defaults to `false`.\n"
                    },
                    "monday": {
                        "type": "boolean",
                        "description": "This check will pass on Mondays. Defaults to `false`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "saturday": {
                        "type": "boolean",
                        "description": "This check will pass on Saturdays. Defaults to `false`.\n"
                    },
                    "startTime": {
                        "type": "string",
                        "description": "The beginning of the time period that this check will be allowed to pass, specified as 24-hour time with leading zeros.\n"
                    },
                    "sunday": {
                        "type": "boolean",
                        "description": "This check will pass on Sundays. Defaults to `false`.\n"
                    },
                    "targetResourceId": {
                        "type": "string",
                        "description": "The ID of the resource being protected by the check.\n",
                        "willReplaceOnChanges": true
                    },
                    "targetResourceType": {
                        "type": "string",
                        "description": "The type of resource being protected by the check. Valid values: `endpoint`, `environment`, `queue`, `repository`, `securefile`, `variablegroup`.\n",
                        "willReplaceOnChanges": true
                    },
                    "thursday": {
                        "type": "boolean",
                        "description": "This check will pass on Thursdays. Defaults to `false`.\n"
                    },
                    "timeZone": {
                        "type": "string",
                        "description": "The time zone this check will be evaluated in. See below for supported values.\n"
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "The timeout in minutes for the business hours check. Defaults to `1440`.\n"
                    },
                    "tuesday": {
                        "type": "boolean",
                        "description": "This check will pass on Tuesday. Defaults to `false`.\n"
                    },
                    "wednesday": {
                        "type": "boolean",
                        "description": "This check will pass on Wednesdays. Defaults to `false`.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/checkExclusiveLock:CheckExclusiveLock": {
            "description": "Manages a Exclusive Lock Check.\n\nAdding an exclusive lock will only allow a single stage to utilize this resource at a time. If multiple stages are waiting on the lock, only the latest will run. All others will be canceled.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Add Exclusive Lock to an environment\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {});\nconst exampleServiceEndpointGeneric = new azuredevops.ServiceEndpointGeneric(\"exampleServiceEndpointGeneric\", {\n    projectId: exampleProject.id,\n    serverUrl: \"https://some-server.example.com\",\n    username: \"username\",\n    password: \"password\",\n    serviceEndpointName: \"Example Generic\",\n    description: \"Managed by Terraform\",\n});\nconst exampleCheckExclusiveLock = new azuredevops.CheckExclusiveLock(\"exampleCheckExclusiveLock\", {\n    projectId: exampleProject.id,\n    targetResourceId: exampleServiceEndpointGeneric.id,\n    targetResourceType: \"endpoint\",\n    timeout: 43200,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\")\nexample_service_endpoint_generic = azuredevops.ServiceEndpointGeneric(\"exampleServiceEndpointGeneric\",\n    project_id=example_project.id,\n    server_url=\"https://some-server.example.com\",\n    username=\"username\",\n    password=\"password\",\n    service_endpoint_name=\"Example Generic\",\n    description=\"Managed by Terraform\")\nexample_check_exclusive_lock = azuredevops.CheckExclusiveLock(\"exampleCheckExclusiveLock\",\n    project_id=example_project.id,\n    target_resource_id=example_service_endpoint_generic.id,\n    target_resource_type=\"endpoint\",\n    timeout=43200)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\");\n\n    var exampleServiceEndpointGeneric = new AzureDevOps.ServiceEndpointGeneric(\"exampleServiceEndpointGeneric\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServerUrl = \"https://some-server.example.com\",\n        Username = \"username\",\n        Password = \"password\",\n        ServiceEndpointName = \"Example Generic\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleCheckExclusiveLock = new AzureDevOps.CheckExclusiveLock(\"exampleCheckExclusiveLock\", new()\n    {\n        ProjectId = exampleProject.Id,\n        TargetResourceId = exampleServiceEndpointGeneric.Id,\n        TargetResourceType = \"endpoint\",\n        Timeout = 43200,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleServiceEndpointGeneric, err := azuredevops.NewServiceEndpointGeneric(ctx, \"exampleServiceEndpointGeneric\", \u0026azuredevops.ServiceEndpointGenericArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServerUrl:           pulumi.String(\"https://some-server.example.com\"),\n\t\t\tUsername:            pulumi.String(\"username\"),\n\t\t\tPassword:            pulumi.String(\"password\"),\n\t\t\tServiceEndpointName: pulumi.String(\"Example Generic\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewCheckExclusiveLock(ctx, \"exampleCheckExclusiveLock\", \u0026azuredevops.CheckExclusiveLockArgs{\n\t\t\tProjectId:          exampleProject.ID(),\n\t\t\tTargetResourceId:   exampleServiceEndpointGeneric.ID(),\n\t\t\tTargetResourceType: pulumi.String(\"endpoint\"),\n\t\t\tTimeout:            pulumi.Int(43200),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ServiceEndpointGeneric;\nimport com.pulumi.azuredevops.ServiceEndpointGenericArgs;\nimport com.pulumi.azuredevops.CheckExclusiveLock;\nimport com.pulumi.azuredevops.CheckExclusiveLockArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\");\n\n        var exampleServiceEndpointGeneric = new ServiceEndpointGeneric(\"exampleServiceEndpointGeneric\", ServiceEndpointGenericArgs.builder()        \n            .projectId(exampleProject.id())\n            .serverUrl(\"https://some-server.example.com\")\n            .username(\"username\")\n            .password(\"password\")\n            .serviceEndpointName(\"Example Generic\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleCheckExclusiveLock = new CheckExclusiveLock(\"exampleCheckExclusiveLock\", CheckExclusiveLockArgs.builder()        \n            .projectId(exampleProject.id())\n            .targetResourceId(exampleServiceEndpointGeneric.id())\n            .targetResourceType(\"endpoint\")\n            .timeout(43200)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n  exampleServiceEndpointGeneric:\n    type: azuredevops:ServiceEndpointGeneric\n    properties:\n      projectId: ${exampleProject.id}\n      serverUrl: https://some-server.example.com\n      username: username\n      password: password\n      serviceEndpointName: Example Generic\n      description: Managed by Terraform\n  exampleCheckExclusiveLock:\n    type: azuredevops:CheckExclusiveLock\n    properties:\n      projectId: ${exampleProject.id}\n      targetResourceId: ${exampleServiceEndpointGeneric.id}\n      targetResourceType: endpoint\n      timeout: 43200\n```\n{{% /example %}}\n{{% example %}}\n### Protect an environment\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {});\nconst exampleEnvironment = new azuredevops.Environment(\"exampleEnvironment\", {projectId: exampleProject.id});\nconst exampleCheckExclusiveLock = new azuredevops.CheckExclusiveLock(\"exampleCheckExclusiveLock\", {\n    projectId: exampleProject.id,\n    targetResourceId: exampleEnvironment.id,\n    targetResourceType: \"environment\",\n    timeout: 43200,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\")\nexample_environment = azuredevops.Environment(\"exampleEnvironment\", project_id=example_project.id)\nexample_check_exclusive_lock = azuredevops.CheckExclusiveLock(\"exampleCheckExclusiveLock\",\n    project_id=example_project.id,\n    target_resource_id=example_environment.id,\n    target_resource_type=\"environment\",\n    timeout=43200)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\");\n\n    var exampleEnvironment = new AzureDevOps.Environment(\"exampleEnvironment\", new()\n    {\n        ProjectId = exampleProject.Id,\n    });\n\n    var exampleCheckExclusiveLock = new AzureDevOps.CheckExclusiveLock(\"exampleCheckExclusiveLock\", new()\n    {\n        ProjectId = exampleProject.Id,\n        TargetResourceId = exampleEnvironment.Id,\n        TargetResourceType = \"environment\",\n        Timeout = 43200,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleEnvironment, err := azuredevops.NewEnvironment(ctx, \"exampleEnvironment\", \u0026azuredevops.EnvironmentArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewCheckExclusiveLock(ctx, \"exampleCheckExclusiveLock\", \u0026azuredevops.CheckExclusiveLockArgs{\n\t\t\tProjectId:          exampleProject.ID(),\n\t\t\tTargetResourceId:   exampleEnvironment.ID(),\n\t\t\tTargetResourceType: pulumi.String(\"environment\"),\n\t\t\tTimeout:            pulumi.Int(43200),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.Environment;\nimport com.pulumi.azuredevops.EnvironmentArgs;\nimport com.pulumi.azuredevops.CheckExclusiveLock;\nimport com.pulumi.azuredevops.CheckExclusiveLockArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\");\n\n        var exampleEnvironment = new Environment(\"exampleEnvironment\", EnvironmentArgs.builder()        \n            .projectId(exampleProject.id())\n            .build());\n\n        var exampleCheckExclusiveLock = new CheckExclusiveLock(\"exampleCheckExclusiveLock\", CheckExclusiveLockArgs.builder()        \n            .projectId(exampleProject.id())\n            .targetResourceId(exampleEnvironment.id())\n            .targetResourceType(\"environment\")\n            .timeout(43200)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n  exampleEnvironment:\n    type: azuredevops:Environment\n    properties:\n      projectId: ${exampleProject.id}\n  exampleCheckExclusiveLock:\n    type: azuredevops:CheckExclusiveLock\n    properties:\n      projectId: ${exampleProject.id}\n      targetResourceId: ${exampleEnvironment.id}\n      targetResourceType: environment\n      timeout: 43200\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImporting this resource is not supported. ",
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The project ID. Changing this forces a new Exclusive Lock Check to be created.\n"
                },
                "targetResourceId": {
                    "type": "string",
                    "description": "The ID of the resource being protected by the check. Changing this forces a new Exclusive Lock to be created.\n"
                },
                "targetResourceType": {
                    "type": "string",
                    "description": "The type of resource being protected by the check. Valid values: `endpoint`, `environment`, `queue`, `repository`, `securefile`, `variablegroup`. Changing this forces a new Exclusive Lock to be created.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "The timeout in minutes for the exclusive lock. Defaults to `43200`.\n"
                }
            },
            "required": [
                "projectId",
                "targetResourceId",
                "targetResourceType"
            ],
            "inputProperties": {
                "projectId": {
                    "type": "string",
                    "description": "The project ID. Changing this forces a new Exclusive Lock Check to be created.\n",
                    "willReplaceOnChanges": true
                },
                "targetResourceId": {
                    "type": "string",
                    "description": "The ID of the resource being protected by the check. Changing this forces a new Exclusive Lock to be created.\n",
                    "willReplaceOnChanges": true
                },
                "targetResourceType": {
                    "type": "string",
                    "description": "The type of resource being protected by the check. Valid values: `endpoint`, `environment`, `queue`, `repository`, `securefile`, `variablegroup`. Changing this forces a new Exclusive Lock to be created.\n",
                    "willReplaceOnChanges": true
                },
                "timeout": {
                    "type": "integer",
                    "description": "The timeout in minutes for the exclusive lock. Defaults to `43200`.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "targetResourceId",
                "targetResourceType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CheckExclusiveLock resources.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "The project ID. Changing this forces a new Exclusive Lock Check to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "targetResourceId": {
                        "type": "string",
                        "description": "The ID of the resource being protected by the check. Changing this forces a new Exclusive Lock to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "targetResourceType": {
                        "type": "string",
                        "description": "The type of resource being protected by the check. Valid values: `endpoint`, `environment`, `queue`, `repository`, `securefile`, `variablegroup`. Changing this forces a new Exclusive Lock to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "The timeout in minutes for the exclusive lock. Defaults to `43200`.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/checkRequiredTemplate:CheckRequiredTemplate": {
            "description": "Manages a Required Template Check.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Protect a service connection\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {});\nconst exampleServiceEndpointGeneric = new azuredevops.ServiceEndpointGeneric(\"exampleServiceEndpointGeneric\", {\n    projectId: exampleProject.id,\n    serverUrl: \"https://some-server.example.com\",\n    username: \"username\",\n    password: \"password\",\n    serviceEndpointName: \"Example Generic\",\n    description: \"Managed by Terraform\",\n});\nconst exampleCheckRequiredTemplate = new azuredevops.CheckRequiredTemplate(\"exampleCheckRequiredTemplate\", {\n    projectId: exampleProject.id,\n    targetResourceId: exampleServiceEndpointGeneric.id,\n    targetResourceType: \"endpoint\",\n    requiredTemplates: [{\n        repositoryType: \"azuregit\",\n        repositoryName: \"project/repository\",\n        repositoryRef: \"refs/heads/main\",\n        templatePath: \"template/path.yml\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\")\nexample_service_endpoint_generic = azuredevops.ServiceEndpointGeneric(\"exampleServiceEndpointGeneric\",\n    project_id=example_project.id,\n    server_url=\"https://some-server.example.com\",\n    username=\"username\",\n    password=\"password\",\n    service_endpoint_name=\"Example Generic\",\n    description=\"Managed by Terraform\")\nexample_check_required_template = azuredevops.CheckRequiredTemplate(\"exampleCheckRequiredTemplate\",\n    project_id=example_project.id,\n    target_resource_id=example_service_endpoint_generic.id,\n    target_resource_type=\"endpoint\",\n    required_templates=[azuredevops.CheckRequiredTemplateRequiredTemplateArgs(\n        repository_type=\"azuregit\",\n        repository_name=\"project/repository\",\n        repository_ref=\"refs/heads/main\",\n        template_path=\"template/path.yml\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\");\n\n    var exampleServiceEndpointGeneric = new AzureDevOps.ServiceEndpointGeneric(\"exampleServiceEndpointGeneric\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServerUrl = \"https://some-server.example.com\",\n        Username = \"username\",\n        Password = \"password\",\n        ServiceEndpointName = \"Example Generic\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleCheckRequiredTemplate = new AzureDevOps.CheckRequiredTemplate(\"exampleCheckRequiredTemplate\", new()\n    {\n        ProjectId = exampleProject.Id,\n        TargetResourceId = exampleServiceEndpointGeneric.Id,\n        TargetResourceType = \"endpoint\",\n        RequiredTemplates = new[]\n        {\n            new AzureDevOps.Inputs.CheckRequiredTemplateRequiredTemplateArgs\n            {\n                RepositoryType = \"azuregit\",\n                RepositoryName = \"project/repository\",\n                RepositoryRef = \"refs/heads/main\",\n                TemplatePath = \"template/path.yml\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleServiceEndpointGeneric, err := azuredevops.NewServiceEndpointGeneric(ctx, \"exampleServiceEndpointGeneric\", \u0026azuredevops.ServiceEndpointGenericArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServerUrl:           pulumi.String(\"https://some-server.example.com\"),\n\t\t\tUsername:            pulumi.String(\"username\"),\n\t\t\tPassword:            pulumi.String(\"password\"),\n\t\t\tServiceEndpointName: pulumi.String(\"Example Generic\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewCheckRequiredTemplate(ctx, \"exampleCheckRequiredTemplate\", \u0026azuredevops.CheckRequiredTemplateArgs{\n\t\t\tProjectId:          exampleProject.ID(),\n\t\t\tTargetResourceId:   exampleServiceEndpointGeneric.ID(),\n\t\t\tTargetResourceType: pulumi.String(\"endpoint\"),\n\t\t\tRequiredTemplates: azuredevops.CheckRequiredTemplateRequiredTemplateArray{\n\t\t\t\t\u0026azuredevops.CheckRequiredTemplateRequiredTemplateArgs{\n\t\t\t\t\tRepositoryType: pulumi.String(\"azuregit\"),\n\t\t\t\t\tRepositoryName: pulumi.String(\"project/repository\"),\n\t\t\t\t\tRepositoryRef:  pulumi.String(\"refs/heads/main\"),\n\t\t\t\t\tTemplatePath:   pulumi.String(\"template/path.yml\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ServiceEndpointGeneric;\nimport com.pulumi.azuredevops.ServiceEndpointGenericArgs;\nimport com.pulumi.azuredevops.CheckRequiredTemplate;\nimport com.pulumi.azuredevops.CheckRequiredTemplateArgs;\nimport com.pulumi.azuredevops.inputs.CheckRequiredTemplateRequiredTemplateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\");\n\n        var exampleServiceEndpointGeneric = new ServiceEndpointGeneric(\"exampleServiceEndpointGeneric\", ServiceEndpointGenericArgs.builder()        \n            .projectId(exampleProject.id())\n            .serverUrl(\"https://some-server.example.com\")\n            .username(\"username\")\n            .password(\"password\")\n            .serviceEndpointName(\"Example Generic\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleCheckRequiredTemplate = new CheckRequiredTemplate(\"exampleCheckRequiredTemplate\", CheckRequiredTemplateArgs.builder()        \n            .projectId(exampleProject.id())\n            .targetResourceId(exampleServiceEndpointGeneric.id())\n            .targetResourceType(\"endpoint\")\n            .requiredTemplates(CheckRequiredTemplateRequiredTemplateArgs.builder()\n                .repositoryType(\"azuregit\")\n                .repositoryName(\"project/repository\")\n                .repositoryRef(\"refs/heads/main\")\n                .templatePath(\"template/path.yml\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n  exampleServiceEndpointGeneric:\n    type: azuredevops:ServiceEndpointGeneric\n    properties:\n      projectId: ${exampleProject.id}\n      serverUrl: https://some-server.example.com\n      username: username\n      password: password\n      serviceEndpointName: Example Generic\n      description: Managed by Terraform\n  exampleCheckRequiredTemplate:\n    type: azuredevops:CheckRequiredTemplate\n    properties:\n      projectId: ${exampleProject.id}\n      targetResourceId: ${exampleServiceEndpointGeneric.id}\n      targetResourceType: endpoint\n      requiredTemplates:\n        - repositoryType: azuregit\n          repositoryName: project/repository\n          repositoryRef: refs/heads/main\n          templatePath: template/path.yml\n```\n{{% /example %}}\n{{% example %}}\n### Protect an environment\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {});\nconst exampleEnvironment = new azuredevops.Environment(\"exampleEnvironment\", {projectId: exampleProject.id});\nconst exampleCheckRequiredTemplate = new azuredevops.CheckRequiredTemplate(\"exampleCheckRequiredTemplate\", {\n    projectId: exampleProject.id,\n    targetResourceId: exampleEnvironment.id,\n    targetResourceType: \"environment\",\n    requiredTemplates: [\n        {\n            repositoryName: \"project/repository\",\n            repositoryRef: \"refs/heads/main\",\n            templatePath: \"template/path.yml\",\n        },\n        {\n            repositoryName: \"project/repository\",\n            repositoryRef: \"refs/heads/main\",\n            templatePath: \"template/alternate-path.yml\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\")\nexample_environment = azuredevops.Environment(\"exampleEnvironment\", project_id=example_project.id)\nexample_check_required_template = azuredevops.CheckRequiredTemplate(\"exampleCheckRequiredTemplate\",\n    project_id=example_project.id,\n    target_resource_id=example_environment.id,\n    target_resource_type=\"environment\",\n    required_templates=[\n        azuredevops.CheckRequiredTemplateRequiredTemplateArgs(\n            repository_name=\"project/repository\",\n            repository_ref=\"refs/heads/main\",\n            template_path=\"template/path.yml\",\n        ),\n        azuredevops.CheckRequiredTemplateRequiredTemplateArgs(\n            repository_name=\"project/repository\",\n            repository_ref=\"refs/heads/main\",\n            template_path=\"template/alternate-path.yml\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\");\n\n    var exampleEnvironment = new AzureDevOps.Environment(\"exampleEnvironment\", new()\n    {\n        ProjectId = exampleProject.Id,\n    });\n\n    var exampleCheckRequiredTemplate = new AzureDevOps.CheckRequiredTemplate(\"exampleCheckRequiredTemplate\", new()\n    {\n        ProjectId = exampleProject.Id,\n        TargetResourceId = exampleEnvironment.Id,\n        TargetResourceType = \"environment\",\n        RequiredTemplates = new[]\n        {\n            new AzureDevOps.Inputs.CheckRequiredTemplateRequiredTemplateArgs\n            {\n                RepositoryName = \"project/repository\",\n                RepositoryRef = \"refs/heads/main\",\n                TemplatePath = \"template/path.yml\",\n            },\n            new AzureDevOps.Inputs.CheckRequiredTemplateRequiredTemplateArgs\n            {\n                RepositoryName = \"project/repository\",\n                RepositoryRef = \"refs/heads/main\",\n                TemplatePath = \"template/alternate-path.yml\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleEnvironment, err := azuredevops.NewEnvironment(ctx, \"exampleEnvironment\", \u0026azuredevops.EnvironmentArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewCheckRequiredTemplate(ctx, \"exampleCheckRequiredTemplate\", \u0026azuredevops.CheckRequiredTemplateArgs{\n\t\t\tProjectId:          exampleProject.ID(),\n\t\t\tTargetResourceId:   exampleEnvironment.ID(),\n\t\t\tTargetResourceType: pulumi.String(\"environment\"),\n\t\t\tRequiredTemplates: azuredevops.CheckRequiredTemplateRequiredTemplateArray{\n\t\t\t\t\u0026azuredevops.CheckRequiredTemplateRequiredTemplateArgs{\n\t\t\t\t\tRepositoryName: pulumi.String(\"project/repository\"),\n\t\t\t\t\tRepositoryRef:  pulumi.String(\"refs/heads/main\"),\n\t\t\t\t\tTemplatePath:   pulumi.String(\"template/path.yml\"),\n\t\t\t\t},\n\t\t\t\t\u0026azuredevops.CheckRequiredTemplateRequiredTemplateArgs{\n\t\t\t\t\tRepositoryName: pulumi.String(\"project/repository\"),\n\t\t\t\t\tRepositoryRef:  pulumi.String(\"refs/heads/main\"),\n\t\t\t\t\tTemplatePath:   pulumi.String(\"template/alternate-path.yml\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.Environment;\nimport com.pulumi.azuredevops.EnvironmentArgs;\nimport com.pulumi.azuredevops.CheckRequiredTemplate;\nimport com.pulumi.azuredevops.CheckRequiredTemplateArgs;\nimport com.pulumi.azuredevops.inputs.CheckRequiredTemplateRequiredTemplateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\");\n\n        var exampleEnvironment = new Environment(\"exampleEnvironment\", EnvironmentArgs.builder()        \n            .projectId(exampleProject.id())\n            .build());\n\n        var exampleCheckRequiredTemplate = new CheckRequiredTemplate(\"exampleCheckRequiredTemplate\", CheckRequiredTemplateArgs.builder()        \n            .projectId(exampleProject.id())\n            .targetResourceId(exampleEnvironment.id())\n            .targetResourceType(\"environment\")\n            .requiredTemplates(            \n                CheckRequiredTemplateRequiredTemplateArgs.builder()\n                    .repositoryName(\"project/repository\")\n                    .repositoryRef(\"refs/heads/main\")\n                    .templatePath(\"template/path.yml\")\n                    .build(),\n                CheckRequiredTemplateRequiredTemplateArgs.builder()\n                    .repositoryName(\"project/repository\")\n                    .repositoryRef(\"refs/heads/main\")\n                    .templatePath(\"template/alternate-path.yml\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n  exampleEnvironment:\n    type: azuredevops:Environment\n    properties:\n      projectId: ${exampleProject.id}\n  exampleCheckRequiredTemplate:\n    type: azuredevops:CheckRequiredTemplate\n    properties:\n      projectId: ${exampleProject.id}\n      targetResourceId: ${exampleEnvironment.id}\n      targetResourceType: environment\n      requiredTemplates:\n        - repositoryName: project/repository\n          repositoryRef: refs/heads/main\n          templatePath: template/path.yml\n        - repositoryName: project/repository\n          repositoryRef: refs/heads/main\n          templatePath: template/alternate-path.yml\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nImporting this resource is not supported. ",
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The project ID. Changing this forces a new Required Template Check to be created.\n"
                },
                "requiredTemplates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/CheckRequiredTemplateRequiredTemplate:CheckRequiredTemplateRequiredTemplate"
                    },
                    "description": "One or more `required_template` blocks documented below.\n"
                },
                "targetResourceId": {
                    "type": "string",
                    "description": "The ID of the resource being protected by the check. Changing this forces a new Required Template Check to be created.\n"
                },
                "targetResourceType": {
                    "type": "string",
                    "description": "The type of resource being protected by the check. Valid values: `endpoint`, `environment`, `queue`, `repository`, `securefile`, `variablegroup`. Changing this forces a new Required Template Check to be created.\n"
                }
            },
            "required": [
                "projectId",
                "requiredTemplates",
                "targetResourceId",
                "targetResourceType"
            ],
            "inputProperties": {
                "projectId": {
                    "type": "string",
                    "description": "The project ID. Changing this forces a new Required Template Check to be created.\n",
                    "willReplaceOnChanges": true
                },
                "requiredTemplates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/CheckRequiredTemplateRequiredTemplate:CheckRequiredTemplateRequiredTemplate"
                    },
                    "description": "One or more `required_template` blocks documented below.\n"
                },
                "targetResourceId": {
                    "type": "string",
                    "description": "The ID of the resource being protected by the check. Changing this forces a new Required Template Check to be created.\n",
                    "willReplaceOnChanges": true
                },
                "targetResourceType": {
                    "type": "string",
                    "description": "The type of resource being protected by the check. Valid values: `endpoint`, `environment`, `queue`, `repository`, `securefile`, `variablegroup`. Changing this forces a new Required Template Check to be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "projectId",
                "requiredTemplates",
                "targetResourceId",
                "targetResourceType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CheckRequiredTemplate resources.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "The project ID. Changing this forces a new Required Template Check to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "requiredTemplates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:index/CheckRequiredTemplateRequiredTemplate:CheckRequiredTemplateRequiredTemplate"
                        },
                        "description": "One or more `required_template` blocks documented below.\n"
                    },
                    "targetResourceId": {
                        "type": "string",
                        "description": "The ID of the resource being protected by the check. Changing this forces a new Required Template Check to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "targetResourceType": {
                        "type": "string",
                        "description": "The type of resource being protected by the check. Valid values: `endpoint`, `environment`, `queue`, `repository`, `securefile`, `variablegroup`. Changing this forces a new Required Template Check to be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/elasticPool:ElasticPool": {
            "description": "Manages Elastic pool within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceEndpointAzureRM = new azuredevops.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example Azure Connection\",\n    description: \"Managed by Terraform\",\n    serviceEndpointAuthenticationScheme: \"ServicePrincipal\",\n    credentials: {\n        serviceprincipalid: \"00000000-0000-0000-0000-000000000000\",\n        serviceprincipalkey: \"00000000-0000-0000-0000-000000000000\",\n    },\n    azurermSpnTenantid: \"00000000-0000-0000-0000-000000000000\",\n    azurermSubscriptionId: \"00000000-0000-0000-0000-000000000000\",\n    azurermSubscriptionName: \"Subscription Name\",\n});\nconst exampleElasticPool = new azuredevops.ElasticPool(\"exampleElasticPool\", {\n    serviceEndpointId: exampleServiceEndpointAzureRM.id,\n    serviceEndpointScope: exampleProject.id,\n    desiredIdle: 2,\n    maxCapacity: 3,\n    azureResourceId: \"/subscriptions/\u003cSubscription Id\u003e/resourceGroups/\u003cResource Name\u003e/providers/Microsoft.Compute/virtualMachineScaleSets/\u003cVMSS Name\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_service_endpoint_azure_rm = azuredevops.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example Azure Connection\",\n    description=\"Managed by Terraform\",\n    service_endpoint_authentication_scheme=\"ServicePrincipal\",\n    credentials=azuredevops.ServiceEndpointAzureRMCredentialsArgs(\n        serviceprincipalid=\"00000000-0000-0000-0000-000000000000\",\n        serviceprincipalkey=\"00000000-0000-0000-0000-000000000000\",\n    ),\n    azurerm_spn_tenantid=\"00000000-0000-0000-0000-000000000000\",\n    azurerm_subscription_id=\"00000000-0000-0000-0000-000000000000\",\n    azurerm_subscription_name=\"Subscription Name\")\nexample_elastic_pool = azuredevops.ElasticPool(\"exampleElasticPool\",\n    service_endpoint_id=example_service_endpoint_azure_rm.id,\n    service_endpoint_scope=example_project.id,\n    desired_idle=2,\n    max_capacity=3,\n    azure_resource_id=\"/subscriptions/\u003cSubscription Id\u003e/resourceGroups/\u003cResource Name\u003e/providers/Microsoft.Compute/virtualMachineScaleSets/\u003cVMSS Name\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceEndpointAzureRM = new AzureDevOps.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example Azure Connection\",\n        Description = \"Managed by Terraform\",\n        ServiceEndpointAuthenticationScheme = \"ServicePrincipal\",\n        Credentials = new AzureDevOps.Inputs.ServiceEndpointAzureRMCredentialsArgs\n        {\n            Serviceprincipalid = \"00000000-0000-0000-0000-000000000000\",\n            Serviceprincipalkey = \"00000000-0000-0000-0000-000000000000\",\n        },\n        AzurermSpnTenantid = \"00000000-0000-0000-0000-000000000000\",\n        AzurermSubscriptionId = \"00000000-0000-0000-0000-000000000000\",\n        AzurermSubscriptionName = \"Subscription Name\",\n    });\n\n    var exampleElasticPool = new AzureDevOps.ElasticPool(\"exampleElasticPool\", new()\n    {\n        ServiceEndpointId = exampleServiceEndpointAzureRM.Id,\n        ServiceEndpointScope = exampleProject.Id,\n        DesiredIdle = 2,\n        MaxCapacity = 3,\n        AzureResourceId = \"/subscriptions/\u003cSubscription Id\u003e/resourceGroups/\u003cResource Name\u003e/providers/Microsoft.Compute/virtualMachineScaleSets/\u003cVMSS Name\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleServiceEndpointAzureRM, err := azuredevops.NewServiceEndpointAzureRM(ctx, \"exampleServiceEndpointAzureRM\", \u0026azuredevops.ServiceEndpointAzureRMArgs{\n\t\t\tProjectId:                           exampleProject.ID(),\n\t\t\tServiceEndpointName:                 pulumi.String(\"Example Azure Connection\"),\n\t\t\tDescription:                         pulumi.String(\"Managed by Terraform\"),\n\t\t\tServiceEndpointAuthenticationScheme: pulumi.String(\"ServicePrincipal\"),\n\t\t\tCredentials: \u0026azuredevops.ServiceEndpointAzureRMCredentialsArgs{\n\t\t\t\tServiceprincipalid:  pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\t\tServiceprincipalkey: pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\t},\n\t\t\tAzurermSpnTenantid:      pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurermSubscriptionId:   pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurermSubscriptionName: pulumi.String(\"Subscription Name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewElasticPool(ctx, \"exampleElasticPool\", \u0026azuredevops.ElasticPoolArgs{\n\t\t\tServiceEndpointId:    exampleServiceEndpointAzureRM.ID(),\n\t\t\tServiceEndpointScope: exampleProject.ID(),\n\t\t\tDesiredIdle:          pulumi.Int(2),\n\t\t\tMaxCapacity:          pulumi.Int(3),\n\t\t\tAzureResourceId:      pulumi.String(\"/subscriptions/\u003cSubscription Id\u003e/resourceGroups/\u003cResource Name\u003e/providers/Microsoft.Compute/virtualMachineScaleSets/\u003cVMSS Name\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointAzureRM;\nimport com.pulumi.azuredevops.ServiceEndpointAzureRMArgs;\nimport com.pulumi.azuredevops.inputs.ServiceEndpointAzureRMCredentialsArgs;\nimport com.pulumi.azuredevops.ElasticPool;\nimport com.pulumi.azuredevops.ElasticPoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceEndpointAzureRM = new ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", ServiceEndpointAzureRMArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example Azure Connection\")\n            .description(\"Managed by Terraform\")\n            .serviceEndpointAuthenticationScheme(\"ServicePrincipal\")\n            .credentials(ServiceEndpointAzureRMCredentialsArgs.builder()\n                .serviceprincipalid(\"00000000-0000-0000-0000-000000000000\")\n                .serviceprincipalkey(\"00000000-0000-0000-0000-000000000000\")\n                .build())\n            .azurermSpnTenantid(\"00000000-0000-0000-0000-000000000000\")\n            .azurermSubscriptionId(\"00000000-0000-0000-0000-000000000000\")\n            .azurermSubscriptionName(\"Subscription Name\")\n            .build());\n\n        var exampleElasticPool = new ElasticPool(\"exampleElasticPool\", ElasticPoolArgs.builder()        \n            .serviceEndpointId(exampleServiceEndpointAzureRM.id())\n            .serviceEndpointScope(exampleProject.id())\n            .desiredIdle(2)\n            .maxCapacity(3)\n            .azureResourceId(\"/subscriptions/\u003cSubscription Id\u003e/resourceGroups/\u003cResource Name\u003e/providers/Microsoft.Compute/virtualMachineScaleSets/\u003cVMSS Name\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceEndpointAzureRM:\n    type: azuredevops:ServiceEndpointAzureRM\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example Azure Connection\n      description: Managed by Terraform\n      serviceEndpointAuthenticationScheme: ServicePrincipal\n      credentials:\n        serviceprincipalid: 00000000-0000-0000-0000-000000000000\n        serviceprincipalkey: 00000000-0000-0000-0000-000000000000\n      azurermSpnTenantid: 00000000-0000-0000-0000-000000000000\n      azurermSubscriptionId: 00000000-0000-0000-0000-000000000000\n      azurermSubscriptionName: Subscription Name\n  exampleElasticPool:\n    type: azuredevops:ElasticPool\n    properties:\n      serviceEndpointId: ${exampleServiceEndpointAzureRM.id}\n      serviceEndpointScope: ${exampleProject.id}\n      desiredIdle: 2\n      maxCapacity: 3\n      azureResourceId: /subscriptions/\u003cSubscription Id\u003e/resourceGroups/\u003cResource Name\u003e/providers/Microsoft.Compute/virtualMachineScaleSets/\u003cVMSS Name\u003e\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Elastic Pools](https://learn.microsoft.com/en-us/rest/api/azure/devops/distributedtask/elasticpools/create?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Agent Pools can be imported using the Elastic pool ID, e.g.\n\n```sh\n $ pulumi import azuredevops:index/elasticPool:ElasticPool example 0\n```\n\n ",
            "properties": {
                "agentInteractiveUi": {
                    "type": "boolean",
                    "description": "Set whether agents should be configured to run with interactive UI. Defaults to `false`.\n"
                },
                "autoProvision": {
                    "type": "boolean",
                    "description": "Specifies whether a queue should be automatically provisioned for each project collection. Defaults to `false`.\n"
                },
                "autoUpdate": {
                    "type": "boolean",
                    "description": "Specifies whether or not agents within the pool should be automatically updated. Defaults to `true`.\n"
                },
                "azureResourceId": {
                    "type": "string",
                    "description": "The ID of the Azure resource.\n"
                },
                "desiredIdle": {
                    "type": "integer",
                    "description": "Number of agents to keep on standby.\n"
                },
                "maxCapacity": {
                    "type": "integer",
                    "description": "Maximum number of virtual machines in the scale set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Elastic pool.\n"
                },
                "recycleAfterEachUse": {
                    "type": "boolean",
                    "description": "Tear down virtual machines after every use. Defaults to `false`.\n"
                },
                "serviceEndpointId": {
                    "type": "string",
                    "description": "The ID of Service Endpoint used to connect to Azure.\n"
                },
                "serviceEndpointScope": {
                    "type": "string",
                    "description": "The Project ID of Service Endpoint belongs to.\n"
                },
                "timeToLiveMinutes": {
                    "type": "integer",
                    "description": "Delay in minutes before deleting excess idle agents. Defaults to `30`.\n"
                }
            },
            "required": [
                "azureResourceId",
                "desiredIdle",
                "maxCapacity",
                "name",
                "serviceEndpointId",
                "serviceEndpointScope"
            ],
            "inputProperties": {
                "agentInteractiveUi": {
                    "type": "boolean",
                    "description": "Set whether agents should be configured to run with interactive UI. Defaults to `false`.\n"
                },
                "autoProvision": {
                    "type": "boolean",
                    "description": "Specifies whether a queue should be automatically provisioned for each project collection. Defaults to `false`.\n"
                },
                "autoUpdate": {
                    "type": "boolean",
                    "description": "Specifies whether or not agents within the pool should be automatically updated. Defaults to `true`.\n"
                },
                "azureResourceId": {
                    "type": "string",
                    "description": "The ID of the Azure resource.\n"
                },
                "desiredIdle": {
                    "type": "integer",
                    "description": "Number of agents to keep on standby.\n"
                },
                "maxCapacity": {
                    "type": "integer",
                    "description": "Maximum number of virtual machines in the scale set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Elastic pool.\n"
                },
                "recycleAfterEachUse": {
                    "type": "boolean",
                    "description": "Tear down virtual machines after every use. Defaults to `false`.\n"
                },
                "serviceEndpointId": {
                    "type": "string",
                    "description": "The ID of Service Endpoint used to connect to Azure.\n"
                },
                "serviceEndpointScope": {
                    "type": "string",
                    "description": "The Project ID of Service Endpoint belongs to.\n"
                },
                "timeToLiveMinutes": {
                    "type": "integer",
                    "description": "Delay in minutes before deleting excess idle agents. Defaults to `30`.\n"
                }
            },
            "requiredInputs": [
                "azureResourceId",
                "desiredIdle",
                "maxCapacity",
                "serviceEndpointId",
                "serviceEndpointScope"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ElasticPool resources.\n",
                "properties": {
                    "agentInteractiveUi": {
                        "type": "boolean",
                        "description": "Set whether agents should be configured to run with interactive UI. Defaults to `false`.\n"
                    },
                    "autoProvision": {
                        "type": "boolean",
                        "description": "Specifies whether a queue should be automatically provisioned for each project collection. Defaults to `false`.\n"
                    },
                    "autoUpdate": {
                        "type": "boolean",
                        "description": "Specifies whether or not agents within the pool should be automatically updated. Defaults to `true`.\n"
                    },
                    "azureResourceId": {
                        "type": "string",
                        "description": "The ID of the Azure resource.\n"
                    },
                    "desiredIdle": {
                        "type": "integer",
                        "description": "Number of agents to keep on standby.\n"
                    },
                    "maxCapacity": {
                        "type": "integer",
                        "description": "Maximum number of virtual machines in the scale set.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Elastic pool.\n"
                    },
                    "recycleAfterEachUse": {
                        "type": "boolean",
                        "description": "Tear down virtual machines after every use. Defaults to `false`.\n"
                    },
                    "serviceEndpointId": {
                        "type": "string",
                        "description": "The ID of Service Endpoint used to connect to Azure.\n"
                    },
                    "serviceEndpointScope": {
                        "type": "string",
                        "description": "The Project ID of Service Endpoint belongs to.\n"
                    },
                    "timeToLiveMinutes": {
                        "type": "integer",
                        "description": "Delay in minutes before deleting excess idle agents. Defaults to `30`.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/environment:Environment": {
            "description": "Manages an Environment.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"Managed by Terraform\",\n});\nconst exampleEnvironment = new azuredevops.Environment(\"exampleEnvironment\", {projectId: exampleProject.id});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"Managed by Terraform\")\nexample_environment = azuredevops.Environment(\"exampleEnvironment\", project_id=example_project.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        WorkItemTemplate = \"Agile\",\n        VersionControl = \"Git\",\n        Visibility = \"private\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleEnvironment = new AzureDevOps.Environment(\"exampleEnvironment\", new()\n    {\n        ProjectId = exampleProject.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewEnvironment(ctx, \"exampleEnvironment\", \u0026azuredevops.EnvironmentArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.Environment;\nimport com.pulumi.azuredevops.EnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .workItemTemplate(\"Agile\")\n            .versionControl(\"Git\")\n            .visibility(\"private\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleEnvironment = new Environment(\"exampleEnvironment\", EnvironmentArgs.builder()        \n            .projectId(exampleProject.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      workItemTemplate: Agile\n      versionControl: Git\n      visibility: private\n      description: Managed by Terraform\n  exampleEnvironment:\n    type: azuredevops:Environment\n    properties:\n      projectId: ${exampleProject.id}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 7.0 - Environments](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/environments?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Environments can be imported using the project ID and environment ID, e.g.\n\n```sh\n $ pulumi import azuredevops:index/environment:Environment example 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A description for the Environment.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name which should be used for this Environment.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project. Changing this forces a new Environment to be created.\n"
                }
            },
            "required": [
                "name",
                "projectId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A description for the Environment.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name which should be used for this Environment.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project. Changing this forces a new Environment to be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Environment resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A description for the Environment.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name which should be used for this Environment.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project. Changing this forces a new Environment to be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/git:Git": {
            "description": "\n\n\n## Import\n\nAzure DevOps Repositories can be imported using the repo name or by the repo Guid e.g.\n\n```sh\n $ pulumi import azuredevops:index/git:Git example projectName/repoName\n```\n\n or\n\n```sh\n $ pulumi import azuredevops:index/git:Git example projectName/00000000-0000-0000-0000-000000000000\n```\n\n hcl resource \"azuredevops_project\" \"example\" {\n\n name\n\n\n\n\n\n\n\n\n\n\n\n\n\n = \"Example Project\"\n\n visibility\n\n\n\n\n\n\n\n = \"private\"\n\n version_control\n\n\n\n= \"Git\"\n\n work_item_template = \"Agile\" } resource \"azuredevops_git_repository\" \"example\" {\n\n project_id\n\n\n\n = azuredevops_project.example.id\n\n name\n\n\n\n\n\n\n\n\n\n = \"Example Git Repository\"\n\n default_branch = \"refs/heads/main\"\n\n initialization {\n\n\n\n init_type = \"Clean\"\n\n }\n\n lifecycle {\n\n\n\n ignore_changes = [\n\n\n\n\n\n # Ignore changes to initialization to support importing existing repositories\n\n\n\n\n\n # Given that a repo now exists, either imported into terraform state or created by terraform,\n\n\n\n\n\n # we don't care for the configuration of initialization against the existing resource\n\n\n\n\n\n initialization,\n\n\n\n ]\n\n } } ",
            "properties": {
                "defaultBranch": {
                    "type": "string",
                    "description": "The ref of the default branch. Will be used as the branch name for initialized repositories.\n"
                },
                "initialization": {
                    "$ref": "#/types/azuredevops:index/GitInitialization:GitInitialization",
                    "description": "An `initialization` block as documented below.\n"
                },
                "isFork": {
                    "type": "boolean",
                    "description": "True if the repository was created as a fork.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the git repository.\n"
                },
                "parentRepositoryId": {
                    "type": "string",
                    "description": "The ID of a Git project from which a fork is to be created.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "remoteUrl": {
                    "type": "string",
                    "description": "Git HTTPS URL of the repository\n"
                },
                "size": {
                    "type": "integer",
                    "description": "Size in bytes.\n"
                },
                "sshUrl": {
                    "type": "string",
                    "description": "Git SSH URL of the repository.\n"
                },
                "url": {
                    "type": "string",
                    "description": "REST API URL of the repository.\n"
                },
                "webUrl": {
                    "type": "string",
                    "description": "Web link to the repository.\n"
                }
            },
            "required": [
                "defaultBranch",
                "initialization",
                "isFork",
                "name",
                "projectId",
                "remoteUrl",
                "size",
                "sshUrl",
                "url",
                "webUrl"
            ],
            "inputProperties": {
                "defaultBranch": {
                    "type": "string",
                    "description": "The ref of the default branch. Will be used as the branch name for initialized repositories.\n"
                },
                "initialization": {
                    "$ref": "#/types/azuredevops:index/GitInitialization:GitInitialization",
                    "description": "An `initialization` block as documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the git repository.\n"
                },
                "parentRepositoryId": {
                    "type": "string",
                    "description": "The ID of a Git project from which a fork is to be created.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "initialization",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Git resources.\n",
                "properties": {
                    "defaultBranch": {
                        "type": "string",
                        "description": "The ref of the default branch. Will be used as the branch name for initialized repositories.\n"
                    },
                    "initialization": {
                        "$ref": "#/types/azuredevops:index/GitInitialization:GitInitialization",
                        "description": "An `initialization` block as documented below.\n"
                    },
                    "isFork": {
                        "type": "boolean",
                        "description": "True if the repository was created as a fork.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the git repository.\n"
                    },
                    "parentRepositoryId": {
                        "type": "string",
                        "description": "The ID of a Git project from which a fork is to be created.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n",
                        "willReplaceOnChanges": true
                    },
                    "remoteUrl": {
                        "type": "string",
                        "description": "Git HTTPS URL of the repository\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "Size in bytes.\n"
                    },
                    "sshUrl": {
                        "type": "string",
                        "description": "Git SSH URL of the repository.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "REST API URL of the repository.\n"
                    },
                    "webUrl": {
                        "type": "string",
                        "description": "Web link to the repository.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Repository/git:Git"
                }
            ]
        },
        "azuredevops:index/gitPermissions:GitPermissions": {
            "description": "Manages permissions for Git repositories. \n\n\u003e **Note** Permissions can be assigned to group principals and not to single user principals.\n\n## Permission levels\n\nPermission for Git Repositories within Azure DevOps can be applied on three different levels.\nThose levels are reflected by specifying (or omitting) values for the arguments `project_id`, `repository_id` and `branch_name`.\n\n### Project level\n\nPermissions for all Git Repositories inside a project (existing or newly created ones) are specified, if only the argument `project_id` has a value.\n\n#### Example usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = new azuredevops.Project(\"example\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"Managed by Terraform\",\n});\nconst example-readers = azuredevops.getGroupOutput({\n    projectId: example.id,\n    name: \"Readers\",\n});\nconst example_permissions = new azuredevops.GitPermissions(\"example-permissions\", {\n    projectId: example.id,\n    principal: example_readers.apply(example_readers =\u003e example_readers.id),\n    permissions: {\n        CreateRepository: \"Deny\",\n        DeleteRepository: \"Deny\",\n        RenameRepository: \"NotSet\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.Project(\"example\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"Managed by Terraform\")\nexample_readers = azuredevops.get_group_output(project_id=example.id,\n    name=\"Readers\")\nexample_permissions = azuredevops.GitPermissions(\"example-permissions\",\n    project_id=example.id,\n    principal=example_readers.id,\n    permissions={\n        \"CreateRepository\": \"Deny\",\n        \"DeleteRepository\": \"Deny\",\n        \"RenameRepository\": \"NotSet\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureDevOps.Project(\"example\", new()\n    {\n        WorkItemTemplate = \"Agile\",\n        VersionControl = \"Git\",\n        Visibility = \"private\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var example_readers = AzureDevOps.GetGroup.Invoke(new()\n    {\n        ProjectId = example.Id,\n        Name = \"Readers\",\n    });\n\n    var example_permissions = new AzureDevOps.GitPermissions(\"example-permissions\", new()\n    {\n        ProjectId = example.Id,\n        Principal = example_readers.Apply(example_readers =\u003e example_readers.Apply(getGroupResult =\u003e getGroupResult.Id)),\n        Permissions = \n        {\n            { \"CreateRepository\", \"Deny\" },\n            { \"DeleteRepository\", \"Deny\" },\n            { \"RenameRepository\", \"NotSet\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuredevops.NewProject(ctx, \"example\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample_readers := azuredevops.LookupGroupOutput(ctx, azuredevops.GetGroupOutputArgs{\n\t\t\tProjectId: example.ID(),\n\t\t\tName:      pulumi.String(\"Readers\"),\n\t\t}, nil)\n\t\t_, err = azuredevops.NewGitPermissions(ctx, \"example-permissions\", \u0026azuredevops.GitPermissionsArgs{\n\t\t\tProjectId: example.ID(),\n\t\t\tPrincipal: example_readers.ApplyT(func(example_readers azuredevops.GetGroupResult) (*string, error) {\n\t\t\t\treturn \u0026example_readers.Id, nil\n\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"CreateRepository\": pulumi.String(\"Deny\"),\n\t\t\t\t\"DeleteRepository\": pulumi.String(\"Deny\"),\n\t\t\t\t\"RenameRepository\": pulumi.String(\"NotSet\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetGroupArgs;\nimport com.pulumi.azuredevops.GitPermissions;\nimport com.pulumi.azuredevops.GitPermissionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Project(\"example\", ProjectArgs.builder()        \n            .workItemTemplate(\"Agile\")\n            .versionControl(\"Git\")\n            .visibility(\"private\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        final var example-readers = AzuredevopsFunctions.getGroup(GetGroupArgs.builder()\n            .projectId(example.id())\n            .name(\"Readers\")\n            .build());\n\n        var example_permissions = new GitPermissions(\"example-permissions\", GitPermissionsArgs.builder()        \n            .projectId(example.id())\n            .principal(example_readers.applyValue(example_readers -\u003e example_readers.id()))\n            .permissions(Map.ofEntries(\n                Map.entry(\"CreateRepository\", \"Deny\"),\n                Map.entry(\"DeleteRepository\", \"Deny\"),\n                Map.entry(\"RenameRepository\", \"NotSet\")\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuredevops:Project\n    properties:\n      workItemTemplate: Agile\n      versionControl: Git\n      visibility: private\n      description: Managed by Terraform\n  example-permissions:\n    type: azuredevops:GitPermissions\n    properties:\n      projectId: ${example.id}\n      principal: ${[\"example-readers\"].id}\n      permissions:\n        CreateRepository: Deny\n        DeleteRepository: Deny\n        RenameRepository: NotSet\nvariables:\n  example-readers:\n    fn::invoke:\n      Function: azuredevops:getGroup\n      Arguments:\n        projectId: ${example.id}\n        name: Readers\n```\n\n### Repository level\n\nPermissions for a specific Git Repository and all existing or newly created branches are specified if the arguments `project_id` and `repository_id` are set.\n\n#### Example usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"Managed by Terraform\",\n});\nconst example-group = azuredevops.getGroup({\n    name: \"Project Collection Administrators\",\n});\nconst exampleGit = new azuredevops.Git(\"exampleGit\", {\n    projectId: exampleProject.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst example_permissions = new azuredevops.GitPermissions(\"example-permissions\", {\n    projectId: exampleGit.projectId,\n    repositoryId: exampleGit.id,\n    principal: example_group.then(example_group =\u003e example_group.id),\n    permissions: {\n        RemoveOthersLocks: \"Allow\",\n        ManagePermissions: \"Deny\",\n        CreateTag: \"Deny\",\n        CreateBranch: \"NotSet\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"Managed by Terraform\")\nexample_group = azuredevops.get_group(name=\"Project Collection Administrators\")\nexample_git = azuredevops.Git(\"exampleGit\",\n    project_id=example_project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nexample_permissions = azuredevops.GitPermissions(\"example-permissions\",\n    project_id=example_git.project_id,\n    repository_id=example_git.id,\n    principal=example_group.id,\n    permissions={\n        \"RemoveOthersLocks\": \"Allow\",\n        \"ManagePermissions\": \"Deny\",\n        \"CreateTag\": \"Deny\",\n        \"CreateBranch\": \"NotSet\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        WorkItemTemplate = \"Agile\",\n        VersionControl = \"Git\",\n        Visibility = \"private\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var example_group = AzureDevOps.GetGroup.Invoke(new()\n    {\n        Name = \"Project Collection Administrators\",\n    });\n\n    var exampleGit = new AzureDevOps.Git(\"exampleGit\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n        {\n            InitType = \"Clean\",\n        },\n    });\n\n    var example_permissions = new AzureDevOps.GitPermissions(\"example-permissions\", new()\n    {\n        ProjectId = exampleGit.ProjectId,\n        RepositoryId = exampleGit.Id,\n        Principal = example_group.Apply(example_group =\u003e example_group.Apply(getGroupResult =\u003e getGroupResult.Id)),\n        Permissions = \n        {\n            { \"RemoveOthersLocks\", \"Allow\" },\n            { \"ManagePermissions\", \"Deny\" },\n            { \"CreateTag\", \"Deny\" },\n            { \"CreateBranch\", \"NotSet\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample_group, err := azuredevops.LookupGroup(ctx, \u0026azuredevops.LookupGroupArgs{\n\t\t\tName: \"Project Collection Administrators\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGit, err := azuredevops.NewGit(ctx, \"exampleGit\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tInitialization: \u0026azuredevops.GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewGitPermissions(ctx, \"example-permissions\", \u0026azuredevops.GitPermissionsArgs{\n\t\t\tProjectId:    exampleGit.ProjectId,\n\t\t\tRepositoryId: exampleGit.ID(),\n\t\t\tPrincipal:    *pulumi.String(example_group.Id),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"RemoveOthersLocks\": pulumi.String(\"Allow\"),\n\t\t\t\t\"ManagePermissions\": pulumi.String(\"Deny\"),\n\t\t\t\t\"CreateTag\":         pulumi.String(\"Deny\"),\n\t\t\t\t\"CreateBranch\":      pulumi.String(\"NotSet\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetGroupArgs;\nimport com.pulumi.azuredevops.Git;\nimport com.pulumi.azuredevops.GitArgs;\nimport com.pulumi.azuredevops.inputs.GitInitializationArgs;\nimport com.pulumi.azuredevops.GitPermissions;\nimport com.pulumi.azuredevops.GitPermissionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .workItemTemplate(\"Agile\")\n            .versionControl(\"Git\")\n            .visibility(\"private\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        final var example-group = AzuredevopsFunctions.getGroup(GetGroupArgs.builder()\n            .name(\"Project Collection Administrators\")\n            .build());\n\n        var exampleGit = new Git(\"exampleGit\", GitArgs.builder()        \n            .projectId(exampleProject.id())\n            .initialization(GitInitializationArgs.builder()\n                .initType(\"Clean\")\n                .build())\n            .build());\n\n        var example_permissions = new GitPermissions(\"example-permissions\", GitPermissionsArgs.builder()        \n            .projectId(exampleGit.projectId())\n            .repositoryId(exampleGit.id())\n            .principal(example_group.id())\n            .permissions(Map.ofEntries(\n                Map.entry(\"RemoveOthersLocks\", \"Allow\"),\n                Map.entry(\"ManagePermissions\", \"Deny\"),\n                Map.entry(\"CreateTag\", \"Deny\"),\n                Map.entry(\"CreateBranch\", \"NotSet\")\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      workItemTemplate: Agile\n      versionControl: Git\n      visibility: private\n      description: Managed by Terraform\n  exampleGit:\n    type: azuredevops:Git\n    properties:\n      projectId: ${exampleProject.id}\n      initialization:\n        initType: Clean\n  example-permissions:\n    type: azuredevops:GitPermissions\n    properties:\n      projectId: ${exampleGit.projectId}\n      repositoryId: ${exampleGit.id}\n      principal: ${[\"example-group\"].id}\n      permissions:\n        RemoveOthersLocks: Allow\n        ManagePermissions: Deny\n        CreateTag: Deny\n        CreateBranch: NotSet\nvariables:\n  example-group:\n    fn::invoke:\n      Function: azuredevops:getGroup\n      Arguments:\n        name: Project Collection Administrators\n```\n\n### Branch level\n\nPermissions for a specific branch inside a Git Repository are specified if all above mentioned the arguments are set.\n\n#### Example usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"Managed by Terraform\",\n});\nconst exampleGit = new azuredevops.Git(\"exampleGit\", {\n    projectId: exampleProject.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst example-group = azuredevops.getGroup({\n    name: \"Project Collection Administrators\",\n});\nconst example_permissions = new azuredevops.GitPermissions(\"example-permissions\", {\n    projectId: exampleGit.projectId,\n    repositoryId: exampleGit.id,\n    branchName: \"refs/heads/master\",\n    principal: example_group.then(example_group =\u003e example_group.id),\n    permissions: {\n        RemoveOthersLocks: \"Allow\",\n        ForcePush: \"Deny\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"Managed by Terraform\")\nexample_git = azuredevops.Git(\"exampleGit\",\n    project_id=example_project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nexample_group = azuredevops.get_group(name=\"Project Collection Administrators\")\nexample_permissions = azuredevops.GitPermissions(\"example-permissions\",\n    project_id=example_git.project_id,\n    repository_id=example_git.id,\n    branch_name=\"refs/heads/master\",\n    principal=example_group.id,\n    permissions={\n        \"RemoveOthersLocks\": \"Allow\",\n        \"ForcePush\": \"Deny\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        WorkItemTemplate = \"Agile\",\n        VersionControl = \"Git\",\n        Visibility = \"private\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleGit = new AzureDevOps.Git(\"exampleGit\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n        {\n            InitType = \"Clean\",\n        },\n    });\n\n    var example_group = AzureDevOps.GetGroup.Invoke(new()\n    {\n        Name = \"Project Collection Administrators\",\n    });\n\n    var example_permissions = new AzureDevOps.GitPermissions(\"example-permissions\", new()\n    {\n        ProjectId = exampleGit.ProjectId,\n        RepositoryId = exampleGit.Id,\n        BranchName = \"refs/heads/master\",\n        Principal = example_group.Apply(example_group =\u003e example_group.Apply(getGroupResult =\u003e getGroupResult.Id)),\n        Permissions = \n        {\n            { \"RemoveOthersLocks\", \"Allow\" },\n            { \"ForcePush\", \"Deny\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGit, err := azuredevops.NewGit(ctx, \"exampleGit\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tInitialization: \u0026azuredevops.GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample_group, err := azuredevops.LookupGroup(ctx, \u0026azuredevops.LookupGroupArgs{\n\t\t\tName: \"Project Collection Administrators\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewGitPermissions(ctx, \"example-permissions\", \u0026azuredevops.GitPermissionsArgs{\n\t\t\tProjectId:    exampleGit.ProjectId,\n\t\t\tRepositoryId: exampleGit.ID(),\n\t\t\tBranchName:   pulumi.String(\"refs/heads/master\"),\n\t\t\tPrincipal:    *pulumi.String(example_group.Id),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"RemoveOthersLocks\": pulumi.String(\"Allow\"),\n\t\t\t\t\"ForcePush\":         pulumi.String(\"Deny\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.Git;\nimport com.pulumi.azuredevops.GitArgs;\nimport com.pulumi.azuredevops.inputs.GitInitializationArgs;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetGroupArgs;\nimport com.pulumi.azuredevops.GitPermissions;\nimport com.pulumi.azuredevops.GitPermissionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .workItemTemplate(\"Agile\")\n            .versionControl(\"Git\")\n            .visibility(\"private\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleGit = new Git(\"exampleGit\", GitArgs.builder()        \n            .projectId(exampleProject.id())\n            .initialization(GitInitializationArgs.builder()\n                .initType(\"Clean\")\n                .build())\n            .build());\n\n        final var example-group = AzuredevopsFunctions.getGroup(GetGroupArgs.builder()\n            .name(\"Project Collection Administrators\")\n            .build());\n\n        var example_permissions = new GitPermissions(\"example-permissions\", GitPermissionsArgs.builder()        \n            .projectId(exampleGit.projectId())\n            .repositoryId(exampleGit.id())\n            .branchName(\"refs/heads/master\")\n            .principal(example_group.id())\n            .permissions(Map.ofEntries(\n                Map.entry(\"RemoveOthersLocks\", \"Allow\"),\n                Map.entry(\"ForcePush\", \"Deny\")\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      workItemTemplate: Agile\n      versionControl: Git\n      visibility: private\n      description: Managed by Terraform\n  exampleGit:\n    type: azuredevops:Git\n    properties:\n      projectId: ${exampleProject.id}\n      initialization:\n        initType: Clean\n  example-permissions:\n    type: azuredevops:GitPermissions\n    properties:\n      projectId: ${exampleGit.projectId}\n      repositoryId: ${exampleGit.id}\n      branchName: refs/heads/master\n      principal: ${[\"example-group\"].id}\n      permissions:\n        RemoveOthersLocks: Allow\n        ForcePush: Deny\nvariables:\n  example-group:\n    fn::invoke:\n      Function: azuredevops:getGroup\n      Arguments:\n        name: Project Collection Administrators\n```\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst example-project-readers = azuredevops.getGroupOutput({\n    projectId: exampleProject.id,\n    name: \"Readers\",\n});\nconst example-project-contributors = azuredevops.getGroupOutput({\n    projectId: exampleProject.id,\n    name: \"Contributors\",\n});\nconst example-project-administrators = azuredevops.getGroupOutput({\n    projectId: exampleProject.id,\n    name: \"Project administrators\",\n});\nconst example_permissions = new azuredevops.GitPermissions(\"example-permissions\", {\n    projectId: exampleProject.id,\n    principal: example_project_readers.apply(example_project_readers =\u003e example_project_readers.id),\n    permissions: {\n        CreateRepository: \"Deny\",\n        DeleteRepository: \"Deny\",\n        RenameRepository: \"NotSet\",\n    },\n});\nconst exampleGit = new azuredevops.Git(\"exampleGit\", {\n    projectId: exampleProject.id,\n    defaultBranch: \"refs/heads/master\",\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst example_repo_permissions = new azuredevops.GitPermissions(\"example-repo-permissions\", {\n    projectId: exampleGit.projectId,\n    repositoryId: exampleGit.id,\n    principal: example_project_administrators.apply(example_project_administrators =\u003e example_project_administrators.id),\n    permissions: {\n        RemoveOthersLocks: \"Allow\",\n        ManagePermissions: \"Deny\",\n        CreateTag: \"Deny\",\n        CreateBranch: \"NotSet\",\n    },\n});\nconst example_branch_permissions = new azuredevops.GitPermissions(\"example-branch-permissions\", {\n    projectId: exampleGit.projectId,\n    repositoryId: exampleGit.id,\n    branchName: \"master\",\n    principal: example_project_contributors.apply(example_project_contributors =\u003e example_project_contributors.id),\n    permissions: {\n        RemoveOthersLocks: \"Allow\",\n        ForcePush: \"Deny\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_project_readers = azuredevops.get_group_output(project_id=example_project.id,\n    name=\"Readers\")\nexample_project_contributors = azuredevops.get_group_output(project_id=example_project.id,\n    name=\"Contributors\")\nexample_project_administrators = azuredevops.get_group_output(project_id=example_project.id,\n    name=\"Project administrators\")\nexample_permissions = azuredevops.GitPermissions(\"example-permissions\",\n    project_id=example_project.id,\n    principal=example_project_readers.id,\n    permissions={\n        \"CreateRepository\": \"Deny\",\n        \"DeleteRepository\": \"Deny\",\n        \"RenameRepository\": \"NotSet\",\n    })\nexample_git = azuredevops.Git(\"exampleGit\",\n    project_id=example_project.id,\n    default_branch=\"refs/heads/master\",\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nexample_repo_permissions = azuredevops.GitPermissions(\"example-repo-permissions\",\n    project_id=example_git.project_id,\n    repository_id=example_git.id,\n    principal=example_project_administrators.id,\n    permissions={\n        \"RemoveOthersLocks\": \"Allow\",\n        \"ManagePermissions\": \"Deny\",\n        \"CreateTag\": \"Deny\",\n        \"CreateBranch\": \"NotSet\",\n    })\nexample_branch_permissions = azuredevops.GitPermissions(\"example-branch-permissions\",\n    project_id=example_git.project_id,\n    repository_id=example_git.id,\n    branch_name=\"master\",\n    principal=example_project_contributors.id,\n    permissions={\n        \"RemoveOthersLocks\": \"Allow\",\n        \"ForcePush\": \"Deny\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var example_project_readers = AzureDevOps.GetGroup.Invoke(new()\n    {\n        ProjectId = exampleProject.Id,\n        Name = \"Readers\",\n    });\n\n    var example_project_contributors = AzureDevOps.GetGroup.Invoke(new()\n    {\n        ProjectId = exampleProject.Id,\n        Name = \"Contributors\",\n    });\n\n    var example_project_administrators = AzureDevOps.GetGroup.Invoke(new()\n    {\n        ProjectId = exampleProject.Id,\n        Name = \"Project administrators\",\n    });\n\n    var example_permissions = new AzureDevOps.GitPermissions(\"example-permissions\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Principal = example_project_readers.Apply(example_project_readers =\u003e example_project_readers.Apply(getGroupResult =\u003e getGroupResult.Id)),\n        Permissions = \n        {\n            { \"CreateRepository\", \"Deny\" },\n            { \"DeleteRepository\", \"Deny\" },\n            { \"RenameRepository\", \"NotSet\" },\n        },\n    });\n\n    var exampleGit = new AzureDevOps.Git(\"exampleGit\", new()\n    {\n        ProjectId = exampleProject.Id,\n        DefaultBranch = \"refs/heads/master\",\n        Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n        {\n            InitType = \"Clean\",\n        },\n    });\n\n    var example_repo_permissions = new AzureDevOps.GitPermissions(\"example-repo-permissions\", new()\n    {\n        ProjectId = exampleGit.ProjectId,\n        RepositoryId = exampleGit.Id,\n        Principal = example_project_administrators.Apply(example_project_administrators =\u003e example_project_administrators.Apply(getGroupResult =\u003e getGroupResult.Id)),\n        Permissions = \n        {\n            { \"RemoveOthersLocks\", \"Allow\" },\n            { \"ManagePermissions\", \"Deny\" },\n            { \"CreateTag\", \"Deny\" },\n            { \"CreateBranch\", \"NotSet\" },\n        },\n    });\n\n    var example_branch_permissions = new AzureDevOps.GitPermissions(\"example-branch-permissions\", new()\n    {\n        ProjectId = exampleGit.ProjectId,\n        RepositoryId = exampleGit.Id,\n        BranchName = \"master\",\n        Principal = example_project_contributors.Apply(example_project_contributors =\u003e example_project_contributors.Apply(getGroupResult =\u003e getGroupResult.Id)),\n        Permissions = \n        {\n            { \"RemoveOthersLocks\", \"Allow\" },\n            { \"ForcePush\", \"Deny\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample_project_readers := azuredevops.LookupGroupOutput(ctx, azuredevops.GetGroupOutputArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tName:      pulumi.String(\"Readers\"),\n\t\t}, nil)\n\t\texample_project_contributors := azuredevops.LookupGroupOutput(ctx, azuredevops.GetGroupOutputArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tName:      pulumi.String(\"Contributors\"),\n\t\t}, nil)\n\t\texample_project_administrators := azuredevops.LookupGroupOutput(ctx, azuredevops.GetGroupOutputArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tName:      pulumi.String(\"Project administrators\"),\n\t\t}, nil)\n\t\t_, err = azuredevops.NewGitPermissions(ctx, \"example-permissions\", \u0026azuredevops.GitPermissionsArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tPrincipal: example_project_readers.ApplyT(func(example_project_readers azuredevops.GetGroupResult) (*string, error) {\n\t\t\t\treturn \u0026example_project_readers.Id, nil\n\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"CreateRepository\": pulumi.String(\"Deny\"),\n\t\t\t\t\"DeleteRepository\": pulumi.String(\"Deny\"),\n\t\t\t\t\"RenameRepository\": pulumi.String(\"NotSet\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGit, err := azuredevops.NewGit(ctx, \"exampleGit\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId:     exampleProject.ID(),\n\t\t\tDefaultBranch: pulumi.String(\"refs/heads/master\"),\n\t\t\tInitialization: \u0026azuredevops.GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewGitPermissions(ctx, \"example-repo-permissions\", \u0026azuredevops.GitPermissionsArgs{\n\t\t\tProjectId:    exampleGit.ProjectId,\n\t\t\tRepositoryId: exampleGit.ID(),\n\t\t\tPrincipal: example_project_administrators.ApplyT(func(example_project_administrators azuredevops.GetGroupResult) (*string, error) {\n\t\t\t\treturn \u0026example_project_administrators.Id, nil\n\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"RemoveOthersLocks\": pulumi.String(\"Allow\"),\n\t\t\t\t\"ManagePermissions\": pulumi.String(\"Deny\"),\n\t\t\t\t\"CreateTag\":         pulumi.String(\"Deny\"),\n\t\t\t\t\"CreateBranch\":      pulumi.String(\"NotSet\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewGitPermissions(ctx, \"example-branch-permissions\", \u0026azuredevops.GitPermissionsArgs{\n\t\t\tProjectId:    exampleGit.ProjectId,\n\t\t\tRepositoryId: exampleGit.ID(),\n\t\t\tBranchName:   pulumi.String(\"master\"),\n\t\t\tPrincipal: example_project_contributors.ApplyT(func(example_project_contributors azuredevops.GetGroupResult) (*string, error) {\n\t\t\t\treturn \u0026example_project_contributors.Id, nil\n\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"RemoveOthersLocks\": pulumi.String(\"Allow\"),\n\t\t\t\t\"ForcePush\":         pulumi.String(\"Deny\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetGroupArgs;\nimport com.pulumi.azuredevops.GitPermissions;\nimport com.pulumi.azuredevops.GitPermissionsArgs;\nimport com.pulumi.azuredevops.Git;\nimport com.pulumi.azuredevops.GitArgs;\nimport com.pulumi.azuredevops.inputs.GitInitializationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        final var example-project-readers = AzuredevopsFunctions.getGroup(GetGroupArgs.builder()\n            .projectId(exampleProject.id())\n            .name(\"Readers\")\n            .build());\n\n        final var example-project-contributors = AzuredevopsFunctions.getGroup(GetGroupArgs.builder()\n            .projectId(exampleProject.id())\n            .name(\"Contributors\")\n            .build());\n\n        final var example-project-administrators = AzuredevopsFunctions.getGroup(GetGroupArgs.builder()\n            .projectId(exampleProject.id())\n            .name(\"Project administrators\")\n            .build());\n\n        var example_permissions = new GitPermissions(\"example-permissions\", GitPermissionsArgs.builder()        \n            .projectId(exampleProject.id())\n            .principal(example_project_readers.applyValue(example_project_readers -\u003e example_project_readers.id()))\n            .permissions(Map.ofEntries(\n                Map.entry(\"CreateRepository\", \"Deny\"),\n                Map.entry(\"DeleteRepository\", \"Deny\"),\n                Map.entry(\"RenameRepository\", \"NotSet\")\n            ))\n            .build());\n\n        var exampleGit = new Git(\"exampleGit\", GitArgs.builder()        \n            .projectId(exampleProject.id())\n            .defaultBranch(\"refs/heads/master\")\n            .initialization(GitInitializationArgs.builder()\n                .initType(\"Clean\")\n                .build())\n            .build());\n\n        var example_repo_permissions = new GitPermissions(\"example-repo-permissions\", GitPermissionsArgs.builder()        \n            .projectId(exampleGit.projectId())\n            .repositoryId(exampleGit.id())\n            .principal(example_project_administrators.applyValue(example_project_administrators -\u003e example_project_administrators.id()))\n            .permissions(Map.ofEntries(\n                Map.entry(\"RemoveOthersLocks\", \"Allow\"),\n                Map.entry(\"ManagePermissions\", \"Deny\"),\n                Map.entry(\"CreateTag\", \"Deny\"),\n                Map.entry(\"CreateBranch\", \"NotSet\")\n            ))\n            .build());\n\n        var example_branch_permissions = new GitPermissions(\"example-branch-permissions\", GitPermissionsArgs.builder()        \n            .projectId(exampleGit.projectId())\n            .repositoryId(exampleGit.id())\n            .branchName(\"master\")\n            .principal(example_project_contributors.applyValue(example_project_contributors -\u003e example_project_contributors.id()))\n            .permissions(Map.ofEntries(\n                Map.entry(\"RemoveOthersLocks\", \"Allow\"),\n                Map.entry(\"ForcePush\", \"Deny\")\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  example-permissions:\n    type: azuredevops:GitPermissions\n    properties:\n      projectId: ${exampleProject.id}\n      principal: ${[\"example-project-readers\"].id}\n      permissions:\n        CreateRepository: Deny\n        DeleteRepository: Deny\n        RenameRepository: NotSet\n  exampleGit:\n    type: azuredevops:Git\n    properties:\n      projectId: ${exampleProject.id}\n      defaultBranch: refs/heads/master\n      initialization:\n        initType: Clean\n  example-repo-permissions:\n    type: azuredevops:GitPermissions\n    properties:\n      projectId: ${exampleGit.projectId}\n      repositoryId: ${exampleGit.id}\n      principal: ${[\"example-project-administrators\"].id}\n      permissions:\n        RemoveOthersLocks: Allow\n        ManagePermissions: Deny\n        CreateTag: Deny\n        CreateBranch: NotSet\n  example-branch-permissions:\n    type: azuredevops:GitPermissions\n    properties:\n      projectId: ${exampleGit.projectId}\n      repositoryId: ${exampleGit.id}\n      branchName: master\n      principal: ${[\"example-project-contributors\"].id}\n      permissions:\n        RemoveOthersLocks: Allow\n        ForcePush: Deny\nvariables:\n  example-project-readers:\n    fn::invoke:\n      Function: azuredevops:getGroup\n      Arguments:\n        projectId: ${exampleProject.id}\n        name: Readers\n  example-project-contributors:\n    fn::invoke:\n      Function: azuredevops:getGroup\n      Arguments:\n        projectId: ${exampleProject.id}\n        name: Contributors\n  example-project-administrators:\n    fn::invoke:\n      Function: azuredevops:getGroup\n      Arguments:\n        projectId: ${exampleProject.id}\n        name: Project administrators\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 7.0 - Security](https://docs.microsoft.com/en-us/rest/api/azure/devops/security/?view=azure-devops-rest-7.0)\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: vso.security_manage - Grants the ability to read, write, and manage security permissions.\n\n\n## Import\n\nThe resource does not support import. ",
            "properties": {
                "branchName": {
                    "type": "string",
                    "description": "The name of the branch to assign the permissions. \n\n\u003e **Note** to assign permissions to a branch, the `repository_id` must be set as well.\n"
                },
                "permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "the permissions to assign. The follwing permissions are available\n\n\n| Permissions             | Description                                            |\n|-------------------------|--------------------------------------------------------|\n| Administer              | Administer                                             |\n| GenericRead             | Read                                                   |\n| GenericContribute       | Contribute                                             |\n| ForcePush               | Force push (rewrite history, delete branches and tags) |\n| CreateBranch            | Create branch                                          |\n| CreateTag               | Create tag                                             |\n| ManageNote              | Manage notes                                           |\n| PolicyExempt            | Bypass policies when pushing                           |\n| CreateRepository        | Create repository                                      |\n| DeleteRepository        | Delete repository                                      |\n| RenameRepository        | Rename repository                                      |\n| EditPolicies            | Edit policies                                          |\n| RemoveOthersLocks       | Remove others' locks                                   |\n| ManagePermissions       | Manage permissions                                     |\n| PullRequestContribute   | Contribute to pull requests                            |\n| PullRequestBypassPolicy | Bypass policies when completing pull requests          |\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The **group** principal to assign the permissions.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project to assign the permissions.\n"
                },
                "replace": {
                    "type": "boolean",
                    "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`\n"
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The ID of the GIT repository to assign the permissions\n"
                }
            },
            "required": [
                "permissions",
                "principal",
                "projectId"
            ],
            "inputProperties": {
                "branchName": {
                    "type": "string",
                    "description": "The name of the branch to assign the permissions. \n\n\u003e **Note** to assign permissions to a branch, the `repository_id` must be set as well.\n",
                    "willReplaceOnChanges": true
                },
                "permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "the permissions to assign. The follwing permissions are available\n\n\n| Permissions             | Description                                            |\n|-------------------------|--------------------------------------------------------|\n| Administer              | Administer                                             |\n| GenericRead             | Read                                                   |\n| GenericContribute       | Contribute                                             |\n| ForcePush               | Force push (rewrite history, delete branches and tags) |\n| CreateBranch            | Create branch                                          |\n| CreateTag               | Create tag                                             |\n| ManageNote              | Manage notes                                           |\n| PolicyExempt            | Bypass policies when pushing                           |\n| CreateRepository        | Create repository                                      |\n| DeleteRepository        | Delete repository                                      |\n| RenameRepository        | Rename repository                                      |\n| EditPolicies            | Edit policies                                          |\n| RemoveOthersLocks       | Remove others' locks                                   |\n| ManagePermissions       | Manage permissions                                     |\n| PullRequestContribute   | Contribute to pull requests                            |\n| PullRequestBypassPolicy | Bypass policies when completing pull requests          |\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The **group** principal to assign the permissions.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project to assign the permissions.\n",
                    "willReplaceOnChanges": true
                },
                "replace": {
                    "type": "boolean",
                    "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`\n"
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The ID of the GIT repository to assign the permissions\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "permissions",
                "principal",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GitPermissions resources.\n",
                "properties": {
                    "branchName": {
                        "type": "string",
                        "description": "The name of the branch to assign the permissions. \n\n\u003e **Note** to assign permissions to a branch, the `repository_id` must be set as well.\n",
                        "willReplaceOnChanges": true
                    },
                    "permissions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "the permissions to assign. The follwing permissions are available\n\n\n| Permissions             | Description                                            |\n|-------------------------|--------------------------------------------------------|\n| Administer              | Administer                                             |\n| GenericRead             | Read                                                   |\n| GenericContribute       | Contribute                                             |\n| ForcePush               | Force push (rewrite history, delete branches and tags) |\n| CreateBranch            | Create branch                                          |\n| CreateTag               | Create tag                                             |\n| ManageNote              | Manage notes                                           |\n| PolicyExempt            | Bypass policies when pushing                           |\n| CreateRepository        | Create repository                                      |\n| DeleteRepository        | Delete repository                                      |\n| RenameRepository        | Rename repository                                      |\n| EditPolicies            | Edit policies                                          |\n| RemoveOthersLocks       | Remove others' locks                                   |\n| ManagePermissions       | Manage permissions                                     |\n| PullRequestContribute   | Contribute to pull requests                            |\n| PullRequestBypassPolicy | Bypass policies when completing pull requests          |\n"
                    },
                    "principal": {
                        "type": "string",
                        "description": "The **group** principal to assign the permissions.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project to assign the permissions.\n",
                        "willReplaceOnChanges": true
                    },
                    "replace": {
                        "type": "boolean",
                        "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`\n"
                    },
                    "repositoryId": {
                        "type": "string",
                        "description": "The ID of the GIT repository to assign the permissions\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/gitRepositoryBranch:GitRepositoryBranch": {
            "description": "Manages a Git Repository Branch.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst exampleGit = new azuredevops.Git(\"exampleGit\", {\n    projectId: exampleProject.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst exampleGitRepositoryBranch = new azuredevops.GitRepositoryBranch(\"exampleGitRepositoryBranch\", {\n    repositoryId: exampleGit.id,\n    refBranch: exampleGit.defaultBranch,\n});\nconst exampleFromCommitId = new azuredevops.GitRepositoryBranch(\"exampleFromCommitId\", {\n    repositoryId: exampleGit.id,\n    refCommitId: exampleGitRepositoryBranch.lastCommitId,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nexample_git = azuredevops.Git(\"exampleGit\",\n    project_id=example_project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nexample_git_repository_branch = azuredevops.GitRepositoryBranch(\"exampleGitRepositoryBranch\",\n    repository_id=example_git.id,\n    ref_branch=example_git.default_branch)\nexample_from_commit_id = azuredevops.GitRepositoryBranch(\"exampleFromCommitId\",\n    repository_id=example_git.id,\n    ref_commit_id=example_git_repository_branch.last_commit_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n    });\n\n    var exampleGit = new AzureDevOps.Git(\"exampleGit\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n        {\n            InitType = \"Clean\",\n        },\n    });\n\n    var exampleGitRepositoryBranch = new AzureDevOps.GitRepositoryBranch(\"exampleGitRepositoryBranch\", new()\n    {\n        RepositoryId = exampleGit.Id,\n        RefBranch = exampleGit.DefaultBranch,\n    });\n\n    var exampleFromCommitId = new AzureDevOps.GitRepositoryBranch(\"exampleFromCommitId\", new()\n    {\n        RepositoryId = exampleGit.Id,\n        RefCommitId = exampleGitRepositoryBranch.LastCommitId,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGit, err := azuredevops.NewGit(ctx, \"exampleGit\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tInitialization: \u0026azuredevops.GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGitRepositoryBranch, err := azuredevops.NewGitRepositoryBranch(ctx, \"exampleGitRepositoryBranch\", \u0026azuredevops.GitRepositoryBranchArgs{\n\t\t\tRepositoryId: exampleGit.ID(),\n\t\t\tRefBranch:    exampleGit.DefaultBranch,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewGitRepositoryBranch(ctx, \"exampleFromCommitId\", \u0026azuredevops.GitRepositoryBranchArgs{\n\t\t\tRepositoryId: exampleGit.ID(),\n\t\t\tRefCommitId:  exampleGitRepositoryBranch.LastCommitId,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.Git;\nimport com.pulumi.azuredevops.GitArgs;\nimport com.pulumi.azuredevops.inputs.GitInitializationArgs;\nimport com.pulumi.azuredevops.GitRepositoryBranch;\nimport com.pulumi.azuredevops.GitRepositoryBranchArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .build());\n\n        var exampleGit = new Git(\"exampleGit\", GitArgs.builder()        \n            .projectId(exampleProject.id())\n            .initialization(GitInitializationArgs.builder()\n                .initType(\"Clean\")\n                .build())\n            .build());\n\n        var exampleGitRepositoryBranch = new GitRepositoryBranch(\"exampleGitRepositoryBranch\", GitRepositoryBranchArgs.builder()        \n            .repositoryId(exampleGit.id())\n            .refBranch(exampleGit.defaultBranch())\n            .build());\n\n        var exampleFromCommitId = new GitRepositoryBranch(\"exampleFromCommitId\", GitRepositoryBranchArgs.builder()        \n            .repositoryId(exampleGit.id())\n            .refCommitId(exampleGitRepositoryBranch.lastCommitId())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n  exampleGit:\n    type: azuredevops:Git\n    properties:\n      projectId: ${exampleProject.id}\n      initialization:\n        initType: Clean\n  exampleGitRepositoryBranch:\n    type: azuredevops:GitRepositoryBranch\n    properties:\n      repositoryId: ${exampleGit.id}\n      refBranch: ${exampleGit.defaultBranch}\n  exampleFromCommitId:\n    type: azuredevops:GitRepositoryBranch\n    properties:\n      repositoryId: ${exampleGit.id}\n      refCommitId: ${exampleGitRepositoryBranch.lastCommitId}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "lastCommitId": {
                    "type": "string",
                    "description": "The commit object ID of last commit on the branch.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the branch in short format not prefixed with `refs/heads/`.\n"
                },
                "refBranch": {
                    "type": "string",
                    "description": "The reference to the source branch to create the branch from, in `\u003cname\u003e` or `refs/heads/\u003cname\u003e` format. Conflict with `ref_tag`, `ref_commit_id`.\n"
                },
                "refCommitId": {
                    "type": "string",
                    "description": "The commit object ID to create the branch from. Conflict with `ref_branch`, `ref_tag`.\n"
                },
                "refTag": {
                    "type": "string",
                    "description": "The reference to the tag to create the branch from, in `\u003cname\u003e` or `refs/tags/\u003cname\u003e` format. Conflict with `ref_branch`, `ref_commit_id`.\n"
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The ID of the repository the branch is created against.\n"
                }
            },
            "required": [
                "lastCommitId",
                "name",
                "repositoryId"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the branch in short format not prefixed with `refs/heads/`.\n",
                    "willReplaceOnChanges": true
                },
                "refBranch": {
                    "type": "string",
                    "description": "The reference to the source branch to create the branch from, in `\u003cname\u003e` or `refs/heads/\u003cname\u003e` format. Conflict with `ref_tag`, `ref_commit_id`.\n",
                    "willReplaceOnChanges": true
                },
                "refCommitId": {
                    "type": "string",
                    "description": "The commit object ID to create the branch from. Conflict with `ref_branch`, `ref_tag`.\n",
                    "willReplaceOnChanges": true
                },
                "refTag": {
                    "type": "string",
                    "description": "The reference to the tag to create the branch from, in `\u003cname\u003e` or `refs/tags/\u003cname\u003e` format. Conflict with `ref_branch`, `ref_commit_id`.\n",
                    "willReplaceOnChanges": true
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The ID of the repository the branch is created against.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "repositoryId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GitRepositoryBranch resources.\n",
                "properties": {
                    "lastCommitId": {
                        "type": "string",
                        "description": "The commit object ID of last commit on the branch.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the branch in short format not prefixed with `refs/heads/`.\n",
                        "willReplaceOnChanges": true
                    },
                    "refBranch": {
                        "type": "string",
                        "description": "The reference to the source branch to create the branch from, in `\u003cname\u003e` or `refs/heads/\u003cname\u003e` format. Conflict with `ref_tag`, `ref_commit_id`.\n",
                        "willReplaceOnChanges": true
                    },
                    "refCommitId": {
                        "type": "string",
                        "description": "The commit object ID to create the branch from. Conflict with `ref_branch`, `ref_tag`.\n",
                        "willReplaceOnChanges": true
                    },
                    "refTag": {
                        "type": "string",
                        "description": "The reference to the tag to create the branch from, in `\u003cname\u003e` or `refs/tags/\u003cname\u003e` format. Conflict with `ref_branch`, `ref_commit_id`.\n",
                        "willReplaceOnChanges": true
                    },
                    "repositoryId": {
                        "type": "string",
                        "description": "The ID of the repository the branch is created against.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/gitRepositoryFile:GitRepositoryFile": {
            "description": "Manage files within an Azure DevOps Git repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst exampleGit = new azuredevops.Git(\"exampleGit\", {\n    projectId: exampleProject.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst exampleGitRepositoryFile = new azuredevops.GitRepositoryFile(\"exampleGitRepositoryFile\", {\n    repositoryId: exampleGit.id,\n    file: \".gitignore\",\n    content: \"**/*.tfstate\",\n    branch: \"refs/heads/master\",\n    commitMessage: \"First commit\",\n    overwriteOnCreate: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nexample_git = azuredevops.Git(\"exampleGit\",\n    project_id=example_project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nexample_git_repository_file = azuredevops.GitRepositoryFile(\"exampleGitRepositoryFile\",\n    repository_id=example_git.id,\n    file=\".gitignore\",\n    content=\"**/*.tfstate\",\n    branch=\"refs/heads/master\",\n    commit_message=\"First commit\",\n    overwrite_on_create=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n    });\n\n    var exampleGit = new AzureDevOps.Git(\"exampleGit\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n        {\n            InitType = \"Clean\",\n        },\n    });\n\n    var exampleGitRepositoryFile = new AzureDevOps.GitRepositoryFile(\"exampleGitRepositoryFile\", new()\n    {\n        RepositoryId = exampleGit.Id,\n        File = \".gitignore\",\n        Content = \"**/*.tfstate\",\n        Branch = \"refs/heads/master\",\n        CommitMessage = \"First commit\",\n        OverwriteOnCreate = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGit, err := azuredevops.NewGit(ctx, \"exampleGit\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tInitialization: \u0026azuredevops.GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewGitRepositoryFile(ctx, \"exampleGitRepositoryFile\", \u0026azuredevops.GitRepositoryFileArgs{\n\t\t\tRepositoryId:      exampleGit.ID(),\n\t\t\tFile:              pulumi.String(\".gitignore\"),\n\t\t\tContent:           pulumi.String(\"**/*.tfstate\"),\n\t\t\tBranch:            pulumi.String(\"refs/heads/master\"),\n\t\t\tCommitMessage:     pulumi.String(\"First commit\"),\n\t\t\tOverwriteOnCreate: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.Git;\nimport com.pulumi.azuredevops.GitArgs;\nimport com.pulumi.azuredevops.inputs.GitInitializationArgs;\nimport com.pulumi.azuredevops.GitRepositoryFile;\nimport com.pulumi.azuredevops.GitRepositoryFileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .build());\n\n        var exampleGit = new Git(\"exampleGit\", GitArgs.builder()        \n            .projectId(exampleProject.id())\n            .initialization(GitInitializationArgs.builder()\n                .initType(\"Clean\")\n                .build())\n            .build());\n\n        var exampleGitRepositoryFile = new GitRepositoryFile(\"exampleGitRepositoryFile\", GitRepositoryFileArgs.builder()        \n            .repositoryId(exampleGit.id())\n            .file(\".gitignore\")\n            .content(\"**/*.tfstate\")\n            .branch(\"refs/heads/master\")\n            .commitMessage(\"First commit\")\n            .overwriteOnCreate(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n  exampleGit:\n    type: azuredevops:Git\n    properties:\n      projectId: ${exampleProject.id}\n      initialization:\n        initType: Clean\n  exampleGitRepositoryFile:\n    type: azuredevops:GitRepositoryFile\n    properties:\n      repositoryId: ${exampleGit.id}\n      file: .gitignore\n      content: '**/*.tfstate'\n      branch: refs/heads/master\n      commitMessage: First commit\n      overwriteOnCreate: false\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Git API](https://docs.microsoft.com/en-us/rest/api/azure/devops/git/?view=azure-devops-rest-7.0)\n\n\n## Import\n\nRepository files can be imported using a combination of the `repository ID` and `file`, e.g.\n\n```sh\n $ pulumi import azuredevops:index/gitRepositoryFile:GitRepositoryFile example 00000000-0000-0000-0000-000000000000/.gitignore\n```\n\n To import a file from a branch other than `master`, append `:` and the branch name, e.g.\n\n```sh\n $ pulumi import azuredevops:index/gitRepositoryFile:GitRepositoryFile example 00000000-0000-0000-0000-000000000000/.gitignore:refs/heads/master\n```\n\n ",
            "properties": {
                "branch": {
                    "type": "string",
                    "description": "Git branch (defaults to `refs/heads/master`). The branch must already exist, it will not be created if it\ndoes not already exist.\n"
                },
                "commitMessage": {
                    "type": "string",
                    "description": "Commit message when adding or updating the managed file.\n"
                },
                "content": {
                    "type": "string",
                    "description": "The file content.\n"
                },
                "file": {
                    "type": "string",
                    "description": "The path of the file to manage.\n"
                },
                "overwriteOnCreate": {
                    "type": "boolean",
                    "description": "Enable overwriting existing files (defaults to `false`).\n"
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The ID of the Git repository.\n"
                }
            },
            "required": [
                "commitMessage",
                "content",
                "file",
                "repositoryId"
            ],
            "inputProperties": {
                "branch": {
                    "type": "string",
                    "description": "Git branch (defaults to `refs/heads/master`). The branch must already exist, it will not be created if it\ndoes not already exist.\n",
                    "willReplaceOnChanges": true
                },
                "commitMessage": {
                    "type": "string",
                    "description": "Commit message when adding or updating the managed file.\n"
                },
                "content": {
                    "type": "string",
                    "description": "The file content.\n"
                },
                "file": {
                    "type": "string",
                    "description": "The path of the file to manage.\n",
                    "willReplaceOnChanges": true
                },
                "overwriteOnCreate": {
                    "type": "boolean",
                    "description": "Enable overwriting existing files (defaults to `false`).\n"
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The ID of the Git repository.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "content",
                "file",
                "repositoryId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GitRepositoryFile resources.\n",
                "properties": {
                    "branch": {
                        "type": "string",
                        "description": "Git branch (defaults to `refs/heads/master`). The branch must already exist, it will not be created if it\ndoes not already exist.\n",
                        "willReplaceOnChanges": true
                    },
                    "commitMessage": {
                        "type": "string",
                        "description": "Commit message when adding or updating the managed file.\n"
                    },
                    "content": {
                        "type": "string",
                        "description": "The file content.\n"
                    },
                    "file": {
                        "type": "string",
                        "description": "The path of the file to manage.\n",
                        "willReplaceOnChanges": true
                    },
                    "overwriteOnCreate": {
                        "type": "boolean",
                        "description": "Enable overwriting existing files (defaults to `false`).\n"
                    },
                    "repositoryId": {
                        "type": "string",
                        "description": "The ID of the Git repository.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/group:Group": {
            "description": "Manages a group within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {});\nconst example-readers = azuredevops.getGroupOutput({\n    projectId: exampleProject.id,\n    name: \"Readers\",\n});\nconst example-contributors = azuredevops.getGroupOutput({\n    projectId: exampleProject.id,\n    name: \"Contributors\",\n});\nconst exampleGroup = new azuredevops.Group(\"exampleGroup\", {\n    scope: exampleProject.id,\n    displayName: \"Example group\",\n    description: \"Example description\",\n    members: [\n        example_readers.apply(example_readers =\u003e example_readers.descriptor),\n        example_contributors.apply(example_contributors =\u003e example_contributors.descriptor),\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\")\nexample_readers = azuredevops.get_group_output(project_id=example_project.id,\n    name=\"Readers\")\nexample_contributors = azuredevops.get_group_output(project_id=example_project.id,\n    name=\"Contributors\")\nexample_group = azuredevops.Group(\"exampleGroup\",\n    scope=example_project.id,\n    display_name=\"Example group\",\n    description=\"Example description\",\n    members=[\n        example_readers.descriptor,\n        example_contributors.descriptor,\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\");\n\n    var example_readers = AzureDevOps.GetGroup.Invoke(new()\n    {\n        ProjectId = exampleProject.Id,\n        Name = \"Readers\",\n    });\n\n    var example_contributors = AzureDevOps.GetGroup.Invoke(new()\n    {\n        ProjectId = exampleProject.Id,\n        Name = \"Contributors\",\n    });\n\n    var exampleGroup = new AzureDevOps.Group(\"exampleGroup\", new()\n    {\n        Scope = exampleProject.Id,\n        DisplayName = \"Example group\",\n        Description = \"Example description\",\n        Members = new[]\n        {\n            example_readers.Apply(example_readers =\u003e example_readers.Apply(getGroupResult =\u003e getGroupResult.Descriptor)),\n            example_contributors.Apply(example_contributors =\u003e example_contributors.Apply(getGroupResult =\u003e getGroupResult.Descriptor)),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample_readers := azuredevops.LookupGroupOutput(ctx, azuredevops.GetGroupOutputArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tName:      pulumi.String(\"Readers\"),\n\t\t}, nil)\n\t\texample_contributors := azuredevops.LookupGroupOutput(ctx, azuredevops.GetGroupOutputArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tName:      pulumi.String(\"Contributors\"),\n\t\t}, nil)\n\t\t_, err = azuredevops.NewGroup(ctx, \"exampleGroup\", \u0026azuredevops.GroupArgs{\n\t\t\tScope:       exampleProject.ID(),\n\t\t\tDisplayName: pulumi.String(\"Example group\"),\n\t\t\tDescription: pulumi.String(\"Example description\"),\n\t\t\tMembers: pulumi.StringArray{\n\t\t\t\texample_readers.ApplyT(func(example_readers azuredevops.GetGroupResult) (*string, error) {\n\t\t\t\t\treturn \u0026example_readers.Descriptor, nil\n\t\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\t\texample_contributors.ApplyT(func(example_contributors azuredevops.GetGroupResult) (*string, error) {\n\t\t\t\t\treturn \u0026example_contributors.Descriptor, nil\n\t\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetGroupArgs;\nimport com.pulumi.azuredevops.Group;\nimport com.pulumi.azuredevops.GroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\");\n\n        final var example-readers = AzuredevopsFunctions.getGroup(GetGroupArgs.builder()\n            .projectId(exampleProject.id())\n            .name(\"Readers\")\n            .build());\n\n        final var example-contributors = AzuredevopsFunctions.getGroup(GetGroupArgs.builder()\n            .projectId(exampleProject.id())\n            .name(\"Contributors\")\n            .build());\n\n        var exampleGroup = new Group(\"exampleGroup\", GroupArgs.builder()        \n            .scope(exampleProject.id())\n            .displayName(\"Example group\")\n            .description(\"Example description\")\n            .members(            \n                example_readers.applyValue(example_readers -\u003e example_readers.descriptor()),\n                example_contributors.applyValue(example_contributors -\u003e example_contributors.descriptor()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n  exampleGroup:\n    type: azuredevops:Group\n    properties:\n      scope: ${exampleProject.id}\n      displayName: Example group\n      description: Example description\n      members:\n        - ${[\"example-readers\"].descriptor}\n        - ${[\"example-contributors\"].descriptor}\nvariables:\n  example-readers:\n    fn::invoke:\n      Function: azuredevops:getGroup\n      Arguments:\n        projectId: ${exampleProject.id}\n        name: Readers\n  example-contributors:\n    fn::invoke:\n      Function: azuredevops:getGroup\n      Arguments:\n        projectId: ${exampleProject.id}\n        name: Contributors\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Groups](https://docs.microsoft.com/en-us/rest/api/azure/devops/graph/groups?view=azure-devops-rest-7.0)\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: Read, Write, \u0026 Manage\n\n\n## Import\n\nAzure DevOps groups can be imported using the group identity descriptor, e.g.\n\n```sh\n $ pulumi import azuredevops:index/group:Group example aadgp.Uy0xLTktMTU1MTM3NDI0NS0xMjA0NDAwOTY5LTI0MDI5ODY0MTMtMjE3OTQwODYxNi0zLTIxNjc2NjQyNTMtMzI1Nzg0NDI4OS0yMjU4MjcwOTc0LTI2MDYxODY2NDU\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The Description of the Project.\n"
                },
                "descriptor": {
                    "type": "string",
                    "description": "The identity (subject) descriptor of the Group.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of a new Azure DevOps group that is not backed by an external provider. The `origin_id` and `mail` arguments cannot be used simultaneously with `display_name`.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "This represents the name of the container of origin for a graph member.\n"
                },
                "mail": {
                    "type": "string",
                    "description": "The mail address as a reference to an existing group from an external AD or AAD backed provider. The `scope`, `origin_id` and `display_name` arguments cannot be used simultaneously with `mail`.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "\u003e NOTE: It's possible to define group members both within the `azuredevops.Group` resource via the members block and by using the `azuredevops.GroupMembership` resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.\n"
                },
                "origin": {
                    "type": "string",
                    "description": "The type of source provider for the origin identifier (ex:AD, AAD, MSA)\n"
                },
                "originId": {
                    "type": "string",
                    "description": "The OriginID as a reference to a group from an external AD or AAD backed provider. The `scope`, `mail` and `display_name` arguments cannot be used simultaneously with `origin_id`.\n"
                },
                "principalName": {
                    "type": "string",
                    "description": "This is the PrincipalName of this graph member from the source provider.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of the group. A descriptor referencing the scope (collection, project) in which the group should be created. If omitted, will be created in the scope of the enclosing account or organization.x\n"
                },
                "subjectKind": {
                    "type": "string",
                    "description": "This field identifies the type of the graph subject (ex: Group, Scope, User).\n"
                },
                "url": {
                    "type": "string",
                    "description": "This url is the full route to the source resource of this graph subject.\n"
                }
            },
            "required": [
                "descriptor",
                "displayName",
                "domain",
                "mail",
                "members",
                "origin",
                "originId",
                "principalName",
                "subjectKind",
                "url"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The Description of the Project.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of a new Azure DevOps group that is not backed by an external provider. The `origin_id` and `mail` arguments cannot be used simultaneously with `display_name`.\n"
                },
                "mail": {
                    "type": "string",
                    "description": "The mail address as a reference to an existing group from an external AD or AAD backed provider. The `scope`, `origin_id` and `display_name` arguments cannot be used simultaneously with `mail`.\n",
                    "willReplaceOnChanges": true
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "\u003e NOTE: It's possible to define group members both within the `azuredevops.Group` resource via the members block and by using the `azuredevops.GroupMembership` resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.\n"
                },
                "originId": {
                    "type": "string",
                    "description": "The OriginID as a reference to a group from an external AD or AAD backed provider. The `scope`, `mail` and `display_name` arguments cannot be used simultaneously with `origin_id`.\n",
                    "willReplaceOnChanges": true
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of the group. A descriptor referencing the scope (collection, project) in which the group should be created. If omitted, will be created in the scope of the enclosing account or organization.x\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The Description of the Project.\n"
                    },
                    "descriptor": {
                        "type": "string",
                        "description": "The identity (subject) descriptor of the Group.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name of a new Azure DevOps group that is not backed by an external provider. The `origin_id` and `mail` arguments cannot be used simultaneously with `display_name`.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "This represents the name of the container of origin for a graph member.\n"
                    },
                    "mail": {
                        "type": "string",
                        "description": "The mail address as a reference to an existing group from an external AD or AAD backed provider. The `scope`, `origin_id` and `display_name` arguments cannot be used simultaneously with `mail`.\n",
                        "willReplaceOnChanges": true
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "\u003e NOTE: It's possible to define group members both within the `azuredevops.Group` resource via the members block and by using the `azuredevops.GroupMembership` resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.\n"
                    },
                    "origin": {
                        "type": "string",
                        "description": "The type of source provider for the origin identifier (ex:AD, AAD, MSA)\n"
                    },
                    "originId": {
                        "type": "string",
                        "description": "The OriginID as a reference to a group from an external AD or AAD backed provider. The `scope`, `mail` and `display_name` arguments cannot be used simultaneously with `origin_id`.\n",
                        "willReplaceOnChanges": true
                    },
                    "principalName": {
                        "type": "string",
                        "description": "This is the PrincipalName of this graph member from the source provider.\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of the group. A descriptor referencing the scope (collection, project) in which the group should be created. If omitted, will be created in the scope of the enclosing account or organization.x\n",
                        "willReplaceOnChanges": true
                    },
                    "subjectKind": {
                        "type": "string",
                        "description": "This field identifies the type of the graph subject (ex: Group, Scope, User).\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "This url is the full route to the source resource of this graph subject.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Identities/group:Group"
                }
            ]
        },
        "azuredevops:index/groupEntitlement:GroupEntitlement": {
            "description": "Manages a group entitlement within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### With an Azure DevOps local group managed by this resource\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = new azuredevops.GroupEntitlement(\"example\", {displayName: \"Group Name\"});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.GroupEntitlement(\"example\", display_name=\"Group Name\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureDevOps.GroupEntitlement(\"example\", new()\n    {\n        DisplayName = \"Group Name\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewGroupEntitlement(ctx, \"example\", \u0026azuredevops.GroupEntitlementArgs{\n\t\t\tDisplayName: pulumi.String(\"Group Name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.GroupEntitlement;\nimport com.pulumi.azuredevops.GroupEntitlementArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new GroupEntitlement(\"example\", GroupEntitlementArgs.builder()        \n            .displayName(\"Group Name\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuredevops:GroupEntitlement\n    properties:\n      displayName: Group Name\n```\n{{% /example %}}\n{{% example %}}\n### With group origin ID\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = new azuredevops.GroupEntitlement(\"example\", {\n    origin: \"aad\",\n    originId: \"00000000-0000-0000-0000-000000000000\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.GroupEntitlement(\"example\",\n    origin=\"aad\",\n    origin_id=\"00000000-0000-0000-0000-000000000000\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureDevOps.GroupEntitlement(\"example\", new()\n    {\n        Origin = \"aad\",\n        OriginId = \"00000000-0000-0000-0000-000000000000\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewGroupEntitlement(ctx, \"example\", \u0026azuredevops.GroupEntitlementArgs{\n\t\t\tOrigin:   pulumi.String(\"aad\"),\n\t\t\tOriginId: pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.GroupEntitlement;\nimport com.pulumi.azuredevops.GroupEntitlementArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new GroupEntitlement(\"example\", GroupEntitlementArgs.builder()        \n            .origin(\"aad\")\n            .originId(\"00000000-0000-0000-0000-000000000000\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuredevops:GroupEntitlement\n    properties:\n      origin: aad\n      originId: 00000000-0000-0000-0000-000000000000\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Group Entitlements](https://learn.microsoft.com/en-us/rest/api/azure/devops/memberentitlementmanagement/group-entitlements?view=azure-devops-rest-7.1)\n- [Programmatic mapping of access levels](https://docs.microsoft.com/en-us/azure/devops/organizations/security/access-levels?view=azure-devops#programmatic-mapping-of-access-levels)\n\n## PAT Permissions Required\n\n- **Member Entitlement Management**: Read \u0026 Write\n\n\n## Import\n\nThe resource allows the import via the ID of a group entitlement, which is a UUID.\n\n```sh\n $ pulumi import azuredevops:index/groupEntitlement:GroupEntitlement example 00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "accountLicenseType": {
                    "type": "string",
                    "description": "Type of Account License. Valid values: `advanced`, `earlyAdopter`, `express`, `none`, `professional`, or `stakeholder`. Defaults to `express`. In addition, the value `basic` is allowed which is an alias for `express` and reflects the name of the `express` license used in the Azure DevOps web interface.\n"
                },
                "descriptor": {
                    "type": "string",
                    "description": "The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the group graph subject.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name is the name used in Azure DevOps UI. Cannot be set together with `origin_id` and `origin`.\n"
                },
                "licensingSource": {
                    "type": "string",
                    "description": "The source of the licensing (e.g. Account. MSDN etc.) Valid values: `account` (Default), `auto`, `msdn`, `none`, `profile`, `trial`\n\n\u003e **NOTE:** A existing group in Azure AD can only be referenced by the combination of `origin_id` and `origin`.\n"
                },
                "origin": {
                    "type": "string",
                    "description": "The type of source provider for the origin identifier.\n"
                },
                "originId": {
                    "type": "string",
                    "description": "The unique identifier from the system of origin. Typically, a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.\n"
                },
                "principalName": {
                    "type": "string",
                    "description": "The principal name of a graph member on Azure DevOps\n"
                }
            },
            "required": [
                "descriptor",
                "displayName",
                "origin",
                "originId",
                "principalName"
            ],
            "inputProperties": {
                "accountLicenseType": {
                    "type": "string",
                    "description": "Type of Account License. Valid values: `advanced`, `earlyAdopter`, `express`, `none`, `professional`, or `stakeholder`. Defaults to `express`. In addition, the value `basic` is allowed which is an alias for `express` and reflects the name of the `express` license used in the Azure DevOps web interface.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name is the name used in Azure DevOps UI. Cannot be set together with `origin_id` and `origin`.\n",
                    "willReplaceOnChanges": true
                },
                "licensingSource": {
                    "type": "string",
                    "description": "The source of the licensing (e.g. Account. MSDN etc.) Valid values: `account` (Default), `auto`, `msdn`, `none`, `profile`, `trial`\n\n\u003e **NOTE:** A existing group in Azure AD can only be referenced by the combination of `origin_id` and `origin`.\n"
                },
                "origin": {
                    "type": "string",
                    "description": "The type of source provider for the origin identifier.\n",
                    "willReplaceOnChanges": true
                },
                "originId": {
                    "type": "string",
                    "description": "The unique identifier from the system of origin. Typically, a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupEntitlement resources.\n",
                "properties": {
                    "accountLicenseType": {
                        "type": "string",
                        "description": "Type of Account License. Valid values: `advanced`, `earlyAdopter`, `express`, `none`, `professional`, or `stakeholder`. Defaults to `express`. In addition, the value `basic` is allowed which is an alias for `express` and reflects the name of the `express` license used in the Azure DevOps web interface.\n"
                    },
                    "descriptor": {
                        "type": "string",
                        "description": "The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the group graph subject.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name is the name used in Azure DevOps UI. Cannot be set together with `origin_id` and `origin`.\n",
                        "willReplaceOnChanges": true
                    },
                    "licensingSource": {
                        "type": "string",
                        "description": "The source of the licensing (e.g. Account. MSDN etc.) Valid values: `account` (Default), `auto`, `msdn`, `none`, `profile`, `trial`\n\n\u003e **NOTE:** A existing group in Azure AD can only be referenced by the combination of `origin_id` and `origin`.\n"
                    },
                    "origin": {
                        "type": "string",
                        "description": "The type of source provider for the origin identifier.\n",
                        "willReplaceOnChanges": true
                    },
                    "originId": {
                        "type": "string",
                        "description": "The unique identifier from the system of origin. Typically, a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.\n",
                        "willReplaceOnChanges": true
                    },
                    "principalName": {
                        "type": "string",
                        "description": "The principal name of a graph member on Azure DevOps\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/groupMembership:GroupMembership": {
            "description": "Manages group membership within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {});\nconst exampleUser = new azuredevops.User(\"exampleUser\", {principalName: \"foo@contoso.com\"});\nconst exampleGroup = azuredevops.getGroupOutput({\n    projectId: exampleProject.id,\n    name: \"Build Administrators\",\n});\nconst exampleGroupMembership = new azuredevops.GroupMembership(\"exampleGroupMembership\", {\n    group: exampleGroup.apply(exampleGroup =\u003e exampleGroup.descriptor),\n    members: [exampleUser.descriptor],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\")\nexample_user = azuredevops.User(\"exampleUser\", principal_name=\"foo@contoso.com\")\nexample_group = azuredevops.get_group_output(project_id=example_project.id,\n    name=\"Build Administrators\")\nexample_group_membership = azuredevops.GroupMembership(\"exampleGroupMembership\",\n    group=example_group.descriptor,\n    members=[example_user.descriptor])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\");\n\n    var exampleUser = new AzureDevOps.User(\"exampleUser\", new()\n    {\n        PrincipalName = \"foo@contoso.com\",\n    });\n\n    var exampleGroup = AzureDevOps.GetGroup.Invoke(new()\n    {\n        ProjectId = exampleProject.Id,\n        Name = \"Build Administrators\",\n    });\n\n    var exampleGroupMembership = new AzureDevOps.GroupMembership(\"exampleGroupMembership\", new()\n    {\n        Group = exampleGroup.Apply(getGroupResult =\u003e getGroupResult.Descriptor),\n        Members = new[]\n        {\n            exampleUser.Descriptor,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUser, err := azuredevops.NewUser(ctx, \"exampleUser\", \u0026azuredevops.UserArgs{\n\t\t\tPrincipalName: pulumi.String(\"foo@contoso.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGroup := azuredevops.LookupGroupOutput(ctx, azuredevops.GetGroupOutputArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tName:      pulumi.String(\"Build Administrators\"),\n\t\t}, nil)\n\t\t_, err = azuredevops.NewGroupMembership(ctx, \"exampleGroupMembership\", \u0026azuredevops.GroupMembershipArgs{\n\t\t\tGroup: exampleGroup.ApplyT(func(exampleGroup azuredevops.GetGroupResult) (*string, error) {\n\t\t\t\treturn \u0026exampleGroup.Descriptor, nil\n\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\tMembers: pulumi.StringArray{\n\t\t\t\texampleUser.Descriptor,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.User;\nimport com.pulumi.azuredevops.UserArgs;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetGroupArgs;\nimport com.pulumi.azuredevops.GroupMembership;\nimport com.pulumi.azuredevops.GroupMembershipArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\");\n\n        var exampleUser = new User(\"exampleUser\", UserArgs.builder()        \n            .principalName(\"foo@contoso.com\")\n            .build());\n\n        final var exampleGroup = AzuredevopsFunctions.getGroup(GetGroupArgs.builder()\n            .projectId(exampleProject.id())\n            .name(\"Build Administrators\")\n            .build());\n\n        var exampleGroupMembership = new GroupMembership(\"exampleGroupMembership\", GroupMembershipArgs.builder()        \n            .group(exampleGroup.applyValue(getGroupResult -\u003e getGroupResult).applyValue(exampleGroup -\u003e exampleGroup.applyValue(getGroupResult -\u003e getGroupResult.descriptor())))\n            .members(exampleUser.descriptor())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n  exampleUser:\n    type: azuredevops:User\n    properties:\n      principalName: foo@contoso.com\n  exampleGroupMembership:\n    type: azuredevops:GroupMembership\n    properties:\n      group: ${exampleGroup.descriptor}\n      members:\n        - ${exampleUser.descriptor}\nvariables:\n  exampleGroup:\n    fn::invoke:\n      Function: azuredevops:getGroup\n      Arguments:\n        projectId: ${exampleProject.id}\n        name: Build Administrators\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Memberships](https://docs.microsoft.com/en-us/rest/api/azure/devops/graph/memberships?view=azure-devops-rest-7.0)\n\n## PAT Permissions Required\n\n- **Deployment Groups**: Read \u0026 Manage\n\n\n## Import\n\nNot supported. ",
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The descriptor of the group being managed.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of user or group descriptors that will become members of the group.\n\u003e NOTE: It's possible to define group members both within the `azuredevops.GroupMembership resource` via the members block and by using the `azuredevops.Group` resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "The mode how the resource manages group members.\n- `mode == add`: the resource will ensure that all specified members will be part of the referenced group\n- `mode == overwrite`: the resource will replace all existing members with the members specified within the `members` block\n\u003e NOTE: To clear all members from a group, specify an empty list of descriptors in the `members` attribute and set the `mode` member to `overwrite`.\n"
                }
            },
            "required": [
                "group",
                "members"
            ],
            "inputProperties": {
                "group": {
                    "type": "string",
                    "description": "The descriptor of the group being managed.\n",
                    "willReplaceOnChanges": true
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of user or group descriptors that will become members of the group.\n\u003e NOTE: It's possible to define group members both within the `azuredevops.GroupMembership resource` via the members block and by using the `azuredevops.Group` resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "The mode how the resource manages group members.\n- `mode == add`: the resource will ensure that all specified members will be part of the referenced group\n- `mode == overwrite`: the resource will replace all existing members with the members specified within the `members` block\n\u003e NOTE: To clear all members from a group, specify an empty list of descriptors in the `members` attribute and set the `mode` member to `overwrite`.\n"
                }
            },
            "requiredInputs": [
                "group",
                "members"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupMembership resources.\n",
                "properties": {
                    "group": {
                        "type": "string",
                        "description": "The descriptor of the group being managed.\n",
                        "willReplaceOnChanges": true
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of user or group descriptors that will become members of the group.\n\u003e NOTE: It's possible to define group members both within the `azuredevops.GroupMembership resource` via the members block and by using the `azuredevops.Group` resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.\n"
                    },
                    "mode": {
                        "type": "string",
                        "description": "The mode how the resource manages group members.\n- `mode == add`: the resource will ensure that all specified members will be part of the referenced group\n- `mode == overwrite`: the resource will replace all existing members with the members specified within the `members` block\n\u003e NOTE: To clear all members from a group, specify an empty list of descriptors in the `members` attribute and set the `mode` member to `overwrite`.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Identities/groupMembership:GroupMembership"
                }
            ]
        },
        "azuredevops:index/iterativePermissions:IterativePermissions": {
            "description": "Manages permissions for an Iteration (Sprint)\n\n\u003e **Note** Permissions can be assigned to group principals and not to single user principals.\n\n## Permission levels\n\nPermission for Iterations within Azure DevOps can be applied on two different levels.\nThose levels are reflected by specifying (or omitting) values for the arguments `project_id` and `path`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = new azuredevops.Project(\"example\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"Managed by Terraform\",\n});\nconst example-readers = azuredevops.getGroupOutput({\n    projectId: example.id,\n    name: \"Readers\",\n});\nconst example_root_permissions = new azuredevops.IterativePermissions(\"example-root-permissions\", {\n    projectId: example.id,\n    principal: example_readers.apply(example_readers =\u003e example_readers.id),\n    permissions: {\n        CREATE_CHILDREN: \"Deny\",\n        GENERIC_READ: \"NotSet\",\n        DELETE: \"Deny\",\n    },\n});\nconst example_iteration_permissions = new azuredevops.IterativePermissions(\"example-iteration-permissions\", {\n    projectId: example.id,\n    principal: example_readers.apply(example_readers =\u003e example_readers.id),\n    path: \"Iteration 1\",\n    permissions: {\n        CREATE_CHILDREN: \"Allow\",\n        GENERIC_READ: \"NotSet\",\n        DELETE: \"Allow\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.Project(\"example\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"Managed by Terraform\")\nexample_readers = azuredevops.get_group_output(project_id=example.id,\n    name=\"Readers\")\nexample_root_permissions = azuredevops.IterativePermissions(\"example-root-permissions\",\n    project_id=example.id,\n    principal=example_readers.id,\n    permissions={\n        \"CREATE_CHILDREN\": \"Deny\",\n        \"GENERIC_READ\": \"NotSet\",\n        \"DELETE\": \"Deny\",\n    })\nexample_iteration_permissions = azuredevops.IterativePermissions(\"example-iteration-permissions\",\n    project_id=example.id,\n    principal=example_readers.id,\n    path=\"Iteration 1\",\n    permissions={\n        \"CREATE_CHILDREN\": \"Allow\",\n        \"GENERIC_READ\": \"NotSet\",\n        \"DELETE\": \"Allow\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureDevOps.Project(\"example\", new()\n    {\n        WorkItemTemplate = \"Agile\",\n        VersionControl = \"Git\",\n        Visibility = \"private\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var example_readers = AzureDevOps.GetGroup.Invoke(new()\n    {\n        ProjectId = example.Id,\n        Name = \"Readers\",\n    });\n\n    var example_root_permissions = new AzureDevOps.IterativePermissions(\"example-root-permissions\", new()\n    {\n        ProjectId = example.Id,\n        Principal = example_readers.Apply(example_readers =\u003e example_readers.Apply(getGroupResult =\u003e getGroupResult.Id)),\n        Permissions = \n        {\n            { \"CREATE_CHILDREN\", \"Deny\" },\n            { \"GENERIC_READ\", \"NotSet\" },\n            { \"DELETE\", \"Deny\" },\n        },\n    });\n\n    var example_iteration_permissions = new AzureDevOps.IterativePermissions(\"example-iteration-permissions\", new()\n    {\n        ProjectId = example.Id,\n        Principal = example_readers.Apply(example_readers =\u003e example_readers.Apply(getGroupResult =\u003e getGroupResult.Id)),\n        Path = \"Iteration 1\",\n        Permissions = \n        {\n            { \"CREATE_CHILDREN\", \"Allow\" },\n            { \"GENERIC_READ\", \"NotSet\" },\n            { \"DELETE\", \"Allow\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuredevops.NewProject(ctx, \"example\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample_readers := azuredevops.LookupGroupOutput(ctx, azuredevops.GetGroupOutputArgs{\n\t\t\tProjectId: example.ID(),\n\t\t\tName:      pulumi.String(\"Readers\"),\n\t\t}, nil)\n\t\t_, err = azuredevops.NewIterativePermissions(ctx, \"example-root-permissions\", \u0026azuredevops.IterativePermissionsArgs{\n\t\t\tProjectId: example.ID(),\n\t\t\tPrincipal: example_readers.ApplyT(func(example_readers azuredevops.GetGroupResult) (*string, error) {\n\t\t\t\treturn \u0026example_readers.Id, nil\n\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"CREATE_CHILDREN\": pulumi.String(\"Deny\"),\n\t\t\t\t\"GENERIC_READ\":    pulumi.String(\"NotSet\"),\n\t\t\t\t\"DELETE\":          pulumi.String(\"Deny\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewIterativePermissions(ctx, \"example-iteration-permissions\", \u0026azuredevops.IterativePermissionsArgs{\n\t\t\tProjectId: example.ID(),\n\t\t\tPrincipal: example_readers.ApplyT(func(example_readers azuredevops.GetGroupResult) (*string, error) {\n\t\t\t\treturn \u0026example_readers.Id, nil\n\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\tPath: pulumi.String(\"Iteration 1\"),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"CREATE_CHILDREN\": pulumi.String(\"Allow\"),\n\t\t\t\t\"GENERIC_READ\":    pulumi.String(\"NotSet\"),\n\t\t\t\t\"DELETE\":          pulumi.String(\"Allow\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetGroupArgs;\nimport com.pulumi.azuredevops.IterativePermissions;\nimport com.pulumi.azuredevops.IterativePermissionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Project(\"example\", ProjectArgs.builder()        \n            .workItemTemplate(\"Agile\")\n            .versionControl(\"Git\")\n            .visibility(\"private\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        final var example-readers = AzuredevopsFunctions.getGroup(GetGroupArgs.builder()\n            .projectId(example.id())\n            .name(\"Readers\")\n            .build());\n\n        var example_root_permissions = new IterativePermissions(\"example-root-permissions\", IterativePermissionsArgs.builder()        \n            .projectId(example.id())\n            .principal(example_readers.applyValue(example_readers -\u003e example_readers.id()))\n            .permissions(Map.ofEntries(\n                Map.entry(\"CREATE_CHILDREN\", \"Deny\"),\n                Map.entry(\"GENERIC_READ\", \"NotSet\"),\n                Map.entry(\"DELETE\", \"Deny\")\n            ))\n            .build());\n\n        var example_iteration_permissions = new IterativePermissions(\"example-iteration-permissions\", IterativePermissionsArgs.builder()        \n            .projectId(example.id())\n            .principal(example_readers.applyValue(example_readers -\u003e example_readers.id()))\n            .path(\"Iteration 1\")\n            .permissions(Map.ofEntries(\n                Map.entry(\"CREATE_CHILDREN\", \"Allow\"),\n                Map.entry(\"GENERIC_READ\", \"NotSet\"),\n                Map.entry(\"DELETE\", \"Allow\")\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuredevops:Project\n    properties:\n      workItemTemplate: Agile\n      versionControl: Git\n      visibility: private\n      description: Managed by Terraform\n  example-root-permissions:\n    type: azuredevops:IterativePermissions\n    properties:\n      projectId: ${example.id}\n      principal: ${[\"example-readers\"].id}\n      permissions:\n        CREATE_CHILDREN: Deny\n        GENERIC_READ: NotSet\n        DELETE: Deny\n  example-iteration-permissions:\n    type: azuredevops:IterativePermissions\n    properties:\n      projectId: ${example.id}\n      principal: ${[\"example-readers\"].id}\n      path: Iteration 1\n      permissions:\n        CREATE_CHILDREN: Allow\n        GENERIC_READ: NotSet\n        DELETE: Allow\nvariables:\n  example-readers:\n    fn::invoke:\n      Function: azuredevops:getGroup\n      Arguments:\n        projectId: ${example.id}\n        name: Readers\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 7.0 - Security](https://docs.microsoft.com/en-us/rest/api/azure/devops/security/?view=azure-devops-rest-7.0)\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: vso.security_manage - Grants the ability to read, write, and manage security permissions.\n\n\n## Import\n\nThe resource does not support import. ",
            "properties": {
                "path": {
                    "type": "string",
                    "description": "The name of the branch to assign the permissions.\n"
                },
                "permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "the permissions to assign. The following permissions are available.\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The **group** principal to assign the permissions.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project to assign the permissions.\n"
                },
                "replace": {
                    "type": "boolean",
                    "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`\n\n| Permission      | Description                    |\n|-----------------|--------------------------------|\n| GENERIC_READ    | View permissions for this node |\n| GENERIC_WRITE   | Edit this node                 |\n| CREATE_CHILDREN | Create child nodes             |\n| DELETE          | Delete this node               |\n"
                }
            },
            "required": [
                "permissions",
                "principal",
                "projectId"
            ],
            "inputProperties": {
                "path": {
                    "type": "string",
                    "description": "The name of the branch to assign the permissions.\n",
                    "willReplaceOnChanges": true
                },
                "permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "the permissions to assign. The following permissions are available.\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The **group** principal to assign the permissions.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project to assign the permissions.\n",
                    "willReplaceOnChanges": true
                },
                "replace": {
                    "type": "boolean",
                    "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`\n\n| Permission      | Description                    |\n|-----------------|--------------------------------|\n| GENERIC_READ    | View permissions for this node |\n| GENERIC_WRITE   | Edit this node                 |\n| CREATE_CHILDREN | Create child nodes             |\n| DELETE          | Delete this node               |\n"
                }
            },
            "requiredInputs": [
                "permissions",
                "principal",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IterativePermissions resources.\n",
                "properties": {
                    "path": {
                        "type": "string",
                        "description": "The name of the branch to assign the permissions.\n",
                        "willReplaceOnChanges": true
                    },
                    "permissions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "the permissions to assign. The following permissions are available.\n"
                    },
                    "principal": {
                        "type": "string",
                        "description": "The **group** principal to assign the permissions.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project to assign the permissions.\n",
                        "willReplaceOnChanges": true
                    },
                    "replace": {
                        "type": "boolean",
                        "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`\n\n| Permission      | Description                    |\n|-----------------|--------------------------------|\n| GENERIC_READ    | View permissions for this node |\n| GENERIC_WRITE   | Edit this node                 |\n| CREATE_CHILDREN | Create child nodes             |\n| DELETE          | Delete this node               |\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/pipelineAuthorization:PipelineAuthorization": {
            "description": "Manage pipeline access permissions to resources.\n\n\u003e **Note** This resource is a replacement for `azuredevops.ResourceAuthorization`.  Pipeline authorizations managed by `azuredevops.ResourceAuthorization` can also be managed by this resource.\n\n\u003e **Note** If both \"All Pipeline Authorization\" and \"Custom Pipeline Authorization\" are configured, \"All Pipeline Authorization\" has higher priority.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Authorization for all pipelines\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst examplePool = new azuredevops.Pool(\"examplePool\", {\n    autoProvision: false,\n    autoUpdate: false,\n});\nconst exampleQueue = new azuredevops.Queue(\"exampleQueue\", {\n    projectId: exampleProject.id,\n    agentPoolId: examplePool.id,\n});\nconst examplePipelineAuthorization = new azuredevops.PipelineAuthorization(\"examplePipelineAuthorization\", {\n    projectId: exampleProject.id,\n    resourceId: exampleQueue.id,\n    type: \"queue\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_pool = azuredevops.Pool(\"examplePool\",\n    auto_provision=False,\n    auto_update=False)\nexample_queue = azuredevops.Queue(\"exampleQueue\",\n    project_id=example_project.id,\n    agent_pool_id=example_pool.id)\nexample_pipeline_authorization = azuredevops.PipelineAuthorization(\"examplePipelineAuthorization\",\n    project_id=example_project.id,\n    resource_id=example_queue.id,\n    type=\"queue\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var examplePool = new AzureDevOps.Pool(\"examplePool\", new()\n    {\n        AutoProvision = false,\n        AutoUpdate = false,\n    });\n\n    var exampleQueue = new AzureDevOps.Queue(\"exampleQueue\", new()\n    {\n        ProjectId = exampleProject.Id,\n        AgentPoolId = examplePool.Id,\n    });\n\n    var examplePipelineAuthorization = new AzureDevOps.PipelineAuthorization(\"examplePipelineAuthorization\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ResourceId = exampleQueue.Id,\n        Type = \"queue\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texamplePool, err := azuredevops.NewPool(ctx, \"examplePool\", \u0026azuredevops.PoolArgs{\n\t\t\tAutoProvision: pulumi.Bool(false),\n\t\t\tAutoUpdate:    pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleQueue, err := azuredevops.NewQueue(ctx, \"exampleQueue\", \u0026azuredevops.QueueArgs{\n\t\t\tProjectId:   exampleProject.ID(),\n\t\t\tAgentPoolId: examplePool.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewPipelineAuthorization(ctx, \"examplePipelineAuthorization\", \u0026azuredevops.PipelineAuthorizationArgs{\n\t\t\tProjectId:  exampleProject.ID(),\n\t\t\tResourceId: exampleQueue.ID(),\n\t\t\tType:       pulumi.String(\"queue\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.Pool;\nimport com.pulumi.azuredevops.PoolArgs;\nimport com.pulumi.azuredevops.Queue;\nimport com.pulumi.azuredevops.QueueArgs;\nimport com.pulumi.azuredevops.PipelineAuthorization;\nimport com.pulumi.azuredevops.PipelineAuthorizationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var examplePool = new Pool(\"examplePool\", PoolArgs.builder()        \n            .autoProvision(false)\n            .autoUpdate(false)\n            .build());\n\n        var exampleQueue = new Queue(\"exampleQueue\", QueueArgs.builder()        \n            .projectId(exampleProject.id())\n            .agentPoolId(examplePool.id())\n            .build());\n\n        var examplePipelineAuthorization = new PipelineAuthorization(\"examplePipelineAuthorization\", PipelineAuthorizationArgs.builder()        \n            .projectId(exampleProject.id())\n            .resourceId(exampleQueue.id())\n            .type(\"queue\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  examplePool:\n    type: azuredevops:Pool\n    properties:\n      autoProvision: false\n      autoUpdate: false\n  exampleQueue:\n    type: azuredevops:Queue\n    properties:\n      projectId: ${exampleProject.id}\n      agentPoolId: ${examplePool.id}\n  examplePipelineAuthorization:\n    type: azuredevops:PipelineAuthorization\n    properties:\n      projectId: ${exampleProject.id}\n      resourceId: ${exampleQueue.id}\n      type: queue\n```\n{{% /example %}}\n{{% example %}}\n### Authorization for specific pipeline\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst examplePool = new azuredevops.Pool(\"examplePool\", {\n    autoProvision: false,\n    autoUpdate: false,\n});\nconst exampleQueue = new azuredevops.Queue(\"exampleQueue\", {\n    projectId: exampleProject.id,\n    agentPoolId: examplePool.id,\n});\nconst exampleGitRepository = azuredevops.getGitRepositoryOutput({\n    projectId: exampleProject.id,\n    name: \"Example Project\",\n});\nconst exampleBuildDefinition = new azuredevops.BuildDefinition(\"exampleBuildDefinition\", {\n    projectId: exampleProject.id,\n    repository: {\n        repoType: \"TfsGit\",\n        repoId: exampleGitRepository.apply(exampleGitRepository =\u003e exampleGitRepository.id),\n        ymlPath: \"azure-pipelines.yml\",\n    },\n});\nconst examplePipelineAuthorization = new azuredevops.PipelineAuthorization(\"examplePipelineAuthorization\", {\n    projectId: exampleProject.id,\n    resourceId: exampleQueue.id,\n    type: \"queue\",\n    pipelineId: exampleBuildDefinition.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_pool = azuredevops.Pool(\"examplePool\",\n    auto_provision=False,\n    auto_update=False)\nexample_queue = azuredevops.Queue(\"exampleQueue\",\n    project_id=example_project.id,\n    agent_pool_id=example_pool.id)\nexample_git_repository = azuredevops.get_git_repository_output(project_id=example_project.id,\n    name=\"Example Project\")\nexample_build_definition = azuredevops.BuildDefinition(\"exampleBuildDefinition\",\n    project_id=example_project.id,\n    repository=azuredevops.BuildDefinitionRepositoryArgs(\n        repo_type=\"TfsGit\",\n        repo_id=example_git_repository.id,\n        yml_path=\"azure-pipelines.yml\",\n    ))\nexample_pipeline_authorization = azuredevops.PipelineAuthorization(\"examplePipelineAuthorization\",\n    project_id=example_project.id,\n    resource_id=example_queue.id,\n    type=\"queue\",\n    pipeline_id=example_build_definition.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var examplePool = new AzureDevOps.Pool(\"examplePool\", new()\n    {\n        AutoProvision = false,\n        AutoUpdate = false,\n    });\n\n    var exampleQueue = new AzureDevOps.Queue(\"exampleQueue\", new()\n    {\n        ProjectId = exampleProject.Id,\n        AgentPoolId = examplePool.Id,\n    });\n\n    var exampleGitRepository = AzureDevOps.GetGitRepository.Invoke(new()\n    {\n        ProjectId = exampleProject.Id,\n        Name = \"Example Project\",\n    });\n\n    var exampleBuildDefinition = new AzureDevOps.BuildDefinition(\"exampleBuildDefinition\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Repository = new AzureDevOps.Inputs.BuildDefinitionRepositoryArgs\n        {\n            RepoType = \"TfsGit\",\n            RepoId = exampleGitRepository.Apply(getGitRepositoryResult =\u003e getGitRepositoryResult.Id),\n            YmlPath = \"azure-pipelines.yml\",\n        },\n    });\n\n    var examplePipelineAuthorization = new AzureDevOps.PipelineAuthorization(\"examplePipelineAuthorization\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ResourceId = exampleQueue.Id,\n        Type = \"queue\",\n        PipelineId = exampleBuildDefinition.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texamplePool, err := azuredevops.NewPool(ctx, \"examplePool\", \u0026azuredevops.PoolArgs{\n\t\t\tAutoProvision: pulumi.Bool(false),\n\t\t\tAutoUpdate:    pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleQueue, err := azuredevops.NewQueue(ctx, \"exampleQueue\", \u0026azuredevops.QueueArgs{\n\t\t\tProjectId:   exampleProject.ID(),\n\t\t\tAgentPoolId: examplePool.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGitRepository := azuredevops.GetGitRepositoryOutput(ctx, azuredevops.GetGitRepositoryOutputArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tName:      pulumi.String(\"Example Project\"),\n\t\t}, nil)\n\t\texampleBuildDefinition, err := azuredevops.NewBuildDefinition(ctx, \"exampleBuildDefinition\", \u0026azuredevops.BuildDefinitionArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tRepository: \u0026azuredevops.BuildDefinitionRepositoryArgs{\n\t\t\t\tRepoType: pulumi.String(\"TfsGit\"),\n\t\t\t\tRepoId: exampleGitRepository.ApplyT(func(exampleGitRepository azuredevops.GetGitRepositoryResult) (*string, error) {\n\t\t\t\t\treturn \u0026exampleGitRepository.Id, nil\n\t\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\t\tYmlPath: pulumi.String(\"azure-pipelines.yml\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewPipelineAuthorization(ctx, \"examplePipelineAuthorization\", \u0026azuredevops.PipelineAuthorizationArgs{\n\t\t\tProjectId:  exampleProject.ID(),\n\t\t\tResourceId: exampleQueue.ID(),\n\t\t\tType:       pulumi.String(\"queue\"),\n\t\t\tPipelineId: exampleBuildDefinition.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.Pool;\nimport com.pulumi.azuredevops.PoolArgs;\nimport com.pulumi.azuredevops.Queue;\nimport com.pulumi.azuredevops.QueueArgs;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetGitRepositoryArgs;\nimport com.pulumi.azuredevops.BuildDefinition;\nimport com.pulumi.azuredevops.BuildDefinitionArgs;\nimport com.pulumi.azuredevops.inputs.BuildDefinitionRepositoryArgs;\nimport com.pulumi.azuredevops.PipelineAuthorization;\nimport com.pulumi.azuredevops.PipelineAuthorizationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var examplePool = new Pool(\"examplePool\", PoolArgs.builder()        \n            .autoProvision(false)\n            .autoUpdate(false)\n            .build());\n\n        var exampleQueue = new Queue(\"exampleQueue\", QueueArgs.builder()        \n            .projectId(exampleProject.id())\n            .agentPoolId(examplePool.id())\n            .build());\n\n        final var exampleGitRepository = AzuredevopsFunctions.getGitRepository(GetGitRepositoryArgs.builder()\n            .projectId(exampleProject.id())\n            .name(\"Example Project\")\n            .build());\n\n        var exampleBuildDefinition = new BuildDefinition(\"exampleBuildDefinition\", BuildDefinitionArgs.builder()        \n            .projectId(exampleProject.id())\n            .repository(BuildDefinitionRepositoryArgs.builder()\n                .repoType(\"TfsGit\")\n                .repoId(exampleGitRepository.applyValue(getGitRepositoryResult -\u003e getGitRepositoryResult).applyValue(exampleGitRepository -\u003e exampleGitRepository.applyValue(getGitRepositoryResult -\u003e getGitRepositoryResult.id())))\n                .ymlPath(\"azure-pipelines.yml\")\n                .build())\n            .build());\n\n        var examplePipelineAuthorization = new PipelineAuthorization(\"examplePipelineAuthorization\", PipelineAuthorizationArgs.builder()        \n            .projectId(exampleProject.id())\n            .resourceId(exampleQueue.id())\n            .type(\"queue\")\n            .pipelineId(exampleBuildDefinition.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  examplePool:\n    type: azuredevops:Pool\n    properties:\n      autoProvision: false\n      autoUpdate: false\n  exampleQueue:\n    type: azuredevops:Queue\n    properties:\n      projectId: ${exampleProject.id}\n      agentPoolId: ${examplePool.id}\n  exampleBuildDefinition:\n    type: azuredevops:BuildDefinition\n    properties:\n      projectId: ${exampleProject.id}\n      repository:\n        repoType: TfsGit\n        repoId: ${exampleGitRepository.id}\n        ymlPath: azure-pipelines.yml\n  examplePipelineAuthorization:\n    type: azuredevops:PipelineAuthorization\n    properties:\n      projectId: ${exampleProject.id}\n      resourceId: ${exampleQueue.id}\n      type: queue\n      pipelineId: ${exampleBuildDefinition.id}\nvariables:\n  exampleGitRepository:\n    fn::invoke:\n      Function: azuredevops:getGitRepository\n      Arguments:\n        projectId: ${exampleProject.id}\n        name: Example Project\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.1 - Pipeline Permissions](https://learn.microsoft.com/en-us/rest/api/azure/devops/approvalsandchecks/pipeline-permissions?view=azure-devops-rest-7.1)\n",
            "properties": {
                "pipelineId": {
                    "type": "integer",
                    "description": "The ID of the pipeline. If not configured, all pipelines will be authorized. Changing this forces a new resource to be created.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The  ID of the project. Changing this forces a new resource to be created\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The ID of the resource to authorize. Changing this forces a new resource to be created\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the resource to authorize. Valid values: `endpoint`, `queue`, `variablegroup`, `environment`, `repository`. Changing this forces a new resource to be created\n"
                }
            },
            "required": [
                "projectId",
                "resourceId",
                "type"
            ],
            "inputProperties": {
                "pipelineId": {
                    "type": "integer",
                    "description": "The ID of the pipeline. If not configured, all pipelines will be authorized. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The  ID of the project. Changing this forces a new resource to be created\n",
                    "willReplaceOnChanges": true
                },
                "resourceId": {
                    "type": "string",
                    "description": "The ID of the resource to authorize. Changing this forces a new resource to be created\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The type of the resource to authorize. Valid values: `endpoint`, `queue`, `variablegroup`, `environment`, `repository`. Changing this forces a new resource to be created\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "projectId",
                "resourceId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PipelineAuthorization resources.\n",
                "properties": {
                    "pipelineId": {
                        "type": "integer",
                        "description": "The ID of the pipeline. If not configured, all pipelines will be authorized. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The  ID of the project. Changing this forces a new resource to be created\n",
                        "willReplaceOnChanges": true
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "The ID of the resource to authorize. Changing this forces a new resource to be created\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the resource to authorize. Valid values: `endpoint`, `queue`, `variablegroup`, `environment`, `repository`. Changing this forces a new resource to be created\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/pool:Pool": {
            "description": "Manages an agent pool within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = new azuredevops.Pool(\"example\", {\n    autoProvision: false,\n    autoUpdate: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.Pool(\"example\",\n    auto_provision=False,\n    auto_update=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureDevOps.Pool(\"example\", new()\n    {\n        AutoProvision = false,\n        AutoUpdate = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewPool(ctx, \"example\", \u0026azuredevops.PoolArgs{\n\t\t\tAutoProvision: pulumi.Bool(false),\n\t\t\tAutoUpdate:    pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Pool;\nimport com.pulumi.azuredevops.PoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Pool(\"example\", PoolArgs.builder()        \n            .autoProvision(false)\n            .autoUpdate(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuredevops:Pool\n    properties:\n      autoProvision: false\n      autoUpdate: false\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Agent Pools](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/pools?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Agent Pools can be imported using the agent pool ID, e.g.\n\n```sh\n $ pulumi import azuredevops:index/pool:Pool example 0\n```\n\n ",
            "properties": {
                "autoProvision": {
                    "type": "boolean",
                    "description": "Specifies whether a queue should be automatically provisioned for each project collection. Defaults to `false`.\n"
                },
                "autoUpdate": {
                    "type": "boolean",
                    "description": "Specifies whether or not agents within the pool should be automatically updated. Defaults to `true`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the agent pool.\n"
                },
                "poolType": {
                    "type": "string",
                    "description": "Specifies whether the agent pool type is Automation or Deployment. Defaults to `automation`.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "autoProvision": {
                    "type": "boolean",
                    "description": "Specifies whether a queue should be automatically provisioned for each project collection. Defaults to `false`.\n"
                },
                "autoUpdate": {
                    "type": "boolean",
                    "description": "Specifies whether or not agents within the pool should be automatically updated. Defaults to `true`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the agent pool.\n"
                },
                "poolType": {
                    "type": "string",
                    "description": "Specifies whether the agent pool type is Automation or Deployment. Defaults to `automation`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Pool resources.\n",
                "properties": {
                    "autoProvision": {
                        "type": "boolean",
                        "description": "Specifies whether a queue should be automatically provisioned for each project collection. Defaults to `false`.\n"
                    },
                    "autoUpdate": {
                        "type": "boolean",
                        "description": "Specifies whether or not agents within the pool should be automatically updated. Defaults to `true`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the agent pool.\n"
                    },
                    "poolType": {
                        "type": "string",
                        "description": "Specifies whether the agent pool type is Automation or Deployment. Defaults to `automation`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Agent/pool:Pool"
                }
            ]
        },
        "azuredevops:index/project:Project": {
            "description": "Manages a project within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = new azuredevops.Project(\"example\", {\n    description: \"Managed by Terraform\",\n    features: {\n        artifacts: \"disabled\",\n        testplans: \"disabled\",\n    },\n    versionControl: \"Git\",\n    visibility: \"private\",\n    workItemTemplate: \"Agile\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.Project(\"example\",\n    description=\"Managed by Terraform\",\n    features={\n        \"artifacts\": \"disabled\",\n        \"testplans\": \"disabled\",\n    },\n    version_control=\"Git\",\n    visibility=\"private\",\n    work_item_template=\"Agile\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureDevOps.Project(\"example\", new()\n    {\n        Description = \"Managed by Terraform\",\n        Features = \n        {\n            { \"artifacts\", \"disabled\" },\n            { \"testplans\", \"disabled\" },\n        },\n        VersionControl = \"Git\",\n        Visibility = \"private\",\n        WorkItemTemplate = \"Agile\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewProject(ctx, \"example\", \u0026azuredevops.ProjectArgs{\n\t\t\tDescription: pulumi.String(\"Managed by Terraform\"),\n\t\t\tFeatures: pulumi.StringMap{\n\t\t\t\t\"artifacts\": pulumi.String(\"disabled\"),\n\t\t\t\t\"testplans\": pulumi.String(\"disabled\"),\n\t\t\t},\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Project(\"example\", ProjectArgs.builder()        \n            .description(\"Managed by Terraform\")\n            .features(Map.ofEntries(\n                Map.entry(\"artifacts\", \"disabled\"),\n                Map.entry(\"testplans\", \"disabled\")\n            ))\n            .versionControl(\"Git\")\n            .visibility(\"private\")\n            .workItemTemplate(\"Agile\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuredevops:Project\n    properties:\n      description: Managed by Terraform\n      features:\n        artifacts: disabled\n        testplans: disabled\n      versionControl: Git\n      visibility: private\n      workItemTemplate: Agile\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Projects](https://docs.microsoft.com/en-us/rest/api/azure/devops/core/projects?view=azure-devops-rest-7.0)\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: Read, Write, \u0026 Manage\n\n\n## Import\n\nAzure DevOps Projects can be imported using the project name or by the project Guid, e.g.\n\n```sh\n $ pulumi import azuredevops:index/project:Project example \"Example Project\"\n```\n\n or\n\n```sh\n $ pulumi import azuredevops:index/project:Project example 00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The Description of the Project.\n"
                },
                "features": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Defines the status (`enabled`, `disabled`) of the project features.\nValid features are `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`\n\n\u003e **NOTE:**\n\u003e It's possible to define project features both within the `azuredevops.ProjectFeatures` resource and\n\u003e via the `features` block by using the `azuredevops.Project` resource.\n\u003e However it's not possible to use both methods to manage features, since there'll be conflicts.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Project Name.\n"
                },
                "processTemplateId": {
                    "type": "string",
                    "description": "The Process Template ID used by the Project.\n"
                },
                "versionControl": {
                    "type": "string",
                    "description": "Specifies the version control system. Valid values: `Git` or `Tfvc`. Defaults to `Git`.\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Specifies the visibility of the Project. Valid values: `private` or `public`. Defaults to `private`.\n"
                },
                "workItemTemplate": {
                    "type": "string",
                    "description": "Specifies the work item template. Valid values: `Agile`, `Basic`, `CMMI`, `Scrum` or a custom, pre-existing one. Defaults to `Agile`. An empty string will use the parent organization default.\n"
                }
            },
            "required": [
                "name",
                "processTemplateId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The Description of the Project.\n"
                },
                "features": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Defines the status (`enabled`, `disabled`) of the project features.\nValid features are `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`\n\n\u003e **NOTE:**\n\u003e It's possible to define project features both within the `azuredevops.ProjectFeatures` resource and\n\u003e via the `features` block by using the `azuredevops.Project` resource.\n\u003e However it's not possible to use both methods to manage features, since there'll be conflicts.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Project Name.\n"
                },
                "versionControl": {
                    "type": "string",
                    "description": "Specifies the version control system. Valid values: `Git` or `Tfvc`. Defaults to `Git`.\n",
                    "willReplaceOnChanges": true
                },
                "visibility": {
                    "type": "string",
                    "description": "Specifies the visibility of the Project. Valid values: `private` or `public`. Defaults to `private`.\n"
                },
                "workItemTemplate": {
                    "type": "string",
                    "description": "Specifies the work item template. Valid values: `Agile`, `Basic`, `CMMI`, `Scrum` or a custom, pre-existing one. Defaults to `Agile`. An empty string will use the parent organization default.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The Description of the Project.\n"
                    },
                    "features": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Defines the status (`enabled`, `disabled`) of the project features.\nValid features are `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`\n\n\u003e **NOTE:**\n\u003e It's possible to define project features both within the `azuredevops.ProjectFeatures` resource and\n\u003e via the `features` block by using the `azuredevops.Project` resource.\n\u003e However it's not possible to use both methods to manage features, since there'll be conflicts.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Project Name.\n"
                    },
                    "processTemplateId": {
                        "type": "string",
                        "description": "The Process Template ID used by the Project.\n"
                    },
                    "versionControl": {
                        "type": "string",
                        "description": "Specifies the version control system. Valid values: `Git` or `Tfvc`. Defaults to `Git`.\n",
                        "willReplaceOnChanges": true
                    },
                    "visibility": {
                        "type": "string",
                        "description": "Specifies the visibility of the Project. Valid values: `private` or `public`. Defaults to `private`.\n"
                    },
                    "workItemTemplate": {
                        "type": "string",
                        "description": "Specifies the work item template. Valid values: `Agile`, `Basic`, `CMMI`, `Scrum` or a custom, pre-existing one. Defaults to `Agile`. An empty string will use the parent organization default.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Core/project:Project"
                }
            ]
        },
        "azuredevops:index/projectFeatures:ProjectFeatures": {
            "description": "Manages features for Azure DevOps projects\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = new azuredevops.Project(\"example\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst example_features = new azuredevops.ProjectFeatures(\"example-features\", {\n    projectId: example.id,\n    features: {\n        testplans: \"disabled\",\n        artifacts: \"enabled\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.Project(\"example\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_features = azuredevops.ProjectFeatures(\"example-features\",\n    project_id=example.id,\n    features={\n        \"testplans\": \"disabled\",\n        \"artifacts\": \"enabled\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureDevOps.Project(\"example\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var example_features = new AzureDevOps.ProjectFeatures(\"example-features\", new()\n    {\n        ProjectId = example.Id,\n        Features = \n        {\n            { \"testplans\", \"disabled\" },\n            { \"artifacts\", \"enabled\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuredevops.NewProject(ctx, \"example\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewProjectFeatures(ctx, \"example-features\", \u0026azuredevops.ProjectFeaturesArgs{\n\t\t\tProjectId: example.ID(),\n\t\t\tFeatures: pulumi.StringMap{\n\t\t\t\t\"testplans\": pulumi.String(\"disabled\"),\n\t\t\t\t\"artifacts\": pulumi.String(\"enabled\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ProjectFeatures;\nimport com.pulumi.azuredevops.ProjectFeaturesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Project(\"example\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var example_features = new ProjectFeatures(\"example-features\", ProjectFeaturesArgs.builder()        \n            .projectId(example.id())\n            .features(Map.ofEntries(\n                Map.entry(\"testplans\", \"disabled\"),\n                Map.entry(\"artifacts\", \"enabled\")\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  example-features:\n    type: azuredevops:ProjectFeatures\n    properties:\n      projectId: ${example.id}\n      features:\n        testplans: disabled\n        artifacts: enabled\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\nNo official documentation available\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: Read, Write, \u0026 Manage\n\n\n## Import\n\nAzure DevOps feature settings can be imported using the project id, e.g.\n\n```sh\n $ pulumi import azuredevops:index/projectFeatures:ProjectFeatures example 00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "features": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Defines the status (`enabled`, `disabled`) of the project features.  \nValid features `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`\n\n\u003e **NOTE:**\n\u003e It's possible to define project features both within the `azuredevops.ProjectFeatures` resource and\n\u003e via the `features` block by using the `azuredevops.Project` resource.\n\u003e However it's not possible to use both methods to manage features, since there'll be conflicts.\n"
                },
                "projectId": {
                    "type": "string"
                }
            },
            "required": [
                "features",
                "projectId"
            ],
            "inputProperties": {
                "features": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Defines the status (`enabled`, `disabled`) of the project features.  \nValid features `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`\n\n\u003e **NOTE:**\n\u003e It's possible to define project features both within the `azuredevops.ProjectFeatures` resource and\n\u003e via the `features` block by using the `azuredevops.Project` resource.\n\u003e However it's not possible to use both methods to manage features, since there'll be conflicts.\n"
                },
                "projectId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "features",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectFeatures resources.\n",
                "properties": {
                    "features": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Defines the status (`enabled`, `disabled`) of the project features.  \nValid features `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`\n\n\u003e **NOTE:**\n\u003e It's possible to define project features both within the `azuredevops.ProjectFeatures` resource and\n\u003e via the `features` block by using the `azuredevops.Project` resource.\n\u003e However it's not possible to use both methods to manage features, since there'll be conflicts.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Core/projectFeatures:ProjectFeatures"
                }
            ]
        },
        "azuredevops:index/projectPermissions:ProjectPermissions": {
            "description": "Manages permissions for a AzureDevOps project\n\n\u003e **Note** Permissions can be assigned to group principals and not to single user principals.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = new azuredevops.Project(\"example\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst example-readers = azuredevops.getGroupOutput({\n    projectId: example.id,\n    name: \"Readers\",\n});\nconst example_permission = new azuredevops.ProjectPermissions(\"example-permission\", {\n    projectId: example.id,\n    principal: example_readers.apply(example_readers =\u003e example_readers.id),\n    permissions: {\n        DELETE: \"Deny\",\n        EDIT_BUILD_STATUS: \"NotSet\",\n        WORK_ITEM_MOVE: \"Allow\",\n        DELETE_TEST_RESULTS: \"Deny\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.Project(\"example\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_readers = azuredevops.get_group_output(project_id=example.id,\n    name=\"Readers\")\nexample_permission = azuredevops.ProjectPermissions(\"example-permission\",\n    project_id=example.id,\n    principal=example_readers.id,\n    permissions={\n        \"DELETE\": \"Deny\",\n        \"EDIT_BUILD_STATUS\": \"NotSet\",\n        \"WORK_ITEM_MOVE\": \"Allow\",\n        \"DELETE_TEST_RESULTS\": \"Deny\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureDevOps.Project(\"example\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var example_readers = AzureDevOps.GetGroup.Invoke(new()\n    {\n        ProjectId = example.Id,\n        Name = \"Readers\",\n    });\n\n    var example_permission = new AzureDevOps.ProjectPermissions(\"example-permission\", new()\n    {\n        ProjectId = example.Id,\n        Principal = example_readers.Apply(example_readers =\u003e example_readers.Apply(getGroupResult =\u003e getGroupResult.Id)),\n        Permissions = \n        {\n            { \"DELETE\", \"Deny\" },\n            { \"EDIT_BUILD_STATUS\", \"NotSet\" },\n            { \"WORK_ITEM_MOVE\", \"Allow\" },\n            { \"DELETE_TEST_RESULTS\", \"Deny\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuredevops.NewProject(ctx, \"example\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample_readers := azuredevops.LookupGroupOutput(ctx, azuredevops.GetGroupOutputArgs{\n\t\t\tProjectId: example.ID(),\n\t\t\tName:      pulumi.String(\"Readers\"),\n\t\t}, nil)\n\t\t_, err = azuredevops.NewProjectPermissions(ctx, \"example-permission\", \u0026azuredevops.ProjectPermissionsArgs{\n\t\t\tProjectId: example.ID(),\n\t\t\tPrincipal: example_readers.ApplyT(func(example_readers azuredevops.GetGroupResult) (*string, error) {\n\t\t\t\treturn \u0026example_readers.Id, nil\n\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"DELETE\":              pulumi.String(\"Deny\"),\n\t\t\t\t\"EDIT_BUILD_STATUS\":   pulumi.String(\"NotSet\"),\n\t\t\t\t\"WORK_ITEM_MOVE\":      pulumi.String(\"Allow\"),\n\t\t\t\t\"DELETE_TEST_RESULTS\": pulumi.String(\"Deny\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetGroupArgs;\nimport com.pulumi.azuredevops.ProjectPermissions;\nimport com.pulumi.azuredevops.ProjectPermissionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Project(\"example\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        final var example-readers = AzuredevopsFunctions.getGroup(GetGroupArgs.builder()\n            .projectId(example.id())\n            .name(\"Readers\")\n            .build());\n\n        var example_permission = new ProjectPermissions(\"example-permission\", ProjectPermissionsArgs.builder()        \n            .projectId(example.id())\n            .principal(example_readers.applyValue(example_readers -\u003e example_readers.id()))\n            .permissions(Map.ofEntries(\n                Map.entry(\"DELETE\", \"Deny\"),\n                Map.entry(\"EDIT_BUILD_STATUS\", \"NotSet\"),\n                Map.entry(\"WORK_ITEM_MOVE\", \"Allow\"),\n                Map.entry(\"DELETE_TEST_RESULTS\", \"Deny\")\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  example-permission:\n    type: azuredevops:ProjectPermissions\n    properties:\n      projectId: ${example.id}\n      principal: ${[\"example-readers\"].id}\n      permissions:\n        DELETE: Deny\n        EDIT_BUILD_STATUS: NotSet\n        WORK_ITEM_MOVE: Allow\n        DELETE_TEST_RESULTS: Deny\nvariables:\n  example-readers:\n    fn::invoke:\n      Function: azuredevops:getGroup\n      Arguments:\n        projectId: ${example.id}\n        name: Readers\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 7.0 - Security](https://docs.microsoft.com/en-us/rest/api/azure/devops/security/?view=azure-devops-rest-7.0)\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: vso.security_manage - Grants the ability to read, write, and manage security permissions.\n\n\n## Import\n\nThe resource does not support import. ",
            "properties": {
                "permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "the permissions to assign. The following permissions are available\n\n| Permission                   | Description                                  |\n|------------------------------|----------------------------------------------|\n| GENERIC_READ                 | View project-level information               |\n| GENERIC_WRITE                | Edit project-level information               |\n| DELETE                       | Delete team project                          |\n| PUBLISH_TEST_RESULTS         | Create test runs                             |\n| ADMINISTER_BUILD             | Administer a build                           |\n| START_BUILD                  | Start a build                                |\n| EDIT_BUILD_STATUS            | Edit build quality                           |\n| UPDATE_BUILD                 | Write to build operational store             |\n| DELETE_TEST_RESULTS          | Delete test runs                             |\n| VIEW_TEST_RESULTS            | View test runs                               |\n| MANAGE_TEST_ENVIRONMENTS     | Manage test environments                     |\n| MANAGE_TEST_CONFIGURATIONS   | Manage test configurations                   |\n| WORK_ITEM_DELETE             | Delete and restore work items                |\n| WORK_ITEM_MOVE               | Move work items out of this project          |\n| WORK_ITEM_PERMANENTLY_DELETE | Permanently delete work items                |\n| RENAME                       | Rename team project                          |\n| MANAGE_PROPERTIES            | Manage project properties                    |\n| MANAGE_SYSTEM_PROPERTIES     | Manage system project properties             |\n| BYPASS_PROPERTY_CACHE        | Bypass project property cache                |\n| BYPASS_RULES                 | Bypass rules on work item updates            |\n| SUPPRESS_NOTIFICATIONS       | Suppress notifications for work item updates |\n| UPDATE_VISIBILITY            | Update project visibility                    |\n| CHANGE_PROCESS               | Change process of team project.              |\n| AGILETOOLS_BACKLOG           | Agile backlog management.                    |\n| AGILETOOLS_PLANS             | Agile plans.                                 |\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The **group** principal to assign the permissions.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project to assign the permissions.\n"
                },
                "replace": {
                    "type": "boolean",
                    "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`\n"
                }
            },
            "required": [
                "permissions",
                "principal",
                "projectId"
            ],
            "inputProperties": {
                "permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "the permissions to assign. The following permissions are available\n\n| Permission                   | Description                                  |\n|------------------------------|----------------------------------------------|\n| GENERIC_READ                 | View project-level information               |\n| GENERIC_WRITE                | Edit project-level information               |\n| DELETE                       | Delete team project                          |\n| PUBLISH_TEST_RESULTS         | Create test runs                             |\n| ADMINISTER_BUILD             | Administer a build                           |\n| START_BUILD                  | Start a build                                |\n| EDIT_BUILD_STATUS            | Edit build quality                           |\n| UPDATE_BUILD                 | Write to build operational store             |\n| DELETE_TEST_RESULTS          | Delete test runs                             |\n| VIEW_TEST_RESULTS            | View test runs                               |\n| MANAGE_TEST_ENVIRONMENTS     | Manage test environments                     |\n| MANAGE_TEST_CONFIGURATIONS   | Manage test configurations                   |\n| WORK_ITEM_DELETE             | Delete and restore work items                |\n| WORK_ITEM_MOVE               | Move work items out of this project          |\n| WORK_ITEM_PERMANENTLY_DELETE | Permanently delete work items                |\n| RENAME                       | Rename team project                          |\n| MANAGE_PROPERTIES            | Manage project properties                    |\n| MANAGE_SYSTEM_PROPERTIES     | Manage system project properties             |\n| BYPASS_PROPERTY_CACHE        | Bypass project property cache                |\n| BYPASS_RULES                 | Bypass rules on work item updates            |\n| SUPPRESS_NOTIFICATIONS       | Suppress notifications for work item updates |\n| UPDATE_VISIBILITY            | Update project visibility                    |\n| CHANGE_PROCESS               | Change process of team project.              |\n| AGILETOOLS_BACKLOG           | Agile backlog management.                    |\n| AGILETOOLS_PLANS             | Agile plans.                                 |\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The **group** principal to assign the permissions.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project to assign the permissions.\n",
                    "willReplaceOnChanges": true
                },
                "replace": {
                    "type": "boolean",
                    "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`\n"
                }
            },
            "requiredInputs": [
                "permissions",
                "principal",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectPermissions resources.\n",
                "properties": {
                    "permissions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "the permissions to assign. The following permissions are available\n\n| Permission                   | Description                                  |\n|------------------------------|----------------------------------------------|\n| GENERIC_READ                 | View project-level information               |\n| GENERIC_WRITE                | Edit project-level information               |\n| DELETE                       | Delete team project                          |\n| PUBLISH_TEST_RESULTS         | Create test runs                             |\n| ADMINISTER_BUILD             | Administer a build                           |\n| START_BUILD                  | Start a build                                |\n| EDIT_BUILD_STATUS            | Edit build quality                           |\n| UPDATE_BUILD                 | Write to build operational store             |\n| DELETE_TEST_RESULTS          | Delete test runs                             |\n| VIEW_TEST_RESULTS            | View test runs                               |\n| MANAGE_TEST_ENVIRONMENTS     | Manage test environments                     |\n| MANAGE_TEST_CONFIGURATIONS   | Manage test configurations                   |\n| WORK_ITEM_DELETE             | Delete and restore work items                |\n| WORK_ITEM_MOVE               | Move work items out of this project          |\n| WORK_ITEM_PERMANENTLY_DELETE | Permanently delete work items                |\n| RENAME                       | Rename team project                          |\n| MANAGE_PROPERTIES            | Manage project properties                    |\n| MANAGE_SYSTEM_PROPERTIES     | Manage system project properties             |\n| BYPASS_PROPERTY_CACHE        | Bypass project property cache                |\n| BYPASS_RULES                 | Bypass rules on work item updates            |\n| SUPPRESS_NOTIFICATIONS       | Suppress notifications for work item updates |\n| UPDATE_VISIBILITY            | Update project visibility                    |\n| CHANGE_PROCESS               | Change process of team project.              |\n| AGILETOOLS_BACKLOG           | Agile backlog management.                    |\n| AGILETOOLS_PLANS             | Agile plans.                                 |\n"
                    },
                    "principal": {
                        "type": "string",
                        "description": "The **group** principal to assign the permissions.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project to assign the permissions.\n",
                        "willReplaceOnChanges": true
                    },
                    "replace": {
                        "type": "boolean",
                        "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/projectPipelineSettings:ProjectPipelineSettings": {
            "description": "Manages Pipeline Settings for Azure DevOps projects\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleProjectPipelineSettings = new azuredevops.ProjectPipelineSettings(\"exampleProjectPipelineSettings\", {\n    projectId: exampleProject.id,\n    enforceJobScope: true,\n    enforceReferencedRepoScopedToken: false,\n    enforceSettableVar: true,\n    publishPipelineMetadata: false,\n    statusBadgesArePrivate: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_project_pipeline_settings = azuredevops.ProjectPipelineSettings(\"exampleProjectPipelineSettings\",\n    project_id=example_project.id,\n    enforce_job_scope=True,\n    enforce_referenced_repo_scoped_token=False,\n    enforce_settable_var=True,\n    publish_pipeline_metadata=False,\n    status_badges_are_private=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleProjectPipelineSettings = new AzureDevOps.ProjectPipelineSettings(\"exampleProjectPipelineSettings\", new()\n    {\n        ProjectId = exampleProject.Id,\n        EnforceJobScope = true,\n        EnforceReferencedRepoScopedToken = false,\n        EnforceSettableVar = true,\n        PublishPipelineMetadata = false,\n        StatusBadgesArePrivate = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewProjectPipelineSettings(ctx, \"exampleProjectPipelineSettings\", \u0026azuredevops.ProjectPipelineSettingsArgs{\n\t\t\tProjectId:                        exampleProject.ID(),\n\t\t\tEnforceJobScope:                  pulumi.Bool(true),\n\t\t\tEnforceReferencedRepoScopedToken: pulumi.Bool(false),\n\t\t\tEnforceSettableVar:               pulumi.Bool(true),\n\t\t\tPublishPipelineMetadata:          pulumi.Bool(false),\n\t\t\tStatusBadgesArePrivate:           pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ProjectPipelineSettings;\nimport com.pulumi.azuredevops.ProjectPipelineSettingsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleProjectPipelineSettings = new ProjectPipelineSettings(\"exampleProjectPipelineSettings\", ProjectPipelineSettingsArgs.builder()        \n            .projectId(exampleProject.id())\n            .enforceJobScope(true)\n            .enforceReferencedRepoScopedToken(false)\n            .enforceSettableVar(true)\n            .publishPipelineMetadata(false)\n            .statusBadgesArePrivate(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleProjectPipelineSettings:\n    type: azuredevops:ProjectPipelineSettings\n    properties:\n      projectId: ${exampleProject.id}\n      enforceJobScope: true\n      enforceReferencedRepoScopedToken: false\n      enforceSettableVar: true\n      publishPipelineMetadata: false\n      statusBadgesArePrivate: true\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\nNo official documentation available\n\n## PAT Permissions Required\n\n- Full Access\n\n\n## Import\n\nAzure DevOps feature settings can be imported using the project id, e.g.\n\n```sh\n $ pulumi import azuredevops:index/projectPipelineSettings:ProjectPipelineSettings example 00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "enforceJobScope": {
                    "type": "boolean",
                    "description": "Limit job authorization scope to current project for non-release pipelines.\n"
                },
                "enforceJobScopeForRelease": {
                    "type": "boolean",
                    "description": "Limit job authorization scope to current project for release pipelines.\n\n\u003e **NOTE:**\n\u003e The settings at the organization will override settings specified on the project.\n\u003e For example, if `enforce_job_scope` is true at the organization, the `azuredevops.ProjectPipelineSettings` resource cannot set it to false.\n\u003e In this scenario, the plan will always show that the resource is trying to change `enforce_job_scope` from `true` to `false`.\n"
                },
                "enforceReferencedRepoScopedToken": {
                    "type": "boolean",
                    "description": "Protect access to repositories in YAML pipelines.\n"
                },
                "enforceSettableVar": {
                    "type": "boolean",
                    "description": "Limit variables that can be set at queue time.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The `id` of the project for which the project pipeline settings will be managed.\n"
                },
                "publishPipelineMetadata": {
                    "type": "boolean",
                    "description": "Publish metadata from pipelines.\n"
                },
                "statusBadgesArePrivate": {
                    "type": "boolean",
                    "description": "Disable anonymous access to badges.\n"
                }
            },
            "required": [
                "enforceJobScope",
                "enforceJobScopeForRelease",
                "enforceReferencedRepoScopedToken",
                "enforceSettableVar",
                "projectId",
                "publishPipelineMetadata",
                "statusBadgesArePrivate"
            ],
            "inputProperties": {
                "enforceJobScope": {
                    "type": "boolean",
                    "description": "Limit job authorization scope to current project for non-release pipelines.\n"
                },
                "enforceJobScopeForRelease": {
                    "type": "boolean",
                    "description": "Limit job authorization scope to current project for release pipelines.\n\n\u003e **NOTE:**\n\u003e The settings at the organization will override settings specified on the project.\n\u003e For example, if `enforce_job_scope` is true at the organization, the `azuredevops.ProjectPipelineSettings` resource cannot set it to false.\n\u003e In this scenario, the plan will always show that the resource is trying to change `enforce_job_scope` from `true` to `false`.\n"
                },
                "enforceReferencedRepoScopedToken": {
                    "type": "boolean",
                    "description": "Protect access to repositories in YAML pipelines.\n"
                },
                "enforceSettableVar": {
                    "type": "boolean",
                    "description": "Limit variables that can be set at queue time.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The `id` of the project for which the project pipeline settings will be managed.\n",
                    "willReplaceOnChanges": true
                },
                "publishPipelineMetadata": {
                    "type": "boolean",
                    "description": "Publish metadata from pipelines.\n"
                },
                "statusBadgesArePrivate": {
                    "type": "boolean",
                    "description": "Disable anonymous access to badges.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectPipelineSettings resources.\n",
                "properties": {
                    "enforceJobScope": {
                        "type": "boolean",
                        "description": "Limit job authorization scope to current project for non-release pipelines.\n"
                    },
                    "enforceJobScopeForRelease": {
                        "type": "boolean",
                        "description": "Limit job authorization scope to current project for release pipelines.\n\n\u003e **NOTE:**\n\u003e The settings at the organization will override settings specified on the project.\n\u003e For example, if `enforce_job_scope` is true at the organization, the `azuredevops.ProjectPipelineSettings` resource cannot set it to false.\n\u003e In this scenario, the plan will always show that the resource is trying to change `enforce_job_scope` from `true` to `false`.\n"
                    },
                    "enforceReferencedRepoScopedToken": {
                        "type": "boolean",
                        "description": "Protect access to repositories in YAML pipelines.\n"
                    },
                    "enforceSettableVar": {
                        "type": "boolean",
                        "description": "Limit variables that can be set at queue time.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The `id` of the project for which the project pipeline settings will be managed.\n",
                        "willReplaceOnChanges": true
                    },
                    "publishPipelineMetadata": {
                        "type": "boolean",
                        "description": "Publish metadata from pipelines.\n"
                    },
                    "statusBadgesArePrivate": {
                        "type": "boolean",
                        "description": "Disable anonymous access to badges.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/queue:Queue": {
            "description": "Manages an agent queue within Azure DevOps. In the UI, this is equivalent to adding an\nOrganization defined pool to a project.\n\nThe created queue is not authorized for use by all pipelines in the project. However,\nthe `azuredevops.ResourceAuthorization` resource can be used to grant authorization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Creating a Queue from an organization-level pool\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {});\nconst examplePool = azuredevops.getPool({\n    name: \"example-pool\",\n});\nconst exampleQueue = new azuredevops.Queue(\"exampleQueue\", {\n    projectId: exampleProject.id,\n    agentPoolId: examplePool.then(examplePool =\u003e examplePool.id),\n});\n// Grant access to queue to all pipelines in the project\nconst exampleResourceAuthorization = new azuredevops.ResourceAuthorization(\"exampleResourceAuthorization\", {\n    projectId: exampleProject.id,\n    resourceId: exampleQueue.id,\n    type: \"queue\",\n    authorized: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\")\nexample_pool = azuredevops.get_pool(name=\"example-pool\")\nexample_queue = azuredevops.Queue(\"exampleQueue\",\n    project_id=example_project.id,\n    agent_pool_id=example_pool.id)\n# Grant access to queue to all pipelines in the project\nexample_resource_authorization = azuredevops.ResourceAuthorization(\"exampleResourceAuthorization\",\n    project_id=example_project.id,\n    resource_id=example_queue.id,\n    type=\"queue\",\n    authorized=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\");\n\n    var examplePool = AzureDevOps.GetPool.Invoke(new()\n    {\n        Name = \"example-pool\",\n    });\n\n    var exampleQueue = new AzureDevOps.Queue(\"exampleQueue\", new()\n    {\n        ProjectId = exampleProject.Id,\n        AgentPoolId = examplePool.Apply(getPoolResult =\u003e getPoolResult.Id),\n    });\n\n    // Grant access to queue to all pipelines in the project\n    var exampleResourceAuthorization = new AzureDevOps.ResourceAuthorization(\"exampleResourceAuthorization\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ResourceId = exampleQueue.Id,\n        Type = \"queue\",\n        Authorized = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texamplePool, err := azuredevops.LookupPool(ctx, \u0026azuredevops.LookupPoolArgs{\n\t\t\tName: \"example-pool\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleQueue, err := azuredevops.NewQueue(ctx, \"exampleQueue\", \u0026azuredevops.QueueArgs{\n\t\t\tProjectId:   exampleProject.ID(),\n\t\t\tAgentPoolId: *pulumi.String(examplePool.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewResourceAuthorization(ctx, \"exampleResourceAuthorization\", \u0026azuredevops.ResourceAuthorizationArgs{\n\t\t\tProjectId:  exampleProject.ID(),\n\t\t\tResourceId: exampleQueue.ID(),\n\t\t\tType:       pulumi.String(\"queue\"),\n\t\t\tAuthorized: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetPoolArgs;\nimport com.pulumi.azuredevops.Queue;\nimport com.pulumi.azuredevops.QueueArgs;\nimport com.pulumi.azuredevops.ResourceAuthorization;\nimport com.pulumi.azuredevops.ResourceAuthorizationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\");\n\n        final var examplePool = AzuredevopsFunctions.getPool(GetPoolArgs.builder()\n            .name(\"example-pool\")\n            .build());\n\n        var exampleQueue = new Queue(\"exampleQueue\", QueueArgs.builder()        \n            .projectId(exampleProject.id())\n            .agentPoolId(examplePool.applyValue(getPoolResult -\u003e getPoolResult.id()))\n            .build());\n\n        var exampleResourceAuthorization = new ResourceAuthorization(\"exampleResourceAuthorization\", ResourceAuthorizationArgs.builder()        \n            .projectId(exampleProject.id())\n            .resourceId(exampleQueue.id())\n            .type(\"queue\")\n            .authorized(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n  exampleQueue:\n    type: azuredevops:Queue\n    properties:\n      projectId: ${exampleProject.id}\n      agentPoolId: ${examplePool.id}\n  # Grant access to queue to all pipelines in the project\n  exampleResourceAuthorization:\n    type: azuredevops:ResourceAuthorization\n    properties:\n      projectId: ${exampleProject.id}\n      resourceId: ${exampleQueue.id}\n      type: queue\n      authorized: true\nvariables:\n  examplePool:\n    fn::invoke:\n      Function: azuredevops:getPool\n      Arguments:\n        name: example-pool\n```\n{{% /example %}}\n{{% example %}}\n### Creating a Queue at the project level (Organization-level permissions not required)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = azuredevops.getProject({\n    name: \"Example Project\",\n});\nconst exampleQueue = new azuredevops.Queue(\"exampleQueue\", {projectId: exampleProject.then(exampleProject =\u003e exampleProject.id)});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.get_project(name=\"Example Project\")\nexample_queue = azuredevops.Queue(\"exampleQueue\", project_id=example_project.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = AzureDevOps.GetProject.Invoke(new()\n    {\n        Name = \"Example Project\",\n    });\n\n    var exampleQueue = new AzureDevOps.Queue(\"exampleQueue\", new()\n    {\n        ProjectId = exampleProject.Apply(getProjectResult =\u003e getProjectResult.Id),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.LookupProject(ctx, \u0026azuredevops.LookupProjectArgs{\n\t\t\tName: pulumi.StringRef(\"Example Project\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewQueue(ctx, \"exampleQueue\", \u0026azuredevops.QueueArgs{\n\t\t\tProjectId: *pulumi.String(exampleProject.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetProjectArgs;\nimport com.pulumi.azuredevops.Queue;\nimport com.pulumi.azuredevops.QueueArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleProject = AzuredevopsFunctions.getProject(GetProjectArgs.builder()\n            .name(\"Example Project\")\n            .build());\n\n        var exampleQueue = new Queue(\"exampleQueue\", QueueArgs.builder()        \n            .projectId(exampleProject.applyValue(getProjectResult -\u003e getProjectResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleQueue:\n    type: azuredevops:Queue\n    properties:\n      projectId: ${exampleProject.id}\nvariables:\n  exampleProject:\n    fn::invoke:\n      Function: azuredevops:getProject\n      Arguments:\n        name: Example Project\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Agent Queues](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/queues?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Agent Pools can be imported using the project ID and agent queue ID, e.g.\n\n```sh\n $ pulumi import azuredevops:index/queue:Queue example 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "agentPoolId": {
                    "type": "integer",
                    "description": "The ID of the organization agent pool. Conflicts with `name`.\n\n\u003e **NOTE:**\nOne of `name` or `agent_pool_id` must be specified, but not both.\nWhen `agent_pool_id` is specified, the agent queue name will be derived from the agent pool name.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the agent queue. Defaults to the ID of the agent pool. Conflicts with `agent_pool_id`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which to create the resource.\n"
                }
            },
            "required": [
                "agentPoolId",
                "name",
                "projectId"
            ],
            "inputProperties": {
                "agentPoolId": {
                    "type": "integer",
                    "description": "The ID of the organization agent pool. Conflicts with `name`.\n\n\u003e **NOTE:**\nOne of `name` or `agent_pool_id` must be specified, but not both.\nWhen `agent_pool_id` is specified, the agent queue name will be derived from the agent pool name.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the agent queue. Defaults to the ID of the agent pool. Conflicts with `agent_pool_id`.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which to create the resource.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Queue resources.\n",
                "properties": {
                    "agentPoolId": {
                        "type": "integer",
                        "description": "The ID of the organization agent pool. Conflicts with `name`.\n\n\u003e **NOTE:**\nOne of `name` or `agent_pool_id` must be specified, but not both.\nWhen `agent_pool_id` is specified, the agent queue name will be derived from the agent pool name.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the agent queue. Defaults to the ID of the agent pool. Conflicts with `agent_pool_id`.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which to create the resource.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Agent/queue:Queue"
                }
            ]
        },
        "azuredevops:index/repositoryPolicyAuthorEmailPattern:RepositoryPolicyAuthorEmailPattern": {
            "description": "Manage author email pattern repository policy within Azure DevOps project.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleGit = new azuredevops.Git(\"exampleGit\", {\n    projectId: exampleProject.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst exampleRepositoryPolicyAuthorEmailPattern = new azuredevops.RepositoryPolicyAuthorEmailPattern(\"exampleRepositoryPolicyAuthorEmailPattern\", {\n    projectId: exampleProject.id,\n    enabled: true,\n    blocking: true,\n    authorEmailPatterns: [\n        \"user1@test.com\",\n        \"user2@test.com\",\n    ],\n    repositoryIds: [exampleGit.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_git = azuredevops.Git(\"exampleGit\",\n    project_id=example_project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nexample_repository_policy_author_email_pattern = azuredevops.RepositoryPolicyAuthorEmailPattern(\"exampleRepositoryPolicyAuthorEmailPattern\",\n    project_id=example_project.id,\n    enabled=True,\n    blocking=True,\n    author_email_patterns=[\n        \"user1@test.com\",\n        \"user2@test.com\",\n    ],\n    repository_ids=[example_git.id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleGit = new AzureDevOps.Git(\"exampleGit\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n        {\n            InitType = \"Clean\",\n        },\n    });\n\n    var exampleRepositoryPolicyAuthorEmailPattern = new AzureDevOps.RepositoryPolicyAuthorEmailPattern(\"exampleRepositoryPolicyAuthorEmailPattern\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Enabled = true,\n        Blocking = true,\n        AuthorEmailPatterns = new[]\n        {\n            \"user1@test.com\",\n            \"user2@test.com\",\n        },\n        RepositoryIds = new[]\n        {\n            exampleGit.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGit, err := azuredevops.NewGit(ctx, \"exampleGit\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tInitialization: \u0026azuredevops.GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewRepositoryPolicyAuthorEmailPattern(ctx, \"exampleRepositoryPolicyAuthorEmailPattern\", \u0026azuredevops.RepositoryPolicyAuthorEmailPatternArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t\tAuthorEmailPatterns: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"user1@test.com\"),\n\t\t\t\tpulumi.String(\"user2@test.com\"),\n\t\t\t},\n\t\t\tRepositoryIds: pulumi.StringArray{\n\t\t\t\texampleGit.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.Git;\nimport com.pulumi.azuredevops.GitArgs;\nimport com.pulumi.azuredevops.inputs.GitInitializationArgs;\nimport com.pulumi.azuredevops.RepositoryPolicyAuthorEmailPattern;\nimport com.pulumi.azuredevops.RepositoryPolicyAuthorEmailPatternArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleGit = new Git(\"exampleGit\", GitArgs.builder()        \n            .projectId(exampleProject.id())\n            .initialization(GitInitializationArgs.builder()\n                .initType(\"Clean\")\n                .build())\n            .build());\n\n        var exampleRepositoryPolicyAuthorEmailPattern = new RepositoryPolicyAuthorEmailPattern(\"exampleRepositoryPolicyAuthorEmailPattern\", RepositoryPolicyAuthorEmailPatternArgs.builder()        \n            .projectId(exampleProject.id())\n            .enabled(true)\n            .blocking(true)\n            .authorEmailPatterns(            \n                \"user1@test.com\",\n                \"user2@test.com\")\n            .repositoryIds(exampleGit.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleGit:\n    type: azuredevops:Git\n    properties:\n      projectId: ${exampleProject.id}\n      initialization:\n        initType: Clean\n  exampleRepositoryPolicyAuthorEmailPattern:\n    type: azuredevops:RepositoryPolicyAuthorEmailPattern\n    properties:\n      projectId: ${exampleProject.id}\n      enabled: true\n      blocking: true\n      authorEmailPatterns:\n        - user1@test.com\n        - user2@test.com\n      repositoryIds:\n        - ${exampleGit.id}\n```\n{{% /example %}}\n{{% /examples %}}\n## Set project level repository policy\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleRepositoryPolicyAuthorEmailPattern = new azuredevops.RepositoryPolicyAuthorEmailPattern(\"exampleRepositoryPolicyAuthorEmailPattern\", {\n    projectId: exampleProject.id,\n    enabled: true,\n    blocking: true,\n    authorEmailPatterns: [\n        \"user1@test.com\",\n        \"user2@test.com\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_repository_policy_author_email_pattern = azuredevops.RepositoryPolicyAuthorEmailPattern(\"exampleRepositoryPolicyAuthorEmailPattern\",\n    project_id=example_project.id,\n    enabled=True,\n    blocking=True,\n    author_email_patterns=[\n        \"user1@test.com\",\n        \"user2@test.com\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleRepositoryPolicyAuthorEmailPattern = new AzureDevOps.RepositoryPolicyAuthorEmailPattern(\"exampleRepositoryPolicyAuthorEmailPattern\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Enabled = true,\n        Blocking = true,\n        AuthorEmailPatterns = new[]\n        {\n            \"user1@test.com\",\n            \"user2@test.com\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewRepositoryPolicyAuthorEmailPattern(ctx, \"exampleRepositoryPolicyAuthorEmailPattern\", \u0026azuredevops.RepositoryPolicyAuthorEmailPatternArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t\tAuthorEmailPatterns: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"user1@test.com\"),\n\t\t\t\tpulumi.String(\"user2@test.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.RepositoryPolicyAuthorEmailPattern;\nimport com.pulumi.azuredevops.RepositoryPolicyAuthorEmailPatternArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleRepositoryPolicyAuthorEmailPattern = new RepositoryPolicyAuthorEmailPattern(\"exampleRepositoryPolicyAuthorEmailPattern\", RepositoryPolicyAuthorEmailPatternArgs.builder()        \n            .projectId(exampleProject.id())\n            .enabled(true)\n            .blocking(true)\n            .authorEmailPatterns(            \n                \"user1@test.com\",\n                \"user2@test.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleRepositoryPolicyAuthorEmailPattern:\n    type: azuredevops:RepositoryPolicyAuthorEmailPattern\n    properties:\n      projectId: ${exampleProject.id}\n      enabled: true\n      blocking: true\n      authorEmailPatterns:\n        - user1@test.com\n        - user2@test.com\n```\n\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Policy Configurations](https://docs.microsoft.com/en-us/rest/api/azure/devops/policy/configurations?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Branch Policies can be imported using the project ID and policy configuration ID\n\n```sh\n $ pulumi import azuredevops:index/repositoryPolicyAuthorEmailPattern:RepositoryPolicyAuthorEmailPattern example 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "authorEmailPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Block pushes with a commit author email that does not match the patterns. You can specify exact emails or use wildcards. \nEmail patterns prefixed with \"!\" are excluded. Order is important.\n"
                },
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "repositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                }
            },
            "required": [
                "authorEmailPatterns",
                "projectId"
            ],
            "inputProperties": {
                "authorEmailPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Block pushes with a commit author email that does not match the patterns. You can specify exact emails or use wildcards. \nEmail patterns prefixed with \"!\" are excluded. Order is important.\n"
                },
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n",
                    "willReplaceOnChanges": true
                },
                "repositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                }
            },
            "requiredInputs": [
                "authorEmailPatterns",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryPolicyAuthorEmailPattern resources.\n",
                "properties": {
                    "authorEmailPatterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Block pushes with a commit author email that does not match the patterns. You can specify exact emails or use wildcards. \nEmail patterns prefixed with \"!\" are excluded. Order is important.\n"
                    },
                    "blocking": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the policy will be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "repositoryIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/repositoryPolicyCaseEnforcement:RepositoryPolicyCaseEnforcement": {
            "description": "Manages a case enforcement repository policy within Azure DevOps project.   \n\n\u003e If both project and project policy are enabled, the project policy has high priority.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleGit = new azuredevops.Git(\"exampleGit\", {\n    projectId: exampleProject.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst exampleRepositoryPolicyCaseEnforcement = new azuredevops.RepositoryPolicyCaseEnforcement(\"exampleRepositoryPolicyCaseEnforcement\", {\n    projectId: exampleProject.id,\n    enabled: true,\n    blocking: true,\n    enforceConsistentCase: true,\n    repositoryIds: [exampleGit.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_git = azuredevops.Git(\"exampleGit\",\n    project_id=example_project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nexample_repository_policy_case_enforcement = azuredevops.RepositoryPolicyCaseEnforcement(\"exampleRepositoryPolicyCaseEnforcement\",\n    project_id=example_project.id,\n    enabled=True,\n    blocking=True,\n    enforce_consistent_case=True,\n    repository_ids=[example_git.id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleGit = new AzureDevOps.Git(\"exampleGit\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n        {\n            InitType = \"Clean\",\n        },\n    });\n\n    var exampleRepositoryPolicyCaseEnforcement = new AzureDevOps.RepositoryPolicyCaseEnforcement(\"exampleRepositoryPolicyCaseEnforcement\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Enabled = true,\n        Blocking = true,\n        EnforceConsistentCase = true,\n        RepositoryIds = new[]\n        {\n            exampleGit.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGit, err := azuredevops.NewGit(ctx, \"exampleGit\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tInitialization: \u0026azuredevops.GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewRepositoryPolicyCaseEnforcement(ctx, \"exampleRepositoryPolicyCaseEnforcement\", \u0026azuredevops.RepositoryPolicyCaseEnforcementArgs{\n\t\t\tProjectId:             exampleProject.ID(),\n\t\t\tEnabled:               pulumi.Bool(true),\n\t\t\tBlocking:              pulumi.Bool(true),\n\t\t\tEnforceConsistentCase: pulumi.Bool(true),\n\t\t\tRepositoryIds: pulumi.StringArray{\n\t\t\t\texampleGit.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.Git;\nimport com.pulumi.azuredevops.GitArgs;\nimport com.pulumi.azuredevops.inputs.GitInitializationArgs;\nimport com.pulumi.azuredevops.RepositoryPolicyCaseEnforcement;\nimport com.pulumi.azuredevops.RepositoryPolicyCaseEnforcementArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleGit = new Git(\"exampleGit\", GitArgs.builder()        \n            .projectId(exampleProject.id())\n            .initialization(GitInitializationArgs.builder()\n                .initType(\"Clean\")\n                .build())\n            .build());\n\n        var exampleRepositoryPolicyCaseEnforcement = new RepositoryPolicyCaseEnforcement(\"exampleRepositoryPolicyCaseEnforcement\", RepositoryPolicyCaseEnforcementArgs.builder()        \n            .projectId(exampleProject.id())\n            .enabled(true)\n            .blocking(true)\n            .enforceConsistentCase(true)\n            .repositoryIds(exampleGit.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleGit:\n    type: azuredevops:Git\n    properties:\n      projectId: ${exampleProject.id}\n      initialization:\n        initType: Clean\n  exampleRepositoryPolicyCaseEnforcement:\n    type: azuredevops:RepositoryPolicyCaseEnforcement\n    properties:\n      projectId: ${exampleProject.id}\n      enabled: true\n      blocking: true\n      enforceConsistentCase: true\n      repositoryIds:\n        - ${exampleGit.id}\n```\n\n# Set project level repository policy\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleRepositoryPolicyCaseEnforcement = new azuredevops.RepositoryPolicyCaseEnforcement(\"exampleRepositoryPolicyCaseEnforcement\", {\n    projectId: exampleProject.id,\n    enabled: true,\n    blocking: true,\n    enforceConsistentCase: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_repository_policy_case_enforcement = azuredevops.RepositoryPolicyCaseEnforcement(\"exampleRepositoryPolicyCaseEnforcement\",\n    project_id=example_project.id,\n    enabled=True,\n    blocking=True,\n    enforce_consistent_case=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleRepositoryPolicyCaseEnforcement = new AzureDevOps.RepositoryPolicyCaseEnforcement(\"exampleRepositoryPolicyCaseEnforcement\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Enabled = true,\n        Blocking = true,\n        EnforceConsistentCase = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewRepositoryPolicyCaseEnforcement(ctx, \"exampleRepositoryPolicyCaseEnforcement\", \u0026azuredevops.RepositoryPolicyCaseEnforcementArgs{\n\t\t\tProjectId:             exampleProject.ID(),\n\t\t\tEnabled:               pulumi.Bool(true),\n\t\t\tBlocking:              pulumi.Bool(true),\n\t\t\tEnforceConsistentCase: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.RepositoryPolicyCaseEnforcement;\nimport com.pulumi.azuredevops.RepositoryPolicyCaseEnforcementArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleRepositoryPolicyCaseEnforcement = new RepositoryPolicyCaseEnforcement(\"exampleRepositoryPolicyCaseEnforcement\", RepositoryPolicyCaseEnforcementArgs.builder()        \n            .projectId(exampleProject.id())\n            .enabled(true)\n            .blocking(true)\n            .enforceConsistentCase(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleRepositoryPolicyCaseEnforcement:\n    type: azuredevops:RepositoryPolicyCaseEnforcement\n    properties:\n      projectId: ${exampleProject.id}\n      enabled: true\n      blocking: true\n      enforceConsistentCase: true\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Policy Configurations](https://docs.microsoft.com/en-us/rest/api/azure/devops/policy/configurations?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps repository policies can be imported using the projectID/policyID or projectName/policyID\n\n```sh\n $ pulumi import azuredevops:index/repositoryPolicyCaseEnforcement:RepositoryPolicyCaseEnforcement example 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "enforceConsistentCase": {
                    "type": "boolean",
                    "description": "Avoid case-sensitivity conflicts by blocking pushes that change name casing on files, folders, branches, and tags.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "repositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                }
            },
            "required": [
                "enforceConsistentCase",
                "projectId"
            ],
            "inputProperties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "enforceConsistentCase": {
                    "type": "boolean",
                    "description": "Avoid case-sensitivity conflicts by blocking pushes that change name casing on files, folders, branches, and tags.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n",
                    "willReplaceOnChanges": true
                },
                "repositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                }
            },
            "requiredInputs": [
                "enforceConsistentCase",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryPolicyCaseEnforcement resources.\n",
                "properties": {
                    "blocking": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                    },
                    "enforceConsistentCase": {
                        "type": "boolean",
                        "description": "Avoid case-sensitivity conflicts by blocking pushes that change name casing on files, folders, branches, and tags.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the policy will be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "repositoryIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/repositoryPolicyCheckCredentials:RepositoryPolicyCheckCredentials": {
            "description": "Manage a credentials check repository policy within Azure DevOps project. Block pushes that introduce files, folders, or branch names that include platform reserved names or incompatible characters.\n\n\u003e If both project and project policy are enabled, the project policy has high priority.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleGit = new azuredevops.Git(\"exampleGit\", {\n    projectId: exampleProject.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst exampleRepositoryPolicyCheckCredentials = new azuredevops.RepositoryPolicyCheckCredentials(\"exampleRepositoryPolicyCheckCredentials\", {\n    projectId: exampleProject.id,\n    enabled: true,\n    blocking: true,\n    repositoryIds: [exampleGit.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_git = azuredevops.Git(\"exampleGit\",\n    project_id=example_project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nexample_repository_policy_check_credentials = azuredevops.RepositoryPolicyCheckCredentials(\"exampleRepositoryPolicyCheckCredentials\",\n    project_id=example_project.id,\n    enabled=True,\n    blocking=True,\n    repository_ids=[example_git.id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleGit = new AzureDevOps.Git(\"exampleGit\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n        {\n            InitType = \"Clean\",\n        },\n    });\n\n    var exampleRepositoryPolicyCheckCredentials = new AzureDevOps.RepositoryPolicyCheckCredentials(\"exampleRepositoryPolicyCheckCredentials\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Enabled = true,\n        Blocking = true,\n        RepositoryIds = new[]\n        {\n            exampleGit.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGit, err := azuredevops.NewGit(ctx, \"exampleGit\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tInitialization: \u0026azuredevops.GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewRepositoryPolicyCheckCredentials(ctx, \"exampleRepositoryPolicyCheckCredentials\", \u0026azuredevops.RepositoryPolicyCheckCredentialsArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t\tRepositoryIds: pulumi.StringArray{\n\t\t\t\texampleGit.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.Git;\nimport com.pulumi.azuredevops.GitArgs;\nimport com.pulumi.azuredevops.inputs.GitInitializationArgs;\nimport com.pulumi.azuredevops.RepositoryPolicyCheckCredentials;\nimport com.pulumi.azuredevops.RepositoryPolicyCheckCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleGit = new Git(\"exampleGit\", GitArgs.builder()        \n            .projectId(exampleProject.id())\n            .initialization(GitInitializationArgs.builder()\n                .initType(\"Clean\")\n                .build())\n            .build());\n\n        var exampleRepositoryPolicyCheckCredentials = new RepositoryPolicyCheckCredentials(\"exampleRepositoryPolicyCheckCredentials\", RepositoryPolicyCheckCredentialsArgs.builder()        \n            .projectId(exampleProject.id())\n            .enabled(true)\n            .blocking(true)\n            .repositoryIds(exampleGit.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleGit:\n    type: azuredevops:Git\n    properties:\n      projectId: ${exampleProject.id}\n      initialization:\n        initType: Clean\n  exampleRepositoryPolicyCheckCredentials:\n    type: azuredevops:RepositoryPolicyCheckCredentials\n    properties:\n      projectId: ${exampleProject.id}\n      enabled: true\n      blocking: true\n      repositoryIds:\n        - ${exampleGit.id}\n```\n\n# Set project level repository policy\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleRepositoryPolicyCheckCredentials = new azuredevops.RepositoryPolicyCheckCredentials(\"exampleRepositoryPolicyCheckCredentials\", {\n    projectId: exampleProject.id,\n    enabled: true,\n    blocking: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_repository_policy_check_credentials = azuredevops.RepositoryPolicyCheckCredentials(\"exampleRepositoryPolicyCheckCredentials\",\n    project_id=example_project.id,\n    enabled=True,\n    blocking=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleRepositoryPolicyCheckCredentials = new AzureDevOps.RepositoryPolicyCheckCredentials(\"exampleRepositoryPolicyCheckCredentials\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Enabled = true,\n        Blocking = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewRepositoryPolicyCheckCredentials(ctx, \"exampleRepositoryPolicyCheckCredentials\", \u0026azuredevops.RepositoryPolicyCheckCredentialsArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.RepositoryPolicyCheckCredentials;\nimport com.pulumi.azuredevops.RepositoryPolicyCheckCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleRepositoryPolicyCheckCredentials = new RepositoryPolicyCheckCredentials(\"exampleRepositoryPolicyCheckCredentials\", RepositoryPolicyCheckCredentialsArgs.builder()        \n            .projectId(exampleProject.id())\n            .enabled(true)\n            .blocking(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleRepositoryPolicyCheckCredentials:\n    type: azuredevops:RepositoryPolicyCheckCredentials\n    properties:\n      projectId: ${exampleProject.id}\n      enabled: true\n      blocking: true\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Policy Configurations](https://docs.microsoft.com/en-us/rest/api/azure/devops/policy/configurations?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps repository policies can be imported using the projectID/policyID or projectName/policyID\n\n```sh\n $ pulumi import azuredevops:index/repositoryPolicyCheckCredentials:RepositoryPolicyCheckCredentials example 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "repositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                }
            },
            "required": [
                "projectId"
            ],
            "inputProperties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n",
                    "willReplaceOnChanges": true
                },
                "repositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryPolicyCheckCredentials resources.\n",
                "properties": {
                    "blocking": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the policy will be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "repositoryIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/repositoryPolicyFilePathPattern:RepositoryPolicyFilePathPattern": {
            "description": "Manage a file path pattern repository policy within Azure DevOps project.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleGit = new azuredevops.Git(\"exampleGit\", {\n    projectId: exampleProject.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst exampleRepositoryPolicyFilePathPattern = new azuredevops.RepositoryPolicyFilePathPattern(\"exampleRepositoryPolicyFilePathPattern\", {\n    projectId: exampleProject.id,\n    enabled: true,\n    blocking: true,\n    filepathPatterns: [\n        \"*.go\",\n        \"/home/test/*.ts\",\n    ],\n    repositoryIds: [exampleGit.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_git = azuredevops.Git(\"exampleGit\",\n    project_id=example_project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nexample_repository_policy_file_path_pattern = azuredevops.RepositoryPolicyFilePathPattern(\"exampleRepositoryPolicyFilePathPattern\",\n    project_id=example_project.id,\n    enabled=True,\n    blocking=True,\n    filepath_patterns=[\n        \"*.go\",\n        \"/home/test/*.ts\",\n    ],\n    repository_ids=[example_git.id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleGit = new AzureDevOps.Git(\"exampleGit\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n        {\n            InitType = \"Clean\",\n        },\n    });\n\n    var exampleRepositoryPolicyFilePathPattern = new AzureDevOps.RepositoryPolicyFilePathPattern(\"exampleRepositoryPolicyFilePathPattern\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Enabled = true,\n        Blocking = true,\n        FilepathPatterns = new[]\n        {\n            \"*.go\",\n            \"/home/test/*.ts\",\n        },\n        RepositoryIds = new[]\n        {\n            exampleGit.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGit, err := azuredevops.NewGit(ctx, \"exampleGit\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tInitialization: \u0026azuredevops.GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewRepositoryPolicyFilePathPattern(ctx, \"exampleRepositoryPolicyFilePathPattern\", \u0026azuredevops.RepositoryPolicyFilePathPatternArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t\tFilepathPatterns: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"*.go\"),\n\t\t\t\tpulumi.String(\"/home/test/*.ts\"),\n\t\t\t},\n\t\t\tRepositoryIds: pulumi.StringArray{\n\t\t\t\texampleGit.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.Git;\nimport com.pulumi.azuredevops.GitArgs;\nimport com.pulumi.azuredevops.inputs.GitInitializationArgs;\nimport com.pulumi.azuredevops.RepositoryPolicyFilePathPattern;\nimport com.pulumi.azuredevops.RepositoryPolicyFilePathPatternArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleGit = new Git(\"exampleGit\", GitArgs.builder()        \n            .projectId(exampleProject.id())\n            .initialization(GitInitializationArgs.builder()\n                .initType(\"Clean\")\n                .build())\n            .build());\n\n        var exampleRepositoryPolicyFilePathPattern = new RepositoryPolicyFilePathPattern(\"exampleRepositoryPolicyFilePathPattern\", RepositoryPolicyFilePathPatternArgs.builder()        \n            .projectId(exampleProject.id())\n            .enabled(true)\n            .blocking(true)\n            .filepathPatterns(            \n                \"*.go\",\n                \"/home/test/*.ts\")\n            .repositoryIds(exampleGit.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleGit:\n    type: azuredevops:Git\n    properties:\n      projectId: ${exampleProject.id}\n      initialization:\n        initType: Clean\n  exampleRepositoryPolicyFilePathPattern:\n    type: azuredevops:RepositoryPolicyFilePathPattern\n    properties:\n      projectId: ${exampleProject.id}\n      enabled: true\n      blocking: true\n      filepathPatterns:\n        - '*.go'\n        - /home/test/*.ts\n      repositoryIds:\n        - ${exampleGit.id}\n```\n\n# Set project level repository policy\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = new azuredevops.Project(\"example\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst examplep = new azuredevops.RepositoryPolicyFilePathPattern(\"examplep\", {\n    projectId: example.id,\n    enabled: true,\n    blocking: true,\n    filepathPatterns: [\n        \"*.go\",\n        \"/home/test/*.ts\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.Project(\"example\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexamplep = azuredevops.RepositoryPolicyFilePathPattern(\"examplep\",\n    project_id=example.id,\n    enabled=True,\n    blocking=True,\n    filepath_patterns=[\n        \"*.go\",\n        \"/home/test/*.ts\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureDevOps.Project(\"example\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var examplep = new AzureDevOps.RepositoryPolicyFilePathPattern(\"examplep\", new()\n    {\n        ProjectId = example.Id,\n        Enabled = true,\n        Blocking = true,\n        FilepathPatterns = new[]\n        {\n            \"*.go\",\n            \"/home/test/*.ts\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuredevops.NewProject(ctx, \"example\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewRepositoryPolicyFilePathPattern(ctx, \"examplep\", \u0026azuredevops.RepositoryPolicyFilePathPatternArgs{\n\t\t\tProjectId: example.ID(),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t\tFilepathPatterns: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"*.go\"),\n\t\t\t\tpulumi.String(\"/home/test/*.ts\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.RepositoryPolicyFilePathPattern;\nimport com.pulumi.azuredevops.RepositoryPolicyFilePathPatternArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Project(\"example\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var examplep = new RepositoryPolicyFilePathPattern(\"examplep\", RepositoryPolicyFilePathPatternArgs.builder()        \n            .projectId(example.id())\n            .enabled(true)\n            .blocking(true)\n            .filepathPatterns(            \n                \"*.go\",\n                \"/home/test/*.ts\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  examplep:\n    type: azuredevops:RepositoryPolicyFilePathPattern\n    properties:\n      projectId: ${example.id}\n      enabled: true\n      blocking: true\n      filepathPatterns:\n        - '*.go'\n        - /home/test/*.ts\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Policy Configurations](https://docs.microsoft.com/en-us/rest/api/azure/devops/policy/configurations?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps repository policies can be imported using the projectID/policyID or projectName/policyID\n\n```sh\n $ pulumi import azuredevops:index/repositoryPolicyFilePathPattern:RepositoryPolicyFilePathPattern example 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "filepathPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Block pushes from introducing file paths that match the following patterns. Exact paths begin with \"/\". You can specify exact paths and wildcards. You can also specify multiple paths using \";\" as a separator. Paths prefixed with \"!\" are excluded. Order is important.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "repositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                }
            },
            "required": [
                "filepathPatterns",
                "projectId"
            ],
            "inputProperties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "filepathPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Block pushes from introducing file paths that match the following patterns. Exact paths begin with \"/\". You can specify exact paths and wildcards. You can also specify multiple paths using \";\" as a separator. Paths prefixed with \"!\" are excluded. Order is important.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n",
                    "willReplaceOnChanges": true
                },
                "repositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                }
            },
            "requiredInputs": [
                "filepathPatterns",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryPolicyFilePathPattern resources.\n",
                "properties": {
                    "blocking": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                    },
                    "filepathPatterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Block pushes from introducing file paths that match the following patterns. Exact paths begin with \"/\". You can specify exact paths and wildcards. You can also specify multiple paths using \";\" as a separator. Paths prefixed with \"!\" are excluded. Order is important.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the policy will be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "repositoryIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/repositoryPolicyMaxFileSize:RepositoryPolicyMaxFileSize": {
            "description": "Manage a max file size repository policy within Azure DevOps project.\n\n\u003e If both project and project policy are enabled, the repository policy has high priority.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleGit = new azuredevops.Git(\"exampleGit\", {\n    projectId: exampleProject.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst exampleRepositoryPolicyMaxFileSize = new azuredevops.RepositoryPolicyMaxFileSize(\"exampleRepositoryPolicyMaxFileSize\", {\n    projectId: exampleProject.id,\n    enabled: true,\n    blocking: true,\n    maxFileSize: 1,\n    repositoryIds: [exampleGit.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_git = azuredevops.Git(\"exampleGit\",\n    project_id=example_project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nexample_repository_policy_max_file_size = azuredevops.RepositoryPolicyMaxFileSize(\"exampleRepositoryPolicyMaxFileSize\",\n    project_id=example_project.id,\n    enabled=True,\n    blocking=True,\n    max_file_size=1,\n    repository_ids=[example_git.id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleGit = new AzureDevOps.Git(\"exampleGit\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n        {\n            InitType = \"Clean\",\n        },\n    });\n\n    var exampleRepositoryPolicyMaxFileSize = new AzureDevOps.RepositoryPolicyMaxFileSize(\"exampleRepositoryPolicyMaxFileSize\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Enabled = true,\n        Blocking = true,\n        MaxFileSize = 1,\n        RepositoryIds = new[]\n        {\n            exampleGit.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGit, err := azuredevops.NewGit(ctx, \"exampleGit\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tInitialization: \u0026azuredevops.GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewRepositoryPolicyMaxFileSize(ctx, \"exampleRepositoryPolicyMaxFileSize\", \u0026azuredevops.RepositoryPolicyMaxFileSizeArgs{\n\t\t\tProjectId:   exampleProject.ID(),\n\t\t\tEnabled:     pulumi.Bool(true),\n\t\t\tBlocking:    pulumi.Bool(true),\n\t\t\tMaxFileSize: pulumi.Int(1),\n\t\t\tRepositoryIds: pulumi.StringArray{\n\t\t\t\texampleGit.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.Git;\nimport com.pulumi.azuredevops.GitArgs;\nimport com.pulumi.azuredevops.inputs.GitInitializationArgs;\nimport com.pulumi.azuredevops.RepositoryPolicyMaxFileSize;\nimport com.pulumi.azuredevops.RepositoryPolicyMaxFileSizeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleGit = new Git(\"exampleGit\", GitArgs.builder()        \n            .projectId(exampleProject.id())\n            .initialization(GitInitializationArgs.builder()\n                .initType(\"Clean\")\n                .build())\n            .build());\n\n        var exampleRepositoryPolicyMaxFileSize = new RepositoryPolicyMaxFileSize(\"exampleRepositoryPolicyMaxFileSize\", RepositoryPolicyMaxFileSizeArgs.builder()        \n            .projectId(exampleProject.id())\n            .enabled(true)\n            .blocking(true)\n            .maxFileSize(1)\n            .repositoryIds(exampleGit.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleGit:\n    type: azuredevops:Git\n    properties:\n      projectId: ${exampleProject.id}\n      initialization:\n        initType: Clean\n  exampleRepositoryPolicyMaxFileSize:\n    type: azuredevops:RepositoryPolicyMaxFileSize\n    properties:\n      projectId: ${exampleProject.id}\n      enabled: true\n      blocking: true\n      maxFileSize: 1\n      repositoryIds:\n        - ${exampleGit.id}\n```\n\n# Set project level repository policy\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleRepositoryPolicyMaxFileSize = new azuredevops.RepositoryPolicyMaxFileSize(\"exampleRepositoryPolicyMaxFileSize\", {\n    projectId: exampleProject.id,\n    enabled: true,\n    blocking: true,\n    maxFileSize: 1,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_repository_policy_max_file_size = azuredevops.RepositoryPolicyMaxFileSize(\"exampleRepositoryPolicyMaxFileSize\",\n    project_id=example_project.id,\n    enabled=True,\n    blocking=True,\n    max_file_size=1)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleRepositoryPolicyMaxFileSize = new AzureDevOps.RepositoryPolicyMaxFileSize(\"exampleRepositoryPolicyMaxFileSize\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Enabled = true,\n        Blocking = true,\n        MaxFileSize = 1,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewRepositoryPolicyMaxFileSize(ctx, \"exampleRepositoryPolicyMaxFileSize\", \u0026azuredevops.RepositoryPolicyMaxFileSizeArgs{\n\t\t\tProjectId:   exampleProject.ID(),\n\t\t\tEnabled:     pulumi.Bool(true),\n\t\t\tBlocking:    pulumi.Bool(true),\n\t\t\tMaxFileSize: pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.RepositoryPolicyMaxFileSize;\nimport com.pulumi.azuredevops.RepositoryPolicyMaxFileSizeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleRepositoryPolicyMaxFileSize = new RepositoryPolicyMaxFileSize(\"exampleRepositoryPolicyMaxFileSize\", RepositoryPolicyMaxFileSizeArgs.builder()        \n            .projectId(exampleProject.id())\n            .enabled(true)\n            .blocking(true)\n            .maxFileSize(1)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleRepositoryPolicyMaxFileSize:\n    type: azuredevops:RepositoryPolicyMaxFileSize\n    properties:\n      projectId: ${exampleProject.id}\n      enabled: true\n      blocking: true\n      maxFileSize: 1\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Policy Configurations](https://docs.microsoft.com/en-us/rest/api/azure/devops/policy/configurations?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps repository policies can be imported using the projectID/policyID or projectName/policyID\n\n```sh\n $ pulumi import azuredevops:index/repositoryPolicyMaxFileSize:RepositoryPolicyMaxFileSize example 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "maxFileSize": {
                    "type": "integer",
                    "description": "Block pushes that contain new or updated files larger than this limit. Available values is: `1, 2, 5, 10, 100, 200` (MB).\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "repositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                }
            },
            "required": [
                "maxFileSize",
                "projectId"
            ],
            "inputProperties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "maxFileSize": {
                    "type": "integer",
                    "description": "Block pushes that contain new or updated files larger than this limit. Available values is: `1, 2, 5, 10, 100, 200` (MB).\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n",
                    "willReplaceOnChanges": true
                },
                "repositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                }
            },
            "requiredInputs": [
                "maxFileSize",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryPolicyMaxFileSize resources.\n",
                "properties": {
                    "blocking": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                    },
                    "maxFileSize": {
                        "type": "integer",
                        "description": "Block pushes that contain new or updated files larger than this limit. Available values is: `1, 2, 5, 10, 100, 200` (MB).\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the policy will be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "repositoryIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/repositoryPolicyMaxPathLength:RepositoryPolicyMaxPathLength": {
            "description": "Manage a max path length repository policy within Azure DevOps project.\n\n\u003e If both project and project policy are enabled, the repository policy has high priority.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleGit = new azuredevops.Git(\"exampleGit\", {\n    projectId: exampleProject.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst exampleRepositoryPolicyMaxPathLength = new azuredevops.RepositoryPolicyMaxPathLength(\"exampleRepositoryPolicyMaxPathLength\", {\n    projectId: exampleProject.id,\n    enabled: true,\n    blocking: true,\n    maxPathLength: 500,\n    repositoryIds: [exampleGit.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_git = azuredevops.Git(\"exampleGit\",\n    project_id=example_project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nexample_repository_policy_max_path_length = azuredevops.RepositoryPolicyMaxPathLength(\"exampleRepositoryPolicyMaxPathLength\",\n    project_id=example_project.id,\n    enabled=True,\n    blocking=True,\n    max_path_length=500,\n    repository_ids=[example_git.id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleGit = new AzureDevOps.Git(\"exampleGit\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n        {\n            InitType = \"Clean\",\n        },\n    });\n\n    var exampleRepositoryPolicyMaxPathLength = new AzureDevOps.RepositoryPolicyMaxPathLength(\"exampleRepositoryPolicyMaxPathLength\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Enabled = true,\n        Blocking = true,\n        MaxPathLength = 500,\n        RepositoryIds = new[]\n        {\n            exampleGit.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGit, err := azuredevops.NewGit(ctx, \"exampleGit\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tInitialization: \u0026azuredevops.GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewRepositoryPolicyMaxPathLength(ctx, \"exampleRepositoryPolicyMaxPathLength\", \u0026azuredevops.RepositoryPolicyMaxPathLengthArgs{\n\t\t\tProjectId:     exampleProject.ID(),\n\t\t\tEnabled:       pulumi.Bool(true),\n\t\t\tBlocking:      pulumi.Bool(true),\n\t\t\tMaxPathLength: pulumi.Int(500),\n\t\t\tRepositoryIds: pulumi.StringArray{\n\t\t\t\texampleGit.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.Git;\nimport com.pulumi.azuredevops.GitArgs;\nimport com.pulumi.azuredevops.inputs.GitInitializationArgs;\nimport com.pulumi.azuredevops.RepositoryPolicyMaxPathLength;\nimport com.pulumi.azuredevops.RepositoryPolicyMaxPathLengthArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleGit = new Git(\"exampleGit\", GitArgs.builder()        \n            .projectId(exampleProject.id())\n            .initialization(GitInitializationArgs.builder()\n                .initType(\"Clean\")\n                .build())\n            .build());\n\n        var exampleRepositoryPolicyMaxPathLength = new RepositoryPolicyMaxPathLength(\"exampleRepositoryPolicyMaxPathLength\", RepositoryPolicyMaxPathLengthArgs.builder()        \n            .projectId(exampleProject.id())\n            .enabled(true)\n            .blocking(true)\n            .maxPathLength(500)\n            .repositoryIds(exampleGit.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleGit:\n    type: azuredevops:Git\n    properties:\n      projectId: ${exampleProject.id}\n      initialization:\n        initType: Clean\n  exampleRepositoryPolicyMaxPathLength:\n    type: azuredevops:RepositoryPolicyMaxPathLength\n    properties:\n      projectId: ${exampleProject.id}\n      enabled: true\n      blocking: true\n      maxPathLength: 500\n      repositoryIds:\n        - ${exampleGit.id}\n```\n\n# Set project level repository policy\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleRepositoryPolicyMaxPathLength = new azuredevops.RepositoryPolicyMaxPathLength(\"exampleRepositoryPolicyMaxPathLength\", {\n    projectId: exampleProject.id,\n    enabled: true,\n    blocking: true,\n    maxPathLength: 1000,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_repository_policy_max_path_length = azuredevops.RepositoryPolicyMaxPathLength(\"exampleRepositoryPolicyMaxPathLength\",\n    project_id=example_project.id,\n    enabled=True,\n    blocking=True,\n    max_path_length=1000)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleRepositoryPolicyMaxPathLength = new AzureDevOps.RepositoryPolicyMaxPathLength(\"exampleRepositoryPolicyMaxPathLength\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Enabled = true,\n        Blocking = true,\n        MaxPathLength = 1000,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewRepositoryPolicyMaxPathLength(ctx, \"exampleRepositoryPolicyMaxPathLength\", \u0026azuredevops.RepositoryPolicyMaxPathLengthArgs{\n\t\t\tProjectId:     exampleProject.ID(),\n\t\t\tEnabled:       pulumi.Bool(true),\n\t\t\tBlocking:      pulumi.Bool(true),\n\t\t\tMaxPathLength: pulumi.Int(1000),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.RepositoryPolicyMaxPathLength;\nimport com.pulumi.azuredevops.RepositoryPolicyMaxPathLengthArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleRepositoryPolicyMaxPathLength = new RepositoryPolicyMaxPathLength(\"exampleRepositoryPolicyMaxPathLength\", RepositoryPolicyMaxPathLengthArgs.builder()        \n            .projectId(exampleProject.id())\n            .enabled(true)\n            .blocking(true)\n            .maxPathLength(1000)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleRepositoryPolicyMaxPathLength:\n    type: azuredevops:RepositoryPolicyMaxPathLength\n    properties:\n      projectId: ${exampleProject.id}\n      enabled: true\n      blocking: true\n      maxPathLength: 1000\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Policy Configurations](https://docs.microsoft.com/en-us/rest/api/azure/devops/policy/configurations?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps repository policies can be imported using the projectID/policyID or projectName/policyID\n\n```sh\n $ pulumi import azuredevops:index/repositoryPolicyMaxPathLength:RepositoryPolicyMaxPathLength example 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "maxPathLength": {
                    "type": "integer",
                    "description": "Block pushes that introduce paths that exceed the specified length.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "repositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                }
            },
            "required": [
                "maxPathLength",
                "projectId"
            ],
            "inputProperties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "maxPathLength": {
                    "type": "integer",
                    "description": "Block pushes that introduce paths that exceed the specified length.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n",
                    "willReplaceOnChanges": true
                },
                "repositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                }
            },
            "requiredInputs": [
                "maxPathLength",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryPolicyMaxPathLength resources.\n",
                "properties": {
                    "blocking": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                    },
                    "maxPathLength": {
                        "type": "integer",
                        "description": "Block pushes that introduce paths that exceed the specified length.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the policy will be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "repositoryIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/repositoryPolicyReservedNames:RepositoryPolicyReservedNames": {
            "description": "Manage a reserved names repository policy within Azure DevOps project. Block pushes that introduce files, folders, or branch names that include platform reserved names or incompatible characters.\n\n\u003e If both project and project policy are enabled, the project policy has high priority.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleGit = new azuredevops.Git(\"exampleGit\", {\n    projectId: exampleProject.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst exampleRepositoryPolicyReservedNames = new azuredevops.RepositoryPolicyReservedNames(\"exampleRepositoryPolicyReservedNames\", {\n    projectId: exampleProject.id,\n    enabled: true,\n    blocking: true,\n    repositoryIds: [exampleGit.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_git = azuredevops.Git(\"exampleGit\",\n    project_id=example_project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nexample_repository_policy_reserved_names = azuredevops.RepositoryPolicyReservedNames(\"exampleRepositoryPolicyReservedNames\",\n    project_id=example_project.id,\n    enabled=True,\n    blocking=True,\n    repository_ids=[example_git.id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleGit = new AzureDevOps.Git(\"exampleGit\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n        {\n            InitType = \"Clean\",\n        },\n    });\n\n    var exampleRepositoryPolicyReservedNames = new AzureDevOps.RepositoryPolicyReservedNames(\"exampleRepositoryPolicyReservedNames\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Enabled = true,\n        Blocking = true,\n        RepositoryIds = new[]\n        {\n            exampleGit.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGit, err := azuredevops.NewGit(ctx, \"exampleGit\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tInitialization: \u0026azuredevops.GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewRepositoryPolicyReservedNames(ctx, \"exampleRepositoryPolicyReservedNames\", \u0026azuredevops.RepositoryPolicyReservedNamesArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t\tRepositoryIds: pulumi.StringArray{\n\t\t\t\texampleGit.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.Git;\nimport com.pulumi.azuredevops.GitArgs;\nimport com.pulumi.azuredevops.inputs.GitInitializationArgs;\nimport com.pulumi.azuredevops.RepositoryPolicyReservedNames;\nimport com.pulumi.azuredevops.RepositoryPolicyReservedNamesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleGit = new Git(\"exampleGit\", GitArgs.builder()        \n            .projectId(exampleProject.id())\n            .initialization(GitInitializationArgs.builder()\n                .initType(\"Clean\")\n                .build())\n            .build());\n\n        var exampleRepositoryPolicyReservedNames = new RepositoryPolicyReservedNames(\"exampleRepositoryPolicyReservedNames\", RepositoryPolicyReservedNamesArgs.builder()        \n            .projectId(exampleProject.id())\n            .enabled(true)\n            .blocking(true)\n            .repositoryIds(exampleGit.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleGit:\n    type: azuredevops:Git\n    properties:\n      projectId: ${exampleProject.id}\n      initialization:\n        initType: Clean\n  exampleRepositoryPolicyReservedNames:\n    type: azuredevops:RepositoryPolicyReservedNames\n    properties:\n      projectId: ${exampleProject.id}\n      enabled: true\n      blocking: true\n      repositoryIds:\n        - ${exampleGit.id}\n```\n\n# Set project level repository policy\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleRepositoryPolicyReservedNames = new azuredevops.RepositoryPolicyReservedNames(\"exampleRepositoryPolicyReservedNames\", {\n    projectId: exampleProject.id,\n    enabled: true,\n    blocking: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_repository_policy_reserved_names = azuredevops.RepositoryPolicyReservedNames(\"exampleRepositoryPolicyReservedNames\",\n    project_id=example_project.id,\n    enabled=True,\n    blocking=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleRepositoryPolicyReservedNames = new AzureDevOps.RepositoryPolicyReservedNames(\"exampleRepositoryPolicyReservedNames\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Enabled = true,\n        Blocking = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewRepositoryPolicyReservedNames(ctx, \"exampleRepositoryPolicyReservedNames\", \u0026azuredevops.RepositoryPolicyReservedNamesArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.RepositoryPolicyReservedNames;\nimport com.pulumi.azuredevops.RepositoryPolicyReservedNamesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleRepositoryPolicyReservedNames = new RepositoryPolicyReservedNames(\"exampleRepositoryPolicyReservedNames\", RepositoryPolicyReservedNamesArgs.builder()        \n            .projectId(exampleProject.id())\n            .enabled(true)\n            .blocking(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleRepositoryPolicyReservedNames:\n    type: azuredevops:RepositoryPolicyReservedNames\n    properties:\n      projectId: ${exampleProject.id}\n      enabled: true\n      blocking: true\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Policy Configurations](https://docs.microsoft.com/en-us/rest/api/azure/devops/policy/configurations?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps repository policies can be imported using the projectID/policyID or projectName/policyID\n\n```sh\n $ pulumi import azuredevops:index/repositoryPolicyReservedNames:RepositoryPolicyReservedNames example 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "repositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                }
            },
            "required": [
                "projectId"
            ],
            "inputProperties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n",
                    "willReplaceOnChanges": true
                },
                "repositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryPolicyReservedNames resources.\n",
                "properties": {
                    "blocking": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the policy will be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "repositoryIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/resourceAuthorization:ResourceAuthorization": {
            "description": "Manages authorization of resources, e.g. for access in build pipelines.\n\nCurrently supported resources: service endpoint (aka service connection, endpoint).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceEndpointBitBucket = new azuredevops.ServiceEndpointBitBucket(\"exampleServiceEndpointBitBucket\", {\n    projectId: exampleProject.id,\n    username: \"username\",\n    password: \"password\",\n    serviceEndpointName: \"example-bitbucket\",\n    description: \"Managed by Terraform\",\n});\nconst exampleResourceAuthorization = new azuredevops.ResourceAuthorization(\"exampleResourceAuthorization\", {\n    projectId: exampleProject.id,\n    resourceId: exampleServiceEndpointBitBucket.id,\n    authorized: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_service_endpoint_bit_bucket = azuredevops.ServiceEndpointBitBucket(\"exampleServiceEndpointBitBucket\",\n    project_id=example_project.id,\n    username=\"username\",\n    password=\"password\",\n    service_endpoint_name=\"example-bitbucket\",\n    description=\"Managed by Terraform\")\nexample_resource_authorization = azuredevops.ResourceAuthorization(\"exampleResourceAuthorization\",\n    project_id=example_project.id,\n    resource_id=example_service_endpoint_bit_bucket.id,\n    authorized=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceEndpointBitBucket = new AzureDevOps.ServiceEndpointBitBucket(\"exampleServiceEndpointBitBucket\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Username = \"username\",\n        Password = \"password\",\n        ServiceEndpointName = \"example-bitbucket\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleResourceAuthorization = new AzureDevOps.ResourceAuthorization(\"exampleResourceAuthorization\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ResourceId = exampleServiceEndpointBitBucket.Id,\n        Authorized = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleServiceEndpointBitBucket, err := azuredevops.NewServiceEndpointBitBucket(ctx, \"exampleServiceEndpointBitBucket\", \u0026azuredevops.ServiceEndpointBitBucketArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tUsername:            pulumi.String(\"username\"),\n\t\t\tPassword:            pulumi.String(\"password\"),\n\t\t\tServiceEndpointName: pulumi.String(\"example-bitbucket\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewResourceAuthorization(ctx, \"exampleResourceAuthorization\", \u0026azuredevops.ResourceAuthorizationArgs{\n\t\t\tProjectId:  exampleProject.ID(),\n\t\t\tResourceId: exampleServiceEndpointBitBucket.ID(),\n\t\t\tAuthorized: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointBitBucket;\nimport com.pulumi.azuredevops.ServiceEndpointBitBucketArgs;\nimport com.pulumi.azuredevops.ResourceAuthorization;\nimport com.pulumi.azuredevops.ResourceAuthorizationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceEndpointBitBucket = new ServiceEndpointBitBucket(\"exampleServiceEndpointBitBucket\", ServiceEndpointBitBucketArgs.builder()        \n            .projectId(exampleProject.id())\n            .username(\"username\")\n            .password(\"password\")\n            .serviceEndpointName(\"example-bitbucket\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleResourceAuthorization = new ResourceAuthorization(\"exampleResourceAuthorization\", ResourceAuthorizationArgs.builder()        \n            .projectId(exampleProject.id())\n            .resourceId(exampleServiceEndpointBitBucket.id())\n            .authorized(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceEndpointBitBucket:\n    type: azuredevops:ServiceEndpointBitBucket\n    properties:\n      projectId: ${exampleProject.id}\n      username: username\n      password: password\n      serviceEndpointName: example-bitbucket\n      description: Managed by Terraform\n  exampleResourceAuthorization:\n    type: azuredevops:ResourceAuthorization\n    properties:\n      projectId: ${exampleProject.id}\n      resourceId: ${exampleServiceEndpointBitBucket.id}\n      authorized: true\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Authorize Definition Resource](https://docs.microsoft.com/en-us/rest/api/azure/devops/build/resources/authorize%20definition%20resources?view=azure-devops-rest-7.0)\n",
            "properties": {
                "authorized": {
                    "type": "boolean",
                    "description": "Set to true to allow public access in the project. Type: boolean.\n"
                },
                "definitionId": {
                    "type": "integer",
                    "description": "The ID of the build definition to authorize. Type: string.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name. Type: string.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The ID of the resource to authorize. Type: string.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the resource to authorize. Type: string. Valid values: `endpoint`, `queue`, `variablegroup`. Default value: `endpoint`.\n"
                }
            },
            "required": [
                "authorized",
                "projectId",
                "resourceId"
            ],
            "inputProperties": {
                "authorized": {
                    "type": "boolean",
                    "description": "Set to true to allow public access in the project. Type: boolean.\n"
                },
                "definitionId": {
                    "type": "integer",
                    "description": "The ID of the build definition to authorize. Type: string.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name. Type: string.\n",
                    "willReplaceOnChanges": true
                },
                "resourceId": {
                    "type": "string",
                    "description": "The ID of the resource to authorize. Type: string.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the resource to authorize. Type: string. Valid values: `endpoint`, `queue`, `variablegroup`. Default value: `endpoint`.\n"
                }
            },
            "requiredInputs": [
                "authorized",
                "projectId",
                "resourceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ResourceAuthorization resources.\n",
                "properties": {
                    "authorized": {
                        "type": "boolean",
                        "description": "Set to true to allow public access in the project. Type: boolean.\n"
                    },
                    "definitionId": {
                        "type": "integer",
                        "description": "The ID of the build definition to authorize. Type: string.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name. Type: string.\n",
                        "willReplaceOnChanges": true
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "The ID of the resource to authorize. Type: string.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the resource to authorize. Type: string. Valid values: `endpoint`, `queue`, `variablegroup`. Default value: `endpoint`.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Security/resourceAuthorization:ResourceAuthorization"
                }
            ]
        },
        "azuredevops:index/serviceEndpointArtifactory:ServiceEndpointArtifactory": {
            "description": "Manages an Artifactory server endpoint within an Azure DevOps organization. Using this service endpoint requires you to first install [JFrog Artifactory Extension](https://marketplace.visualstudio.com/items?itemName=JFrog.jfrog-artifactory-vsts-extension).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceEndpointArtifactory = new azuredevops.ServiceEndpointArtifactory(\"exampleServiceEndpointArtifactory\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example Artifactory\",\n    description: \"Managed by Terraform\",\n    url: \"https://artifactory.my.com\",\n    authenticationToken: {\n        token: \"0000000000000000000000000000000000000000\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_service_endpoint_artifactory = azuredevops.ServiceEndpointArtifactory(\"exampleServiceEndpointArtifactory\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example Artifactory\",\n    description=\"Managed by Terraform\",\n    url=\"https://artifactory.my.com\",\n    authentication_token=azuredevops.ServiceEndpointArtifactoryAuthenticationTokenArgs(\n        token=\"0000000000000000000000000000000000000000\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceEndpointArtifactory = new AzureDevOps.ServiceEndpointArtifactory(\"exampleServiceEndpointArtifactory\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example Artifactory\",\n        Description = \"Managed by Terraform\",\n        Url = \"https://artifactory.my.com\",\n        AuthenticationToken = new AzureDevOps.Inputs.ServiceEndpointArtifactoryAuthenticationTokenArgs\n        {\n            Token = \"0000000000000000000000000000000000000000\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointArtifactory(ctx, \"exampleServiceEndpointArtifactory\", \u0026azuredevops.ServiceEndpointArtifactoryArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Example Artifactory\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t\tUrl:                 pulumi.String(\"https://artifactory.my.com\"),\n\t\t\tAuthenticationToken: \u0026azuredevops.ServiceEndpointArtifactoryAuthenticationTokenArgs{\n\t\t\t\tToken: pulumi.String(\"0000000000000000000000000000000000000000\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointArtifactory;\nimport com.pulumi.azuredevops.ServiceEndpointArtifactoryArgs;\nimport com.pulumi.azuredevops.inputs.ServiceEndpointArtifactoryAuthenticationTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceEndpointArtifactory = new ServiceEndpointArtifactory(\"exampleServiceEndpointArtifactory\", ServiceEndpointArtifactoryArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example Artifactory\")\n            .description(\"Managed by Terraform\")\n            .url(\"https://artifactory.my.com\")\n            .authenticationToken(ServiceEndpointArtifactoryAuthenticationTokenArgs.builder()\n                .token(\"0000000000000000000000000000000000000000\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceEndpointArtifactory:\n    type: azuredevops:ServiceEndpointArtifactory\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example Artifactory\n      description: Managed by Terraform\n      url: https://artifactory.my.com\n      authenticationToken:\n        token: '0000000000000000000000000000000000000000'\n```\nAlternatively a username and password may be used.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceEndpointArtifactory = new azuredevops.ServiceEndpointArtifactory(\"exampleServiceEndpointArtifactory\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example Artifactory\",\n    description: \"Managed by Terraform\",\n    url: \"https://artifactory.my.com\",\n    authenticationBasic: {\n        username: \"username\",\n        password: \"password\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_service_endpoint_artifactory = azuredevops.ServiceEndpointArtifactory(\"exampleServiceEndpointArtifactory\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example Artifactory\",\n    description=\"Managed by Terraform\",\n    url=\"https://artifactory.my.com\",\n    authentication_basic=azuredevops.ServiceEndpointArtifactoryAuthenticationBasicArgs(\n        username=\"username\",\n        password=\"password\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceEndpointArtifactory = new AzureDevOps.ServiceEndpointArtifactory(\"exampleServiceEndpointArtifactory\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example Artifactory\",\n        Description = \"Managed by Terraform\",\n        Url = \"https://artifactory.my.com\",\n        AuthenticationBasic = new AzureDevOps.Inputs.ServiceEndpointArtifactoryAuthenticationBasicArgs\n        {\n            Username = \"username\",\n            Password = \"password\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointArtifactory(ctx, \"exampleServiceEndpointArtifactory\", \u0026azuredevops.ServiceEndpointArtifactoryArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Example Artifactory\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t\tUrl:                 pulumi.String(\"https://artifactory.my.com\"),\n\t\t\tAuthenticationBasic: \u0026azuredevops.ServiceEndpointArtifactoryAuthenticationBasicArgs{\n\t\t\t\tUsername: pulumi.String(\"username\"),\n\t\t\t\tPassword: pulumi.String(\"password\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointArtifactory;\nimport com.pulumi.azuredevops.ServiceEndpointArtifactoryArgs;\nimport com.pulumi.azuredevops.inputs.ServiceEndpointArtifactoryAuthenticationBasicArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceEndpointArtifactory = new ServiceEndpointArtifactory(\"exampleServiceEndpointArtifactory\", ServiceEndpointArtifactoryArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example Artifactory\")\n            .description(\"Managed by Terraform\")\n            .url(\"https://artifactory.my.com\")\n            .authenticationBasic(ServiceEndpointArtifactoryAuthenticationBasicArgs.builder()\n                .username(\"username\")\n                .password(\"password\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceEndpointArtifactory:\n    type: azuredevops:ServiceEndpointArtifactory\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example Artifactory\n      description: Managed by Terraform\n      url: https://artifactory.my.com\n      authenticationBasic:\n        username: username\n        password: password\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service Connections](https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops\u0026tabs=yaml)\n* [Artifactory User Token](https://docs.artifactory.org/latest/user-guide/user-token/)\n\n\n## Import\n\nAzure DevOps Service Endpoint Artifactory can be imported using the **projectID/serviceEndpointID**, e.g.\n\n```sh\n $ pulumi import azuredevops:index/serviceEndpointArtifactory:ServiceEndpointArtifactory example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authenticationBasic": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointArtifactoryAuthenticationBasic:ServiceEndpointArtifactoryAuthenticationBasic"
                },
                "authenticationToken": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointArtifactoryAuthenticationToken:ServiceEndpointArtifactoryAuthenticationToken"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The Service Endpoint description.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Artifactory server to connect with.\n\n_Note: URL should not end in a slash character._\n* either `authentication_token` or `authentication_basic` (one is required)\n"
                }
            },
            "required": [
                "authorization",
                "projectId",
                "serviceEndpointName",
                "url"
            ],
            "inputProperties": {
                "authenticationBasic": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointArtifactoryAuthenticationBasic:ServiceEndpointArtifactoryAuthenticationBasic"
                },
                "authenticationToken": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointArtifactoryAuthenticationToken:ServiceEndpointArtifactoryAuthenticationToken"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The Service Endpoint description.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n",
                    "willReplaceOnChanges": true
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n",
                    "willReplaceOnChanges": true
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Artifactory server to connect with.\n\n_Note: URL should not end in a slash character._\n* either `authentication_token` or `authentication_basic` (one is required)\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "serviceEndpointName",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEndpointArtifactory resources.\n",
                "properties": {
                    "authenticationBasic": {
                        "$ref": "#/types/azuredevops:index/ServiceEndpointArtifactoryAuthenticationBasic:ServiceEndpointArtifactoryAuthenticationBasic"
                    },
                    "authenticationToken": {
                        "$ref": "#/types/azuredevops:index/ServiceEndpointArtifactoryAuthenticationToken:ServiceEndpointArtifactoryAuthenticationToken"
                    },
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string",
                        "description": "The Service Endpoint description.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the Artifactory server to connect with.\n\n_Note: URL should not end in a slash character._\n* either `authentication_token` or `authentication_basic` (one is required)\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceEndpointAws:ServiceEndpointAws": {
            "description": "Manages a AWS service endpoint within Azure DevOps. Using this service endpoint requires you to first install [AWS Toolkit for Azure DevOps](https://marketplace.visualstudio.com/items?itemName=AmazonWebServices.aws-vsts-tools).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceEndpointAws = new azuredevops.ServiceEndpointAws(\"exampleServiceEndpointAws\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example AWS\",\n    accessKeyId: \"00000000-0000-0000-0000-000000000000\",\n    secretAccessKey: \"accesskey\",\n    description: \"Managed by AzureDevOps\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_service_endpoint_aws = azuredevops.ServiceEndpointAws(\"exampleServiceEndpointAws\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example AWS\",\n    access_key_id=\"00000000-0000-0000-0000-000000000000\",\n    secret_access_key=\"accesskey\",\n    description=\"Managed by AzureDevOps\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceEndpointAws = new AzureDevOps.ServiceEndpointAws(\"exampleServiceEndpointAws\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example AWS\",\n        AccessKeyId = \"00000000-0000-0000-0000-000000000000\",\n        SecretAccessKey = \"accesskey\",\n        Description = \"Managed by AzureDevOps\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointAws(ctx, \"exampleServiceEndpointAws\", \u0026azuredevops.ServiceEndpointAwsArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Example AWS\"),\n\t\t\tAccessKeyId:         pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tSecretAccessKey:     pulumi.String(\"accesskey\"),\n\t\t\tDescription:         pulumi.String(\"Managed by AzureDevOps\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointAws;\nimport com.pulumi.azuredevops.ServiceEndpointAwsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceEndpointAws = new ServiceEndpointAws(\"exampleServiceEndpointAws\", ServiceEndpointAwsArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example AWS\")\n            .accessKeyId(\"00000000-0000-0000-0000-000000000000\")\n            .secretAccessKey(\"accesskey\")\n            .description(\"Managed by AzureDevOps\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceEndpointAws:\n    type: azuredevops:ServiceEndpointAws\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example AWS\n      accessKeyId: 00000000-0000-0000-0000-000000000000\n      secretAccessKey: accesskey\n      description: Managed by AzureDevOps\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [aws-toolkit-azure-devops](https://github.com/aws/aws-toolkit-azure-devops)\n* [Azure DevOps Service REST API 7.0 - Agent Pools](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Service Endpoint AWS can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:index/serviceEndpointAws:ServiceEndpointAws azuredevops_serviceendpoint_aws.example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "The AWS access key ID for signing programmatic requests.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "externalId": {
                    "type": "string",
                    "description": "A unique identifier that is used by third parties when assuming roles in their customers' accounts, aka cross-account role access.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "roleSessionName": {
                    "type": "string",
                    "description": "Optional identifier for the assumed role session.\n"
                },
                "roleToAssume": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) of the role to assume.\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The AWS secret access key for signing programmatic requests.\n",
                    "secret": true
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "sessionToken": {
                    "type": "string",
                    "description": "The AWS session token for signing programmatic requests.\n",
                    "secret": true
                }
            },
            "required": [
                "accessKeyId",
                "authorization",
                "projectId",
                "secretAccessKey",
                "serviceEndpointName"
            ],
            "inputProperties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "The AWS access key ID for signing programmatic requests.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "externalId": {
                    "type": "string",
                    "description": "A unique identifier that is used by third parties when assuming roles in their customers' accounts, aka cross-account role access.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n",
                    "willReplaceOnChanges": true
                },
                "roleSessionName": {
                    "type": "string",
                    "description": "Optional identifier for the assumed role session.\n"
                },
                "roleToAssume": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) of the role to assume.\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The AWS secret access key for signing programmatic requests.\n",
                    "secret": true
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n",
                    "willReplaceOnChanges": true
                },
                "sessionToken": {
                    "type": "string",
                    "description": "The AWS session token for signing programmatic requests.\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "accessKeyId",
                "projectId",
                "secretAccessKey",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEndpointAws resources.\n",
                "properties": {
                    "accessKeyId": {
                        "type": "string",
                        "description": "The AWS access key ID for signing programmatic requests.\n"
                    },
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "A unique identifier that is used by third parties when assuming roles in their customers' accounts, aka cross-account role access.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleSessionName": {
                        "type": "string",
                        "description": "Optional identifier for the assumed role session.\n"
                    },
                    "roleToAssume": {
                        "type": "string",
                        "description": "The Amazon Resource Name (ARN) of the role to assume.\n"
                    },
                    "secretAccessKey": {
                        "type": "string",
                        "description": "The AWS secret access key for signing programmatic requests.\n",
                        "secret": true
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n",
                        "willReplaceOnChanges": true
                    },
                    "sessionToken": {
                        "type": "string",
                        "description": "The AWS session token for signing programmatic requests.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceEndpointAzureDevOps:ServiceEndpointAzureDevOps": {
            "description": "Manages an Azure DevOps service endpoint within Azure DevOps.\n\n\u003e **Note** This resource is duplicate with `azuredevops.ServiceEndpointPipeline`,  will be removed in the future, use `azuredevops.ServiceEndpointPipeline` instead.\n\n\u003e **Note** Prerequisite: Extension [Configurable Pipeline Runner](https://marketplace.visualstudio.com/items?itemName=CSE-DevOps.RunPipelines) has been installed for the organization. \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceEndpointAzureDevOps = new azuredevops.ServiceEndpointAzureDevOps(\"exampleServiceEndpointAzureDevOps\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example Azure DevOps\",\n    orgUrl: \"https://dev.azure.com/testorganization\",\n    releaseApiUrl: \"https://vsrm.dev.azure.com/testorganization\",\n    personalAccessToken: \"0000000000000000000000000000000000000000000000000000\",\n    description: \"Managed by Terraform\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_service_endpoint_azure_dev_ops = azuredevops.ServiceEndpointAzureDevOps(\"exampleServiceEndpointAzureDevOps\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example Azure DevOps\",\n    org_url=\"https://dev.azure.com/testorganization\",\n    release_api_url=\"https://vsrm.dev.azure.com/testorganization\",\n    personal_access_token=\"0000000000000000000000000000000000000000000000000000\",\n    description=\"Managed by Terraform\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceEndpointAzureDevOps = new AzureDevOps.ServiceEndpointAzureDevOps(\"exampleServiceEndpointAzureDevOps\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example Azure DevOps\",\n        OrgUrl = \"https://dev.azure.com/testorganization\",\n        ReleaseApiUrl = \"https://vsrm.dev.azure.com/testorganization\",\n        PersonalAccessToken = \"0000000000000000000000000000000000000000000000000000\",\n        Description = \"Managed by Terraform\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointAzureDevOps(ctx, \"exampleServiceEndpointAzureDevOps\", \u0026azuredevops.ServiceEndpointAzureDevOpsArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Example Azure DevOps\"),\n\t\t\tOrgUrl:              pulumi.String(\"https://dev.azure.com/testorganization\"),\n\t\t\tReleaseApiUrl:       pulumi.String(\"https://vsrm.dev.azure.com/testorganization\"),\n\t\t\tPersonalAccessToken: pulumi.String(\"0000000000000000000000000000000000000000000000000000\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointAzureDevOps;\nimport com.pulumi.azuredevops.ServiceEndpointAzureDevOpsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceEndpointAzureDevOps = new ServiceEndpointAzureDevOps(\"exampleServiceEndpointAzureDevOps\", ServiceEndpointAzureDevOpsArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example Azure DevOps\")\n            .orgUrl(\"https://dev.azure.com/testorganization\")\n            .releaseApiUrl(\"https://vsrm.dev.azure.com/testorganization\")\n            .personalAccessToken(\"0000000000000000000000000000000000000000000000000000\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceEndpointAzureDevOps:\n    type: azuredevops:ServiceEndpointAzureDevOps\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example Azure DevOps\n      orgUrl: https://dev.azure.com/testorganization\n      releaseApiUrl: https://vsrm.dev.azure.com/testorganization\n      personalAccessToken: '0000000000000000000000000000000000000000000000000000'\n      description: Managed by Terraform\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Service Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Service Endpoint Azure DevOps can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:index/serviceEndpointAzureDevOps:ServiceEndpointAzureDevOps example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "orgUrl": {
                    "type": "string",
                    "description": "The organization URL.\n"
                },
                "personalAccessToken": {
                    "type": "string",
                    "description": "The Azure DevOps personal access token.\n",
                    "secret": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "releaseApiUrl": {
                    "type": "string",
                    "description": "The URL of the release API.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "required": [
                "authorization",
                "orgUrl",
                "personalAccessToken",
                "projectId",
                "releaseApiUrl",
                "serviceEndpointName"
            ],
            "inputProperties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "orgUrl": {
                    "type": "string",
                    "description": "The organization URL.\n"
                },
                "personalAccessToken": {
                    "type": "string",
                    "description": "The Azure DevOps personal access token.\n",
                    "secret": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n",
                    "willReplaceOnChanges": true
                },
                "releaseApiUrl": {
                    "type": "string",
                    "description": "The URL of the release API.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "orgUrl",
                "personalAccessToken",
                "projectId",
                "releaseApiUrl",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEndpointAzureDevOps resources.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "orgUrl": {
                        "type": "string",
                        "description": "The organization URL.\n"
                    },
                    "personalAccessToken": {
                        "type": "string",
                        "description": "The Azure DevOps personal access token.\n",
                        "secret": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "releaseApiUrl": {
                        "type": "string",
                        "description": "The URL of the release API.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceEndpointAzureEcr:ServiceEndpointAzureEcr": {
            "description": "Manages a Azure Container Registry service endpoint within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\n// azure container registry service connection\nconst exampleServiceEndpointAzureEcr = new azuredevops.ServiceEndpointAzureEcr(\"exampleServiceEndpointAzureEcr\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example AzureCR\",\n    resourceGroup: \"example-rg\",\n    azurecrSpnTenantid: \"00000000-0000-0000-0000-000000000000\",\n    azurecrName: \"ExampleAcr\",\n    azurecrSubscriptionId: \"00000000-0000-0000-0000-000000000000\",\n    azurecrSubscriptionName: \"subscription name\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\n# azure container registry service connection\nexample_service_endpoint_azure_ecr = azuredevops.ServiceEndpointAzureEcr(\"exampleServiceEndpointAzureEcr\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example AzureCR\",\n    resource_group=\"example-rg\",\n    azurecr_spn_tenantid=\"00000000-0000-0000-0000-000000000000\",\n    azurecr_name=\"ExampleAcr\",\n    azurecr_subscription_id=\"00000000-0000-0000-0000-000000000000\",\n    azurecr_subscription_name=\"subscription name\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    // azure container registry service connection\n    var exampleServiceEndpointAzureEcr = new AzureDevOps.ServiceEndpointAzureEcr(\"exampleServiceEndpointAzureEcr\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example AzureCR\",\n        ResourceGroup = \"example-rg\",\n        AzurecrSpnTenantid = \"00000000-0000-0000-0000-000000000000\",\n        AzurecrName = \"ExampleAcr\",\n        AzurecrSubscriptionId = \"00000000-0000-0000-0000-000000000000\",\n        AzurecrSubscriptionName = \"subscription name\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointAzureEcr(ctx, \"exampleServiceEndpointAzureEcr\", \u0026azuredevops.ServiceEndpointAzureEcrArgs{\n\t\t\tProjectId:               exampleProject.ID(),\n\t\t\tServiceEndpointName:     pulumi.String(\"Example AzureCR\"),\n\t\t\tResourceGroup:           pulumi.String(\"example-rg\"),\n\t\t\tAzurecrSpnTenantid:      pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurecrName:             pulumi.String(\"ExampleAcr\"),\n\t\t\tAzurecrSubscriptionId:   pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurecrSubscriptionName: pulumi.String(\"subscription name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointAzureEcr;\nimport com.pulumi.azuredevops.ServiceEndpointAzureEcrArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceEndpointAzureEcr = new ServiceEndpointAzureEcr(\"exampleServiceEndpointAzureEcr\", ServiceEndpointAzureEcrArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example AzureCR\")\n            .resourceGroup(\"example-rg\")\n            .azurecrSpnTenantid(\"00000000-0000-0000-0000-000000000000\")\n            .azurecrName(\"ExampleAcr\")\n            .azurecrSubscriptionId(\"00000000-0000-0000-0000-000000000000\")\n            .azurecrSubscriptionName(\"subscription name\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  # azure container registry service connection\n  exampleServiceEndpointAzureEcr:\n    type: azuredevops:ServiceEndpointAzureEcr\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example AzureCR\n      resourceGroup: example-rg\n      azurecrSpnTenantid: 00000000-0000-0000-0000-000000000000\n      azurecrName: ExampleAcr\n      azurecrSubscriptionId: 00000000-0000-0000-0000-000000000000\n      azurecrSubscriptionName: subscription name\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Service Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-7.0)\n- [Azure Container Registry REST API](https://docs.microsoft.com/en-us/rest/api/containerregistry/)\n\n\n## Import\n\nAzure DevOps Service Endpoint Azure Container Registry can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:index/serviceEndpointAzureEcr:ServiceEndpointAzureEcr example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "appObjectId": {
                    "type": "string"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "azSpnRoleAssignmentId": {
                    "type": "string"
                },
                "azSpnRolePermissions": {
                    "type": "string"
                },
                "azurecrName": {
                    "type": "string",
                    "description": "The Azure container registry name.\n"
                },
                "azurecrSpnTenantid": {
                    "type": "string",
                    "description": "The tenant id of the service principal.\n"
                },
                "azurecrSubscriptionId": {
                    "type": "string",
                    "description": "The subscription id of the Azure targets.\n"
                },
                "azurecrSubscriptionName": {
                    "type": "string",
                    "description": "The subscription name of the Azure targets.\n"
                },
                "description": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "resourceGroup": {
                    "type": "string",
                    "description": "The resource group to which the container registry belongs.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The name you will use to refer to this service connection in task inputs.\n"
                },
                "servicePrincipalId": {
                    "type": "string",
                    "description": "The service principal ID.\n"
                },
                "spnObjectId": {
                    "type": "string"
                }
            },
            "required": [
                "appObjectId",
                "authorization",
                "azSpnRoleAssignmentId",
                "azSpnRolePermissions",
                "azurecrName",
                "azurecrSpnTenantid",
                "azurecrSubscriptionId",
                "azurecrSubscriptionName",
                "projectId",
                "resourceGroup",
                "serviceEndpointName",
                "servicePrincipalId",
                "spnObjectId"
            ],
            "inputProperties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "azurecrName": {
                    "type": "string",
                    "description": "The Azure container registry name.\n",
                    "willReplaceOnChanges": true
                },
                "azurecrSpnTenantid": {
                    "type": "string",
                    "description": "The tenant id of the service principal.\n"
                },
                "azurecrSubscriptionId": {
                    "type": "string",
                    "description": "The subscription id of the Azure targets.\n"
                },
                "azurecrSubscriptionName": {
                    "type": "string",
                    "description": "The subscription name of the Azure targets.\n"
                },
                "description": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n",
                    "willReplaceOnChanges": true
                },
                "resourceGroup": {
                    "type": "string",
                    "description": "The resource group to which the container registry belongs.\n",
                    "willReplaceOnChanges": true
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The name you will use to refer to this service connection in task inputs.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "azurecrName",
                "azurecrSpnTenantid",
                "azurecrSubscriptionId",
                "azurecrSubscriptionName",
                "projectId",
                "resourceGroup",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEndpointAzureEcr resources.\n",
                "properties": {
                    "appObjectId": {
                        "type": "string"
                    },
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "azSpnRoleAssignmentId": {
                        "type": "string"
                    },
                    "azSpnRolePermissions": {
                        "type": "string"
                    },
                    "azurecrName": {
                        "type": "string",
                        "description": "The Azure container registry name.\n",
                        "willReplaceOnChanges": true
                    },
                    "azurecrSpnTenantid": {
                        "type": "string",
                        "description": "The tenant id of the service principal.\n"
                    },
                    "azurecrSubscriptionId": {
                        "type": "string",
                        "description": "The subscription id of the Azure targets.\n"
                    },
                    "azurecrSubscriptionName": {
                        "type": "string",
                        "description": "The subscription name of the Azure targets.\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "resourceGroup": {
                        "type": "string",
                        "description": "The resource group to which the container registry belongs.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The name you will use to refer to this service connection in task inputs.\n",
                        "willReplaceOnChanges": true
                    },
                    "servicePrincipalId": {
                        "type": "string",
                        "description": "The service principal ID.\n"
                    },
                    "spnObjectId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceEndpointAzureRM:ServiceEndpointAzureRM": {
            "description": "Manages Manual or Automatic AzureRM service endpoint within Azure DevOps.\n\n## Requirements (Manual AzureRM Service Endpoint)\n\nBefore to create a service end point in Azure DevOps, you need to create a Service Principal in your Azure subscription.\n\nFor detailed steps to create a service principal with Azure cli see the [documentation](https://docs.microsoft.com/en-us/cli/azure/create-an-azure-service-principal-azure-cli?view=azure-cli-latest)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Service Principal Manual AzureRM Service Endpoint (Subscription Scoped)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceEndpointAzureRM = new azuredevops.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example AzureRM\",\n    description: \"Managed by Terraform\",\n    serviceEndpointAuthenticationScheme: \"ServicePrincipal\",\n    credentials: {\n        serviceprincipalid: \"00000000-0000-0000-0000-000000000000\",\n        serviceprincipalkey: \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    },\n    azurermSpnTenantid: \"00000000-0000-0000-0000-000000000000\",\n    azurermSubscriptionId: \"00000000-0000-0000-0000-000000000000\",\n    azurermSubscriptionName: \"Example Subscription Name\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_service_endpoint_azure_rm = azuredevops.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example AzureRM\",\n    description=\"Managed by Terraform\",\n    service_endpoint_authentication_scheme=\"ServicePrincipal\",\n    credentials=azuredevops.ServiceEndpointAzureRMCredentialsArgs(\n        serviceprincipalid=\"00000000-0000-0000-0000-000000000000\",\n        serviceprincipalkey=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    ),\n    azurerm_spn_tenantid=\"00000000-0000-0000-0000-000000000000\",\n    azurerm_subscription_id=\"00000000-0000-0000-0000-000000000000\",\n    azurerm_subscription_name=\"Example Subscription Name\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceEndpointAzureRM = new AzureDevOps.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example AzureRM\",\n        Description = \"Managed by Terraform\",\n        ServiceEndpointAuthenticationScheme = \"ServicePrincipal\",\n        Credentials = new AzureDevOps.Inputs.ServiceEndpointAzureRMCredentialsArgs\n        {\n            Serviceprincipalid = \"00000000-0000-0000-0000-000000000000\",\n            Serviceprincipalkey = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n        },\n        AzurermSpnTenantid = \"00000000-0000-0000-0000-000000000000\",\n        AzurermSubscriptionId = \"00000000-0000-0000-0000-000000000000\",\n        AzurermSubscriptionName = \"Example Subscription Name\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointAzureRM(ctx, \"exampleServiceEndpointAzureRM\", \u0026azuredevops.ServiceEndpointAzureRMArgs{\n\t\t\tProjectId:                           exampleProject.ID(),\n\t\t\tServiceEndpointName:                 pulumi.String(\"Example AzureRM\"),\n\t\t\tDescription:                         pulumi.String(\"Managed by Terraform\"),\n\t\t\tServiceEndpointAuthenticationScheme: pulumi.String(\"ServicePrincipal\"),\n\t\t\tCredentials: \u0026azuredevops.ServiceEndpointAzureRMCredentialsArgs{\n\t\t\t\tServiceprincipalid:  pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\t\tServiceprincipalkey: pulumi.String(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"),\n\t\t\t},\n\t\t\tAzurermSpnTenantid:      pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurermSubscriptionId:   pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurermSubscriptionName: pulumi.String(\"Example Subscription Name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointAzureRM;\nimport com.pulumi.azuredevops.ServiceEndpointAzureRMArgs;\nimport com.pulumi.azuredevops.inputs.ServiceEndpointAzureRMCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceEndpointAzureRM = new ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", ServiceEndpointAzureRMArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example AzureRM\")\n            .description(\"Managed by Terraform\")\n            .serviceEndpointAuthenticationScheme(\"ServicePrincipal\")\n            .credentials(ServiceEndpointAzureRMCredentialsArgs.builder()\n                .serviceprincipalid(\"00000000-0000-0000-0000-000000000000\")\n                .serviceprincipalkey(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\")\n                .build())\n            .azurermSpnTenantid(\"00000000-0000-0000-0000-000000000000\")\n            .azurermSubscriptionId(\"00000000-0000-0000-0000-000000000000\")\n            .azurermSubscriptionName(\"Example Subscription Name\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceEndpointAzureRM:\n    type: azuredevops:ServiceEndpointAzureRM\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example AzureRM\n      description: Managed by Terraform\n      serviceEndpointAuthenticationScheme: ServicePrincipal\n      credentials:\n        serviceprincipalid: 00000000-0000-0000-0000-000000000000\n        serviceprincipalkey: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n      azurermSpnTenantid: 00000000-0000-0000-0000-000000000000\n      azurermSubscriptionId: 00000000-0000-0000-0000-000000000000\n      azurermSubscriptionName: Example Subscription Name\n```\n{{% /example %}}\n{{% example %}}\n### Service Principal Manual AzureRM Service Endpoint (ManagementGroup Scoped)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceEndpointAzureRM = new azuredevops.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example AzureRM\",\n    description: \"Managed by Terraform\",\n    serviceEndpointAuthenticationScheme: \"ServicePrincipal\",\n    credentials: {\n        serviceprincipalid: \"00000000-0000-0000-0000-000000000000\",\n        serviceprincipalkey: \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    },\n    azurermSpnTenantid: \"00000000-0000-0000-0000-000000000000\",\n    azurermManagementGroupId: \"managementGroup\",\n    azurermManagementGroupName: \"managementGroup\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_service_endpoint_azure_rm = azuredevops.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example AzureRM\",\n    description=\"Managed by Terraform\",\n    service_endpoint_authentication_scheme=\"ServicePrincipal\",\n    credentials=azuredevops.ServiceEndpointAzureRMCredentialsArgs(\n        serviceprincipalid=\"00000000-0000-0000-0000-000000000000\",\n        serviceprincipalkey=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    ),\n    azurerm_spn_tenantid=\"00000000-0000-0000-0000-000000000000\",\n    azurerm_management_group_id=\"managementGroup\",\n    azurerm_management_group_name=\"managementGroup\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceEndpointAzureRM = new AzureDevOps.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example AzureRM\",\n        Description = \"Managed by Terraform\",\n        ServiceEndpointAuthenticationScheme = \"ServicePrincipal\",\n        Credentials = new AzureDevOps.Inputs.ServiceEndpointAzureRMCredentialsArgs\n        {\n            Serviceprincipalid = \"00000000-0000-0000-0000-000000000000\",\n            Serviceprincipalkey = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n        },\n        AzurermSpnTenantid = \"00000000-0000-0000-0000-000000000000\",\n        AzurermManagementGroupId = \"managementGroup\",\n        AzurermManagementGroupName = \"managementGroup\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointAzureRM(ctx, \"exampleServiceEndpointAzureRM\", \u0026azuredevops.ServiceEndpointAzureRMArgs{\n\t\t\tProjectId:                           exampleProject.ID(),\n\t\t\tServiceEndpointName:                 pulumi.String(\"Example AzureRM\"),\n\t\t\tDescription:                         pulumi.String(\"Managed by Terraform\"),\n\t\t\tServiceEndpointAuthenticationScheme: pulumi.String(\"ServicePrincipal\"),\n\t\t\tCredentials: \u0026azuredevops.ServiceEndpointAzureRMCredentialsArgs{\n\t\t\t\tServiceprincipalid:  pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\t\tServiceprincipalkey: pulumi.String(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"),\n\t\t\t},\n\t\t\tAzurermSpnTenantid:         pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurermManagementGroupId:   pulumi.String(\"managementGroup\"),\n\t\t\tAzurermManagementGroupName: pulumi.String(\"managementGroup\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointAzureRM;\nimport com.pulumi.azuredevops.ServiceEndpointAzureRMArgs;\nimport com.pulumi.azuredevops.inputs.ServiceEndpointAzureRMCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceEndpointAzureRM = new ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", ServiceEndpointAzureRMArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example AzureRM\")\n            .description(\"Managed by Terraform\")\n            .serviceEndpointAuthenticationScheme(\"ServicePrincipal\")\n            .credentials(ServiceEndpointAzureRMCredentialsArgs.builder()\n                .serviceprincipalid(\"00000000-0000-0000-0000-000000000000\")\n                .serviceprincipalkey(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\")\n                .build())\n            .azurermSpnTenantid(\"00000000-0000-0000-0000-000000000000\")\n            .azurermManagementGroupId(\"managementGroup\")\n            .azurermManagementGroupName(\"managementGroup\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceEndpointAzureRM:\n    type: azuredevops:ServiceEndpointAzureRM\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example AzureRM\n      description: Managed by Terraform\n      serviceEndpointAuthenticationScheme: ServicePrincipal\n      credentials:\n        serviceprincipalid: 00000000-0000-0000-0000-000000000000\n        serviceprincipalkey: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n      azurermSpnTenantid: 00000000-0000-0000-0000-000000000000\n      azurermManagementGroupId: managementGroup\n      azurermManagementGroupName: managementGroup\n```\n{{% /example %}}\n{{% example %}}\n### Service Principal Automatic AzureRM Service Endpoint\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst exampleServiceEndpointAzureRM = new azuredevops.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example AzureRM\",\n    serviceEndpointAuthenticationScheme: \"ServicePrincipal\",\n    azurermSpnTenantid: \"00000000-0000-0000-0000-000000000000\",\n    azurermSubscriptionId: \"00000000-0000-0000-0000-000000000000\",\n    azurermSubscriptionName: \"Example Subscription Name\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nexample_service_endpoint_azure_rm = azuredevops.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example AzureRM\",\n    service_endpoint_authentication_scheme=\"ServicePrincipal\",\n    azurerm_spn_tenantid=\"00000000-0000-0000-0000-000000000000\",\n    azurerm_subscription_id=\"00000000-0000-0000-0000-000000000000\",\n    azurerm_subscription_name=\"Example Subscription Name\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n    });\n\n    var exampleServiceEndpointAzureRM = new AzureDevOps.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example AzureRM\",\n        ServiceEndpointAuthenticationScheme = \"ServicePrincipal\",\n        AzurermSpnTenantid = \"00000000-0000-0000-0000-000000000000\",\n        AzurermSubscriptionId = \"00000000-0000-0000-0000-000000000000\",\n        AzurermSubscriptionName = \"Example Subscription Name\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointAzureRM(ctx, \"exampleServiceEndpointAzureRM\", \u0026azuredevops.ServiceEndpointAzureRMArgs{\n\t\t\tProjectId:                           exampleProject.ID(),\n\t\t\tServiceEndpointName:                 pulumi.String(\"Example AzureRM\"),\n\t\t\tServiceEndpointAuthenticationScheme: pulumi.String(\"ServicePrincipal\"),\n\t\t\tAzurermSpnTenantid:                  pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurermSubscriptionId:               pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurermSubscriptionName:             pulumi.String(\"Example Subscription Name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointAzureRM;\nimport com.pulumi.azuredevops.ServiceEndpointAzureRMArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .build());\n\n        var exampleServiceEndpointAzureRM = new ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", ServiceEndpointAzureRMArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example AzureRM\")\n            .serviceEndpointAuthenticationScheme(\"ServicePrincipal\")\n            .azurermSpnTenantid(\"00000000-0000-0000-0000-000000000000\")\n            .azurermSubscriptionId(\"00000000-0000-0000-0000-000000000000\")\n            .azurermSubscriptionName(\"Example Subscription Name\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n  exampleServiceEndpointAzureRM:\n    type: azuredevops:ServiceEndpointAzureRM\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example AzureRM\n      serviceEndpointAuthenticationScheme: ServicePrincipal\n      azurermSpnTenantid: 00000000-0000-0000-0000-000000000000\n      azurermSubscriptionId: 00000000-0000-0000-0000-000000000000\n      azurermSubscriptionName: Example Subscription Name\n```\n{{% /example %}}\n{{% example %}}\n### Workload Identity Federation Manual AzureRM Service Endpoint (Subscription Scoped)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\nimport * as azurerm from \"@pulumi/azurerm\";\n\nconst serviceConnectionName = \"example-federated-sc\";\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst identity = new azurerm.index.Azurerm_resource_group(\"identity\", {\n    name: \"identity\",\n    location: \"UK South\",\n});\nconst exampleazurerm_user_assigned_identity = new azurerm.index.Azurerm_user_assigned_identity(\"exampleazurerm_user_assigned_identity\", {\n    location: identity.location,\n    name: \"example-identity\",\n    resourceGroupName: \"azurerm_resource_group.identity.name\",\n});\nconst exampleServiceEndpointAzureRM = new azuredevops.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: serviceConnectionName,\n    description: \"Managed by Terraform\",\n    serviceEndpointAuthenticationScheme: \"WorkloadIdentityFederation\",\n    credentials: {\n        serviceprincipalid: exampleazurerm_user_assigned_identity.clientId,\n    },\n    azurermSpnTenantid: \"00000000-0000-0000-0000-000000000000\",\n    azurermSubscriptionId: \"00000000-0000-0000-0000-000000000000\",\n    azurermSubscriptionName: \"Example Subscription Name\",\n});\nconst exampleazurerm_federated_identity_credential = new azurerm.index.Azurerm_federated_identity_credential(\"exampleazurerm_federated_identity_credential\", {\n    name: \"example-federated-credential\",\n    resourceGroupName: identity.name,\n    parentId: exampleazurerm_user_assigned_identity.id,\n    audience: [\"api://AzureADTokenExchange\"],\n    issuer: exampleServiceEndpointAzureRM.workloadIdentityFederationIssuer,\n    subject: exampleServiceEndpointAzureRM.workloadIdentityFederationSubject,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\nimport pulumi_azurerm as azurerm\n\nservice_connection_name = \"example-federated-sc\"\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nidentity = azurerm.index.Azurerm_resource_group(\"identity\",\n    name=identity,\n    location=UK South)\nexampleazurerm_user_assigned_identity = azurerm.index.Azurerm_user_assigned_identity(\"exampleazurerm_user_assigned_identity\",\n    location=identity.location,\n    name=example-identity,\n    resource_group_name=azurerm_resource_group.identity.name)\nexample_service_endpoint_azure_rm = azuredevops.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\",\n    project_id=example_project.id,\n    service_endpoint_name=service_connection_name,\n    description=\"Managed by Terraform\",\n    service_endpoint_authentication_scheme=\"WorkloadIdentityFederation\",\n    credentials=azuredevops.ServiceEndpointAzureRMCredentialsArgs(\n        serviceprincipalid=exampleazurerm_user_assigned_identity[\"clientId\"],\n    ),\n    azurerm_spn_tenantid=\"00000000-0000-0000-0000-000000000000\",\n    azurerm_subscription_id=\"00000000-0000-0000-0000-000000000000\",\n    azurerm_subscription_name=\"Example Subscription Name\")\nexampleazurerm_federated_identity_credential = azurerm.index.Azurerm_federated_identity_credential(\"exampleazurerm_federated_identity_credential\",\n    name=example-federated-credential,\n    resource_group_name=identity.name,\n    parent_id=exampleazurerm_user_assigned_identity.id,\n    audience=[api://AzureADTokenExchange],\n    issuer=example_service_endpoint_azure_rm.workload_identity_federation_issuer,\n    subject=example_service_endpoint_azure_rm.workload_identity_federation_subject)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\nusing Azurerm = Pulumi.Azurerm;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var serviceConnectionName = \"example-federated-sc\";\n\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var identity = new Azurerm.Index.Azurerm_resource_group(\"identity\", new()\n    {\n        Name = \"identity\",\n        Location = \"UK South\",\n    });\n\n    var exampleazurerm_user_assigned_identity = new Azurerm.Index.Azurerm_user_assigned_identity(\"exampleazurerm_user_assigned_identity\", new()\n    {\n        Location = identity.Location,\n        Name = \"example-identity\",\n        ResourceGroupName = \"azurerm_resource_group.identity.name\",\n    });\n\n    var exampleServiceEndpointAzureRM = new AzureDevOps.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = serviceConnectionName,\n        Description = \"Managed by Terraform\",\n        ServiceEndpointAuthenticationScheme = \"WorkloadIdentityFederation\",\n        Credentials = new AzureDevOps.Inputs.ServiceEndpointAzureRMCredentialsArgs\n        {\n            Serviceprincipalid = exampleazurerm_user_assigned_identity.ClientId,\n        },\n        AzurermSpnTenantid = \"00000000-0000-0000-0000-000000000000\",\n        AzurermSubscriptionId = \"00000000-0000-0000-0000-000000000000\",\n        AzurermSubscriptionName = \"Example Subscription Name\",\n    });\n\n    var exampleazurerm_federated_identity_credential = new Azurerm.Index.Azurerm_federated_identity_credential(\"exampleazurerm_federated_identity_credential\", new()\n    {\n        Name = \"example-federated-credential\",\n        ResourceGroupName = identity.Name,\n        ParentId = exampleazurerm_user_assigned_identity.Id,\n        Audience = new[]\n        {\n            \"api://AzureADTokenExchange\",\n        },\n        Issuer = exampleServiceEndpointAzureRM.WorkloadIdentityFederationIssuer,\n        Subject = exampleServiceEndpointAzureRM.WorkloadIdentityFederationSubject,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi-azurerm/sdk/v1/go/azurerm\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tserviceConnectionName := \"example-federated-sc\"\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tidentity, err := index.NewAzurerm_resource_group(ctx, \"identity\", \u0026index.Azurerm_resource_groupArgs{\n\t\t\tName:     \"identity\",\n\t\t\tLocation: \"UK South\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleazurerm_user_assigned_identity, err := index.NewAzurerm_user_assigned_identity(ctx, \"exampleazurerm_user_assigned_identity\", \u0026index.Azurerm_user_assigned_identityArgs{\n\t\t\tLocation:          identity.Location,\n\t\t\tName:              \"example-identity\",\n\t\t\tResourceGroupName: \"azurerm_resource_group.identity.name\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleServiceEndpointAzureRM, err := azuredevops.NewServiceEndpointAzureRM(ctx, \"exampleServiceEndpointAzureRM\", \u0026azuredevops.ServiceEndpointAzureRMArgs{\n\t\t\tProjectId:                           exampleProject.ID(),\n\t\t\tServiceEndpointName:                 pulumi.String(serviceConnectionName),\n\t\t\tDescription:                         pulumi.String(\"Managed by Terraform\"),\n\t\t\tServiceEndpointAuthenticationScheme: pulumi.String(\"WorkloadIdentityFederation\"),\n\t\t\tCredentials: \u0026azuredevops.ServiceEndpointAzureRMCredentialsArgs{\n\t\t\t\tServiceprincipalid: exampleazurerm_user_assigned_identity.ClientId,\n\t\t\t},\n\t\t\tAzurermSpnTenantid:      pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurermSubscriptionId:   pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurermSubscriptionName: pulumi.String(\"Example Subscription Name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = index.NewAzurerm_federated_identity_credential(ctx, \"exampleazurerm_federated_identity_credential\", \u0026index.Azurerm_federated_identity_credentialArgs{\n\t\t\tName:              \"example-federated-credential\",\n\t\t\tResourceGroupName: identity.Name,\n\t\t\tParentId:          exampleazurerm_user_assigned_identity.Id,\n\t\t\tAudience: []string{\n\t\t\t\t\"api://AzureADTokenExchange\",\n\t\t\t},\n\t\t\tIssuer:  exampleServiceEndpointAzureRM.WorkloadIdentityFederationIssuer,\n\t\t\tSubject: exampleServiceEndpointAzureRM.WorkloadIdentityFederationSubject,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azurerm.azurerm_resource_group;\nimport com.pulumi.azurerm.Azurerm_resource_groupArgs;\nimport com.pulumi.azurerm.azurerm_user_assigned_identity;\nimport com.pulumi.azurerm.Azurerm_user_assigned_identityArgs;\nimport com.pulumi.azuredevops.ServiceEndpointAzureRM;\nimport com.pulumi.azuredevops.ServiceEndpointAzureRMArgs;\nimport com.pulumi.azuredevops.inputs.ServiceEndpointAzureRMCredentialsArgs;\nimport com.pulumi.azurerm.azurerm_federated_identity_credential;\nimport com.pulumi.azurerm.Azurerm_federated_identity_credentialArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var serviceConnectionName = \"example-federated-sc\";\n\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var identity = new Azurerm_resource_group(\"identity\", Azurerm_resource_groupArgs.builder()        \n            .name(\"identity\")\n            .location(\"UK South\")\n            .build());\n\n        var exampleazurerm_user_assigned_identity = new Azurerm_user_assigned_identity(\"exampleazurerm_user_assigned_identity\", Azurerm_user_assigned_identityArgs.builder()        \n            .location(identity.location())\n            .name(\"example-identity\")\n            .resourceGroupName(\"azurerm_resource_group.identity.name\")\n            .build());\n\n        var exampleServiceEndpointAzureRM = new ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", ServiceEndpointAzureRMArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(serviceConnectionName)\n            .description(\"Managed by Terraform\")\n            .serviceEndpointAuthenticationScheme(\"WorkloadIdentityFederation\")\n            .credentials(ServiceEndpointAzureRMCredentialsArgs.builder()\n                .serviceprincipalid(exampleazurerm_user_assigned_identity.clientId())\n                .build())\n            .azurermSpnTenantid(\"00000000-0000-0000-0000-000000000000\")\n            .azurermSubscriptionId(\"00000000-0000-0000-0000-000000000000\")\n            .azurermSubscriptionName(\"Example Subscription Name\")\n            .build());\n\n        var exampleazurerm_federated_identity_credential = new Azurerm_federated_identity_credential(\"exampleazurerm_federated_identity_credential\", Azurerm_federated_identity_credentialArgs.builder()        \n            .name(\"example-federated-credential\")\n            .resourceGroupName(identity.name())\n            .parentId(exampleazurerm_user_assigned_identity.id())\n            .audience(\"api://AzureADTokenExchange\")\n            .issuer(exampleServiceEndpointAzureRM.workloadIdentityFederationIssuer())\n            .subject(exampleServiceEndpointAzureRM.workloadIdentityFederationSubject())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  identity:\n    type: azurerm:azurerm_resource_group\n    properties:\n      name: identity\n      location: UK South\n  exampleazurerm_user_assigned_identity:\n    type: azurerm:azurerm_user_assigned_identity\n    properties:\n      location: ${identity.location}\n      name: example-identity\n      resourceGroupName: azurerm_resource_group.identity.name\n  exampleServiceEndpointAzureRM:\n    type: azuredevops:ServiceEndpointAzureRM\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: ${serviceConnectionName}\n      description: Managed by Terraform\n      serviceEndpointAuthenticationScheme: WorkloadIdentityFederation\n      credentials:\n        serviceprincipalid: ${exampleazurerm_user_assigned_identity.clientId}\n      azurermSpnTenantid: 00000000-0000-0000-0000-000000000000\n      azurermSubscriptionId: 00000000-0000-0000-0000-000000000000\n      azurermSubscriptionName: Example Subscription Name\n  exampleazurerm_federated_identity_credential:\n    type: azurerm:azurerm_federated_identity_credential\n    properties:\n      name: example-federated-credential\n      resourceGroupName: ${identity.name}\n      parentId: ${exampleazurerm_user_assigned_identity.id}\n      audience:\n        - api://AzureADTokenExchange\n      issuer: ${exampleServiceEndpointAzureRM.workloadIdentityFederationIssuer}\n      subject: ${exampleServiceEndpointAzureRM.workloadIdentityFederationSubject}\nvariables:\n  serviceConnectionName: example-federated-sc\n```\n{{% /example %}}\n{{% example %}}\n### Workload Identity Federation Automatic AzureRM Service Endpoint\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst exampleServiceEndpointAzureRM = new azuredevops.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example AzureRM\",\n    serviceEndpointAuthenticationScheme: \"WorkloadIdentityFederation\",\n    azurermSpnTenantid: \"00000000-0000-0000-0000-000000000000\",\n    azurermSubscriptionId: \"00000000-0000-0000-0000-000000000000\",\n    azurermSubscriptionName: \"Example Subscription Name\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nexample_service_endpoint_azure_rm = azuredevops.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example AzureRM\",\n    service_endpoint_authentication_scheme=\"WorkloadIdentityFederation\",\n    azurerm_spn_tenantid=\"00000000-0000-0000-0000-000000000000\",\n    azurerm_subscription_id=\"00000000-0000-0000-0000-000000000000\",\n    azurerm_subscription_name=\"Example Subscription Name\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n    });\n\n    var exampleServiceEndpointAzureRM = new AzureDevOps.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example AzureRM\",\n        ServiceEndpointAuthenticationScheme = \"WorkloadIdentityFederation\",\n        AzurermSpnTenantid = \"00000000-0000-0000-0000-000000000000\",\n        AzurermSubscriptionId = \"00000000-0000-0000-0000-000000000000\",\n        AzurermSubscriptionName = \"Example Subscription Name\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointAzureRM(ctx, \"exampleServiceEndpointAzureRM\", \u0026azuredevops.ServiceEndpointAzureRMArgs{\n\t\t\tProjectId:                           exampleProject.ID(),\n\t\t\tServiceEndpointName:                 pulumi.String(\"Example AzureRM\"),\n\t\t\tServiceEndpointAuthenticationScheme: pulumi.String(\"WorkloadIdentityFederation\"),\n\t\t\tAzurermSpnTenantid:                  pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurermSubscriptionId:               pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurermSubscriptionName:             pulumi.String(\"Example Subscription Name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointAzureRM;\nimport com.pulumi.azuredevops.ServiceEndpointAzureRMArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .build());\n\n        var exampleServiceEndpointAzureRM = new ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", ServiceEndpointAzureRMArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example AzureRM\")\n            .serviceEndpointAuthenticationScheme(\"WorkloadIdentityFederation\")\n            .azurermSpnTenantid(\"00000000-0000-0000-0000-000000000000\")\n            .azurermSubscriptionId(\"00000000-0000-0000-0000-000000000000\")\n            .azurermSubscriptionName(\"Example Subscription Name\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n  exampleServiceEndpointAzureRM:\n    type: azuredevops:ServiceEndpointAzureRM\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example AzureRM\n      serviceEndpointAuthenticationScheme: WorkloadIdentityFederation\n      azurermSpnTenantid: 00000000-0000-0000-0000-000000000000\n      azurermSubscriptionId: 00000000-0000-0000-0000-000000000000\n      azurermSubscriptionName: Example Subscription Name\n```\n{{% /example %}}\n{{% example %}}\n### Managed Identity AzureRM Service Endpoint\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst exampleServiceEndpointAzureRM = new azuredevops.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example AzureRM\",\n    serviceEndpointAuthenticationScheme: \"ManagedServiceIdentity\",\n    azurermSpnTenantid: \"00000000-0000-0000-0000-000000000000\",\n    azurermSubscriptionId: \"00000000-0000-0000-0000-000000000000\",\n    azurermSubscriptionName: \"Example Subscription Name\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nexample_service_endpoint_azure_rm = azuredevops.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example AzureRM\",\n    service_endpoint_authentication_scheme=\"ManagedServiceIdentity\",\n    azurerm_spn_tenantid=\"00000000-0000-0000-0000-000000000000\",\n    azurerm_subscription_id=\"00000000-0000-0000-0000-000000000000\",\n    azurerm_subscription_name=\"Example Subscription Name\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n    });\n\n    var exampleServiceEndpointAzureRM = new AzureDevOps.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example AzureRM\",\n        ServiceEndpointAuthenticationScheme = \"ManagedServiceIdentity\",\n        AzurermSpnTenantid = \"00000000-0000-0000-0000-000000000000\",\n        AzurermSubscriptionId = \"00000000-0000-0000-0000-000000000000\",\n        AzurermSubscriptionName = \"Example Subscription Name\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointAzureRM(ctx, \"exampleServiceEndpointAzureRM\", \u0026azuredevops.ServiceEndpointAzureRMArgs{\n\t\t\tProjectId:                           exampleProject.ID(),\n\t\t\tServiceEndpointName:                 pulumi.String(\"Example AzureRM\"),\n\t\t\tServiceEndpointAuthenticationScheme: pulumi.String(\"ManagedServiceIdentity\"),\n\t\t\tAzurermSpnTenantid:                  pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurermSubscriptionId:               pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurermSubscriptionName:             pulumi.String(\"Example Subscription Name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointAzureRM;\nimport com.pulumi.azuredevops.ServiceEndpointAzureRMArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .build());\n\n        var exampleServiceEndpointAzureRM = new ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", ServiceEndpointAzureRMArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example AzureRM\")\n            .serviceEndpointAuthenticationScheme(\"ManagedServiceIdentity\")\n            .azurermSpnTenantid(\"00000000-0000-0000-0000-000000000000\")\n            .azurermSubscriptionId(\"00000000-0000-0000-0000-000000000000\")\n            .azurermSubscriptionName(\"Example Subscription Name\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n  exampleServiceEndpointAzureRM:\n    type: azuredevops:ServiceEndpointAzureRM\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example AzureRM\n      serviceEndpointAuthenticationScheme: ManagedServiceIdentity\n      azurermSpnTenantid: 00000000-0000-0000-0000-000000000000\n      azurermSubscriptionId: 00000000-0000-0000-0000-000000000000\n      azurermSubscriptionName: Example Subscription Name\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Service End points](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Service Endpoint Azure Resource Manage can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:index/serviceEndpointAzureRM:ServiceEndpointAzureRM example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "azurermManagementGroupId": {
                    "type": "string",
                    "description": "The Management group ID of the Azure targets.\n"
                },
                "azurermManagementGroupName": {
                    "type": "string",
                    "description": "The Management group Name of the targets.\n"
                },
                "azurermSpnTenantid": {
                    "type": "string",
                    "description": "The Tenant ID if the service principal.\n"
                },
                "azurermSubscriptionId": {
                    "type": "string",
                    "description": "The Subscription ID of the Azure targets.\n"
                },
                "azurermSubscriptionName": {
                    "type": "string",
                    "description": "The Subscription Name of the targets.\n"
                },
                "credentials": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointAzureRMCredentials:ServiceEndpointAzureRMCredentials",
                    "description": "A `credentials` block.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Service connection description.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "The Cloud Environment to use. Defaults to `AzureCloud`. Possible values are `AzureCloud`, `AzureChinaCloud`. Changing this forces a new resource to be created.\n\n\u003e **NOTE:** One of either `Subscription` scoped i.e. `azurerm_subscription_id`, `azurerm_subscription_name` or `ManagementGroup` scoped i.e. `azurerm_management_group_id`, `azurerm_management_group_name` values must be specified.\n"
                },
                "features": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointAzureRMFeatures:ServiceEndpointAzureRMFeatures",
                    "description": "A `features` block.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "resourceGroup": {
                    "type": "string",
                    "description": "The resource group used for scope of automatic service endpoint.\n"
                },
                "serviceEndpointAuthenticationScheme": {
                    "type": "string",
                    "description": "Specifies the type of azurerm endpoint, either `WorkloadIdentityFederation`, `ManagedServiceIdentity` or `ServicePrincipal`. Defaults to `ServicePrincipal` for backwards compatibility.\n\n\u003e **NOTE:** The `WorkloadIdentityFederation` authentication scheme is currently in private preview. Your organisation must be part of the preview and the feature toggle must be turned on to use it. More details can be found [here](https://aka.ms/azdo-rm-workload-identity).\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint Name.\n"
                },
                "servicePrincipalId": {
                    "type": "string",
                    "description": "The Application(Client) ID of the Service Principal.\n"
                },
                "workloadIdentityFederationIssuer": {
                    "type": "string",
                    "description": "The issuer if `service_endpoint_authentication_scheme` is set to `WorkloadIdentityFederation`. This looks like `https://vstoken.dev.azure.com/00000000-0000-0000-0000-000000000000`, where the GUID is the Organization ID of your Azure DevOps Organisation.\n"
                },
                "workloadIdentityFederationSubject": {
                    "type": "string",
                    "description": "The subject if `service_endpoint_authentication_scheme` is set to `WorkloadIdentityFederation`. This looks like `sc://\u003corganisation\u003e/\u003cproject\u003e/\u003cservice-connection-name\u003e`.\n"
                }
            },
            "required": [
                "authorization",
                "azurermSpnTenantid",
                "projectId",
                "serviceEndpointName",
                "servicePrincipalId",
                "workloadIdentityFederationIssuer",
                "workloadIdentityFederationSubject"
            ],
            "inputProperties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "azurermManagementGroupId": {
                    "type": "string",
                    "description": "The Management group ID of the Azure targets.\n"
                },
                "azurermManagementGroupName": {
                    "type": "string",
                    "description": "The Management group Name of the targets.\n"
                },
                "azurermSpnTenantid": {
                    "type": "string",
                    "description": "The Tenant ID if the service principal.\n"
                },
                "azurermSubscriptionId": {
                    "type": "string",
                    "description": "The Subscription ID of the Azure targets.\n"
                },
                "azurermSubscriptionName": {
                    "type": "string",
                    "description": "The Subscription Name of the targets.\n"
                },
                "credentials": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointAzureRMCredentials:ServiceEndpointAzureRMCredentials",
                    "description": "A `credentials` block.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Service connection description.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "The Cloud Environment to use. Defaults to `AzureCloud`. Possible values are `AzureCloud`, `AzureChinaCloud`. Changing this forces a new resource to be created.\n\n\u003e **NOTE:** One of either `Subscription` scoped i.e. `azurerm_subscription_id`, `azurerm_subscription_name` or `ManagementGroup` scoped i.e. `azurerm_management_group_id`, `azurerm_management_group_name` values must be specified.\n",
                    "willReplaceOnChanges": true
                },
                "features": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointAzureRMFeatures:ServiceEndpointAzureRMFeatures",
                    "description": "A `features` block.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n",
                    "willReplaceOnChanges": true
                },
                "resourceGroup": {
                    "type": "string",
                    "description": "The resource group used for scope of automatic service endpoint.\n",
                    "willReplaceOnChanges": true
                },
                "serviceEndpointAuthenticationScheme": {
                    "type": "string",
                    "description": "Specifies the type of azurerm endpoint, either `WorkloadIdentityFederation`, `ManagedServiceIdentity` or `ServicePrincipal`. Defaults to `ServicePrincipal` for backwards compatibility.\n\n\u003e **NOTE:** The `WorkloadIdentityFederation` authentication scheme is currently in private preview. Your organisation must be part of the preview and the feature toggle must be turned on to use it. More details can be found [here](https://aka.ms/azdo-rm-workload-identity).\n",
                    "willReplaceOnChanges": true
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint Name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "azurermSpnTenantid",
                "projectId",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEndpointAzureRM resources.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "azurermManagementGroupId": {
                        "type": "string",
                        "description": "The Management group ID of the Azure targets.\n"
                    },
                    "azurermManagementGroupName": {
                        "type": "string",
                        "description": "The Management group Name of the targets.\n"
                    },
                    "azurermSpnTenantid": {
                        "type": "string",
                        "description": "The Tenant ID if the service principal.\n"
                    },
                    "azurermSubscriptionId": {
                        "type": "string",
                        "description": "The Subscription ID of the Azure targets.\n"
                    },
                    "azurermSubscriptionName": {
                        "type": "string",
                        "description": "The Subscription Name of the targets.\n"
                    },
                    "credentials": {
                        "$ref": "#/types/azuredevops:index/ServiceEndpointAzureRMCredentials:ServiceEndpointAzureRMCredentials",
                        "description": "A `credentials` block.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Service connection description.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "The Cloud Environment to use. Defaults to `AzureCloud`. Possible values are `AzureCloud`, `AzureChinaCloud`. Changing this forces a new resource to be created.\n\n\u003e **NOTE:** One of either `Subscription` scoped i.e. `azurerm_subscription_id`, `azurerm_subscription_name` or `ManagementGroup` scoped i.e. `azurerm_management_group_id`, `azurerm_management_group_name` values must be specified.\n",
                        "willReplaceOnChanges": true
                    },
                    "features": {
                        "$ref": "#/types/azuredevops:index/ServiceEndpointAzureRMFeatures:ServiceEndpointAzureRMFeatures",
                        "description": "A `features` block.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "resourceGroup": {
                        "type": "string",
                        "description": "The resource group used for scope of automatic service endpoint.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceEndpointAuthenticationScheme": {
                        "type": "string",
                        "description": "Specifies the type of azurerm endpoint, either `WorkloadIdentityFederation`, `ManagedServiceIdentity` or `ServicePrincipal`. Defaults to `ServicePrincipal` for backwards compatibility.\n\n\u003e **NOTE:** The `WorkloadIdentityFederation` authentication scheme is currently in private preview. Your organisation must be part of the preview and the feature toggle must be turned on to use it. More details can be found [here](https://aka.ms/azdo-rm-workload-identity).\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint Name.\n",
                        "willReplaceOnChanges": true
                    },
                    "servicePrincipalId": {
                        "type": "string",
                        "description": "The Application(Client) ID of the Service Principal.\n"
                    },
                    "workloadIdentityFederationIssuer": {
                        "type": "string",
                        "description": "The issuer if `service_endpoint_authentication_scheme` is set to `WorkloadIdentityFederation`. This looks like `https://vstoken.dev.azure.com/00000000-0000-0000-0000-000000000000`, where the GUID is the Organization ID of your Azure DevOps Organisation.\n"
                    },
                    "workloadIdentityFederationSubject": {
                        "type": "string",
                        "description": "The subject if `service_endpoint_authentication_scheme` is set to `WorkloadIdentityFederation`. This looks like `sc://\u003corganisation\u003e/\u003cproject\u003e/\u003cservice-connection-name\u003e`.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:ServiceEndpoint/azureRM:AzureRM"
                }
            ]
        },
        "azuredevops:index/serviceEndpointBitBucket:ServiceEndpointBitBucket": {
            "description": "Manages a Bitbucket service endpoint within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceEndpointBitBucket = new azuredevops.ServiceEndpointBitBucket(\"exampleServiceEndpointBitBucket\", {\n    projectId: exampleProject.id,\n    username: \"username\",\n    password: \"password\",\n    serviceEndpointName: \"Example Bitbucket\",\n    description: \"Managed by Terraform\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_service_endpoint_bit_bucket = azuredevops.ServiceEndpointBitBucket(\"exampleServiceEndpointBitBucket\",\n    project_id=example_project.id,\n    username=\"username\",\n    password=\"password\",\n    service_endpoint_name=\"Example Bitbucket\",\n    description=\"Managed by Terraform\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceEndpointBitBucket = new AzureDevOps.ServiceEndpointBitBucket(\"exampleServiceEndpointBitBucket\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Username = \"username\",\n        Password = \"password\",\n        ServiceEndpointName = \"Example Bitbucket\",\n        Description = \"Managed by Terraform\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointBitBucket(ctx, \"exampleServiceEndpointBitBucket\", \u0026azuredevops.ServiceEndpointBitBucketArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tUsername:            pulumi.String(\"username\"),\n\t\t\tPassword:            pulumi.String(\"password\"),\n\t\t\tServiceEndpointName: pulumi.String(\"Example Bitbucket\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointBitBucket;\nimport com.pulumi.azuredevops.ServiceEndpointBitBucketArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceEndpointBitBucket = new ServiceEndpointBitBucket(\"exampleServiceEndpointBitBucket\", ServiceEndpointBitBucketArgs.builder()        \n            .projectId(exampleProject.id())\n            .username(\"username\")\n            .password(\"password\")\n            .serviceEndpointName(\"Example Bitbucket\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceEndpointBitBucket:\n    type: azuredevops:ServiceEndpointBitBucket\n    properties:\n      projectId: ${exampleProject.id}\n      username: username\n      password: password\n      serviceEndpointName: Example Bitbucket\n      description: Managed by Terraform\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Agent Pools](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Service Endpoint Bitbucket can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:index/serviceEndpointBitBucket:ServiceEndpointBitBucket example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "description": "Bitbucket account password.\n",
                    "secret": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Bitbucket account username.\n"
                }
            },
            "required": [
                "authorization",
                "password",
                "projectId",
                "serviceEndpointName",
                "username"
            ],
            "inputProperties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "description": "Bitbucket account password.\n",
                    "secret": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n",
                    "willReplaceOnChanges": true
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n",
                    "willReplaceOnChanges": true
                },
                "username": {
                    "type": "string",
                    "description": "Bitbucket account username.\n"
                }
            },
            "requiredInputs": [
                "password",
                "projectId",
                "serviceEndpointName",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEndpointBitBucket resources.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string",
                        "description": "Bitbucket account password.\n",
                        "secret": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n",
                        "willReplaceOnChanges": true
                    },
                    "username": {
                        "type": "string",
                        "description": "Bitbucket account username.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:ServiceEndpoint/bitBucket:BitBucket"
                }
            ]
        },
        "azuredevops:index/serviceEndpointDockerRegistry:ServiceEndpointDockerRegistry": {
            "description": "Manages a Docker Registry service endpoint within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\n// dockerhub registry service connection\nconst exampleServiceEndpointDockerRegistry = new azuredevops.ServiceEndpointDockerRegistry(\"exampleServiceEndpointDockerRegistry\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example Docker Hub\",\n    dockerUsername: \"example\",\n    dockerEmail: \"email@example.com\",\n    dockerPassword: \"12345\",\n    registryType: \"DockerHub\",\n});\n// other docker registry service connection\nconst example_other = new azuredevops.ServiceEndpointDockerRegistry(\"example-other\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example Docker Registry\",\n    dockerRegistry: \"https://sample.azurecr.io/v1\",\n    dockerUsername: \"sample\",\n    dockerPassword: \"12345\",\n    registryType: \"Others\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\n# dockerhub registry service connection\nexample_service_endpoint_docker_registry = azuredevops.ServiceEndpointDockerRegistry(\"exampleServiceEndpointDockerRegistry\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example Docker Hub\",\n    docker_username=\"example\",\n    docker_email=\"email@example.com\",\n    docker_password=\"12345\",\n    registry_type=\"DockerHub\")\n# other docker registry service connection\nexample_other = azuredevops.ServiceEndpointDockerRegistry(\"example-other\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example Docker Registry\",\n    docker_registry=\"https://sample.azurecr.io/v1\",\n    docker_username=\"sample\",\n    docker_password=\"12345\",\n    registry_type=\"Others\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    // dockerhub registry service connection\n    var exampleServiceEndpointDockerRegistry = new AzureDevOps.ServiceEndpointDockerRegistry(\"exampleServiceEndpointDockerRegistry\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example Docker Hub\",\n        DockerUsername = \"example\",\n        DockerEmail = \"email@example.com\",\n        DockerPassword = \"12345\",\n        RegistryType = \"DockerHub\",\n    });\n\n    // other docker registry service connection\n    var example_other = new AzureDevOps.ServiceEndpointDockerRegistry(\"example-other\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example Docker Registry\",\n        DockerRegistryUrl = \"https://sample.azurecr.io/v1\",\n        DockerUsername = \"sample\",\n        DockerPassword = \"12345\",\n        RegistryType = \"Others\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointDockerRegistry(ctx, \"exampleServiceEndpointDockerRegistry\", \u0026azuredevops.ServiceEndpointDockerRegistryArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Example Docker Hub\"),\n\t\t\tDockerUsername:      pulumi.String(\"example\"),\n\t\t\tDockerEmail:         pulumi.String(\"email@example.com\"),\n\t\t\tDockerPassword:      pulumi.String(\"12345\"),\n\t\t\tRegistryType:        pulumi.String(\"DockerHub\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointDockerRegistry(ctx, \"example-other\", \u0026azuredevops.ServiceEndpointDockerRegistryArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Example Docker Registry\"),\n\t\t\tDockerRegistry:      pulumi.String(\"https://sample.azurecr.io/v1\"),\n\t\t\tDockerUsername:      pulumi.String(\"sample\"),\n\t\t\tDockerPassword:      pulumi.String(\"12345\"),\n\t\t\tRegistryType:        pulumi.String(\"Others\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointDockerRegistry;\nimport com.pulumi.azuredevops.ServiceEndpointDockerRegistryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceEndpointDockerRegistry = new ServiceEndpointDockerRegistry(\"exampleServiceEndpointDockerRegistry\", ServiceEndpointDockerRegistryArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example Docker Hub\")\n            .dockerUsername(\"example\")\n            .dockerEmail(\"email@example.com\")\n            .dockerPassword(\"12345\")\n            .registryType(\"DockerHub\")\n            .build());\n\n        var example_other = new ServiceEndpointDockerRegistry(\"example-other\", ServiceEndpointDockerRegistryArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example Docker Registry\")\n            .dockerRegistry(\"https://sample.azurecr.io/v1\")\n            .dockerUsername(\"sample\")\n            .dockerPassword(\"12345\")\n            .registryType(\"Others\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  # dockerhub registry service connection\n  exampleServiceEndpointDockerRegistry:\n    type: azuredevops:ServiceEndpointDockerRegistry\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example Docker Hub\n      dockerUsername: example\n      dockerEmail: email@example.com\n      dockerPassword: '12345'\n      registryType: DockerHub\n  # other docker registry service connection\n  example-other:\n    type: azuredevops:ServiceEndpointDockerRegistry\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example Docker Registry\n      dockerRegistry: https://sample.azurecr.io/v1\n      dockerUsername: sample\n      dockerPassword: '12345'\n      registryType: Others\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Service Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-7.0)\n- [Docker Registry Service Connection](https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops\u0026tabs=yaml#sep-docreg)\n\n\n## Import\n\nAzure DevOps Service Endpoint Docker Registry can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:index/serviceEndpointDockerRegistry:ServiceEndpointDockerRegistry example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "dockerEmail": {
                    "type": "string",
                    "description": "The email for Docker account user.\n"
                },
                "dockerPassword": {
                    "type": "string",
                    "description": "The password for the account user identified above.\n",
                    "secret": true
                },
                "dockerRegistry": {
                    "type": "string",
                    "description": "The URL of the Docker registry. (Default: \"https://index.docker.io/v1/\")\n",
                    "language": {
                        "csharp": {
                            "name": "DockerRegistryUrl"
                        }
                    }
                },
                "dockerUsername": {
                    "type": "string",
                    "description": "The identifier of the Docker account user.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "registryType": {
                    "type": "string",
                    "description": "Can be \"DockerHub\" or \"Others\" (Default \"DockerHub\")\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The name you will use to refer to this service connection in task inputs.\n"
                }
            },
            "required": [
                "authorization",
                "dockerRegistry",
                "projectId",
                "registryType",
                "serviceEndpointName"
            ],
            "inputProperties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "dockerEmail": {
                    "type": "string",
                    "description": "The email for Docker account user.\n"
                },
                "dockerPassword": {
                    "type": "string",
                    "description": "The password for the account user identified above.\n",
                    "secret": true
                },
                "dockerRegistry": {
                    "type": "string",
                    "description": "The URL of the Docker registry. (Default: \"https://index.docker.io/v1/\")\n",
                    "language": {
                        "csharp": {
                            "name": "DockerRegistryUrl"
                        }
                    }
                },
                "dockerUsername": {
                    "type": "string",
                    "description": "The identifier of the Docker account user.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n",
                    "willReplaceOnChanges": true
                },
                "registryType": {
                    "type": "string",
                    "description": "Can be \"DockerHub\" or \"Others\" (Default \"DockerHub\")\n",
                    "willReplaceOnChanges": true
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The name you will use to refer to this service connection in task inputs.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "dockerRegistry",
                "projectId",
                "registryType",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEndpointDockerRegistry resources.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "dockerEmail": {
                        "type": "string",
                        "description": "The email for Docker account user.\n"
                    },
                    "dockerPassword": {
                        "type": "string",
                        "description": "The password for the account user identified above.\n",
                        "secret": true
                    },
                    "dockerRegistry": {
                        "type": "string",
                        "description": "The URL of the Docker registry. (Default: \"https://index.docker.io/v1/\")\n",
                        "language": {
                            "csharp": {
                                "name": "DockerRegistryUrl"
                            }
                        }
                    },
                    "dockerUsername": {
                        "type": "string",
                        "description": "The identifier of the Docker account user.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "registryType": {
                        "type": "string",
                        "description": "Can be \"DockerHub\" or \"Others\" (Default \"DockerHub\")\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The name you will use to refer to this service connection in task inputs.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:ServiceEndpoint/dockerRegistry:DockerRegistry"
                }
            ]
        },
        "azuredevops:index/serviceEndpointGeneric:ServiceEndpointGeneric": {
            "description": "Manages a generic service endpoint within Azure DevOps, which can be used to authenticate to any external server using\nbasic authentication via a username and password.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceEndpointGeneric = new azuredevops.ServiceEndpointGeneric(\"exampleServiceEndpointGeneric\", {\n    projectId: exampleProject.id,\n    serverUrl: \"https://some-server.example.com\",\n    username: \"username\",\n    password: \"password\",\n    serviceEndpointName: \"Example Generic\",\n    description: \"Managed by Terraform\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_service_endpoint_generic = azuredevops.ServiceEndpointGeneric(\"exampleServiceEndpointGeneric\",\n    project_id=example_project.id,\n    server_url=\"https://some-server.example.com\",\n    username=\"username\",\n    password=\"password\",\n    service_endpoint_name=\"Example Generic\",\n    description=\"Managed by Terraform\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceEndpointGeneric = new AzureDevOps.ServiceEndpointGeneric(\"exampleServiceEndpointGeneric\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServerUrl = \"https://some-server.example.com\",\n        Username = \"username\",\n        Password = \"password\",\n        ServiceEndpointName = \"Example Generic\",\n        Description = \"Managed by Terraform\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointGeneric(ctx, \"exampleServiceEndpointGeneric\", \u0026azuredevops.ServiceEndpointGenericArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServerUrl:           pulumi.String(\"https://some-server.example.com\"),\n\t\t\tUsername:            pulumi.String(\"username\"),\n\t\t\tPassword:            pulumi.String(\"password\"),\n\t\t\tServiceEndpointName: pulumi.String(\"Example Generic\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointGeneric;\nimport com.pulumi.azuredevops.ServiceEndpointGenericArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceEndpointGeneric = new ServiceEndpointGeneric(\"exampleServiceEndpointGeneric\", ServiceEndpointGenericArgs.builder()        \n            .projectId(exampleProject.id())\n            .serverUrl(\"https://some-server.example.com\")\n            .username(\"username\")\n            .password(\"password\")\n            .serviceEndpointName(\"Example Generic\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceEndpointGeneric:\n    type: azuredevops:ServiceEndpointGeneric\n    properties:\n      projectId: ${exampleProject.id}\n      serverUrl: https://some-server.example.com\n      username: username\n      password: password\n      serviceEndpointName: Example Generic\n      description: Managed by Terraform\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Agent Pools](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Service Endpoint Generic can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:index/serviceEndpointGeneric:ServiceEndpointGeneric example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "description": "The password or token key used to authenticate to the server url using basic authentication.\n",
                    "secret": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "serverUrl": {
                    "type": "string",
                    "description": "The URL of the server associated with the service endpoint.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The service endpoint name.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username used to authenticate to the server url using basic authentication.\n"
                }
            },
            "required": [
                "authorization",
                "projectId",
                "serverUrl",
                "serviceEndpointName"
            ],
            "inputProperties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "description": "The password or token key used to authenticate to the server url using basic authentication.\n",
                    "secret": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n",
                    "willReplaceOnChanges": true
                },
                "serverUrl": {
                    "type": "string",
                    "description": "The URL of the server associated with the service endpoint.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The service endpoint name.\n",
                    "willReplaceOnChanges": true
                },
                "username": {
                    "type": "string",
                    "description": "The username used to authenticate to the server url using basic authentication.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "serverUrl",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEndpointGeneric resources.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password or token key used to authenticate to the server url using basic authentication.\n",
                        "secret": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "serverUrl": {
                        "type": "string",
                        "description": "The URL of the server associated with the service endpoint.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The service endpoint name.\n",
                        "willReplaceOnChanges": true
                    },
                    "username": {
                        "type": "string",
                        "description": "The username used to authenticate to the server url using basic authentication.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceEndpointGenericGit:ServiceEndpointGenericGit": {
            "description": "Manages a generic service endpoint within Azure DevOps, which can be used to authenticate to any external git service\nusing basic authentication via a username and password. This is mostly useful for importing private git repositories.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceEndpointGenericGit = new azuredevops.ServiceEndpointGenericGit(\"exampleServiceEndpointGenericGit\", {\n    projectId: exampleProject.id,\n    repositoryUrl: \"https://dev.azure.com/org/project/_git/repository\",\n    username: \"username\",\n    password: \"password\",\n    serviceEndpointName: \"Example Generic Git\",\n    description: \"Managed by Terraform\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_service_endpoint_generic_git = azuredevops.ServiceEndpointGenericGit(\"exampleServiceEndpointGenericGit\",\n    project_id=example_project.id,\n    repository_url=\"https://dev.azure.com/org/project/_git/repository\",\n    username=\"username\",\n    password=\"password\",\n    service_endpoint_name=\"Example Generic Git\",\n    description=\"Managed by Terraform\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceEndpointGenericGit = new AzureDevOps.ServiceEndpointGenericGit(\"exampleServiceEndpointGenericGit\", new()\n    {\n        ProjectId = exampleProject.Id,\n        RepositoryUrl = \"https://dev.azure.com/org/project/_git/repository\",\n        Username = \"username\",\n        Password = \"password\",\n        ServiceEndpointName = \"Example Generic Git\",\n        Description = \"Managed by Terraform\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointGenericGit(ctx, \"exampleServiceEndpointGenericGit\", \u0026azuredevops.ServiceEndpointGenericGitArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tRepositoryUrl:       pulumi.String(\"https://dev.azure.com/org/project/_git/repository\"),\n\t\t\tUsername:            pulumi.String(\"username\"),\n\t\t\tPassword:            pulumi.String(\"password\"),\n\t\t\tServiceEndpointName: pulumi.String(\"Example Generic Git\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointGenericGit;\nimport com.pulumi.azuredevops.ServiceEndpointGenericGitArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceEndpointGenericGit = new ServiceEndpointGenericGit(\"exampleServiceEndpointGenericGit\", ServiceEndpointGenericGitArgs.builder()        \n            .projectId(exampleProject.id())\n            .repositoryUrl(\"https://dev.azure.com/org/project/_git/repository\")\n            .username(\"username\")\n            .password(\"password\")\n            .serviceEndpointName(\"Example Generic Git\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceEndpointGenericGit:\n    type: azuredevops:ServiceEndpointGenericGit\n    properties:\n      projectId: ${exampleProject.id}\n      repositoryUrl: https://dev.azure.com/org/project/_git/repository\n      username: username\n      password: password\n      serviceEndpointName: Example Generic Git\n      description: Managed by Terraform\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Agent Pools](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Service Endpoint Generic Git can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:index/serviceEndpointGenericGit:ServiceEndpointGenericGit example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "enablePipelinesAccess": {
                    "type": "boolean",
                    "description": "A value indicating whether or not to attempt accessing this git server from Azure Pipelines.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The PAT or password used to authenticate to the git repository.\n\n\u003e **Note** For AzureDevOps Git, PAT should be used as the password.\n",
                    "secret": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "repositoryUrl": {
                    "type": "string",
                    "description": "The URL of the repository associated with the service endpoint.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The name of the service endpoint.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username used to authenticate to the git repository.\n"
                }
            },
            "required": [
                "authorization",
                "projectId",
                "repositoryUrl",
                "serviceEndpointName"
            ],
            "inputProperties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "enablePipelinesAccess": {
                    "type": "boolean",
                    "description": "A value indicating whether or not to attempt accessing this git server from Azure Pipelines.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The PAT or password used to authenticate to the git repository.\n\n\u003e **Note** For AzureDevOps Git, PAT should be used as the password.\n",
                    "secret": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n",
                    "willReplaceOnChanges": true
                },
                "repositoryUrl": {
                    "type": "string",
                    "description": "The URL of the repository associated with the service endpoint.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The name of the service endpoint.\n",
                    "willReplaceOnChanges": true
                },
                "username": {
                    "type": "string",
                    "description": "The username used to authenticate to the git repository.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "repositoryUrl",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEndpointGenericGit resources.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "enablePipelinesAccess": {
                        "type": "boolean",
                        "description": "A value indicating whether or not to attempt accessing this git server from Azure Pipelines.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The PAT or password used to authenticate to the git repository.\n\n\u003e **Note** For AzureDevOps Git, PAT should be used as the password.\n",
                        "secret": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "repositoryUrl": {
                        "type": "string",
                        "description": "The URL of the repository associated with the service endpoint.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The name of the service endpoint.\n",
                        "willReplaceOnChanges": true
                    },
                    "username": {
                        "type": "string",
                        "description": "The username used to authenticate to the git repository.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceEndpointGitHub:ServiceEndpointGitHub": {
            "description": "Manages a GitHub service endpoint within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceEndpointGitHub = new azuredevops.ServiceEndpointGitHub(\"exampleServiceEndpointGitHub\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example GitHub Personal Access Token\",\n    authPersonal: {\n        personalAccessToken: \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_service_endpoint_git_hub = azuredevops.ServiceEndpointGitHub(\"exampleServiceEndpointGitHub\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example GitHub Personal Access Token\",\n    auth_personal=azuredevops.ServiceEndpointGitHubAuthPersonalArgs(\n        personal_access_token=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceEndpointGitHub = new AzureDevOps.ServiceEndpointGitHub(\"exampleServiceEndpointGitHub\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example GitHub Personal Access Token\",\n        AuthPersonal = new AzureDevOps.Inputs.ServiceEndpointGitHubAuthPersonalArgs\n        {\n            PersonalAccessToken = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointGitHub(ctx, \"exampleServiceEndpointGitHub\", \u0026azuredevops.ServiceEndpointGitHubArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Example GitHub Personal Access Token\"),\n\t\t\tAuthPersonal: \u0026azuredevops.ServiceEndpointGitHubAuthPersonalArgs{\n\t\t\t\tPersonalAccessToken: pulumi.String(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointGitHub;\nimport com.pulumi.azuredevops.ServiceEndpointGitHubArgs;\nimport com.pulumi.azuredevops.inputs.ServiceEndpointGitHubAuthPersonalArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceEndpointGitHub = new ServiceEndpointGitHub(\"exampleServiceEndpointGitHub\", ServiceEndpointGitHubArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example GitHub Personal Access Token\")\n            .authPersonal(ServiceEndpointGitHubAuthPersonalArgs.builder()\n                .personalAccessToken(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceEndpointGitHub:\n    type: azuredevops:ServiceEndpointGitHub\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example GitHub Personal Access Token\n      authPersonal:\n        personalAccessToken: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceEndpointGitHub = new azuredevops.ServiceEndpointGitHub(\"exampleServiceEndpointGitHub\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example GitHub\",\n    authOauth: {\n        oauthConfigurationId: \"00000000-0000-0000-0000-000000000000\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_service_endpoint_git_hub = azuredevops.ServiceEndpointGitHub(\"exampleServiceEndpointGitHub\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example GitHub\",\n    auth_oauth=azuredevops.ServiceEndpointGitHubAuthOauthArgs(\n        oauth_configuration_id=\"00000000-0000-0000-0000-000000000000\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceEndpointGitHub = new AzureDevOps.ServiceEndpointGitHub(\"exampleServiceEndpointGitHub\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example GitHub\",\n        AuthOauth = new AzureDevOps.Inputs.ServiceEndpointGitHubAuthOauthArgs\n        {\n            OauthConfigurationId = \"00000000-0000-0000-0000-000000000000\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointGitHub(ctx, \"exampleServiceEndpointGitHub\", \u0026azuredevops.ServiceEndpointGitHubArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Example GitHub\"),\n\t\t\tAuthOauth: \u0026azuredevops.ServiceEndpointGitHubAuthOauthArgs{\n\t\t\t\tOauthConfigurationId: pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointGitHub;\nimport com.pulumi.azuredevops.ServiceEndpointGitHubArgs;\nimport com.pulumi.azuredevops.inputs.ServiceEndpointGitHubAuthOauthArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceEndpointGitHub = new ServiceEndpointGitHub(\"exampleServiceEndpointGitHub\", ServiceEndpointGitHubArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example GitHub\")\n            .authOauth(ServiceEndpointGitHubAuthOauthArgs.builder()\n                .oauthConfigurationId(\"00000000-0000-0000-0000-000000000000\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceEndpointGitHub:\n    type: azuredevops:ServiceEndpointGitHub\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example GitHub\n      authOauth:\n        oauthConfigurationId: 00000000-0000-0000-0000-000000000000\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceEndpointGitHub = new azuredevops.ServiceEndpointGitHub(\"exampleServiceEndpointGitHub\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example GitHub Apps: Azure Pipelines\",\n    description: \"Managed by Terraform\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_service_endpoint_git_hub = azuredevops.ServiceEndpointGitHub(\"exampleServiceEndpointGitHub\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example GitHub Apps: Azure Pipelines\",\n    description=\"Managed by Terraform\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceEndpointGitHub = new AzureDevOps.ServiceEndpointGitHub(\"exampleServiceEndpointGitHub\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example GitHub Apps: Azure Pipelines\",\n        Description = \"Managed by Terraform\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointGitHub(ctx, \"exampleServiceEndpointGitHub\", \u0026azuredevops.ServiceEndpointGitHubArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Example GitHub Apps: Azure Pipelines\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointGitHub;\nimport com.pulumi.azuredevops.ServiceEndpointGitHubArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceEndpointGitHub = new ServiceEndpointGitHub(\"exampleServiceEndpointGitHub\", ServiceEndpointGitHubArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example GitHub Apps: Azure Pipelines\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceEndpointGitHub:\n    type: azuredevops:ServiceEndpointGitHub\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: 'Example GitHub Apps: Azure Pipelines'\n      # Note Github Apps do not support a description and will always be empty string. Must be explicitly set to override the default value.\n      description: Managed by Terraform\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Service Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Service Endpoint GitHub can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:index/serviceEndpointGitHub:ServiceEndpointGitHub example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authOauth": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointGitHubAuthOauth:ServiceEndpointGitHubAuthOauth"
                },
                "authPersonal": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointGitHubAuthPersonal:ServiceEndpointGitHubAuthPersonal",
                    "description": "An `auth_personal` block as documented below. Allows connecting using a personal access token.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "required": [
                "authorization",
                "projectId",
                "serviceEndpointName"
            ],
            "inputProperties": {
                "authOauth": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointGitHubAuthOauth:ServiceEndpointGitHubAuthOauth"
                },
                "authPersonal": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointGitHubAuthPersonal:ServiceEndpointGitHubAuthPersonal",
                    "description": "An `auth_personal` block as documented below. Allows connecting using a personal access token.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n",
                    "willReplaceOnChanges": true
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "projectId",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEndpointGitHub resources.\n",
                "properties": {
                    "authOauth": {
                        "$ref": "#/types/azuredevops:index/ServiceEndpointGitHubAuthOauth:ServiceEndpointGitHubAuthOauth"
                    },
                    "authPersonal": {
                        "$ref": "#/types/azuredevops:index/ServiceEndpointGitHubAuthPersonal:ServiceEndpointGitHubAuthPersonal",
                        "description": "An `auth_personal` block as documented below. Allows connecting using a personal access token.\n"
                    },
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:ServiceEndpoint/gitHub:GitHub"
                }
            ]
        },
        "azuredevops:index/serviceEndpointGitHubEnterprise:ServiceEndpointGitHubEnterprise": {
            "description": "Manages a GitHub Enterprise Server service endpoint within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceEndpointGitHubEnterprise = new azuredevops.ServiceEndpointGitHubEnterprise(\"exampleServiceEndpointGitHubEnterprise\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example GitHub Enterprise\",\n    url: \"https://github.contoso.com\",\n    description: \"Managed by Terraform\",\n    authPersonal: {\n        personalAccessToken: \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_service_endpoint_git_hub_enterprise = azuredevops.ServiceEndpointGitHubEnterprise(\"exampleServiceEndpointGitHubEnterprise\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example GitHub Enterprise\",\n    url=\"https://github.contoso.com\",\n    description=\"Managed by Terraform\",\n    auth_personal=azuredevops.ServiceEndpointGitHubEnterpriseAuthPersonalArgs(\n        personal_access_token=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceEndpointGitHubEnterprise = new AzureDevOps.ServiceEndpointGitHubEnterprise(\"exampleServiceEndpointGitHubEnterprise\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example GitHub Enterprise\",\n        Url = \"https://github.contoso.com\",\n        Description = \"Managed by Terraform\",\n        AuthPersonal = new AzureDevOps.Inputs.ServiceEndpointGitHubEnterpriseAuthPersonalArgs\n        {\n            PersonalAccessToken = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointGitHubEnterprise(ctx, \"exampleServiceEndpointGitHubEnterprise\", \u0026azuredevops.ServiceEndpointGitHubEnterpriseArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Example GitHub Enterprise\"),\n\t\t\tUrl:                 pulumi.String(\"https://github.contoso.com\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t\tAuthPersonal: \u0026azuredevops.ServiceEndpointGitHubEnterpriseAuthPersonalArgs{\n\t\t\t\tPersonalAccessToken: pulumi.String(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointGitHubEnterprise;\nimport com.pulumi.azuredevops.ServiceEndpointGitHubEnterpriseArgs;\nimport com.pulumi.azuredevops.inputs.ServiceEndpointGitHubEnterpriseAuthPersonalArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceEndpointGitHubEnterprise = new ServiceEndpointGitHubEnterprise(\"exampleServiceEndpointGitHubEnterprise\", ServiceEndpointGitHubEnterpriseArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example GitHub Enterprise\")\n            .url(\"https://github.contoso.com\")\n            .description(\"Managed by Terraform\")\n            .authPersonal(ServiceEndpointGitHubEnterpriseAuthPersonalArgs.builder()\n                .personalAccessToken(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceEndpointGitHubEnterprise:\n    type: azuredevops:ServiceEndpointGitHubEnterprise\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example GitHub Enterprise\n      url: https://github.contoso.com\n      description: Managed by Terraform\n      authPersonal:\n        personalAccessToken: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Service Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Service Endpoint GitHub Enterprise Server can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:index/serviceEndpointGitHubEnterprise:ServiceEndpointGitHubEnterprise example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authPersonal": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointGitHubEnterpriseAuthPersonal:ServiceEndpointGitHubEnterpriseAuthPersonal"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "url": {
                    "type": "string",
                    "description": "GitHub Enterprise Server Url.\n"
                }
            },
            "required": [
                "authPersonal",
                "authorization",
                "projectId",
                "serviceEndpointName",
                "url"
            ],
            "inputProperties": {
                "authPersonal": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointGitHubEnterpriseAuthPersonal:ServiceEndpointGitHubEnterpriseAuthPersonal"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n",
                    "willReplaceOnChanges": true
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n",
                    "willReplaceOnChanges": true
                },
                "url": {
                    "type": "string",
                    "description": "GitHub Enterprise Server Url.\n"
                }
            },
            "requiredInputs": [
                "authPersonal",
                "projectId",
                "serviceEndpointName",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEndpointGitHubEnterprise resources.\n",
                "properties": {
                    "authPersonal": {
                        "$ref": "#/types/azuredevops:index/ServiceEndpointGitHubEnterpriseAuthPersonal:ServiceEndpointGitHubEnterpriseAuthPersonal"
                    },
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "description": "GitHub Enterprise Server Url.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceEndpointKubernetes:ServiceEndpointKubernetes": {
            "description": "Manages a Kubernetes service endpoint within Azure DevOps.\n\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Service Endpoint Kubernetes can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:index/serviceEndpointKubernetes:ServiceEndpointKubernetes example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "apiserverUrl": {
                    "type": "string",
                    "description": "The hostname (in form of URI) of the Kubernetes API.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "authorizationType": {
                    "type": "string",
                    "description": "The authentication method used to authenticate on the Kubernetes cluster. The value should be one of AzureSubscription, Kubeconfig, ServiceAccount.\n"
                },
                "azureSubscriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/ServiceEndpointKubernetesAzureSubscription:ServiceEndpointKubernetesAzureSubscription"
                    },
                    "description": "A `azure_subscription` block defined blow.\n"
                },
                "description": {
                    "type": "string"
                },
                "kubeconfig": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointKubernetesKubeconfig:ServiceEndpointKubernetesKubeconfig",
                    "description": "A `kubeconfig` block defined blow.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "serviceAccount": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointKubernetesServiceAccount:ServiceEndpointKubernetesServiceAccount",
                    "description": "A `service_account` block defined blow.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "required": [
                "apiserverUrl",
                "authorization",
                "authorizationType",
                "projectId",
                "serviceEndpointName"
            ],
            "inputProperties": {
                "apiserverUrl": {
                    "type": "string",
                    "description": "The hostname (in form of URI) of the Kubernetes API.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "authorizationType": {
                    "type": "string",
                    "description": "The authentication method used to authenticate on the Kubernetes cluster. The value should be one of AzureSubscription, Kubeconfig, ServiceAccount.\n"
                },
                "azureSubscriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/ServiceEndpointKubernetesAzureSubscription:ServiceEndpointKubernetesAzureSubscription"
                    },
                    "description": "A `azure_subscription` block defined blow.\n"
                },
                "description": {
                    "type": "string"
                },
                "kubeconfig": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointKubernetesKubeconfig:ServiceEndpointKubernetesKubeconfig",
                    "description": "A `kubeconfig` block defined blow.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n",
                    "willReplaceOnChanges": true
                },
                "serviceAccount": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointKubernetesServiceAccount:ServiceEndpointKubernetesServiceAccount",
                    "description": "A `service_account` block defined blow.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "apiserverUrl",
                "authorizationType",
                "projectId",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEndpointKubernetes resources.\n",
                "properties": {
                    "apiserverUrl": {
                        "type": "string",
                        "description": "The hostname (in form of URI) of the Kubernetes API.\n"
                    },
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "authorizationType": {
                        "type": "string",
                        "description": "The authentication method used to authenticate on the Kubernetes cluster. The value should be one of AzureSubscription, Kubeconfig, ServiceAccount.\n"
                    },
                    "azureSubscriptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:index/ServiceEndpointKubernetesAzureSubscription:ServiceEndpointKubernetesAzureSubscription"
                        },
                        "description": "A `azure_subscription` block defined blow.\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "kubeconfig": {
                        "$ref": "#/types/azuredevops:index/ServiceEndpointKubernetesKubeconfig:ServiceEndpointKubernetesKubeconfig",
                        "description": "A `kubeconfig` block defined blow.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceAccount": {
                        "$ref": "#/types/azuredevops:index/ServiceEndpointKubernetesServiceAccount:ServiceEndpointKubernetesServiceAccount",
                        "description": "A `service_account` block defined blow.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:ServiceEndpoint/kubernetes:Kubernetes"
                }
            ]
        },
        "azuredevops:index/serviceEndpointNpm:ServiceEndpointNpm": {
            "description": "Manages a npm service endpoint within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceEndpointNpm = new azuredevops.ServiceEndpointNpm(\"exampleServiceEndpointNpm\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example npm\",\n    url: \"https://registry.npmjs.org\",\n    accessToken: \"00000000-0000-0000-0000-000000000000\",\n    description: \"Managed by Terraform\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_service_endpoint_npm = azuredevops.ServiceEndpointNpm(\"exampleServiceEndpointNpm\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example npm\",\n    url=\"https://registry.npmjs.org\",\n    access_token=\"00000000-0000-0000-0000-000000000000\",\n    description=\"Managed by Terraform\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceEndpointNpm = new AzureDevOps.ServiceEndpointNpm(\"exampleServiceEndpointNpm\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example npm\",\n        Url = \"https://registry.npmjs.org\",\n        AccessToken = \"00000000-0000-0000-0000-000000000000\",\n        Description = \"Managed by Terraform\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointNpm(ctx, \"exampleServiceEndpointNpm\", \u0026azuredevops.ServiceEndpointNpmArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Example npm\"),\n\t\t\tUrl:                 pulumi.String(\"https://registry.npmjs.org\"),\n\t\t\tAccessToken:         pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointNpm;\nimport com.pulumi.azuredevops.ServiceEndpointNpmArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceEndpointNpm = new ServiceEndpointNpm(\"exampleServiceEndpointNpm\", ServiceEndpointNpmArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example npm\")\n            .url(\"https://registry.npmjs.org\")\n            .accessToken(\"00000000-0000-0000-0000-000000000000\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceEndpointNpm:\n    type: azuredevops:ServiceEndpointNpm\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example npm\n      url: https://registry.npmjs.org\n      accessToken: 00000000-0000-0000-0000-000000000000\n      description: Managed by Terraform\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-7.0)\n- [Azure DevOps Service Connections](https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops\u0026tabs=yaml)\n- [npm User Token](https://docs.npmjs.com/about-access-tokens)\n\n\n## Import\n\nAzure DevOps Service Endpoint npm can be imported using the **projectID/serviceEndpointID**, e.g.\n\n```sh\n $ pulumi import azuredevops:index/serviceEndpointNpm:ServiceEndpointNpm example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "The access token for npm registry.\n",
                    "secret": true
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The Service Endpoint description.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the npm registry to connect with.\n"
                }
            },
            "required": [
                "accessToken",
                "authorization",
                "projectId",
                "serviceEndpointName",
                "url"
            ],
            "inputProperties": {
                "accessToken": {
                    "type": "string",
                    "description": "The access token for npm registry.\n",
                    "secret": true
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The Service Endpoint description.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n",
                    "willReplaceOnChanges": true
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n",
                    "willReplaceOnChanges": true
                },
                "url": {
                    "type": "string",
                    "description": "URL of the npm registry to connect with.\n"
                }
            },
            "requiredInputs": [
                "accessToken",
                "projectId",
                "serviceEndpointName",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEndpointNpm resources.\n",
                "properties": {
                    "accessToken": {
                        "type": "string",
                        "description": "The access token for npm registry.\n",
                        "secret": true
                    },
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string",
                        "description": "The Service Endpoint description.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the npm registry to connect with.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceEndpointPipeline:ServiceEndpointPipeline": {
            "description": "Manages a Azure DevOps Service Connection service endpoint within Azure DevOps. Allows to run downstream pipelines, monitoring their execution, collecting and consolidating artefacts produced in the delegate pipelines (yaml block `task: RunPipelines@1`). More details on Marketplace page: [RunPipelines](https://marketplace.visualstudio.com/items?itemName=CSE-DevOps.RunPipelines)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceEndpointPipeline = new azuredevops.ServiceEndpointPipeline(\"exampleServiceEndpointPipeline\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example Pipeline Runner\",\n    organizationName: \"Organization Name\",\n    authPersonal: {\n        personalAccessToken: \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    },\n    description: \"Managed by Terraform\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_service_endpoint_pipeline = azuredevops.ServiceEndpointPipeline(\"exampleServiceEndpointPipeline\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example Pipeline Runner\",\n    organization_name=\"Organization Name\",\n    auth_personal=azuredevops.ServiceEndpointPipelineAuthPersonalArgs(\n        personal_access_token=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    ),\n    description=\"Managed by Terraform\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceEndpointPipeline = new AzureDevOps.ServiceEndpointPipeline(\"exampleServiceEndpointPipeline\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example Pipeline Runner\",\n        OrganizationName = \"Organization Name\",\n        AuthPersonal = new AzureDevOps.Inputs.ServiceEndpointPipelineAuthPersonalArgs\n        {\n            PersonalAccessToken = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n        },\n        Description = \"Managed by Terraform\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointPipeline(ctx, \"exampleServiceEndpointPipeline\", \u0026azuredevops.ServiceEndpointPipelineArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Example Pipeline Runner\"),\n\t\t\tOrganizationName:    pulumi.String(\"Organization Name\"),\n\t\t\tAuthPersonal: \u0026azuredevops.ServiceEndpointPipelineAuthPersonalArgs{\n\t\t\t\tPersonalAccessToken: pulumi.String(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointPipeline;\nimport com.pulumi.azuredevops.ServiceEndpointPipelineArgs;\nimport com.pulumi.azuredevops.inputs.ServiceEndpointPipelineAuthPersonalArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceEndpointPipeline = new ServiceEndpointPipeline(\"exampleServiceEndpointPipeline\", ServiceEndpointPipelineArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example Pipeline Runner\")\n            .organizationName(\"Organization Name\")\n            .authPersonal(ServiceEndpointPipelineAuthPersonalArgs.builder()\n                .personalAccessToken(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\")\n                .build())\n            .description(\"Managed by Terraform\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceEndpointPipeline:\n    type: azuredevops:ServiceEndpointPipeline\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example Pipeline Runner\n      organizationName: Organization Name\n      authPersonal:\n        personalAccessToken: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n      description: Managed by Terraform\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Agent Pools](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Service Endpoint can be imported using the `project id`, `service connection id`, e.g.\n\n```sh\n $ pulumi import azuredevops:index/serviceEndpointPipeline:ServiceEndpointPipeline example projectID/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authPersonal": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointPipelineAuthPersonal:ServiceEndpointPipelineAuthPersonal",
                    "description": "An `auth_personal` block as documented below. Allows connecting using a personal access token.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "organizationName": {
                    "type": "string",
                    "description": "The organization name used for `Organization Url` and `Release API Url` fields.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "required": [
                "authPersonal",
                "authorization",
                "organizationName",
                "projectId",
                "serviceEndpointName"
            ],
            "inputProperties": {
                "authPersonal": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointPipelineAuthPersonal:ServiceEndpointPipelineAuthPersonal",
                    "description": "An `auth_personal` block as documented below. Allows connecting using a personal access token.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "organizationName": {
                    "type": "string",
                    "description": "The organization name used for `Organization Url` and `Release API Url` fields.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n",
                    "willReplaceOnChanges": true
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "authPersonal",
                "organizationName",
                "projectId",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEndpointPipeline resources.\n",
                "properties": {
                    "authPersonal": {
                        "$ref": "#/types/azuredevops:index/ServiceEndpointPipelineAuthPersonal:ServiceEndpointPipelineAuthPersonal",
                        "description": "An `auth_personal` block as documented below. Allows connecting using a personal access token.\n"
                    },
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "organizationName": {
                        "type": "string",
                        "description": "The organization name used for `Organization Url` and `Release API Url` fields.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceEndpointServiceFabric:ServiceEndpointServiceFabric": {
            "description": "Manages a Service Fabric service endpoint within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Client Certificate Authentication\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\nimport * as fs from \"fs\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceEndpointServiceFabric = new azuredevops.ServiceEndpointServiceFabric(\"exampleServiceEndpointServiceFabric\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example Service Fabric\",\n    description: \"Managed by Terraform\",\n    clusterEndpoint: \"tcp://test\",\n    certificate: {\n        serverCertificateLookup: \"Thumbprint\",\n        serverCertificateThumbprint: \"0000000000000000000000000000000000000000\",\n        clientCertificate: Buffer.from(fs.readFileSync(\"certificate.pfx\"), 'binary').toString('base64'),\n        clientCertificatePassword: \"password\",\n    },\n});\n```\n```python\nimport pulumi\nimport base64\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_service_endpoint_service_fabric = azuredevops.ServiceEndpointServiceFabric(\"exampleServiceEndpointServiceFabric\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example Service Fabric\",\n    description=\"Managed by Terraform\",\n    cluster_endpoint=\"tcp://test\",\n    certificate=azuredevops.ServiceEndpointServiceFabricCertificateArgs(\n        server_certificate_lookup=\"Thumbprint\",\n        server_certificate_thumbprint=\"0000000000000000000000000000000000000000\",\n        client_certificate=(lambda path: base64.b64encode(open(path).read().encode()).decode())(\"certificate.pfx\"),\n        client_certificate_password=\"password\",\n    ))\n```\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\n\tprivate static string ReadFileBase64(string path) {\n\t\treturn Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(File.ReadAllText(path)));\n\t}\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceEndpointServiceFabric = new AzureDevOps.ServiceEndpointServiceFabric(\"exampleServiceEndpointServiceFabric\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example Service Fabric\",\n        Description = \"Managed by Terraform\",\n        ClusterEndpoint = \"tcp://test\",\n        Certificate = new AzureDevOps.Inputs.ServiceEndpointServiceFabricCertificateArgs\n        {\n            ServerCertificateLookup = \"Thumbprint\",\n            ServerCertificateThumbprint = \"0000000000000000000000000000000000000000\",\n            ClientCertificate = ReadFileBase64(\"certificate.pfx\"),\n            ClientCertificatePassword = \"password\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/base64\"\n\t\"os\"\n\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc filebase64OrPanic(path string) pulumi.StringPtrInput {\n\tif fileData, err := os.ReadFile(path); err == nil {\n\t\treturn pulumi.String(base64.StdEncoding.EncodeToString(fileData[:]))\n\t} else {\n\t\tpanic(err.Error())\n\t}\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointServiceFabric(ctx, \"exampleServiceEndpointServiceFabric\", \u0026azuredevops.ServiceEndpointServiceFabricArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Example Service Fabric\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t\tClusterEndpoint:     pulumi.String(\"tcp://test\"),\n\t\t\tCertificate: \u0026azuredevops.ServiceEndpointServiceFabricCertificateArgs{\n\t\t\t\tServerCertificateLookup:     pulumi.String(\"Thumbprint\"),\n\t\t\t\tServerCertificateThumbprint: pulumi.String(\"0000000000000000000000000000000000000000\"),\n\t\t\t\tClientCertificate:           filebase64OrPanic(\"certificate.pfx\"),\n\t\t\t\tClientCertificatePassword:   pulumi.String(\"password\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointServiceFabric;\nimport com.pulumi.azuredevops.ServiceEndpointServiceFabricArgs;\nimport com.pulumi.azuredevops.inputs.ServiceEndpointServiceFabricCertificateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceEndpointServiceFabric = new ServiceEndpointServiceFabric(\"exampleServiceEndpointServiceFabric\", ServiceEndpointServiceFabricArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example Service Fabric\")\n            .description(\"Managed by Terraform\")\n            .clusterEndpoint(\"tcp://test\")\n            .certificate(ServiceEndpointServiceFabricCertificateArgs.builder()\n                .serverCertificateLookup(\"Thumbprint\")\n                .serverCertificateThumbprint(\"0000000000000000000000000000000000000000\")\n                .clientCertificate(Base64.getEncoder().encodeToString(Files.readAllBytes(Paths.get(\"certificate.pfx\"))))\n                .clientCertificatePassword(\"password\")\n                .build())\n            .build());\n\n    }\n}\n```\n{{% /example %}}\n{{% example %}}\n### Azure Active Directory Authentication\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst test = new azuredevops.ServiceEndpointServiceFabric(\"test\", {\n    projectId: project.id,\n    serviceEndpointName: \"Sample Service Fabric\",\n    description: \"Managed by Terraform\",\n    clusterEndpoint: \"tcp://test\",\n    azureActiveDirectory: {\n        serverCertificateLookup: \"Thumbprint\",\n        serverCertificateThumbprint: \"0000000000000000000000000000000000000000\",\n        username: \"username\",\n        password: \"password\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\ntest = azuredevops.ServiceEndpointServiceFabric(\"test\",\n    project_id=project.id,\n    service_endpoint_name=\"Sample Service Fabric\",\n    description=\"Managed by Terraform\",\n    cluster_endpoint=\"tcp://test\",\n    azure_active_directory=azuredevops.ServiceEndpointServiceFabricAzureActiveDirectoryArgs(\n        server_certificate_lookup=\"Thumbprint\",\n        server_certificate_thumbprint=\"0000000000000000000000000000000000000000\",\n        username=\"username\",\n        password=\"password\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var project = new AzureDevOps.Project(\"project\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n    });\n\n    var test = new AzureDevOps.ServiceEndpointServiceFabric(\"test\", new()\n    {\n        ProjectId = project.Id,\n        ServiceEndpointName = \"Sample Service Fabric\",\n        Description = \"Managed by Terraform\",\n        ClusterEndpoint = \"tcp://test\",\n        AzureActiveDirectory = new AzureDevOps.Inputs.ServiceEndpointServiceFabricAzureActiveDirectoryArgs\n        {\n            ServerCertificateLookup = \"Thumbprint\",\n            ServerCertificateThumbprint = \"0000000000000000000000000000000000000000\",\n            Username = \"username\",\n            Password = \"password\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointServiceFabric(ctx, \"test\", \u0026azuredevops.ServiceEndpointServiceFabricArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample Service Fabric\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t\tClusterEndpoint:     pulumi.String(\"tcp://test\"),\n\t\t\tAzureActiveDirectory: \u0026azuredevops.ServiceEndpointServiceFabricAzureActiveDirectoryArgs{\n\t\t\t\tServerCertificateLookup:     pulumi.String(\"Thumbprint\"),\n\t\t\t\tServerCertificateThumbprint: pulumi.String(\"0000000000000000000000000000000000000000\"),\n\t\t\t\tUsername:                    pulumi.String(\"username\"),\n\t\t\t\tPassword:                    pulumi.String(\"password\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointServiceFabric;\nimport com.pulumi.azuredevops.ServiceEndpointServiceFabricArgs;\nimport com.pulumi.azuredevops.inputs.ServiceEndpointServiceFabricAzureActiveDirectoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var project = new Project(\"project\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .build());\n\n        var test = new ServiceEndpointServiceFabric(\"test\", ServiceEndpointServiceFabricArgs.builder()        \n            .projectId(project.id())\n            .serviceEndpointName(\"Sample Service Fabric\")\n            .description(\"Managed by Terraform\")\n            .clusterEndpoint(\"tcp://test\")\n            .azureActiveDirectory(ServiceEndpointServiceFabricAzureActiveDirectoryArgs.builder()\n                .serverCertificateLookup(\"Thumbprint\")\n                .serverCertificateThumbprint(\"0000000000000000000000000000000000000000\")\n                .username(\"username\")\n                .password(\"password\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  project:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n  test:\n    type: azuredevops:ServiceEndpointServiceFabric\n    properties:\n      projectId: ${project.id}\n      serviceEndpointName: Sample Service Fabric\n      description: Managed by Terraform\n      clusterEndpoint: tcp://test\n      azureActiveDirectory:\n        serverCertificateLookup: Thumbprint\n        serverCertificateThumbprint: '0000000000000000000000000000000000000000'\n        username: username\n        password: password\n```\n{{% /example %}}\n{{% example %}}\n### Windows Authentication\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst test = new azuredevops.ServiceEndpointServiceFabric(\"test\", {\n    projectId: project.id,\n    serviceEndpointName: \"Sample Service Fabric\",\n    description: \"Managed by Terraform\",\n    clusterEndpoint: \"tcp://test\",\n    none: {\n        unsecured: false,\n        clusterSpn: \"HTTP/www.contoso.com\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\ntest = azuredevops.ServiceEndpointServiceFabric(\"test\",\n    project_id=project.id,\n    service_endpoint_name=\"Sample Service Fabric\",\n    description=\"Managed by Terraform\",\n    cluster_endpoint=\"tcp://test\",\n    none=azuredevops.ServiceEndpointServiceFabricNoneArgs(\n        unsecured=False,\n        cluster_spn=\"HTTP/www.contoso.com\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var project = new AzureDevOps.Project(\"project\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n    });\n\n    var test = new AzureDevOps.ServiceEndpointServiceFabric(\"test\", new()\n    {\n        ProjectId = project.Id,\n        ServiceEndpointName = \"Sample Service Fabric\",\n        Description = \"Managed by Terraform\",\n        ClusterEndpoint = \"tcp://test\",\n        None = new AzureDevOps.Inputs.ServiceEndpointServiceFabricNoneArgs\n        {\n            Unsecured = false,\n            ClusterSpn = \"HTTP/www.contoso.com\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointServiceFabric(ctx, \"test\", \u0026azuredevops.ServiceEndpointServiceFabricArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample Service Fabric\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t\tClusterEndpoint:     pulumi.String(\"tcp://test\"),\n\t\t\tNone: \u0026azuredevops.ServiceEndpointServiceFabricNoneArgs{\n\t\t\t\tUnsecured:  pulumi.Bool(false),\n\t\t\t\tClusterSpn: pulumi.String(\"HTTP/www.contoso.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointServiceFabric;\nimport com.pulumi.azuredevops.ServiceEndpointServiceFabricArgs;\nimport com.pulumi.azuredevops.inputs.ServiceEndpointServiceFabricNoneArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var project = new Project(\"project\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .build());\n\n        var test = new ServiceEndpointServiceFabric(\"test\", ServiceEndpointServiceFabricArgs.builder()        \n            .projectId(project.id())\n            .serviceEndpointName(\"Sample Service Fabric\")\n            .description(\"Managed by Terraform\")\n            .clusterEndpoint(\"tcp://test\")\n            .none(ServiceEndpointServiceFabricNoneArgs.builder()\n                .unsecured(false)\n                .clusterSpn(\"HTTP/www.contoso.com\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  project:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n  test:\n    type: azuredevops:ServiceEndpointServiceFabric\n    properties:\n      projectId: ${project.id}\n      serviceEndpointName: Sample Service Fabric\n      description: Managed by Terraform\n      clusterEndpoint: tcp://test\n      none:\n        unsecured: false\n        clusterSpn: HTTP/www.contoso.com\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Service Endpoint Service Fabric can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:index/serviceEndpointServiceFabric:ServiceEndpointServiceFabric example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "azureActiveDirectory": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointServiceFabricAzureActiveDirectory:ServiceEndpointServiceFabricAzureActiveDirectory"
                },
                "certificate": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointServiceFabricCertificate:ServiceEndpointServiceFabricCertificate"
                },
                "clusterEndpoint": {
                    "type": "string",
                    "description": "Client connection endpoint for the cluster. Prefix the value with 'tcp://';. This value overrides the publish profile.\n"
                },
                "description": {
                    "type": "string"
                },
                "none": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointServiceFabricNone:ServiceEndpointServiceFabricNone"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "required": [
                "authorization",
                "clusterEndpoint",
                "projectId",
                "serviceEndpointName"
            ],
            "inputProperties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "azureActiveDirectory": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointServiceFabricAzureActiveDirectory:ServiceEndpointServiceFabricAzureActiveDirectory"
                },
                "certificate": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointServiceFabricCertificate:ServiceEndpointServiceFabricCertificate"
                },
                "clusterEndpoint": {
                    "type": "string",
                    "description": "Client connection endpoint for the cluster. Prefix the value with 'tcp://';. This value overrides the publish profile.\n"
                },
                "description": {
                    "type": "string"
                },
                "none": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointServiceFabricNone:ServiceEndpointServiceFabricNone"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n",
                    "willReplaceOnChanges": true
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "clusterEndpoint",
                "projectId",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEndpointServiceFabric resources.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "azureActiveDirectory": {
                        "$ref": "#/types/azuredevops:index/ServiceEndpointServiceFabricAzureActiveDirectory:ServiceEndpointServiceFabricAzureActiveDirectory"
                    },
                    "certificate": {
                        "$ref": "#/types/azuredevops:index/ServiceEndpointServiceFabricCertificate:ServiceEndpointServiceFabricCertificate"
                    },
                    "clusterEndpoint": {
                        "type": "string",
                        "description": "Client connection endpoint for the cluster. Prefix the value with 'tcp://';. This value overrides the publish profile.\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "none": {
                        "$ref": "#/types/azuredevops:index/ServiceEndpointServiceFabricNone:ServiceEndpointServiceFabricNone"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceEndpointSonarCloud:ServiceEndpointSonarCloud": {
            "description": "Manages a SonarCloud service endpoint within Azure DevOps. \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceEndpointSonarCloud = new azuredevops.ServiceEndpointSonarCloud(\"exampleServiceEndpointSonarCloud\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example SonarCloud\",\n    token: \"0000000000000000000000000000000000000000\",\n    description: \"Managed by Terraform\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_service_endpoint_sonar_cloud = azuredevops.ServiceEndpointSonarCloud(\"exampleServiceEndpointSonarCloud\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example SonarCloud\",\n    token=\"0000000000000000000000000000000000000000\",\n    description=\"Managed by Terraform\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceEndpointSonarCloud = new AzureDevOps.ServiceEndpointSonarCloud(\"exampleServiceEndpointSonarCloud\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example SonarCloud\",\n        Token = \"0000000000000000000000000000000000000000\",\n        Description = \"Managed by Terraform\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointSonarCloud(ctx, \"exampleServiceEndpointSonarCloud\", \u0026azuredevops.ServiceEndpointSonarCloudArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Example SonarCloud\"),\n\t\t\tToken:               pulumi.String(\"0000000000000000000000000000000000000000\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointSonarCloud;\nimport com.pulumi.azuredevops.ServiceEndpointSonarCloudArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceEndpointSonarCloud = new ServiceEndpointSonarCloud(\"exampleServiceEndpointSonarCloud\", ServiceEndpointSonarCloudArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example SonarCloud\")\n            .token(\"0000000000000000000000000000000000000000\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceEndpointSonarCloud:\n    type: azuredevops:ServiceEndpointSonarCloud\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example SonarCloud\n      token: '0000000000000000000000000000000000000000'\n      description: Managed by Terraform\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-7.0)\n- [Azure DevOps Service Connections](https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops\u0026tabs=yaml)\n- [SonarCloud User Token](https://docs.sonarcloud.io/advanced-setup/user-accounts/)\n\n\n## Import\n\nAzure DevOps Service Endpoint SonarCloud can be imported using the **projectID/serviceEndpointID**, e.g.\n\n```sh\n $ pulumi import azuredevops:index/serviceEndpointSonarCloud:ServiceEndpointSonarCloud example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The Service Endpoint description.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Authentication Token generated through SonarCloud (go to `My Account \u003e Security \u003e Generate Tokens`).\n",
                    "secret": true
                }
            },
            "required": [
                "authorization",
                "projectId",
                "serviceEndpointName",
                "token"
            ],
            "inputProperties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The Service Endpoint description.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n",
                    "willReplaceOnChanges": true
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n",
                    "willReplaceOnChanges": true
                },
                "token": {
                    "type": "string",
                    "description": "Authentication Token generated through SonarCloud (go to `My Account \u003e Security \u003e Generate Tokens`).\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "projectId",
                "serviceEndpointName",
                "token"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEndpointSonarCloud resources.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string",
                        "description": "The Service Endpoint description.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n",
                        "willReplaceOnChanges": true
                    },
                    "token": {
                        "type": "string",
                        "description": "Authentication Token generated through SonarCloud (go to `My Account \u003e Security \u003e Generate Tokens`).\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceEndpointSonarQube:ServiceEndpointSonarQube": {
            "description": "Manages a SonarQube service endpoint within Azure DevOps. \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceEndpointSonarQube = new azuredevops.ServiceEndpointSonarQube(\"exampleServiceEndpointSonarQube\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example SonarQube\",\n    url: \"https://sonarqube.my.com\",\n    token: \"0000000000000000000000000000000000000000\",\n    description: \"Managed by Terraform\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_service_endpoint_sonar_qube = azuredevops.ServiceEndpointSonarQube(\"exampleServiceEndpointSonarQube\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example SonarQube\",\n    url=\"https://sonarqube.my.com\",\n    token=\"0000000000000000000000000000000000000000\",\n    description=\"Managed by Terraform\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceEndpointSonarQube = new AzureDevOps.ServiceEndpointSonarQube(\"exampleServiceEndpointSonarQube\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example SonarQube\",\n        Url = \"https://sonarqube.my.com\",\n        Token = \"0000000000000000000000000000000000000000\",\n        Description = \"Managed by Terraform\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointSonarQube(ctx, \"exampleServiceEndpointSonarQube\", \u0026azuredevops.ServiceEndpointSonarQubeArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Example SonarQube\"),\n\t\t\tUrl:                 pulumi.String(\"https://sonarqube.my.com\"),\n\t\t\tToken:               pulumi.String(\"0000000000000000000000000000000000000000\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointSonarQube;\nimport com.pulumi.azuredevops.ServiceEndpointSonarQubeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceEndpointSonarQube = new ServiceEndpointSonarQube(\"exampleServiceEndpointSonarQube\", ServiceEndpointSonarQubeArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example SonarQube\")\n            .url(\"https://sonarqube.my.com\")\n            .token(\"0000000000000000000000000000000000000000\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceEndpointSonarQube:\n    type: azuredevops:ServiceEndpointSonarQube\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example SonarQube\n      url: https://sonarqube.my.com\n      token: '0000000000000000000000000000000000000000'\n      description: Managed by Terraform\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-7.0)\n- [Azure DevOps Service Connections](https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops\u0026tabs=yaml)\n- [SonarQube User Token](https://docs.sonarqube.org/latest/user-guide/user-token/)\n\n\n## Import\n\nAzure DevOps Service Endpoint SonarQube can be imported using the **projectID/serviceEndpointID**, e.g.\n\n```sh\n $ pulumi import azuredevops:index/serviceEndpointSonarQube:ServiceEndpointSonarQube example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The Service Endpoint description.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Authentication Token generated through SonarQube (go to My Account \u003e Security \u003e Generate Tokens).\n",
                    "secret": true
                },
                "url": {
                    "type": "string",
                    "description": "URL of the SonarQube server to connect with.\n"
                }
            },
            "required": [
                "authorization",
                "projectId",
                "serviceEndpointName",
                "token",
                "url"
            ],
            "inputProperties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The Service Endpoint description.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n",
                    "willReplaceOnChanges": true
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n",
                    "willReplaceOnChanges": true
                },
                "token": {
                    "type": "string",
                    "description": "Authentication Token generated through SonarQube (go to My Account \u003e Security \u003e Generate Tokens).\n",
                    "secret": true
                },
                "url": {
                    "type": "string",
                    "description": "URL of the SonarQube server to connect with.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "serviceEndpointName",
                "token",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEndpointSonarQube resources.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string",
                        "description": "The Service Endpoint description.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n",
                        "willReplaceOnChanges": true
                    },
                    "token": {
                        "type": "string",
                        "description": "Authentication Token generated through SonarQube (go to My Account \u003e Security \u003e Generate Tokens).\n",
                        "secret": true
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the SonarQube server to connect with.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceEndpointSsh:ServiceEndpointSsh": {
            "description": "Manages a SSH service endpoint within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceEndpointSsh = new azuredevops.ServiceEndpointSsh(\"exampleServiceEndpointSsh\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example SSH\",\n    host: \"1.2.3.4\",\n    username: \"username\",\n    description: \"Managed by Terraform\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_service_endpoint_ssh = azuredevops.ServiceEndpointSsh(\"exampleServiceEndpointSsh\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example SSH\",\n    host=\"1.2.3.4\",\n    username=\"username\",\n    description=\"Managed by Terraform\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceEndpointSsh = new AzureDevOps.ServiceEndpointSsh(\"exampleServiceEndpointSsh\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example SSH\",\n        Host = \"1.2.3.4\",\n        Username = \"username\",\n        Description = \"Managed by Terraform\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointSsh(ctx, \"exampleServiceEndpointSsh\", \u0026azuredevops.ServiceEndpointSshArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Example SSH\"),\n\t\t\tHost:                pulumi.String(\"1.2.3.4\"),\n\t\t\tUsername:            pulumi.String(\"username\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointSsh;\nimport com.pulumi.azuredevops.ServiceEndpointSshArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceEndpointSsh = new ServiceEndpointSsh(\"exampleServiceEndpointSsh\", ServiceEndpointSshArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example SSH\")\n            .host(\"1.2.3.4\")\n            .username(\"username\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceEndpointSsh:\n    type: azuredevops:ServiceEndpointSsh\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example SSH\n      host: 1.2.3.4\n      username: username\n      description: Managed by Terraform\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Service Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Service Endpoint SSH can be imported using **projectID/serviceEndpointID** or ** projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:index/serviceEndpointSsh:ServiceEndpointSsh example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "host": {
                    "type": "string",
                    "description": "The Host name or IP address of the remote machine.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for connecting to the endpoint.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port number on the remote machine to use for connecting. Defaults to `22`.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "Private Key for connecting to the endpoint.\n",
                    "secret": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for connecting to the endpoint.\n"
                }
            },
            "required": [
                "authorization",
                "host",
                "projectId",
                "serviceEndpointName",
                "username"
            ],
            "inputProperties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "host": {
                    "type": "string",
                    "description": "The Host name or IP address of the remote machine.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for connecting to the endpoint.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port number on the remote machine to use for connecting. Defaults to `22`.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "Private Key for connecting to the endpoint.\n",
                    "secret": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n",
                    "willReplaceOnChanges": true
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n",
                    "willReplaceOnChanges": true
                },
                "username": {
                    "type": "string",
                    "description": "Username for connecting to the endpoint.\n"
                }
            },
            "requiredInputs": [
                "host",
                "projectId",
                "serviceEndpointName",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEndpointSsh resources.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "host": {
                        "type": "string",
                        "description": "The Host name or IP address of the remote machine.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password for connecting to the endpoint.\n",
                        "secret": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port number on the remote machine to use for connecting. Defaults to `22`.\n"
                    },
                    "privateKey": {
                        "type": "string",
                        "description": "Private Key for connecting to the endpoint.\n",
                        "secret": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n",
                        "willReplaceOnChanges": true
                    },
                    "username": {
                        "type": "string",
                        "description": "Username for connecting to the endpoint.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceendpointArgocd:ServiceendpointArgocd": {
            "description": "Manages a ArgoCD service endpoint within Azure DevOps. Using this service endpoint requires you to first install [Argo CD Extension](https://marketplace.visualstudio.com/items?itemName=scb-tomasmortensen.vsix-argocd).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst exampleServiceendpointArgocd = new azuredevops.ServiceendpointArgocd(\"exampleServiceendpointArgocd\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example ArgoCD\",\n    description: \"Managed by Terraform\",\n    url: \"https://argocd.my.com\",\n    authenticationToken: {\n        token: \"0000000000000000000000000000000000000000\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nexample_serviceendpoint_argocd = azuredevops.ServiceendpointArgocd(\"exampleServiceendpointArgocd\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example ArgoCD\",\n    description=\"Managed by Terraform\",\n    url=\"https://argocd.my.com\",\n    authentication_token=azuredevops.ServiceendpointArgocdAuthenticationTokenArgs(\n        token=\"0000000000000000000000000000000000000000\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n    });\n\n    var exampleServiceendpointArgocd = new AzureDevOps.ServiceendpointArgocd(\"exampleServiceendpointArgocd\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example ArgoCD\",\n        Description = \"Managed by Terraform\",\n        Url = \"https://argocd.my.com\",\n        AuthenticationToken = new AzureDevOps.Inputs.ServiceendpointArgocdAuthenticationTokenArgs\n        {\n            Token = \"0000000000000000000000000000000000000000\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceendpointArgocd(ctx, \"exampleServiceendpointArgocd\", \u0026azuredevops.ServiceendpointArgocdArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Example ArgoCD\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t\tUrl:                 pulumi.String(\"https://argocd.my.com\"),\n\t\t\tAuthenticationToken: \u0026azuredevops.ServiceendpointArgocdAuthenticationTokenArgs{\n\t\t\t\tToken: pulumi.String(\"0000000000000000000000000000000000000000\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceendpointArgocd;\nimport com.pulumi.azuredevops.ServiceendpointArgocdArgs;\nimport com.pulumi.azuredevops.inputs.ServiceendpointArgocdAuthenticationTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .build());\n\n        var exampleServiceendpointArgocd = new ServiceendpointArgocd(\"exampleServiceendpointArgocd\", ServiceendpointArgocdArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example ArgoCD\")\n            .description(\"Managed by Terraform\")\n            .url(\"https://argocd.my.com\")\n            .authenticationToken(ServiceendpointArgocdAuthenticationTokenArgs.builder()\n                .token(\"0000000000000000000000000000000000000000\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n  exampleServiceendpointArgocd:\n    type: azuredevops:ServiceendpointArgocd\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example ArgoCD\n      description: Managed by Terraform\n      url: https://argocd.my.com\n      authenticationToken:\n        token: '0000000000000000000000000000000000000000'\n```\nAlternatively a username and password may be used.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceendpointArgocd = new azuredevops.ServiceendpointArgocd(\"exampleServiceendpointArgocd\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example ArgoCD\",\n    description: \"Managed by Terraform\",\n    url: \"https://argocd.my.com\",\n    authenticationBasic: {\n        username: \"username\",\n        password: \"password\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_serviceendpoint_argocd = azuredevops.ServiceendpointArgocd(\"exampleServiceendpointArgocd\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example ArgoCD\",\n    description=\"Managed by Terraform\",\n    url=\"https://argocd.my.com\",\n    authentication_basic=azuredevops.ServiceendpointArgocdAuthenticationBasicArgs(\n        username=\"username\",\n        password=\"password\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceendpointArgocd = new AzureDevOps.ServiceendpointArgocd(\"exampleServiceendpointArgocd\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example ArgoCD\",\n        Description = \"Managed by Terraform\",\n        Url = \"https://argocd.my.com\",\n        AuthenticationBasic = new AzureDevOps.Inputs.ServiceendpointArgocdAuthenticationBasicArgs\n        {\n            Username = \"username\",\n            Password = \"password\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceendpointArgocd(ctx, \"exampleServiceendpointArgocd\", \u0026azuredevops.ServiceendpointArgocdArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Example ArgoCD\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t\tUrl:                 pulumi.String(\"https://argocd.my.com\"),\n\t\t\tAuthenticationBasic: \u0026azuredevops.ServiceendpointArgocdAuthenticationBasicArgs{\n\t\t\t\tUsername: pulumi.String(\"username\"),\n\t\t\t\tPassword: pulumi.String(\"password\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceendpointArgocd;\nimport com.pulumi.azuredevops.ServiceendpointArgocdArgs;\nimport com.pulumi.azuredevops.inputs.ServiceendpointArgocdAuthenticationBasicArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceendpointArgocd = new ServiceendpointArgocd(\"exampleServiceendpointArgocd\", ServiceendpointArgocdArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example ArgoCD\")\n            .description(\"Managed by Terraform\")\n            .url(\"https://argocd.my.com\")\n            .authenticationBasic(ServiceendpointArgocdAuthenticationBasicArgs.builder()\n                .username(\"username\")\n                .password(\"password\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceendpointArgocd:\n    type: azuredevops:ServiceendpointArgocd\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example ArgoCD\n      description: Managed by Terraform\n      url: https://argocd.my.com\n      authenticationBasic:\n        username: username\n        password: password\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service Connections](https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops\u0026tabs=yaml)\n- [ArgoCD Project/User Token](https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_generate-token/)\n- [Argo CD Extension](https://marketplace.visualstudio.com/items?itemName=scb-tomasmortensen.vsix-argocd)\n\n\n## Import\n\nAzure DevOps Service Endpoint ArgoCD can be imported using the **projectID/serviceEndpointID**, e.g.\n\n```sh\n $ pulumi import azuredevops:index/serviceendpointArgocd:ServiceendpointArgocd example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authenticationBasic": {
                    "$ref": "#/types/azuredevops:index/ServiceendpointArgocdAuthenticationBasic:ServiceendpointArgocdAuthenticationBasic",
                    "description": "An `authentication_basic` block for the ArgoCD as documented below.\n\n\u003e **NOTE:** `authentication_basic` and `authentication_token` conflict with each other, only one is required.\n"
                },
                "authenticationToken": {
                    "$ref": "#/types/azuredevops:index/ServiceendpointArgocdAuthenticationToken:ServiceendpointArgocdAuthenticationToken",
                    "description": "An `authentication_token` block for the ArgoCD as documented below.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The Service Endpoint description.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the ArgoCD server to connect with.\n"
                }
            },
            "required": [
                "authorization",
                "projectId",
                "serviceEndpointName",
                "url"
            ],
            "inputProperties": {
                "authenticationBasic": {
                    "$ref": "#/types/azuredevops:index/ServiceendpointArgocdAuthenticationBasic:ServiceendpointArgocdAuthenticationBasic",
                    "description": "An `authentication_basic` block for the ArgoCD as documented below.\n\n\u003e **NOTE:** `authentication_basic` and `authentication_token` conflict with each other, only one is required.\n"
                },
                "authenticationToken": {
                    "$ref": "#/types/azuredevops:index/ServiceendpointArgocdAuthenticationToken:ServiceendpointArgocdAuthenticationToken",
                    "description": "An `authentication_token` block for the ArgoCD as documented below.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The Service Endpoint description.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n",
                    "willReplaceOnChanges": true
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n",
                    "willReplaceOnChanges": true
                },
                "url": {
                    "type": "string",
                    "description": "URL of the ArgoCD server to connect with.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "serviceEndpointName",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceendpointArgocd resources.\n",
                "properties": {
                    "authenticationBasic": {
                        "$ref": "#/types/azuredevops:index/ServiceendpointArgocdAuthenticationBasic:ServiceendpointArgocdAuthenticationBasic",
                        "description": "An `authentication_basic` block for the ArgoCD as documented below.\n\n\u003e **NOTE:** `authentication_basic` and `authentication_token` conflict with each other, only one is required.\n"
                    },
                    "authenticationToken": {
                        "$ref": "#/types/azuredevops:index/ServiceendpointArgocdAuthenticationToken:ServiceendpointArgocdAuthenticationToken",
                        "description": "An `authentication_token` block for the ArgoCD as documented below.\n"
                    },
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string",
                        "description": "The Service Endpoint description.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the ArgoCD server to connect with.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceendpointExternaltfs:ServiceendpointExternaltfs": {
            "description": "Manages an Azure Repos/Team Foundation Server service endpoint within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceendpointExternaltfs;\nimport com.pulumi.azuredevops.ServiceendpointExternaltfsArgs;\nimport com.pulumi.azuredevops.inputs.ServiceendpointExternaltfsAuthPersonalArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceendpointExternaltfs = new ServiceendpointExternaltfs(\"exampleServiceendpointExternaltfs\", ServiceendpointExternaltfsArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example External TFS Name\")\n            .url(\"https://dev.azure.com/myorganization\")\n            .description(\"Managed by Terraform\")\n            .authPersonal(ServiceendpointExternaltfsAuthPersonalArgs.builder()\n                .personalAccessToken(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceendpointExternaltfs:\n    type: azuredevops:ServiceendpointExternaltfs\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example External TFS Name\n      url: https://dev.azure.com/myorganization\n      description: Managed by Terraform\n      authPersonal:\n        personalAccessToken: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Service Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Service Endpoint External TFS can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:index/serviceendpointExternaltfs:ServiceendpointExternaltfs example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authPersonal": {
                    "$ref": "#/types/azuredevops:index/ServiceendpointExternaltfsAuthPersonal:ServiceendpointExternaltfsAuthPersonal",
                    "description": "An `auth_personal` block as documented below. Allows connecting using a personal access token.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "connectionUrl": {
                    "type": "string",
                    "description": "URL of the Azure DevOps organization or the TFS Project Collection to connect to.\n"
                },
                "description": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "required": [
                "authPersonal",
                "authorization",
                "connectionUrl",
                "projectId",
                "serviceEndpointName"
            ],
            "inputProperties": {
                "authPersonal": {
                    "$ref": "#/types/azuredevops:index/ServiceendpointExternaltfsAuthPersonal:ServiceendpointExternaltfsAuthPersonal",
                    "description": "An `auth_personal` block as documented below. Allows connecting using a personal access token.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "connectionUrl": {
                    "type": "string",
                    "description": "URL of the Azure DevOps organization or the TFS Project Collection to connect to.\n"
                },
                "description": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n",
                    "willReplaceOnChanges": true
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "authPersonal",
                "connectionUrl",
                "projectId",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceendpointExternaltfs resources.\n",
                "properties": {
                    "authPersonal": {
                        "$ref": "#/types/azuredevops:index/ServiceendpointExternaltfsAuthPersonal:ServiceendpointExternaltfsAuthPersonal",
                        "description": "An `auth_personal` block as documented below. Allows connecting using a personal access token.\n"
                    },
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "connectionUrl": {
                        "type": "string",
                        "description": "URL of the Azure DevOps organization or the TFS Project Collection to connect to.\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceendpointGcpTerraform:ServiceendpointGcpTerraform": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceendpointGcpTerraform = new azuredevops.ServiceendpointGcpTerraform(\"exampleServiceendpointGcpTerraform\", {\n    projectId: exampleProject.id,\n    tokenUri: \"https://oauth2.example.com/token\",\n    clientEmail: \"gcp-sa-example@example.iam.gserviceaccount.com\",\n    privateKey: \"0000000000000000000000000000000000000\",\n    serviceEndpointName: \"Example GCP Terraform extension\",\n    gcpProjectId: \"Example GCP Project\",\n    description: \"Managed by Terraform\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_serviceendpoint_gcp_terraform = azuredevops.ServiceendpointGcpTerraform(\"exampleServiceendpointGcpTerraform\",\n    project_id=example_project.id,\n    token_uri=\"https://oauth2.example.com/token\",\n    client_email=\"gcp-sa-example@example.iam.gserviceaccount.com\",\n    private_key=\"0000000000000000000000000000000000000\",\n    service_endpoint_name=\"Example GCP Terraform extension\",\n    gcp_project_id=\"Example GCP Project\",\n    description=\"Managed by Terraform\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceendpointGcpTerraform = new AzureDevOps.ServiceendpointGcpTerraform(\"exampleServiceendpointGcpTerraform\", new()\n    {\n        ProjectId = exampleProject.Id,\n        TokenUri = \"https://oauth2.example.com/token\",\n        ClientEmail = \"gcp-sa-example@example.iam.gserviceaccount.com\",\n        PrivateKey = \"0000000000000000000000000000000000000\",\n        ServiceEndpointName = \"Example GCP Terraform extension\",\n        GcpProjectId = \"Example GCP Project\",\n        Description = \"Managed by Terraform\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceendpointGcpTerraform(ctx, \"exampleServiceendpointGcpTerraform\", \u0026azuredevops.ServiceendpointGcpTerraformArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tTokenUri:            pulumi.String(\"https://oauth2.example.com/token\"),\n\t\t\tClientEmail:         pulumi.String(\"gcp-sa-example@example.iam.gserviceaccount.com\"),\n\t\t\tPrivateKey:          pulumi.String(\"0000000000000000000000000000000000000\"),\n\t\t\tServiceEndpointName: pulumi.String(\"Example GCP Terraform extension\"),\n\t\t\tGcpProjectId:        pulumi.String(\"Example GCP Project\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceendpointGcpTerraform;\nimport com.pulumi.azuredevops.ServiceendpointGcpTerraformArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceendpointGcpTerraform = new ServiceendpointGcpTerraform(\"exampleServiceendpointGcpTerraform\", ServiceendpointGcpTerraformArgs.builder()        \n            .projectId(exampleProject.id())\n            .tokenUri(\"https://oauth2.example.com/token\")\n            .clientEmail(\"gcp-sa-example@example.iam.gserviceaccount.com\")\n            .privateKey(\"0000000000000000000000000000000000000\")\n            .serviceEndpointName(\"Example GCP Terraform extension\")\n            .gcpProjectId(\"Example GCP Project\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceendpointGcpTerraform:\n    type: azuredevops:ServiceendpointGcpTerraform\n    properties:\n      projectId: ${exampleProject.id}\n      tokenUri: https://oauth2.example.com/token\n      clientEmail: gcp-sa-example@example.iam.gserviceaccount.com\n      privateKey: '0000000000000000000000000000000000000'\n      serviceEndpointName: Example GCP Terraform extension\n      gcpProjectId: Example GCP Project\n      description: Managed by Terraform\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.1 - Service Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-7.1)\n\n\n## Import\n\nAzure DevOps Service Endpoint GCP can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:index/serviceendpointGcpTerraform:ServiceendpointGcpTerraform azuredevops_serviceendpoint_gcp_terraform.example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "clientEmail": {
                    "type": "string",
                    "description": "The client email field in the JSON key file for creating the JSON Web Token.\n"
                },
                "description": {
                    "type": "string"
                },
                "gcpProjectId": {
                    "type": "string",
                    "description": "GCP project associated with the Service Connection.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "The client email field in the JSON key file for creating the JSON Web Token.\n",
                    "secret": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "Scope to be provided.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "tokenUri": {
                    "type": "string",
                    "description": "The token uri field in the JSON key file for creating the JSON Web Token.\n"
                }
            },
            "required": [
                "authorization",
                "gcpProjectId",
                "privateKey",
                "projectId",
                "serviceEndpointName",
                "tokenUri"
            ],
            "inputProperties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "clientEmail": {
                    "type": "string",
                    "description": "The client email field in the JSON key file for creating the JSON Web Token.\n"
                },
                "description": {
                    "type": "string"
                },
                "gcpProjectId": {
                    "type": "string",
                    "description": "GCP project associated with the Service Connection.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "The client email field in the JSON key file for creating the JSON Web Token.\n",
                    "secret": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n",
                    "willReplaceOnChanges": true
                },
                "scope": {
                    "type": "string",
                    "description": "Scope to be provided.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n",
                    "willReplaceOnChanges": true
                },
                "tokenUri": {
                    "type": "string",
                    "description": "The token uri field in the JSON key file for creating the JSON Web Token.\n"
                }
            },
            "requiredInputs": [
                "gcpProjectId",
                "privateKey",
                "projectId",
                "serviceEndpointName",
                "tokenUri"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceendpointGcpTerraform resources.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "clientEmail": {
                        "type": "string",
                        "description": "The client email field in the JSON key file for creating the JSON Web Token.\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "gcpProjectId": {
                        "type": "string",
                        "description": "GCP project associated with the Service Connection.\n"
                    },
                    "privateKey": {
                        "type": "string",
                        "description": "The client email field in the JSON key file for creating the JSON Web Token.\n",
                        "secret": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "scope": {
                        "type": "string",
                        "description": "Scope to be provided.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n",
                        "willReplaceOnChanges": true
                    },
                    "tokenUri": {
                        "type": "string",
                        "description": "The token uri field in the JSON key file for creating the JSON Web Token.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceendpointIncomingwebhook:ServiceendpointIncomingwebhook": {
            "description": "Manages an Incoming WebHook service endpoint within Azure DevOps, which can be used as a resource in YAML pipelines to subscribe to a webhook event.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceendpointIncomingwebhook = new azuredevops.ServiceendpointIncomingwebhook(\"exampleServiceendpointIncomingwebhook\", {\n    projectId: exampleProject.id,\n    webhookName: \"example_webhook\",\n    secret: \"secret\",\n    httpHeader: \"X-Hub-Signature\",\n    serviceEndpointName: \"Example IncomingWebhook\",\n    description: \"Managed by Terraform\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_serviceendpoint_incomingwebhook = azuredevops.ServiceendpointIncomingwebhook(\"exampleServiceendpointIncomingwebhook\",\n    project_id=example_project.id,\n    webhook_name=\"example_webhook\",\n    secret=\"secret\",\n    http_header=\"X-Hub-Signature\",\n    service_endpoint_name=\"Example IncomingWebhook\",\n    description=\"Managed by Terraform\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceendpointIncomingwebhook = new AzureDevOps.ServiceendpointIncomingwebhook(\"exampleServiceendpointIncomingwebhook\", new()\n    {\n        ProjectId = exampleProject.Id,\n        WebhookName = \"example_webhook\",\n        Secret = \"secret\",\n        HttpHeader = \"X-Hub-Signature\",\n        ServiceEndpointName = \"Example IncomingWebhook\",\n        Description = \"Managed by Terraform\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceendpointIncomingwebhook(ctx, \"exampleServiceendpointIncomingwebhook\", \u0026azuredevops.ServiceendpointIncomingwebhookArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tWebhookName:         pulumi.String(\"example_webhook\"),\n\t\t\tSecret:              pulumi.String(\"secret\"),\n\t\t\tHttpHeader:          pulumi.String(\"X-Hub-Signature\"),\n\t\t\tServiceEndpointName: pulumi.String(\"Example IncomingWebhook\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceendpointIncomingwebhook;\nimport com.pulumi.azuredevops.ServiceendpointIncomingwebhookArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceendpointIncomingwebhook = new ServiceendpointIncomingwebhook(\"exampleServiceendpointIncomingwebhook\", ServiceendpointIncomingwebhookArgs.builder()        \n            .projectId(exampleProject.id())\n            .webhookName(\"example_webhook\")\n            .secret(\"secret\")\n            .httpHeader(\"X-Hub-Signature\")\n            .serviceEndpointName(\"Example IncomingWebhook\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceendpointIncomingwebhook:\n    type: azuredevops:ServiceendpointIncomingwebhook\n    properties:\n      projectId: ${exampleProject.id}\n      webhookName: example_webhook\n      secret: secret\n      httpHeader: X-Hub-Signature\n      serviceEndpointName: Example IncomingWebhook\n      description: Managed by Terraform\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAzure DevOps Service Endpoint Incoming WebHook can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:index/serviceendpointIncomingwebhook:ServiceendpointIncomingwebhook example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "httpHeader": {
                    "type": "string",
                    "description": "Http header name on which checksum will be sent.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project. Changing this forces a new Service Connection Incoming WebHook to be created.\n"
                },
                "secret": {
                    "type": "string",
                    "description": "Secret for the WebHook. WebHook service will use this secret to calculate the payload checksum.\n",
                    "secret": true
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The name of the service endpoint. Changing this forces a new Service Connection Incoming WebHook to be created.\n"
                },
                "webhookName": {
                    "type": "string",
                    "description": "The name of the WebHook.\n"
                }
            },
            "required": [
                "authorization",
                "projectId",
                "serviceEndpointName",
                "webhookName"
            ],
            "inputProperties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "httpHeader": {
                    "type": "string",
                    "description": "Http header name on which checksum will be sent.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project. Changing this forces a new Service Connection Incoming WebHook to be created.\n",
                    "willReplaceOnChanges": true
                },
                "secret": {
                    "type": "string",
                    "description": "Secret for the WebHook. WebHook service will use this secret to calculate the payload checksum.\n",
                    "secret": true
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The name of the service endpoint. Changing this forces a new Service Connection Incoming WebHook to be created.\n",
                    "willReplaceOnChanges": true
                },
                "webhookName": {
                    "type": "string",
                    "description": "The name of the WebHook.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "serviceEndpointName",
                "webhookName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceendpointIncomingwebhook resources.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "httpHeader": {
                        "type": "string",
                        "description": "Http header name on which checksum will be sent.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project. Changing this forces a new Service Connection Incoming WebHook to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "secret": {
                        "type": "string",
                        "description": "Secret for the WebHook. WebHook service will use this secret to calculate the payload checksum.\n",
                        "secret": true
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The name of the service endpoint. Changing this forces a new Service Connection Incoming WebHook to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "webhookName": {
                        "type": "string",
                        "description": "The name of the WebHook.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceendpointJenkins:ServiceendpointJenkins": {
            "description": "Manages a Jenkins service endpoint within Azure DevOps, which can be used as a resource in YAML pipelines to connect to a Jenkins instance.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceendpointJenkins = new azuredevops.ServiceendpointJenkins(\"exampleServiceendpointJenkins\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"jenkins-example\",\n    description: \"Service Endpoint for 'Jenkins' (Managed by Terraform)\",\n    url: \"https://example.com\",\n    acceptUntrustedCerts: false,\n    username: \"username\",\n    password: \"password\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_serviceendpoint_jenkins = azuredevops.ServiceendpointJenkins(\"exampleServiceendpointJenkins\",\n    project_id=example_project.id,\n    service_endpoint_name=\"jenkins-example\",\n    description=\"Service Endpoint for 'Jenkins' (Managed by Terraform)\",\n    url=\"https://example.com\",\n    accept_untrusted_certs=False,\n    username=\"username\",\n    password=\"password\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceendpointJenkins = new AzureDevOps.ServiceendpointJenkins(\"exampleServiceendpointJenkins\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"jenkins-example\",\n        Description = \"Service Endpoint for 'Jenkins' (Managed by Terraform)\",\n        Url = \"https://example.com\",\n        AcceptUntrustedCerts = false,\n        Username = \"username\",\n        Password = \"password\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceendpointJenkins(ctx, \"exampleServiceendpointJenkins\", \u0026azuredevops.ServiceendpointJenkinsArgs{\n\t\t\tProjectId:            exampleProject.ID(),\n\t\t\tServiceEndpointName:  pulumi.String(\"jenkins-example\"),\n\t\t\tDescription:          pulumi.String(\"Service Endpoint for 'Jenkins' (Managed by Terraform)\"),\n\t\t\tUrl:                  pulumi.String(\"https://example.com\"),\n\t\t\tAcceptUntrustedCerts: pulumi.Bool(false),\n\t\t\tUsername:             pulumi.String(\"username\"),\n\t\t\tPassword:             pulumi.String(\"password\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceendpointJenkins;\nimport com.pulumi.azuredevops.ServiceendpointJenkinsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceendpointJenkins = new ServiceendpointJenkins(\"exampleServiceendpointJenkins\", ServiceendpointJenkinsArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"jenkins-example\")\n            .description(\"Service Endpoint for 'Jenkins' (Managed by Terraform)\")\n            .url(\"https://example.com\")\n            .acceptUntrustedCerts(false)\n            .username(\"username\")\n            .password(\"password\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceendpointJenkins:\n    type: azuredevops:ServiceendpointJenkins\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: jenkins-example\n      description: Service Endpoint for 'Jenkins' (Managed by Terraform)\n      url: https://example.com\n      acceptUntrustedCerts: false\n      username: username\n      password: password\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nService Connection Jenkins can be imported using the `projectId/id` or or `projectName/id`, e.g.\n\n```sh\n $ pulumi import azuredevops:index/serviceendpointJenkins:ServiceendpointJenkins example projectName/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "acceptUntrustedCerts": {
                    "type": "boolean",
                    "description": "Allows the Jenkins clients to accept self-signed SSL server certificates. Defaults to `false.`\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "description": "The Service Endpoint password to authenticate at the Jenkins Instance.\n",
                    "secret": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project. Changing this forces a new Service Connection Jenkins to be created.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The name of the service endpoint. Changing this forces a new Service Connection Jenkins to be created.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The Service Endpoint url.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The Service Endpoint username to authenticate at the Jenkins Instance.\n"
                }
            },
            "required": [
                "authorization",
                "password",
                "projectId",
                "serviceEndpointName",
                "url",
                "username"
            ],
            "inputProperties": {
                "acceptUntrustedCerts": {
                    "type": "boolean",
                    "description": "Allows the Jenkins clients to accept self-signed SSL server certificates. Defaults to `false.`\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "description": "The Service Endpoint password to authenticate at the Jenkins Instance.\n",
                    "secret": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project. Changing this forces a new Service Connection Jenkins to be created.\n",
                    "willReplaceOnChanges": true
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The name of the service endpoint. Changing this forces a new Service Connection Jenkins to be created.\n",
                    "willReplaceOnChanges": true
                },
                "url": {
                    "type": "string",
                    "description": "The Service Endpoint url.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The Service Endpoint username to authenticate at the Jenkins Instance.\n"
                }
            },
            "requiredInputs": [
                "password",
                "projectId",
                "serviceEndpointName",
                "url",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceendpointJenkins resources.\n",
                "properties": {
                    "acceptUntrustedCerts": {
                        "type": "boolean",
                        "description": "Allows the Jenkins clients to accept self-signed SSL server certificates. Defaults to `false.`\n"
                    },
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string",
                        "description": "The Service Endpoint password to authenticate at the Jenkins Instance.\n",
                        "secret": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project. Changing this forces a new Service Connection Jenkins to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The name of the service endpoint. Changing this forces a new Service Connection Jenkins to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "description": "The Service Endpoint url.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The Service Endpoint username to authenticate at the Jenkins Instance.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceendpointJfrogArtifactoryV2:ServiceendpointJfrogArtifactoryV2": {
            "description": "Manages a JFrog Artifactory V2 server endpoint within an Azure DevOps organization.\n\n\u003e **Note:** Using this service endpoint requires you to first install [JFrog Extension](https://marketplace.visualstudio.com/items?itemName=JFrog.jfrog-azure-devops-extension).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceendpointJfrogArtifactoryV2 = new azuredevops.ServiceendpointJfrogArtifactoryV2(\"exampleServiceendpointJfrogArtifactoryV2\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example JFrog Artifactory V2\",\n    description: \"Managed by Terraform\",\n    url: \"https://artifactory.my.com\",\n    authenticationToken: {\n        token: \"0000000000000000000000000000000000000000\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_serviceendpoint_jfrog_artifactory_v2 = azuredevops.ServiceendpointJfrogArtifactoryV2(\"exampleServiceendpointJfrogArtifactoryV2\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example JFrog Artifactory V2\",\n    description=\"Managed by Terraform\",\n    url=\"https://artifactory.my.com\",\n    authentication_token=azuredevops.ServiceendpointJfrogArtifactoryV2AuthenticationTokenArgs(\n        token=\"0000000000000000000000000000000000000000\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceendpointJfrogArtifactoryV2 = new AzureDevOps.ServiceendpointJfrogArtifactoryV2(\"exampleServiceendpointJfrogArtifactoryV2\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example JFrog Artifactory V2\",\n        Description = \"Managed by Terraform\",\n        Url = \"https://artifactory.my.com\",\n        AuthenticationToken = new AzureDevOps.Inputs.ServiceendpointJfrogArtifactoryV2AuthenticationTokenArgs\n        {\n            Token = \"0000000000000000000000000000000000000000\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceendpointJfrogArtifactoryV2(ctx, \"exampleServiceendpointJfrogArtifactoryV2\", \u0026azuredevops.ServiceendpointJfrogArtifactoryV2Args{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Example JFrog Artifactory V2\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t\tUrl:                 pulumi.String(\"https://artifactory.my.com\"),\n\t\t\tAuthenticationToken: \u0026azuredevops.ServiceendpointJfrogArtifactoryV2AuthenticationTokenArgs{\n\t\t\t\tToken: pulumi.String(\"0000000000000000000000000000000000000000\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceendpointJfrogArtifactoryV2;\nimport com.pulumi.azuredevops.ServiceendpointJfrogArtifactoryV2Args;\nimport com.pulumi.azuredevops.inputs.ServiceendpointJfrogArtifactoryV2AuthenticationTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceendpointJfrogArtifactoryV2 = new ServiceendpointJfrogArtifactoryV2(\"exampleServiceendpointJfrogArtifactoryV2\", ServiceendpointJfrogArtifactoryV2Args.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example JFrog Artifactory V2\")\n            .description(\"Managed by Terraform\")\n            .url(\"https://artifactory.my.com\")\n            .authenticationToken(ServiceendpointJfrogArtifactoryV2AuthenticationTokenArgs.builder()\n                .token(\"0000000000000000000000000000000000000000\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceendpointJfrogArtifactoryV2:\n    type: azuredevops:ServiceendpointJfrogArtifactoryV2\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example JFrog Artifactory V2\n      description: Managed by Terraform\n      url: https://artifactory.my.com\n      authenticationToken:\n        token: '0000000000000000000000000000000000000000'\n```\nAlternatively a username and password may be used.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceendpointJfrogArtifactoryV2 = new azuredevops.ServiceendpointJfrogArtifactoryV2(\"exampleServiceendpointJfrogArtifactoryV2\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example JFrog Artifactory V2\",\n    description: \"Managed by Terraform\",\n    url: \"https://artifactory.my.com\",\n    authenticationBasic: {\n        username: \"username\",\n        password: \"password\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_serviceendpoint_jfrog_artifactory_v2 = azuredevops.ServiceendpointJfrogArtifactoryV2(\"exampleServiceendpointJfrogArtifactoryV2\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example JFrog Artifactory V2\",\n    description=\"Managed by Terraform\",\n    url=\"https://artifactory.my.com\",\n    authentication_basic=azuredevops.ServiceendpointJfrogArtifactoryV2AuthenticationBasicArgs(\n        username=\"username\",\n        password=\"password\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceendpointJfrogArtifactoryV2 = new AzureDevOps.ServiceendpointJfrogArtifactoryV2(\"exampleServiceendpointJfrogArtifactoryV2\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example JFrog Artifactory V2\",\n        Description = \"Managed by Terraform\",\n        Url = \"https://artifactory.my.com\",\n        AuthenticationBasic = new AzureDevOps.Inputs.ServiceendpointJfrogArtifactoryV2AuthenticationBasicArgs\n        {\n            Username = \"username\",\n            Password = \"password\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceendpointJfrogArtifactoryV2(ctx, \"exampleServiceendpointJfrogArtifactoryV2\", \u0026azuredevops.ServiceendpointJfrogArtifactoryV2Args{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Example JFrog Artifactory V2\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t\tUrl:                 pulumi.String(\"https://artifactory.my.com\"),\n\t\t\tAuthenticationBasic: \u0026azuredevops.ServiceendpointJfrogArtifactoryV2AuthenticationBasicArgs{\n\t\t\t\tUsername: pulumi.String(\"username\"),\n\t\t\t\tPassword: pulumi.String(\"password\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceendpointJfrogArtifactoryV2;\nimport com.pulumi.azuredevops.ServiceendpointJfrogArtifactoryV2Args;\nimport com.pulumi.azuredevops.inputs.ServiceendpointJfrogArtifactoryV2AuthenticationBasicArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceendpointJfrogArtifactoryV2 = new ServiceendpointJfrogArtifactoryV2(\"exampleServiceendpointJfrogArtifactoryV2\", ServiceendpointJfrogArtifactoryV2Args.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example JFrog Artifactory V2\")\n            .description(\"Managed by Terraform\")\n            .url(\"https://artifactory.my.com\")\n            .authenticationBasic(ServiceendpointJfrogArtifactoryV2AuthenticationBasicArgs.builder()\n                .username(\"username\")\n                .password(\"password\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceendpointJfrogArtifactoryV2:\n    type: azuredevops:ServiceendpointJfrogArtifactoryV2\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example JFrog Artifactory V2\n      description: Managed by Terraform\n      url: https://artifactory.my.com\n      authenticationBasic:\n        username: username\n        password: password\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service Connections](https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops\u0026tabs=yaml)\n* [Artifactory User Token](https://docs.artifactory.org/latest/user-guide/user-token/)\n\n\n## Import\n\nAzure DevOps Service Endpoint JFrog Artifactory V2 can be imported using the **projectID/serviceEndpointID**, e.g.\n\n```sh\n $ pulumi import azuredevops:index/serviceendpointJfrogArtifactoryV2:ServiceendpointJfrogArtifactoryV2 example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authenticationBasic": {
                    "$ref": "#/types/azuredevops:index/ServiceendpointJfrogArtifactoryV2AuthenticationBasic:ServiceendpointJfrogArtifactoryV2AuthenticationBasic",
                    "description": "A `authentication_basic` block as documented below.\n"
                },
                "authenticationToken": {
                    "$ref": "#/types/azuredevops:index/ServiceendpointJfrogArtifactoryV2AuthenticationToken:ServiceendpointJfrogArtifactoryV2AuthenticationToken",
                    "description": "A `authentication_token` block as documented below.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The Service Endpoint description.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Artifactory server to connect with.\n\n\u003e **NOTE:** URL should not end in a slash character.\n"
                }
            },
            "required": [
                "authorization",
                "projectId",
                "serviceEndpointName",
                "url"
            ],
            "inputProperties": {
                "authenticationBasic": {
                    "$ref": "#/types/azuredevops:index/ServiceendpointJfrogArtifactoryV2AuthenticationBasic:ServiceendpointJfrogArtifactoryV2AuthenticationBasic",
                    "description": "A `authentication_basic` block as documented below.\n"
                },
                "authenticationToken": {
                    "$ref": "#/types/azuredevops:index/ServiceendpointJfrogArtifactoryV2AuthenticationToken:ServiceendpointJfrogArtifactoryV2AuthenticationToken",
                    "description": "A `authentication_token` block as documented below.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The Service Endpoint description.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n",
                    "willReplaceOnChanges": true
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n",
                    "willReplaceOnChanges": true
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Artifactory server to connect with.\n\n\u003e **NOTE:** URL should not end in a slash character.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "serviceEndpointName",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceendpointJfrogArtifactoryV2 resources.\n",
                "properties": {
                    "authenticationBasic": {
                        "$ref": "#/types/azuredevops:index/ServiceendpointJfrogArtifactoryV2AuthenticationBasic:ServiceendpointJfrogArtifactoryV2AuthenticationBasic",
                        "description": "A `authentication_basic` block as documented below.\n"
                    },
                    "authenticationToken": {
                        "$ref": "#/types/azuredevops:index/ServiceendpointJfrogArtifactoryV2AuthenticationToken:ServiceendpointJfrogArtifactoryV2AuthenticationToken",
                        "description": "A `authentication_token` block as documented below.\n"
                    },
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string",
                        "description": "The Service Endpoint description.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the Artifactory server to connect with.\n\n\u003e **NOTE:** URL should not end in a slash character.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceendpointJfrogDistributionV2:ServiceendpointJfrogDistributionV2": {
            "description": "Manages a JFrog Distribution V2 server endpoint within an Azure DevOps organization.\n\n\u003e **Note:** Using this service endpoint requires you to first install [JFrog Extension](https://marketplace.visualstudio.com/items?itemName=JFrog.jfrog-azure-devops-extension).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceendpointJfrogDistributionV2 = new azuredevops.ServiceendpointJfrogDistributionV2(\"exampleServiceendpointJfrogDistributionV2\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example JFrog Distribution V2\",\n    description: \"Managed by Terraform\",\n    url: \"https://artifactory.my.com\",\n    authenticationToken: {\n        token: \"0000000000000000000000000000000000000000\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_serviceendpoint_jfrog_distribution_v2 = azuredevops.ServiceendpointJfrogDistributionV2(\"exampleServiceendpointJfrogDistributionV2\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example JFrog Distribution V2\",\n    description=\"Managed by Terraform\",\n    url=\"https://artifactory.my.com\",\n    authentication_token=azuredevops.ServiceendpointJfrogDistributionV2AuthenticationTokenArgs(\n        token=\"0000000000000000000000000000000000000000\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceendpointJfrogDistributionV2 = new AzureDevOps.ServiceendpointJfrogDistributionV2(\"exampleServiceendpointJfrogDistributionV2\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example JFrog Distribution V2\",\n        Description = \"Managed by Terraform\",\n        Url = \"https://artifactory.my.com\",\n        AuthenticationToken = new AzureDevOps.Inputs.ServiceendpointJfrogDistributionV2AuthenticationTokenArgs\n        {\n            Token = \"0000000000000000000000000000000000000000\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceendpointJfrogDistributionV2(ctx, \"exampleServiceendpointJfrogDistributionV2\", \u0026azuredevops.ServiceendpointJfrogDistributionV2Args{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Example JFrog Distribution V2\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t\tUrl:                 pulumi.String(\"https://artifactory.my.com\"),\n\t\t\tAuthenticationToken: \u0026azuredevops.ServiceendpointJfrogDistributionV2AuthenticationTokenArgs{\n\t\t\t\tToken: pulumi.String(\"0000000000000000000000000000000000000000\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceendpointJfrogDistributionV2;\nimport com.pulumi.azuredevops.ServiceendpointJfrogDistributionV2Args;\nimport com.pulumi.azuredevops.inputs.ServiceendpointJfrogDistributionV2AuthenticationTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceendpointJfrogDistributionV2 = new ServiceendpointJfrogDistributionV2(\"exampleServiceendpointJfrogDistributionV2\", ServiceendpointJfrogDistributionV2Args.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example JFrog Distribution V2\")\n            .description(\"Managed by Terraform\")\n            .url(\"https://artifactory.my.com\")\n            .authenticationToken(ServiceendpointJfrogDistributionV2AuthenticationTokenArgs.builder()\n                .token(\"0000000000000000000000000000000000000000\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceendpointJfrogDistributionV2:\n    type: azuredevops:ServiceendpointJfrogDistributionV2\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example JFrog Distribution V2\n      description: Managed by Terraform\n      url: https://artifactory.my.com\n      authenticationToken:\n        token: '0000000000000000000000000000000000000000'\n```\nAlternatively a username and password may be used.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceendpointJfrogDistributionV2 = new azuredevops.ServiceendpointJfrogDistributionV2(\"exampleServiceendpointJfrogDistributionV2\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example JFrog Distribution V2\",\n    description: \"Managed by Terraform\",\n    url: \"https://artifactory.my.com\",\n    authenticationBasic: {\n        username: \"username\",\n        password: \"password\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_serviceendpoint_jfrog_distribution_v2 = azuredevops.ServiceendpointJfrogDistributionV2(\"exampleServiceendpointJfrogDistributionV2\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example JFrog Distribution V2\",\n    description=\"Managed by Terraform\",\n    url=\"https://artifactory.my.com\",\n    authentication_basic=azuredevops.ServiceendpointJfrogDistributionV2AuthenticationBasicArgs(\n        username=\"username\",\n        password=\"password\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceendpointJfrogDistributionV2 = new AzureDevOps.ServiceendpointJfrogDistributionV2(\"exampleServiceendpointJfrogDistributionV2\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example JFrog Distribution V2\",\n        Description = \"Managed by Terraform\",\n        Url = \"https://artifactory.my.com\",\n        AuthenticationBasic = new AzureDevOps.Inputs.ServiceendpointJfrogDistributionV2AuthenticationBasicArgs\n        {\n            Username = \"username\",\n            Password = \"password\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceendpointJfrogDistributionV2(ctx, \"exampleServiceendpointJfrogDistributionV2\", \u0026azuredevops.ServiceendpointJfrogDistributionV2Args{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Example JFrog Distribution V2\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t\tUrl:                 pulumi.String(\"https://artifactory.my.com\"),\n\t\t\tAuthenticationBasic: \u0026azuredevops.ServiceendpointJfrogDistributionV2AuthenticationBasicArgs{\n\t\t\t\tUsername: pulumi.String(\"username\"),\n\t\t\t\tPassword: pulumi.String(\"password\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceendpointJfrogDistributionV2;\nimport com.pulumi.azuredevops.ServiceendpointJfrogDistributionV2Args;\nimport com.pulumi.azuredevops.inputs.ServiceendpointJfrogDistributionV2AuthenticationBasicArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceendpointJfrogDistributionV2 = new ServiceendpointJfrogDistributionV2(\"exampleServiceendpointJfrogDistributionV2\", ServiceendpointJfrogDistributionV2Args.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example JFrog Distribution V2\")\n            .description(\"Managed by Terraform\")\n            .url(\"https://artifactory.my.com\")\n            .authenticationBasic(ServiceendpointJfrogDistributionV2AuthenticationBasicArgs.builder()\n                .username(\"username\")\n                .password(\"password\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceendpointJfrogDistributionV2:\n    type: azuredevops:ServiceendpointJfrogDistributionV2\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example JFrog Distribution V2\n      description: Managed by Terraform\n      url: https://artifactory.my.com\n      authenticationBasic:\n        username: username\n        password: password\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service Connections](https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops\u0026tabs=yaml)\n* [Artifactory User Token](https://docs.artifactory.org/latest/user-guide/user-token/)\n\n\n## Import\n\nAzure DevOps Service Endpoint JFrog Distribution V2 can be imported using the **projectID/serviceEndpointID**, e.g.\n\n```sh\n $ pulumi import azuredevops:index/serviceendpointJfrogDistributionV2:ServiceendpointJfrogDistributionV2 example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authenticationBasic": {
                    "$ref": "#/types/azuredevops:index/ServiceendpointJfrogDistributionV2AuthenticationBasic:ServiceendpointJfrogDistributionV2AuthenticationBasic",
                    "description": "A `authentication_basic` block as documented below.\n"
                },
                "authenticationToken": {
                    "$ref": "#/types/azuredevops:index/ServiceendpointJfrogDistributionV2AuthenticationToken:ServiceendpointJfrogDistributionV2AuthenticationToken",
                    "description": "A `authentication_token` block as documented below.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The Service Endpoint description.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Artifactory server to connect with.\n\n\u003e **NOTE:** URL should not end in a slash character.\n"
                }
            },
            "required": [
                "authorization",
                "projectId",
                "serviceEndpointName",
                "url"
            ],
            "inputProperties": {
                "authenticationBasic": {
                    "$ref": "#/types/azuredevops:index/ServiceendpointJfrogDistributionV2AuthenticationBasic:ServiceendpointJfrogDistributionV2AuthenticationBasic",
                    "description": "A `authentication_basic` block as documented below.\n"
                },
                "authenticationToken": {
                    "$ref": "#/types/azuredevops:index/ServiceendpointJfrogDistributionV2AuthenticationToken:ServiceendpointJfrogDistributionV2AuthenticationToken",
                    "description": "A `authentication_token` block as documented below.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The Service Endpoint description.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n",
                    "willReplaceOnChanges": true
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n",
                    "willReplaceOnChanges": true
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Artifactory server to connect with.\n\n\u003e **NOTE:** URL should not end in a slash character.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "serviceEndpointName",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceendpointJfrogDistributionV2 resources.\n",
                "properties": {
                    "authenticationBasic": {
                        "$ref": "#/types/azuredevops:index/ServiceendpointJfrogDistributionV2AuthenticationBasic:ServiceendpointJfrogDistributionV2AuthenticationBasic",
                        "description": "A `authentication_basic` block as documented below.\n"
                    },
                    "authenticationToken": {
                        "$ref": "#/types/azuredevops:index/ServiceendpointJfrogDistributionV2AuthenticationToken:ServiceendpointJfrogDistributionV2AuthenticationToken",
                        "description": "A `authentication_token` block as documented below.\n"
                    },
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string",
                        "description": "The Service Endpoint description.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the Artifactory server to connect with.\n\n\u003e **NOTE:** URL should not end in a slash character.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceendpointJfrogPlatformV2:ServiceendpointJfrogPlatformV2": {
            "description": "Manages a JFrog Platform V2 server endpoint within an Azure DevOps organization.\n\n\u003e **Note:** Using this service endpoint requires you to first install [JFrog Extension](https://marketplace.visualstudio.com/items?itemName=JFrog.jfrog-azure-devops-extension).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceendpointJfrogPlatformV2 = new azuredevops.ServiceendpointJfrogPlatformV2(\"exampleServiceendpointJfrogPlatformV2\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example Artifactory\",\n    description: \"Managed by Terraform\",\n    url: \"https://artifactory.my.com\",\n    authenticationToken: {\n        token: \"0000000000000000000000000000000000000000\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_serviceendpoint_jfrog_platform_v2 = azuredevops.ServiceendpointJfrogPlatformV2(\"exampleServiceendpointJfrogPlatformV2\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example Artifactory\",\n    description=\"Managed by Terraform\",\n    url=\"https://artifactory.my.com\",\n    authentication_token=azuredevops.ServiceendpointJfrogPlatformV2AuthenticationTokenArgs(\n        token=\"0000000000000000000000000000000000000000\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceendpointJfrogPlatformV2 = new AzureDevOps.ServiceendpointJfrogPlatformV2(\"exampleServiceendpointJfrogPlatformV2\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example Artifactory\",\n        Description = \"Managed by Terraform\",\n        Url = \"https://artifactory.my.com\",\n        AuthenticationToken = new AzureDevOps.Inputs.ServiceendpointJfrogPlatformV2AuthenticationTokenArgs\n        {\n            Token = \"0000000000000000000000000000000000000000\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceendpointJfrogPlatformV2(ctx, \"exampleServiceendpointJfrogPlatformV2\", \u0026azuredevops.ServiceendpointJfrogPlatformV2Args{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Example Artifactory\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t\tUrl:                 pulumi.String(\"https://artifactory.my.com\"),\n\t\t\tAuthenticationToken: \u0026azuredevops.ServiceendpointJfrogPlatformV2AuthenticationTokenArgs{\n\t\t\t\tToken: pulumi.String(\"0000000000000000000000000000000000000000\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceendpointJfrogPlatformV2;\nimport com.pulumi.azuredevops.ServiceendpointJfrogPlatformV2Args;\nimport com.pulumi.azuredevops.inputs.ServiceendpointJfrogPlatformV2AuthenticationTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceendpointJfrogPlatformV2 = new ServiceendpointJfrogPlatformV2(\"exampleServiceendpointJfrogPlatformV2\", ServiceendpointJfrogPlatformV2Args.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example Artifactory\")\n            .description(\"Managed by Terraform\")\n            .url(\"https://artifactory.my.com\")\n            .authenticationToken(ServiceendpointJfrogPlatformV2AuthenticationTokenArgs.builder()\n                .token(\"0000000000000000000000000000000000000000\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceendpointJfrogPlatformV2:\n    type: azuredevops:ServiceendpointJfrogPlatformV2\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example Artifactory\n      description: Managed by Terraform\n      url: https://artifactory.my.com\n      authenticationToken:\n        token: '0000000000000000000000000000000000000000'\n```\nAlternatively a username and password may be used.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceendpointJfrogPlatformV2 = new azuredevops.ServiceendpointJfrogPlatformV2(\"exampleServiceendpointJfrogPlatformV2\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example Artifactory\",\n    description: \"Managed by Terraform\",\n    url: \"https://artifactory.my.com\",\n    authenticationBasic: {\n        username: \"username\",\n        password: \"password\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_serviceendpoint_jfrog_platform_v2 = azuredevops.ServiceendpointJfrogPlatformV2(\"exampleServiceendpointJfrogPlatformV2\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example Artifactory\",\n    description=\"Managed by Terraform\",\n    url=\"https://artifactory.my.com\",\n    authentication_basic=azuredevops.ServiceendpointJfrogPlatformV2AuthenticationBasicArgs(\n        username=\"username\",\n        password=\"password\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceendpointJfrogPlatformV2 = new AzureDevOps.ServiceendpointJfrogPlatformV2(\"exampleServiceendpointJfrogPlatformV2\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example Artifactory\",\n        Description = \"Managed by Terraform\",\n        Url = \"https://artifactory.my.com\",\n        AuthenticationBasic = new AzureDevOps.Inputs.ServiceendpointJfrogPlatformV2AuthenticationBasicArgs\n        {\n            Username = \"username\",\n            Password = \"password\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceendpointJfrogPlatformV2(ctx, \"exampleServiceendpointJfrogPlatformV2\", \u0026azuredevops.ServiceendpointJfrogPlatformV2Args{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Example Artifactory\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t\tUrl:                 pulumi.String(\"https://artifactory.my.com\"),\n\t\t\tAuthenticationBasic: \u0026azuredevops.ServiceendpointJfrogPlatformV2AuthenticationBasicArgs{\n\t\t\t\tUsername: pulumi.String(\"username\"),\n\t\t\t\tPassword: pulumi.String(\"password\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceendpointJfrogPlatformV2;\nimport com.pulumi.azuredevops.ServiceendpointJfrogPlatformV2Args;\nimport com.pulumi.azuredevops.inputs.ServiceendpointJfrogPlatformV2AuthenticationBasicArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceendpointJfrogPlatformV2 = new ServiceendpointJfrogPlatformV2(\"exampleServiceendpointJfrogPlatformV2\", ServiceendpointJfrogPlatformV2Args.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example Artifactory\")\n            .description(\"Managed by Terraform\")\n            .url(\"https://artifactory.my.com\")\n            .authenticationBasic(ServiceendpointJfrogPlatformV2AuthenticationBasicArgs.builder()\n                .username(\"username\")\n                .password(\"password\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceendpointJfrogPlatformV2:\n    type: azuredevops:ServiceendpointJfrogPlatformV2\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example Artifactory\n      description: Managed by Terraform\n      url: https://artifactory.my.com\n      authenticationBasic:\n        username: username\n        password: password\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service Connections](https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops\u0026tabs=yaml)\n* [Artifactory User Token](https://docs.artifactory.org/latest/user-guide/user-token/)\n\n\n## Import\n\nAzure DevOps Service Endpoint JFrog Platform V2 can be imported using the **projectID/serviceEndpointID**, e.g.\n\n```sh\n $ pulumi import azuredevops:index/serviceendpointJfrogPlatformV2:ServiceendpointJfrogPlatformV2 example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authenticationBasic": {
                    "$ref": "#/types/azuredevops:index/ServiceendpointJfrogPlatformV2AuthenticationBasic:ServiceendpointJfrogPlatformV2AuthenticationBasic",
                    "description": "A `authentication_basic` block as documented below.\n"
                },
                "authenticationToken": {
                    "$ref": "#/types/azuredevops:index/ServiceendpointJfrogPlatformV2AuthenticationToken:ServiceendpointJfrogPlatformV2AuthenticationToken",
                    "description": "A `authentication_token` block as documented below.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The Service Endpoint description.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Artifactory server to connect with.\n\n\u003e **NOTE:** URL should not end in a slash character.\n"
                }
            },
            "required": [
                "authorization",
                "projectId",
                "serviceEndpointName",
                "url"
            ],
            "inputProperties": {
                "authenticationBasic": {
                    "$ref": "#/types/azuredevops:index/ServiceendpointJfrogPlatformV2AuthenticationBasic:ServiceendpointJfrogPlatformV2AuthenticationBasic",
                    "description": "A `authentication_basic` block as documented below.\n"
                },
                "authenticationToken": {
                    "$ref": "#/types/azuredevops:index/ServiceendpointJfrogPlatformV2AuthenticationToken:ServiceendpointJfrogPlatformV2AuthenticationToken",
                    "description": "A `authentication_token` block as documented below.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The Service Endpoint description.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n",
                    "willReplaceOnChanges": true
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n",
                    "willReplaceOnChanges": true
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Artifactory server to connect with.\n\n\u003e **NOTE:** URL should not end in a slash character.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "serviceEndpointName",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceendpointJfrogPlatformV2 resources.\n",
                "properties": {
                    "authenticationBasic": {
                        "$ref": "#/types/azuredevops:index/ServiceendpointJfrogPlatformV2AuthenticationBasic:ServiceendpointJfrogPlatformV2AuthenticationBasic",
                        "description": "A `authentication_basic` block as documented below.\n"
                    },
                    "authenticationToken": {
                        "$ref": "#/types/azuredevops:index/ServiceendpointJfrogPlatformV2AuthenticationToken:ServiceendpointJfrogPlatformV2AuthenticationToken",
                        "description": "A `authentication_token` block as documented below.\n"
                    },
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string",
                        "description": "The Service Endpoint description.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the Artifactory server to connect with.\n\n\u003e **NOTE:** URL should not end in a slash character.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceendpointJfrogXrayV2:ServiceendpointJfrogXrayV2": {
            "description": "Manages an JFrog XRay V2 server endpoint within an Azure DevOps organization. \n\n\u003e **Note:** Using this service endpoint requires you to first install [JFrog Extension](https://marketplace.visualstudio.com/items?itemName=JFrog.jfrog-azure-devops-extension).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceendpointJfrogXrayV2 = new azuredevops.ServiceendpointJfrogXrayV2(\"exampleServiceendpointJfrogXrayV2\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example Artifactory\",\n    description: \"Managed by Terraform\",\n    url: \"https://artifactory.my.com\",\n    authenticationToken: {\n        token: \"0000000000000000000000000000000000000000\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_serviceendpoint_jfrog_xray_v2 = azuredevops.ServiceendpointJfrogXrayV2(\"exampleServiceendpointJfrogXrayV2\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example Artifactory\",\n    description=\"Managed by Terraform\",\n    url=\"https://artifactory.my.com\",\n    authentication_token=azuredevops.ServiceendpointJfrogXrayV2AuthenticationTokenArgs(\n        token=\"0000000000000000000000000000000000000000\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceendpointJfrogXrayV2 = new AzureDevOps.ServiceendpointJfrogXrayV2(\"exampleServiceendpointJfrogXrayV2\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example Artifactory\",\n        Description = \"Managed by Terraform\",\n        Url = \"https://artifactory.my.com\",\n        AuthenticationToken = new AzureDevOps.Inputs.ServiceendpointJfrogXrayV2AuthenticationTokenArgs\n        {\n            Token = \"0000000000000000000000000000000000000000\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceendpointJfrogXrayV2(ctx, \"exampleServiceendpointJfrogXrayV2\", \u0026azuredevops.ServiceendpointJfrogXrayV2Args{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Example Artifactory\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t\tUrl:                 pulumi.String(\"https://artifactory.my.com\"),\n\t\t\tAuthenticationToken: \u0026azuredevops.ServiceendpointJfrogXrayV2AuthenticationTokenArgs{\n\t\t\t\tToken: pulumi.String(\"0000000000000000000000000000000000000000\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceendpointJfrogXrayV2;\nimport com.pulumi.azuredevops.ServiceendpointJfrogXrayV2Args;\nimport com.pulumi.azuredevops.inputs.ServiceendpointJfrogXrayV2AuthenticationTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceendpointJfrogXrayV2 = new ServiceendpointJfrogXrayV2(\"exampleServiceendpointJfrogXrayV2\", ServiceendpointJfrogXrayV2Args.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example Artifactory\")\n            .description(\"Managed by Terraform\")\n            .url(\"https://artifactory.my.com\")\n            .authenticationToken(ServiceendpointJfrogXrayV2AuthenticationTokenArgs.builder()\n                .token(\"0000000000000000000000000000000000000000\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceendpointJfrogXrayV2:\n    type: azuredevops:ServiceendpointJfrogXrayV2\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example Artifactory\n      description: Managed by Terraform\n      url: https://artifactory.my.com\n      authenticationToken:\n        token: '0000000000000000000000000000000000000000'\n```\nAlternatively a username and password may be used.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceendpointJfrogXrayV2 = new azuredevops.ServiceendpointJfrogXrayV2(\"exampleServiceendpointJfrogXrayV2\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example Artifactory\",\n    description: \"Managed by Terraform\",\n    url: \"https://artifactory.my.com\",\n    authenticationBasic: {\n        username: \"username\",\n        password: \"password\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_serviceendpoint_jfrog_xray_v2 = azuredevops.ServiceendpointJfrogXrayV2(\"exampleServiceendpointJfrogXrayV2\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example Artifactory\",\n    description=\"Managed by Terraform\",\n    url=\"https://artifactory.my.com\",\n    authentication_basic=azuredevops.ServiceendpointJfrogXrayV2AuthenticationBasicArgs(\n        username=\"username\",\n        password=\"password\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceendpointJfrogXrayV2 = new AzureDevOps.ServiceendpointJfrogXrayV2(\"exampleServiceendpointJfrogXrayV2\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example Artifactory\",\n        Description = \"Managed by Terraform\",\n        Url = \"https://artifactory.my.com\",\n        AuthenticationBasic = new AzureDevOps.Inputs.ServiceendpointJfrogXrayV2AuthenticationBasicArgs\n        {\n            Username = \"username\",\n            Password = \"password\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceendpointJfrogXrayV2(ctx, \"exampleServiceendpointJfrogXrayV2\", \u0026azuredevops.ServiceendpointJfrogXrayV2Args{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Example Artifactory\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t\tUrl:                 pulumi.String(\"https://artifactory.my.com\"),\n\t\t\tAuthenticationBasic: \u0026azuredevops.ServiceendpointJfrogXrayV2AuthenticationBasicArgs{\n\t\t\t\tUsername: pulumi.String(\"username\"),\n\t\t\t\tPassword: pulumi.String(\"password\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceendpointJfrogXrayV2;\nimport com.pulumi.azuredevops.ServiceendpointJfrogXrayV2Args;\nimport com.pulumi.azuredevops.inputs.ServiceendpointJfrogXrayV2AuthenticationBasicArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceendpointJfrogXrayV2 = new ServiceendpointJfrogXrayV2(\"exampleServiceendpointJfrogXrayV2\", ServiceendpointJfrogXrayV2Args.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example Artifactory\")\n            .description(\"Managed by Terraform\")\n            .url(\"https://artifactory.my.com\")\n            .authenticationBasic(ServiceendpointJfrogXrayV2AuthenticationBasicArgs.builder()\n                .username(\"username\")\n                .password(\"password\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceendpointJfrogXrayV2:\n    type: azuredevops:ServiceendpointJfrogXrayV2\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example Artifactory\n      description: Managed by Terraform\n      url: https://artifactory.my.com\n      authenticationBasic:\n        username: username\n        password: password\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service Connections](https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops\u0026tabs=yaml)\n* [Artifactory User Token](https://docs.artifactory.org/latest/user-guide/user-token/)\n\n\n## Import\n\nAzure DevOps Service Endpoint JFrog XRay V2 can be imported using the **projectID/serviceEndpointID**, e.g.\n\n```sh\n $ pulumi import azuredevops:index/serviceendpointJfrogXrayV2:ServiceendpointJfrogXrayV2 example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authenticationBasic": {
                    "$ref": "#/types/azuredevops:index/ServiceendpointJfrogXrayV2AuthenticationBasic:ServiceendpointJfrogXrayV2AuthenticationBasic",
                    "description": "A `authentication_basic` block as documented below.\n"
                },
                "authenticationToken": {
                    "$ref": "#/types/azuredevops:index/ServiceendpointJfrogXrayV2AuthenticationToken:ServiceendpointJfrogXrayV2AuthenticationToken",
                    "description": "A `authentication_token` block as documented below.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The Service Endpoint description.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Artifactory server to connect with.\n\n\u003e **NOTE:** URL should not end in a slash character.\n"
                }
            },
            "required": [
                "authorization",
                "projectId",
                "serviceEndpointName",
                "url"
            ],
            "inputProperties": {
                "authenticationBasic": {
                    "$ref": "#/types/azuredevops:index/ServiceendpointJfrogXrayV2AuthenticationBasic:ServiceendpointJfrogXrayV2AuthenticationBasic",
                    "description": "A `authentication_basic` block as documented below.\n"
                },
                "authenticationToken": {
                    "$ref": "#/types/azuredevops:index/ServiceendpointJfrogXrayV2AuthenticationToken:ServiceendpointJfrogXrayV2AuthenticationToken",
                    "description": "A `authentication_token` block as documented below.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The Service Endpoint description.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n",
                    "willReplaceOnChanges": true
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n",
                    "willReplaceOnChanges": true
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Artifactory server to connect with.\n\n\u003e **NOTE:** URL should not end in a slash character.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "serviceEndpointName",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceendpointJfrogXrayV2 resources.\n",
                "properties": {
                    "authenticationBasic": {
                        "$ref": "#/types/azuredevops:index/ServiceendpointJfrogXrayV2AuthenticationBasic:ServiceendpointJfrogXrayV2AuthenticationBasic",
                        "description": "A `authentication_basic` block as documented below.\n"
                    },
                    "authenticationToken": {
                        "$ref": "#/types/azuredevops:index/ServiceendpointJfrogXrayV2AuthenticationToken:ServiceendpointJfrogXrayV2AuthenticationToken",
                        "description": "A `authentication_token` block as documented below.\n"
                    },
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string",
                        "description": "The Service Endpoint description.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the Artifactory server to connect with.\n\n\u003e **NOTE:** URL should not end in a slash character.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceendpointMaven:ServiceendpointMaven": {
            "description": "Manages a Maven service endpoint within Azure DevOps, which can be used as a resource in YAML pipelines to connect to a Maven instance.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceendpointMaven = new azuredevops.ServiceendpointMaven(\"exampleServiceendpointMaven\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"maven-example\",\n    description: \"Service Endpoint for 'Maven' (Managed by Terraform)\",\n    url: \"https://example.com\",\n    repositoryId: \"example\",\n    authenticationToken: {\n        token: \"0000000000000000000000000000000000000000\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_serviceendpoint_maven = azuredevops.ServiceendpointMaven(\"exampleServiceendpointMaven\",\n    project_id=example_project.id,\n    service_endpoint_name=\"maven-example\",\n    description=\"Service Endpoint for 'Maven' (Managed by Terraform)\",\n    url=\"https://example.com\",\n    repository_id=\"example\",\n    authentication_token=azuredevops.ServiceendpointMavenAuthenticationTokenArgs(\n        token=\"0000000000000000000000000000000000000000\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceendpointMaven = new AzureDevOps.ServiceendpointMaven(\"exampleServiceendpointMaven\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"maven-example\",\n        Description = \"Service Endpoint for 'Maven' (Managed by Terraform)\",\n        Url = \"https://example.com\",\n        RepositoryId = \"example\",\n        AuthenticationToken = new AzureDevOps.Inputs.ServiceendpointMavenAuthenticationTokenArgs\n        {\n            Token = \"0000000000000000000000000000000000000000\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceendpointMaven(ctx, \"exampleServiceendpointMaven\", \u0026azuredevops.ServiceendpointMavenArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"maven-example\"),\n\t\t\tDescription:         pulumi.String(\"Service Endpoint for 'Maven' (Managed by Terraform)\"),\n\t\t\tUrl:                 pulumi.String(\"https://example.com\"),\n\t\t\tRepositoryId:        pulumi.String(\"example\"),\n\t\t\tAuthenticationToken: \u0026azuredevops.ServiceendpointMavenAuthenticationTokenArgs{\n\t\t\t\tToken: pulumi.String(\"0000000000000000000000000000000000000000\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceendpointMaven;\nimport com.pulumi.azuredevops.ServiceendpointMavenArgs;\nimport com.pulumi.azuredevops.inputs.ServiceendpointMavenAuthenticationTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceendpointMaven = new ServiceendpointMaven(\"exampleServiceendpointMaven\", ServiceendpointMavenArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"maven-example\")\n            .description(\"Service Endpoint for 'Maven' (Managed by Terraform)\")\n            .url(\"https://example.com\")\n            .repositoryId(\"example\")\n            .authenticationToken(ServiceendpointMavenAuthenticationTokenArgs.builder()\n                .token(\"0000000000000000000000000000000000000000\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceendpointMaven:\n    type: azuredevops:ServiceendpointMaven\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: maven-example\n      description: Service Endpoint for 'Maven' (Managed by Terraform)\n      url: https://example.com\n      repositoryId: example\n      authenticationToken:\n        token: '0000000000000000000000000000000000000000'\n```\n\nAlternatively a username and password may be used.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceendpointMaven = new azuredevops.ServiceendpointMaven(\"exampleServiceendpointMaven\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"maven-example\",\n    description: \"Service Endpoint for 'Maven' (Managed by Terraform)\",\n    url: \"https://example.com\",\n    repositoryId: \"example\",\n    authenticationBasic: {\n        username: \"username\",\n        password: \"password\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_serviceendpoint_maven = azuredevops.ServiceendpointMaven(\"exampleServiceendpointMaven\",\n    project_id=example_project.id,\n    service_endpoint_name=\"maven-example\",\n    description=\"Service Endpoint for 'Maven' (Managed by Terraform)\",\n    url=\"https://example.com\",\n    repository_id=\"example\",\n    authentication_basic=azuredevops.ServiceendpointMavenAuthenticationBasicArgs(\n        username=\"username\",\n        password=\"password\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceendpointMaven = new AzureDevOps.ServiceendpointMaven(\"exampleServiceendpointMaven\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"maven-example\",\n        Description = \"Service Endpoint for 'Maven' (Managed by Terraform)\",\n        Url = \"https://example.com\",\n        RepositoryId = \"example\",\n        AuthenticationBasic = new AzureDevOps.Inputs.ServiceendpointMavenAuthenticationBasicArgs\n        {\n            Username = \"username\",\n            Password = \"password\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceendpointMaven(ctx, \"exampleServiceendpointMaven\", \u0026azuredevops.ServiceendpointMavenArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"maven-example\"),\n\t\t\tDescription:         pulumi.String(\"Service Endpoint for 'Maven' (Managed by Terraform)\"),\n\t\t\tUrl:                 pulumi.String(\"https://example.com\"),\n\t\t\tRepositoryId:        pulumi.String(\"example\"),\n\t\t\tAuthenticationBasic: \u0026azuredevops.ServiceendpointMavenAuthenticationBasicArgs{\n\t\t\t\tUsername: pulumi.String(\"username\"),\n\t\t\t\tPassword: pulumi.String(\"password\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceendpointMaven;\nimport com.pulumi.azuredevops.ServiceendpointMavenArgs;\nimport com.pulumi.azuredevops.inputs.ServiceendpointMavenAuthenticationBasicArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceendpointMaven = new ServiceendpointMaven(\"exampleServiceendpointMaven\", ServiceendpointMavenArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"maven-example\")\n            .description(\"Service Endpoint for 'Maven' (Managed by Terraform)\")\n            .url(\"https://example.com\")\n            .repositoryId(\"example\")\n            .authenticationBasic(ServiceendpointMavenAuthenticationBasicArgs.builder()\n                .username(\"username\")\n                .password(\"password\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceendpointMaven:\n    type: azuredevops:ServiceendpointMaven\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: maven-example\n      description: Service Endpoint for 'Maven' (Managed by Terraform)\n      url: https://example.com\n      repositoryId: example\n      authenticationBasic:\n        username: username\n        password: password\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nService Connection Maven can be imported using the `projectId/id` or or `projectName/id`, e.g.\n\n```sh\n $ pulumi import azuredevops:index/serviceendpointMaven:ServiceendpointMaven example projectName/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authenticationBasic": {
                    "$ref": "#/types/azuredevops:index/ServiceendpointMavenAuthenticationBasic:ServiceendpointMavenAuthenticationBasic",
                    "description": "A `authentication_basic` block as documented below.\n"
                },
                "authenticationToken": {
                    "$ref": "#/types/azuredevops:index/ServiceendpointMavenAuthenticationToken:ServiceendpointMavenAuthenticationToken",
                    "description": "A `authentication_token` block as documented below.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project. Changing this forces a new Service Connection Maven to be created.\n"
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The ID of the server that matches the id element of the `repository/mirror` that Maven tries to connect to.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The name of the service endpoint. Changing this forces a new Service Connection Maven to be created.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the Maven Repository.\n"
                }
            },
            "required": [
                "authorization",
                "projectId",
                "repositoryId",
                "serviceEndpointName",
                "url"
            ],
            "inputProperties": {
                "authenticationBasic": {
                    "$ref": "#/types/azuredevops:index/ServiceendpointMavenAuthenticationBasic:ServiceendpointMavenAuthenticationBasic",
                    "description": "A `authentication_basic` block as documented below.\n"
                },
                "authenticationToken": {
                    "$ref": "#/types/azuredevops:index/ServiceendpointMavenAuthenticationToken:ServiceendpointMavenAuthenticationToken",
                    "description": "A `authentication_token` block as documented below.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project. Changing this forces a new Service Connection Maven to be created.\n",
                    "willReplaceOnChanges": true
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The ID of the server that matches the id element of the `repository/mirror` that Maven tries to connect to.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The name of the service endpoint. Changing this forces a new Service Connection Maven to be created.\n",
                    "willReplaceOnChanges": true
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the Maven Repository.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "repositoryId",
                "serviceEndpointName",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceendpointMaven resources.\n",
                "properties": {
                    "authenticationBasic": {
                        "$ref": "#/types/azuredevops:index/ServiceendpointMavenAuthenticationBasic:ServiceendpointMavenAuthenticationBasic",
                        "description": "A `authentication_basic` block as documented below.\n"
                    },
                    "authenticationToken": {
                        "$ref": "#/types/azuredevops:index/ServiceendpointMavenAuthenticationToken:ServiceendpointMavenAuthenticationToken",
                        "description": "A `authentication_token` block as documented below.\n"
                    },
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project. Changing this forces a new Service Connection Maven to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "repositoryId": {
                        "type": "string",
                        "description": "The ID of the server that matches the id element of the `repository/mirror` that Maven tries to connect to.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The name of the service endpoint. Changing this forces a new Service Connection Maven to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the Maven Repository.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceendpointNexus:ServiceendpointNexus": {
            "description": "Manages a Nexus IQ service endpoint within Azure DevOps, which can be used as a resource in YAML pipelines to connect to a Nexus IQ instance.\nNexus IQ is not supported by default, to manage a nexus service connection resource, it is necessary to install the [Nexus Extension](https://marketplace.visualstudio.com/items?itemName=SonatypeIntegrations.nexus-iq-azure-extension) in Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceendpointNexus = new azuredevops.ServiceendpointNexus(\"exampleServiceendpointNexus\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"nexus-example\",\n    description: \"Service Endpoint for 'Nexus IQ' (Managed by Terraform)\",\n    url: \"https://example.com\",\n    username: \"username\",\n    password: \"password\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_serviceendpoint_nexus = azuredevops.ServiceendpointNexus(\"exampleServiceendpointNexus\",\n    project_id=example_project.id,\n    service_endpoint_name=\"nexus-example\",\n    description=\"Service Endpoint for 'Nexus IQ' (Managed by Terraform)\",\n    url=\"https://example.com\",\n    username=\"username\",\n    password=\"password\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceendpointNexus = new AzureDevOps.ServiceendpointNexus(\"exampleServiceendpointNexus\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"nexus-example\",\n        Description = \"Service Endpoint for 'Nexus IQ' (Managed by Terraform)\",\n        Url = \"https://example.com\",\n        Username = \"username\",\n        Password = \"password\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceendpointNexus(ctx, \"exampleServiceendpointNexus\", \u0026azuredevops.ServiceendpointNexusArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"nexus-example\"),\n\t\t\tDescription:         pulumi.String(\"Service Endpoint for 'Nexus IQ' (Managed by Terraform)\"),\n\t\t\tUrl:                 pulumi.String(\"https://example.com\"),\n\t\t\tUsername:            pulumi.String(\"username\"),\n\t\t\tPassword:            pulumi.String(\"password\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceendpointNexus;\nimport com.pulumi.azuredevops.ServiceendpointNexusArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceendpointNexus = new ServiceendpointNexus(\"exampleServiceendpointNexus\", ServiceendpointNexusArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"nexus-example\")\n            .description(\"Service Endpoint for 'Nexus IQ' (Managed by Terraform)\")\n            .url(\"https://example.com\")\n            .username(\"username\")\n            .password(\"password\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceendpointNexus:\n    type: azuredevops:ServiceendpointNexus\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: nexus-example\n      description: Service Endpoint for 'Nexus IQ' (Managed by Terraform)\n      url: https://example.com\n      username: username\n      password: password\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nService Connection Nexus can be imported using the `projectId/id` or or `projectName/id`, e.g.\n\n```sh\n $ pulumi import azuredevops:index/serviceendpointNexus:ServiceendpointNexus example projectName/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "description": "The Service Endpoint password to authenticate at the Nexus IQ Instance.\n",
                    "secret": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project. Changing this forces a new Service Connection Nexus to be created.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The name of the service endpoint. Changing this forces a new Service Connection Nexus to be created.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The Service Endpoint url.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The Service Endpoint username to authenticate at the Nexus IQ Instance.\n"
                }
            },
            "required": [
                "authorization",
                "password",
                "projectId",
                "serviceEndpointName",
                "url",
                "username"
            ],
            "inputProperties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "description": "The Service Endpoint password to authenticate at the Nexus IQ Instance.\n",
                    "secret": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project. Changing this forces a new Service Connection Nexus to be created.\n",
                    "willReplaceOnChanges": true
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The name of the service endpoint. Changing this forces a new Service Connection Nexus to be created.\n",
                    "willReplaceOnChanges": true
                },
                "url": {
                    "type": "string",
                    "description": "The Service Endpoint url.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The Service Endpoint username to authenticate at the Nexus IQ Instance.\n"
                }
            },
            "requiredInputs": [
                "password",
                "projectId",
                "serviceEndpointName",
                "url",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceendpointNexus resources.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string",
                        "description": "The Service Endpoint password to authenticate at the Nexus IQ Instance.\n",
                        "secret": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project. Changing this forces a new Service Connection Nexus to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The name of the service endpoint. Changing this forces a new Service Connection Nexus to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "description": "The Service Endpoint url.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The Service Endpoint username to authenticate at the Nexus IQ Instance.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceendpointNuget:ServiceendpointNuget": {
            "description": "Manages a NuGet service endpoint within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceendpointNuget = new azuredevops.ServiceendpointNuget(\"exampleServiceendpointNuget\", {\n    projectId: exampleProject.id,\n    apiKey: \"apikey\",\n    serviceEndpointName: \"Example NuGet\",\n    description: \"Managed by Terraform\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_serviceendpoint_nuget = azuredevops.ServiceendpointNuget(\"exampleServiceendpointNuget\",\n    project_id=example_project.id,\n    api_key=\"apikey\",\n    service_endpoint_name=\"Example NuGet\",\n    description=\"Managed by Terraform\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceendpointNuget = new AzureDevOps.ServiceendpointNuget(\"exampleServiceendpointNuget\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ApiKey = \"apikey\",\n        ServiceEndpointName = \"Example NuGet\",\n        Description = \"Managed by Terraform\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceendpointNuget(ctx, \"exampleServiceendpointNuget\", \u0026azuredevops.ServiceendpointNugetArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tApiKey:              pulumi.String(\"apikey\"),\n\t\t\tServiceEndpointName: pulumi.String(\"Example NuGet\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceendpointNuget;\nimport com.pulumi.azuredevops.ServiceendpointNugetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceendpointNuget = new ServiceendpointNuget(\"exampleServiceendpointNuget\", ServiceendpointNugetArgs.builder()        \n            .projectId(exampleProject.id())\n            .apiKey(\"apikey\")\n            .serviceEndpointName(\"Example NuGet\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceendpointNuget:\n    type: azuredevops:ServiceendpointNuget\n    properties:\n      projectId: ${exampleProject.id}\n      apiKey: apikey\n      serviceEndpointName: Example NuGet\n      description: Managed by Terraform\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Agent Pools](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Service Endpoint NuGet can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:index/serviceendpointNuget:ServiceendpointNuget example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "The API Key used to connect to the endpoint.\n",
                    "secret": true
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "feedUrl": {
                    "type": "string",
                    "description": "The URL for the feed. This will generally end with `index.json`.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The account password used to connect to the endpoint\n\n\u003e **Note** Only one of `api_key` or `personal_access_token` or  `username`, `password` can be set at the same time.\n",
                    "secret": true
                },
                "personalAccessToken": {
                    "type": "string",
                    "description": "The Personal access token used to  connect to the endpoint. Personal access tokens are applicable only for NuGet feeds hosted on other Azure DevOps Services organizations or Azure DevOps Server 2019 (or later).\n",
                    "secret": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The account username used to connect to the endpoint.\n"
                }
            },
            "required": [
                "authorization",
                "feedUrl",
                "projectId",
                "serviceEndpointName"
            ],
            "inputProperties": {
                "apiKey": {
                    "type": "string",
                    "description": "The API Key used to connect to the endpoint.\n",
                    "secret": true
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "feedUrl": {
                    "type": "string",
                    "description": "The URL for the feed. This will generally end with `index.json`.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The account password used to connect to the endpoint\n\n\u003e **Note** Only one of `api_key` or `personal_access_token` or  `username`, `password` can be set at the same time.\n",
                    "secret": true
                },
                "personalAccessToken": {
                    "type": "string",
                    "description": "The Personal access token used to  connect to the endpoint. Personal access tokens are applicable only for NuGet feeds hosted on other Azure DevOps Services organizations or Azure DevOps Server 2019 (or later).\n",
                    "secret": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n",
                    "willReplaceOnChanges": true
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n",
                    "willReplaceOnChanges": true
                },
                "username": {
                    "type": "string",
                    "description": "The account username used to connect to the endpoint.\n"
                }
            },
            "requiredInputs": [
                "feedUrl",
                "projectId",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceendpointNuget resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "The API Key used to connect to the endpoint.\n",
                        "secret": true
                    },
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "feedUrl": {
                        "type": "string",
                        "description": "The URL for the feed. This will generally end with `index.json`.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The account password used to connect to the endpoint\n\n\u003e **Note** Only one of `api_key` or `personal_access_token` or  `username`, `password` can be set at the same time.\n",
                        "secret": true
                    },
                    "personalAccessToken": {
                        "type": "string",
                        "description": "The Personal access token used to  connect to the endpoint. Personal access tokens are applicable only for NuGet feeds hosted on other Azure DevOps Services organizations or Azure DevOps Server 2019 (or later).\n",
                        "secret": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n",
                        "willReplaceOnChanges": true
                    },
                    "username": {
                        "type": "string",
                        "description": "The account username used to connect to the endpoint.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceendpointOctopusdeploy:ServiceendpointOctopusdeploy": {
            "description": "Manages an Octopus Deploy service endpoint within Azure DevOps. Using this service endpoint requires you to install [Octopus Deploy](https://marketplace.visualstudio.com/items?itemName=octopusdeploy.octopus-deploy-build-release-tasks).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceendpointOctopusdeploy = new azuredevops.ServiceendpointOctopusdeploy(\"exampleServiceendpointOctopusdeploy\", {\n    projectId: exampleProject.id,\n    url: \"https://octopus.com\",\n    apiKey: \"000000000000000000000000000000000000\",\n    serviceEndpointName: \"Example Octopus Deploy\",\n    description: \"Managed by Terraform\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    description=\"Managed by Terraform\")\nexample_serviceendpoint_octopusdeploy = azuredevops.ServiceendpointOctopusdeploy(\"exampleServiceendpointOctopusdeploy\",\n    project_id=example_project.id,\n    url=\"https://octopus.com\",\n    api_key=\"000000000000000000000000000000000000\",\n    service_endpoint_name=\"Example Octopus Deploy\",\n    description=\"Managed by Terraform\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        Visibility = \"private\",\n        VersionControl = \"Git\",\n        WorkItemTemplate = \"Agile\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceendpointOctopusdeploy = new AzureDevOps.ServiceendpointOctopusdeploy(\"exampleServiceendpointOctopusdeploy\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Url = \"https://octopus.com\",\n        ApiKey = \"000000000000000000000000000000000000\",\n        ServiceEndpointName = \"Example Octopus Deploy\",\n        Description = \"Managed by Terraform\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceendpointOctopusdeploy(ctx, \"exampleServiceendpointOctopusdeploy\", \u0026azuredevops.ServiceendpointOctopusdeployArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tUrl:                 pulumi.String(\"https://octopus.com\"),\n\t\t\tApiKey:              pulumi.String(\"000000000000000000000000000000000000\"),\n\t\t\tServiceEndpointName: pulumi.String(\"Example Octopus Deploy\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceendpointOctopusdeploy;\nimport com.pulumi.azuredevops.ServiceendpointOctopusdeployArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .visibility(\"private\")\n            .versionControl(\"Git\")\n            .workItemTemplate(\"Agile\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceendpointOctopusdeploy = new ServiceendpointOctopusdeploy(\"exampleServiceendpointOctopusdeploy\", ServiceendpointOctopusdeployArgs.builder()        \n            .projectId(exampleProject.id())\n            .url(\"https://octopus.com\")\n            .apiKey(\"000000000000000000000000000000000000\")\n            .serviceEndpointName(\"Example Octopus Deploy\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      visibility: private\n      versionControl: Git\n      workItemTemplate: Agile\n      description: Managed by Terraform\n  exampleServiceendpointOctopusdeploy:\n    type: azuredevops:ServiceendpointOctopusdeploy\n    properties:\n      projectId: ${exampleProject.id}\n      url: https://octopus.com\n      apiKey: '000000000000000000000000000000000000'\n      serviceEndpointName: Example Octopus Deploy\n      description: Managed by Terraform\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Agent Pools](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-7.0)\n\n\n## Import\n\nAzure DevOps Service Endpoint Octopus Deploy can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:index/serviceendpointOctopusdeploy:ServiceendpointOctopusdeploy example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key to connect to Octopus Deploy.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "ignoreSslError": {
                    "type": "boolean",
                    "description": "Whether to ignore SSL errors when connecting to the Octopus server from the agent. Default to `false`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Octopus Server url.\n"
                }
            },
            "required": [
                "apiKey",
                "authorization",
                "projectId",
                "serviceEndpointName",
                "url"
            ],
            "inputProperties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key to connect to Octopus Deploy.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "ignoreSslError": {
                    "type": "boolean",
                    "description": "Whether to ignore SSL errors when connecting to the Octopus server from the agent. Default to `false`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n",
                    "willReplaceOnChanges": true
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n",
                    "willReplaceOnChanges": true
                },
                "url": {
                    "type": "string",
                    "description": "Octopus Server url.\n"
                }
            },
            "requiredInputs": [
                "apiKey",
                "projectId",
                "serviceEndpointName",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceendpointOctopusdeploy resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "API key to connect to Octopus Deploy.\n"
                    },
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "ignoreSslError": {
                        "type": "boolean",
                        "description": "Whether to ignore SSL errors when connecting to the Octopus server from the agent. Default to `false`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "description": "Octopus Server url.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceendpointPermissions:ServiceendpointPermissions": {
            "description": "Manages permissions for a Service Endpoint\n\n\u003e **Note** Permissions can be assigned to group principals and not to single user principals.\n\n## Permission levels\n\nPermission for Service Endpoints within Azure DevOps can be applied on two different levels.\nThose levels are reflected by specifying (or omitting) values for the arguments `project_id` and `serviceendpoint_id`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"Managed by Terraform\",\n});\nconst example-readers = azuredevops.getGroupOutput({\n    projectId: exampleProject.id,\n    name: \"Readers\",\n});\nconst example_root_permissions = new azuredevops.ServiceendpointPermissions(\"example-root-permissions\", {\n    projectId: exampleProject.id,\n    principal: example_readers.apply(example_readers =\u003e example_readers.id),\n    permissions: {\n        Use: \"allow\",\n        Administer: \"allow\",\n        Create: \"allow\",\n        ViewAuthorization: \"allow\",\n        ViewEndpoint: \"allow\",\n    },\n});\nconst exampleServiceEndpointDockerRegistry = new azuredevops.ServiceEndpointDockerRegistry(\"exampleServiceEndpointDockerRegistry\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example Docker Hub\",\n    dockerUsername: \"username\",\n    dockerEmail: \"email@example.com\",\n    dockerPassword: \"password\",\n    registryType: \"DockerHub\",\n});\nconst example_permissions = new azuredevops.ServiceendpointPermissions(\"example-permissions\", {\n    projectId: exampleProject.id,\n    principal: example_readers.apply(example_readers =\u003e example_readers.id),\n    serviceendpointId: exampleServiceEndpointDockerRegistry.id,\n    permissions: {\n        Use: \"allow\",\n        Administer: \"deny\",\n        Create: \"deny\",\n        ViewAuthorization: \"allow\",\n        ViewEndpoint: \"allow\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"Managed by Terraform\")\nexample_readers = azuredevops.get_group_output(project_id=example_project.id,\n    name=\"Readers\")\nexample_root_permissions = azuredevops.ServiceendpointPermissions(\"example-root-permissions\",\n    project_id=example_project.id,\n    principal=example_readers.id,\n    permissions={\n        \"Use\": \"allow\",\n        \"Administer\": \"allow\",\n        \"Create\": \"allow\",\n        \"ViewAuthorization\": \"allow\",\n        \"ViewEndpoint\": \"allow\",\n    })\nexample_service_endpoint_docker_registry = azuredevops.ServiceEndpointDockerRegistry(\"exampleServiceEndpointDockerRegistry\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example Docker Hub\",\n    docker_username=\"username\",\n    docker_email=\"email@example.com\",\n    docker_password=\"password\",\n    registry_type=\"DockerHub\")\nexample_permissions = azuredevops.ServiceendpointPermissions(\"example-permissions\",\n    project_id=example_project.id,\n    principal=example_readers.id,\n    serviceendpoint_id=example_service_endpoint_docker_registry.id,\n    permissions={\n        \"Use\": \"allow\",\n        \"Administer\": \"deny\",\n        \"Create\": \"deny\",\n        \"ViewAuthorization\": \"allow\",\n        \"ViewEndpoint\": \"allow\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        WorkItemTemplate = \"Agile\",\n        VersionControl = \"Git\",\n        Visibility = \"private\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var example_readers = AzureDevOps.GetGroup.Invoke(new()\n    {\n        ProjectId = exampleProject.Id,\n        Name = \"Readers\",\n    });\n\n    var example_root_permissions = new AzureDevOps.ServiceendpointPermissions(\"example-root-permissions\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Principal = example_readers.Apply(example_readers =\u003e example_readers.Apply(getGroupResult =\u003e getGroupResult.Id)),\n        Permissions = \n        {\n            { \"Use\", \"allow\" },\n            { \"Administer\", \"allow\" },\n            { \"Create\", \"allow\" },\n            { \"ViewAuthorization\", \"allow\" },\n            { \"ViewEndpoint\", \"allow\" },\n        },\n    });\n\n    var exampleServiceEndpointDockerRegistry = new AzureDevOps.ServiceEndpointDockerRegistry(\"exampleServiceEndpointDockerRegistry\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example Docker Hub\",\n        DockerUsername = \"username\",\n        DockerEmail = \"email@example.com\",\n        DockerPassword = \"password\",\n        RegistryType = \"DockerHub\",\n    });\n\n    var example_permissions = new AzureDevOps.ServiceendpointPermissions(\"example-permissions\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Principal = example_readers.Apply(example_readers =\u003e example_readers.Apply(getGroupResult =\u003e getGroupResult.Id)),\n        ServiceendpointId = exampleServiceEndpointDockerRegistry.Id,\n        Permissions = \n        {\n            { \"Use\", \"allow\" },\n            { \"Administer\", \"deny\" },\n            { \"Create\", \"deny\" },\n            { \"ViewAuthorization\", \"allow\" },\n            { \"ViewEndpoint\", \"allow\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample_readers := azuredevops.LookupGroupOutput(ctx, azuredevops.GetGroupOutputArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tName:      pulumi.String(\"Readers\"),\n\t\t}, nil)\n\t\t_, err = azuredevops.NewServiceendpointPermissions(ctx, \"example-root-permissions\", \u0026azuredevops.ServiceendpointPermissionsArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tPrincipal: example_readers.ApplyT(func(example_readers azuredevops.GetGroupResult) (*string, error) {\n\t\t\t\treturn \u0026example_readers.Id, nil\n\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"Use\":               pulumi.String(\"allow\"),\n\t\t\t\t\"Administer\":        pulumi.String(\"allow\"),\n\t\t\t\t\"Create\":            pulumi.String(\"allow\"),\n\t\t\t\t\"ViewAuthorization\": pulumi.String(\"allow\"),\n\t\t\t\t\"ViewEndpoint\":      pulumi.String(\"allow\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleServiceEndpointDockerRegistry, err := azuredevops.NewServiceEndpointDockerRegistry(ctx, \"exampleServiceEndpointDockerRegistry\", \u0026azuredevops.ServiceEndpointDockerRegistryArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Example Docker Hub\"),\n\t\t\tDockerUsername:      pulumi.String(\"username\"),\n\t\t\tDockerEmail:         pulumi.String(\"email@example.com\"),\n\t\t\tDockerPassword:      pulumi.String(\"password\"),\n\t\t\tRegistryType:        pulumi.String(\"DockerHub\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceendpointPermissions(ctx, \"example-permissions\", \u0026azuredevops.ServiceendpointPermissionsArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tPrincipal: example_readers.ApplyT(func(example_readers azuredevops.GetGroupResult) (*string, error) {\n\t\t\t\treturn \u0026example_readers.Id, nil\n\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\tServiceendpointId: exampleServiceEndpointDockerRegistry.ID(),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"Use\":               pulumi.String(\"allow\"),\n\t\t\t\t\"Administer\":        pulumi.String(\"deny\"),\n\t\t\t\t\"Create\":            pulumi.String(\"deny\"),\n\t\t\t\t\"ViewAuthorization\": pulumi.String(\"allow\"),\n\t\t\t\t\"ViewEndpoint\":      pulumi.String(\"allow\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetGroupArgs;\nimport com.pulumi.azuredevops.ServiceendpointPermissions;\nimport com.pulumi.azuredevops.ServiceendpointPermissionsArgs;\nimport com.pulumi.azuredevops.ServiceEndpointDockerRegistry;\nimport com.pulumi.azuredevops.ServiceEndpointDockerRegistryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .workItemTemplate(\"Agile\")\n            .versionControl(\"Git\")\n            .visibility(\"private\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        final var example-readers = AzuredevopsFunctions.getGroup(GetGroupArgs.builder()\n            .projectId(exampleProject.id())\n            .name(\"Readers\")\n            .build());\n\n        var example_root_permissions = new ServiceendpointPermissions(\"example-root-permissions\", ServiceendpointPermissionsArgs.builder()        \n            .projectId(exampleProject.id())\n            .principal(example_readers.applyValue(example_readers -\u003e example_readers.id()))\n            .permissions(Map.ofEntries(\n                Map.entry(\"Use\", \"allow\"),\n                Map.entry(\"Administer\", \"allow\"),\n                Map.entry(\"Create\", \"allow\"),\n                Map.entry(\"ViewAuthorization\", \"allow\"),\n                Map.entry(\"ViewEndpoint\", \"allow\")\n            ))\n            .build());\n\n        var exampleServiceEndpointDockerRegistry = new ServiceEndpointDockerRegistry(\"exampleServiceEndpointDockerRegistry\", ServiceEndpointDockerRegistryArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example Docker Hub\")\n            .dockerUsername(\"username\")\n            .dockerEmail(\"email@example.com\")\n            .dockerPassword(\"password\")\n            .registryType(\"DockerHub\")\n            .build());\n\n        var example_permissions = new ServiceendpointPermissions(\"example-permissions\", ServiceendpointPermissionsArgs.builder()        \n            .projectId(exampleProject.id())\n            .principal(example_readers.applyValue(example_readers -\u003e example_readers.id()))\n            .serviceendpointId(exampleServiceEndpointDockerRegistry.id())\n            .permissions(Map.ofEntries(\n                Map.entry(\"Use\", \"allow\"),\n                Map.entry(\"Administer\", \"deny\"),\n                Map.entry(\"Create\", \"deny\"),\n                Map.entry(\"ViewAuthorization\", \"allow\"),\n                Map.entry(\"ViewEndpoint\", \"allow\")\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      workItemTemplate: Agile\n      versionControl: Git\n      visibility: private\n      description: Managed by Terraform\n  example-root-permissions:\n    type: azuredevops:ServiceendpointPermissions\n    properties:\n      projectId: ${exampleProject.id}\n      principal: ${[\"example-readers\"].id}\n      permissions:\n        Use: allow\n        Administer: allow\n        Create: allow\n        ViewAuthorization: allow\n        ViewEndpoint: allow\n  exampleServiceEndpointDockerRegistry:\n    type: azuredevops:ServiceEndpointDockerRegistry\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example Docker Hub\n      dockerUsername: username\n      dockerEmail: email@example.com\n      dockerPassword: password\n      registryType: DockerHub\n  example-permissions:\n    type: azuredevops:ServiceendpointPermissions\n    properties:\n      projectId: ${exampleProject.id}\n      principal: ${[\"example-readers\"].id}\n      serviceendpointId: ${exampleServiceEndpointDockerRegistry.id}\n      permissions:\n        Use: allow\n        Administer: deny\n        Create: deny\n        ViewAuthorization: allow\n        ViewEndpoint: allow\nvariables:\n  example-readers:\n    fn::invoke:\n      Function: azuredevops:getGroup\n      Arguments:\n        projectId: ${exampleProject.id}\n        name: Readers\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 7.0 - Security](https://docs.microsoft.com/en-us/rest/api/azure/devops/security/?view=azure-devops-rest-7.0)\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: vso.security_manage - Grants the ability to read, write, and manage security permissions.\n\n\n## Import\n\nThe resource does not support import. ",
            "properties": {
                "permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "the permissions to assign. The following permissions are available.\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The **group** principal to assign the permissions.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "replace": {
                    "type": "boolean",
                    "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`\n\n| Permission        | Description                         |\n| ----------------- | ----------------------------------- |\n| Use               | Use service endpoint                |\n| Administer        | Full control over service endpoints |\n| Create            | Create service endpoints            |\n| ViewAuthorization | View authorizations                 |\n| ViewEndpoint      | View service endpoint properties    |\n"
                },
                "serviceendpointId": {
                    "type": "string",
                    "description": "The id of the service endpoint to assign the permissions.\n"
                }
            },
            "required": [
                "permissions",
                "principal",
                "projectId"
            ],
            "inputProperties": {
                "permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "the permissions to assign. The following permissions are available.\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The **group** principal to assign the permissions.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n",
                    "willReplaceOnChanges": true
                },
                "replace": {
                    "type": "boolean",
                    "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`\n\n| Permission        | Description                         |\n| ----------------- | ----------------------------------- |\n| Use               | Use service endpoint                |\n| Administer        | Full control over service endpoints |\n| Create            | Create service endpoints            |\n| ViewAuthorization | View authorizations                 |\n| ViewEndpoint      | View service endpoint properties    |\n"
                },
                "serviceendpointId": {
                    "type": "string",
                    "description": "The id of the service endpoint to assign the permissions.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "permissions",
                "principal",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceendpointPermissions resources.\n",
                "properties": {
                    "permissions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "the permissions to assign. The following permissions are available.\n"
                    },
                    "principal": {
                        "type": "string",
                        "description": "The **group** principal to assign the permissions.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "replace": {
                        "type": "boolean",
                        "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`\n\n| Permission        | Description                         |\n| ----------------- | ----------------------------------- |\n| Use               | Use service endpoint                |\n| Administer        | Full control over service endpoints |\n| Create            | Create service endpoints            |\n| ViewAuthorization | View authorizations                 |\n| ViewEndpoint      | View service endpoint properties    |\n"
                    },
                    "serviceendpointId": {
                        "type": "string",
                        "description": "The id of the service endpoint to assign the permissions.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/servicehookPermissions:ServicehookPermissions": {
            "description": "Manages permissions for service hooks\n\n## Permission levels\n\nPermissions for service hooks within Azure DevOps can be applied on the Organizational level or, if the optional attribute `project_id` is specified, on Project level.\nThose levels are reflected by specifying (or omitting) values for the argument `project_id`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = new azuredevops.Project(\"example\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"Managed by Terraform\",\n});\nconst example-readers = azuredevops.getGroupOutput({\n    projectId: example.id,\n    name: \"Readers\",\n});\nconst example_permissions = new azuredevops.ServicehookPermissions(\"example-permissions\", {\n    projectId: example.id,\n    principal: example_readers.apply(example_readers =\u003e example_readers.id),\n    permissions: {\n        ViewSubscriptions: \"allow\",\n        EditSubscriptions: \"allow\",\n        DeleteSubscriptions: \"allow\",\n        PublishEvents: \"allow\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.Project(\"example\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"Managed by Terraform\")\nexample_readers = azuredevops.get_group_output(project_id=example.id,\n    name=\"Readers\")\nexample_permissions = azuredevops.ServicehookPermissions(\"example-permissions\",\n    project_id=example.id,\n    principal=example_readers.id,\n    permissions={\n        \"ViewSubscriptions\": \"allow\",\n        \"EditSubscriptions\": \"allow\",\n        \"DeleteSubscriptions\": \"allow\",\n        \"PublishEvents\": \"allow\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureDevOps.Project(\"example\", new()\n    {\n        WorkItemTemplate = \"Agile\",\n        VersionControl = \"Git\",\n        Visibility = \"private\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var example_readers = AzureDevOps.GetGroup.Invoke(new()\n    {\n        ProjectId = example.Id,\n        Name = \"Readers\",\n    });\n\n    var example_permissions = new AzureDevOps.ServicehookPermissions(\"example-permissions\", new()\n    {\n        ProjectId = example.Id,\n        Principal = example_readers.Apply(example_readers =\u003e example_readers.Apply(getGroupResult =\u003e getGroupResult.Id)),\n        Permissions = \n        {\n            { \"ViewSubscriptions\", \"allow\" },\n            { \"EditSubscriptions\", \"allow\" },\n            { \"DeleteSubscriptions\", \"allow\" },\n            { \"PublishEvents\", \"allow\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuredevops.NewProject(ctx, \"example\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample_readers := azuredevops.LookupGroupOutput(ctx, azuredevops.GetGroupOutputArgs{\n\t\t\tProjectId: example.ID(),\n\t\t\tName:      pulumi.String(\"Readers\"),\n\t\t}, nil)\n\t\t_, err = azuredevops.NewServicehookPermissions(ctx, \"example-permissions\", \u0026azuredevops.ServicehookPermissionsArgs{\n\t\t\tProjectId: example.ID(),\n\t\t\tPrincipal: example_readers.ApplyT(func(example_readers azuredevops.GetGroupResult) (*string, error) {\n\t\t\t\treturn \u0026example_readers.Id, nil\n\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"ViewSubscriptions\":   pulumi.String(\"allow\"),\n\t\t\t\t\"EditSubscriptions\":   pulumi.String(\"allow\"),\n\t\t\t\t\"DeleteSubscriptions\": pulumi.String(\"allow\"),\n\t\t\t\t\"PublishEvents\":       pulumi.String(\"allow\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetGroupArgs;\nimport com.pulumi.azuredevops.ServicehookPermissions;\nimport com.pulumi.azuredevops.ServicehookPermissionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Project(\"example\", ProjectArgs.builder()        \n            .workItemTemplate(\"Agile\")\n            .versionControl(\"Git\")\n            .visibility(\"private\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        final var example-readers = AzuredevopsFunctions.getGroup(GetGroupArgs.builder()\n            .projectId(example.id())\n            .name(\"Readers\")\n            .build());\n\n        var example_permissions = new ServicehookPermissions(\"example-permissions\", ServicehookPermissionsArgs.builder()        \n            .projectId(example.id())\n            .principal(example_readers.applyValue(example_readers -\u003e example_readers.id()))\n            .permissions(Map.ofEntries(\n                Map.entry(\"ViewSubscriptions\", \"allow\"),\n                Map.entry(\"EditSubscriptions\", \"allow\"),\n                Map.entry(\"DeleteSubscriptions\", \"allow\"),\n                Map.entry(\"PublishEvents\", \"allow\")\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuredevops:Project\n    properties:\n      workItemTemplate: Agile\n      versionControl: Git\n      visibility: private\n      description: Managed by Terraform\n  example-permissions:\n    type: azuredevops:ServicehookPermissions\n    properties:\n      projectId: ${example.id}\n      principal: ${[\"example-readers\"].id}\n      permissions:\n        ViewSubscriptions: allow\n        EditSubscriptions: allow\n        DeleteSubscriptions: allow\n        PublishEvents: allow\nvariables:\n  example-readers:\n    fn::invoke:\n      Function: azuredevops:getGroup\n      Arguments:\n        projectId: ${example.id}\n        name: Readers\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 7.0 - Security](https://docs.microsoft.com/en-us/rest/api/azure/devops/security/?view=azure-devops-rest-7.0)\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: vso.security_manage - Grants the ability to read, write, and manage security permissions.\n\n\n## Import\n\nThe resource does not support import. ",
            "properties": {
                "permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "the permissions to assign. The following permissions are available.\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The **group** principal to assign the permissions.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "replace": {
                    "type": "boolean",
                    "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`\n\n| Name               | Permission Description   |\n| ------------------ | ------------------------ |\n| ViewSubscriptions  | View Subscriptions       |\n| EditSubscriptions  | Edit Subscription        |\n| DeleteSubscriptions| Delete Subscriptions     |\n| PublishEvents      | Publish Events           |\n"
                }
            },
            "required": [
                "permissions",
                "principal"
            ],
            "inputProperties": {
                "permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "the permissions to assign. The following permissions are available.\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The **group** principal to assign the permissions.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n",
                    "willReplaceOnChanges": true
                },
                "replace": {
                    "type": "boolean",
                    "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`\n\n| Name               | Permission Description   |\n| ------------------ | ------------------------ |\n| ViewSubscriptions  | View Subscriptions       |\n| EditSubscriptions  | Edit Subscription        |\n| DeleteSubscriptions| Delete Subscriptions     |\n| PublishEvents      | Publish Events           |\n"
                }
            },
            "requiredInputs": [
                "permissions",
                "principal"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServicehookPermissions resources.\n",
                "properties": {
                    "permissions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "the permissions to assign. The following permissions are available.\n"
                    },
                    "principal": {
                        "type": "string",
                        "description": "The **group** principal to assign the permissions.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "replace": {
                        "type": "boolean",
                        "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`\n\n| Name               | Permission Description   |\n| ------------------ | ------------------------ |\n| ViewSubscriptions  | View Subscriptions       |\n| EditSubscriptions  | Edit Subscription        |\n| DeleteSubscriptions| Delete Subscriptions     |\n| PublishEvents      | Publish Events           |\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/taggingPermissions:TaggingPermissions": {
            "description": "Manages permissions for tagging\n\n## Permission levels\n\nPermissions for tagging within Azure DevOps can be applied only on Organizational and Project level.\nThe project level is reflected by specifying the argument `project_id`, otherwise the permissions are set on the organizational level.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = new azuredevops.Project(\"example\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"Managed by Terraform\",\n});\nconst example-readers = azuredevops.getGroupOutput({\n    projectId: example.id,\n    name: \"Readers\",\n});\nconst example_permissions = new azuredevops.TaggingPermissions(\"example-permissions\", {\n    projectId: example.id,\n    principal: example_readers.apply(example_readers =\u003e example_readers.id),\n    permissions: {\n        Enumerate: \"allow\",\n        Create: \"allow\",\n        Update: \"allow\",\n        Delete: \"allow\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.Project(\"example\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"Managed by Terraform\")\nexample_readers = azuredevops.get_group_output(project_id=example.id,\n    name=\"Readers\")\nexample_permissions = azuredevops.TaggingPermissions(\"example-permissions\",\n    project_id=example.id,\n    principal=example_readers.id,\n    permissions={\n        \"Enumerate\": \"allow\",\n        \"Create\": \"allow\",\n        \"Update\": \"allow\",\n        \"Delete\": \"allow\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureDevOps.Project(\"example\", new()\n    {\n        WorkItemTemplate = \"Agile\",\n        VersionControl = \"Git\",\n        Visibility = \"private\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var example_readers = AzureDevOps.GetGroup.Invoke(new()\n    {\n        ProjectId = example.Id,\n        Name = \"Readers\",\n    });\n\n    var example_permissions = new AzureDevOps.TaggingPermissions(\"example-permissions\", new()\n    {\n        ProjectId = example.Id,\n        Principal = example_readers.Apply(example_readers =\u003e example_readers.Apply(getGroupResult =\u003e getGroupResult.Id)),\n        Permissions = \n        {\n            { \"Enumerate\", \"allow\" },\n            { \"Create\", \"allow\" },\n            { \"Update\", \"allow\" },\n            { \"Delete\", \"allow\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuredevops.NewProject(ctx, \"example\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample_readers := azuredevops.LookupGroupOutput(ctx, azuredevops.GetGroupOutputArgs{\n\t\t\tProjectId: example.ID(),\n\t\t\tName:      pulumi.String(\"Readers\"),\n\t\t}, nil)\n\t\t_, err = azuredevops.NewTaggingPermissions(ctx, \"example-permissions\", \u0026azuredevops.TaggingPermissionsArgs{\n\t\t\tProjectId: example.ID(),\n\t\t\tPrincipal: example_readers.ApplyT(func(example_readers azuredevops.GetGroupResult) (*string, error) {\n\t\t\t\treturn \u0026example_readers.Id, nil\n\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"Enumerate\": pulumi.String(\"allow\"),\n\t\t\t\t\"Create\":    pulumi.String(\"allow\"),\n\t\t\t\t\"Update\":    pulumi.String(\"allow\"),\n\t\t\t\t\"Delete\":    pulumi.String(\"allow\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetGroupArgs;\nimport com.pulumi.azuredevops.TaggingPermissions;\nimport com.pulumi.azuredevops.TaggingPermissionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Project(\"example\", ProjectArgs.builder()        \n            .workItemTemplate(\"Agile\")\n            .versionControl(\"Git\")\n            .visibility(\"private\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        final var example-readers = AzuredevopsFunctions.getGroup(GetGroupArgs.builder()\n            .projectId(example.id())\n            .name(\"Readers\")\n            .build());\n\n        var example_permissions = new TaggingPermissions(\"example-permissions\", TaggingPermissionsArgs.builder()        \n            .projectId(example.id())\n            .principal(example_readers.applyValue(example_readers -\u003e example_readers.id()))\n            .permissions(Map.ofEntries(\n                Map.entry(\"Enumerate\", \"allow\"),\n                Map.entry(\"Create\", \"allow\"),\n                Map.entry(\"Update\", \"allow\"),\n                Map.entry(\"Delete\", \"allow\")\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuredevops:Project\n    properties:\n      workItemTemplate: Agile\n      versionControl: Git\n      visibility: private\n      description: Managed by Terraform\n  example-permissions:\n    type: azuredevops:TaggingPermissions\n    properties:\n      projectId: ${example.id}\n      principal: ${[\"example-readers\"].id}\n      permissions:\n        Enumerate: allow\n        Create: allow\n        Update: allow\n        Delete: allow\nvariables:\n  example-readers:\n    fn::invoke:\n      Function: azuredevops:getGroup\n      Arguments:\n        projectId: ${example.id}\n        name: Readers\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 7.0 - Security](https://docs.microsoft.com/en-us/rest/api/azure/devops/security/?view=azure-devops-rest-7.0)\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: vso.security_manage - Grants the ability to read, write, and manage security permissions.\n\n\n## Import\n\nThe resource does not support import. ",
            "properties": {
                "permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "the permissions to assign. The following permissions are available.\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The **group or user** principal to assign the permissions.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project to assign the permissions. If omitted, organization wide permissions for tagging are managed.\n"
                },
                "replace": {
                    "type": "boolean",
                    "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`\n\n| Name               | Permission Description     |\n| ------------------ | -------------------------- |\n| Enumerate          | Enumerate tag definitions  |\n| Create             | Create tag definition      |\n| Update             | Update tag definition      |\n| Delete             | Delete tag definition      |\n"
                }
            },
            "required": [
                "permissions",
                "principal"
            ],
            "inputProperties": {
                "permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "the permissions to assign. The following permissions are available.\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The **group or user** principal to assign the permissions.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project to assign the permissions. If omitted, organization wide permissions for tagging are managed.\n",
                    "willReplaceOnChanges": true
                },
                "replace": {
                    "type": "boolean",
                    "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`\n\n| Name               | Permission Description     |\n| ------------------ | -------------------------- |\n| Enumerate          | Enumerate tag definitions  |\n| Create             | Create tag definition      |\n| Update             | Update tag definition      |\n| Delete             | Delete tag definition      |\n"
                }
            },
            "requiredInputs": [
                "permissions",
                "principal"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TaggingPermissions resources.\n",
                "properties": {
                    "permissions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "the permissions to assign. The following permissions are available.\n"
                    },
                    "principal": {
                        "type": "string",
                        "description": "The **group or user** principal to assign the permissions.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project to assign the permissions. If omitted, organization wide permissions for tagging are managed.\n",
                        "willReplaceOnChanges": true
                    },
                    "replace": {
                        "type": "boolean",
                        "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`\n\n| Name               | Permission Description     |\n| ------------------ | -------------------------- |\n| Enumerate          | Enumerate tag definitions  |\n| Create             | Create tag definition      |\n| Update             | Update tag definition      |\n| Delete             | Delete tag definition      |\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/team:Team": {
            "description": "Manages a team within a project in a Azure DevOps organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"Managed by Terraform\",\n});\nconst example-project-contributors = azuredevops.getGroupOutput({\n    projectId: exampleProject.id,\n    name: \"Contributors\",\n});\nconst example-project-readers = azuredevops.getGroupOutput({\n    projectId: exampleProject.id,\n    name: \"Readers\",\n});\nconst exampleTeam = new azuredevops.Team(\"exampleTeam\", {\n    projectId: exampleProject.id,\n    administrators: [example_project_contributors.apply(example_project_contributors =\u003e example_project_contributors.descriptor)],\n    members: [example_project_readers.apply(example_project_readers =\u003e example_project_readers.descriptor)],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"Managed by Terraform\")\nexample_project_contributors = azuredevops.get_group_output(project_id=example_project.id,\n    name=\"Contributors\")\nexample_project_readers = azuredevops.get_group_output(project_id=example_project.id,\n    name=\"Readers\")\nexample_team = azuredevops.Team(\"exampleTeam\",\n    project_id=example_project.id,\n    administrators=[example_project_contributors.descriptor],\n    members=[example_project_readers.descriptor])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        WorkItemTemplate = \"Agile\",\n        VersionControl = \"Git\",\n        Visibility = \"private\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var example_project_contributors = AzureDevOps.GetGroup.Invoke(new()\n    {\n        ProjectId = exampleProject.Id,\n        Name = \"Contributors\",\n    });\n\n    var example_project_readers = AzureDevOps.GetGroup.Invoke(new()\n    {\n        ProjectId = exampleProject.Id,\n        Name = \"Readers\",\n    });\n\n    var exampleTeam = new AzureDevOps.Team(\"exampleTeam\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Administrators = new[]\n        {\n            example_project_contributors.Apply(example_project_contributors =\u003e example_project_contributors.Apply(getGroupResult =\u003e getGroupResult.Descriptor)),\n        },\n        Members = new[]\n        {\n            example_project_readers.Apply(example_project_readers =\u003e example_project_readers.Apply(getGroupResult =\u003e getGroupResult.Descriptor)),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample_project_contributors := azuredevops.LookupGroupOutput(ctx, azuredevops.GetGroupOutputArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tName:      pulumi.String(\"Contributors\"),\n\t\t}, nil)\n\t\texample_project_readers := azuredevops.LookupGroupOutput(ctx, azuredevops.GetGroupOutputArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tName:      pulumi.String(\"Readers\"),\n\t\t}, nil)\n\t\t_, err = azuredevops.NewTeam(ctx, \"exampleTeam\", \u0026azuredevops.TeamArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tAdministrators: pulumi.StringArray{\n\t\t\t\texample_project_contributors.ApplyT(func(example_project_contributors azuredevops.GetGroupResult) (*string, error) {\n\t\t\t\t\treturn \u0026example_project_contributors.Descriptor, nil\n\t\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\t},\n\t\t\tMembers: pulumi.StringArray{\n\t\t\t\texample_project_readers.ApplyT(func(example_project_readers azuredevops.GetGroupResult) (*string, error) {\n\t\t\t\t\treturn \u0026example_project_readers.Descriptor, nil\n\t\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetGroupArgs;\nimport com.pulumi.azuredevops.Team;\nimport com.pulumi.azuredevops.TeamArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .workItemTemplate(\"Agile\")\n            .versionControl(\"Git\")\n            .visibility(\"private\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        final var example-project-contributors = AzuredevopsFunctions.getGroup(GetGroupArgs.builder()\n            .projectId(exampleProject.id())\n            .name(\"Contributors\")\n            .build());\n\n        final var example-project-readers = AzuredevopsFunctions.getGroup(GetGroupArgs.builder()\n            .projectId(exampleProject.id())\n            .name(\"Readers\")\n            .build());\n\n        var exampleTeam = new Team(\"exampleTeam\", TeamArgs.builder()        \n            .projectId(exampleProject.id())\n            .administrators(example_project_contributors.applyValue(example_project_contributors -\u003e example_project_contributors.descriptor()))\n            .members(example_project_readers.applyValue(example_project_readers -\u003e example_project_readers.descriptor()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      workItemTemplate: Agile\n      versionControl: Git\n      visibility: private\n      description: Managed by Terraform\n  exampleTeam:\n    type: azuredevops:Team\n    properties:\n      projectId: ${exampleProject.id}\n      administrators:\n        - ${[\"example-project-contributors\"].descriptor}\n      members:\n        - ${[\"example-project-readers\"].descriptor}\nvariables:\n  example-project-contributors:\n    fn::invoke:\n      Function: azuredevops:getGroup\n      Arguments:\n        projectId: ${exampleProject.id}\n        name: Contributors\n  example-project-readers:\n    fn::invoke:\n      Function: azuredevops:getGroup\n      Arguments:\n        projectId: ${exampleProject.id}\n        name: Readers\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Teams - Create](https://docs.microsoft.com/en-us/rest/api/azure/devops/core/teams/create?view=azure-devops-rest-7.0)\n\n## PAT Permissions Required\n\n- **vso.project_manage**:\tGrants the ability to create, read, update, and delete projects and teams.\n\n\n## Import\n\nAzure DevOps teams can be imported using the complete resource id `\u003cproject_id\u003e/\u003cteam_id\u003e` e.g.\n\n```sh\n $ pulumi import azuredevops:index/team:Team example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "administrators": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of subject descriptors to define administrators of the team.\n\n\u003e NOTE: It's possible to define team administrators both within the\n\u003e `azuredevops.Team` resource via the `administrators` block and by using the\n\u003e `azuredevops.TeamAdministrators` resource. However it's not possible to use\n\u003e both methods to manage team administrators, since there'll be conflicts.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Team.\n"
                },
                "descriptor": {
                    "type": "string",
                    "description": "The descriptor of the Team.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of subject descriptors to define members of the team.\n\n\u003e NOTE: It's possible to define team members both within the\n\u003e `azuredevops.Team` resource via the `members` block and by using the\n\u003e `azuredevops.TeamMembers` resource. However it's not possible to use\n\u003e both methods to manage team members, since there'll be conflicts.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Team.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The Project ID.\n"
                }
            },
            "required": [
                "administrators",
                "descriptor",
                "members",
                "name",
                "projectId"
            ],
            "inputProperties": {
                "administrators": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of subject descriptors to define administrators of the team.\n\n\u003e NOTE: It's possible to define team administrators both within the\n\u003e `azuredevops.Team` resource via the `administrators` block and by using the\n\u003e `azuredevops.TeamAdministrators` resource. However it's not possible to use\n\u003e both methods to manage team administrators, since there'll be conflicts.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Team.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of subject descriptors to define members of the team.\n\n\u003e NOTE: It's possible to define team members both within the\n\u003e `azuredevops.Team` resource via the `members` block and by using the\n\u003e `azuredevops.TeamMembers` resource. However it's not possible to use\n\u003e both methods to manage team members, since there'll be conflicts.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Team.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The Project ID.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Team resources.\n",
                "properties": {
                    "administrators": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of subject descriptors to define administrators of the team.\n\n\u003e NOTE: It's possible to define team administrators both within the\n\u003e `azuredevops.Team` resource via the `administrators` block and by using the\n\u003e `azuredevops.TeamAdministrators` resource. However it's not possible to use\n\u003e both methods to manage team administrators, since there'll be conflicts.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Team.\n"
                    },
                    "descriptor": {
                        "type": "string",
                        "description": "The descriptor of the Team.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of subject descriptors to define members of the team.\n\n\u003e NOTE: It's possible to define team members both within the\n\u003e `azuredevops.Team` resource via the `members` block and by using the\n\u003e `azuredevops.TeamMembers` resource. However it's not possible to use\n\u003e both methods to manage team members, since there'll be conflicts.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Team.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The Project ID.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/teamAdministrators:TeamAdministrators": {
            "description": "Manages administrators of a team within a project in a Azure DevOps organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"Managed by Terraform\",\n});\nconst example-project-contributors = azuredevops.getGroupOutput({\n    projectId: exampleProject.id,\n    name: \"Contributors\",\n});\nconst exampleTeam = new azuredevops.Team(\"exampleTeam\", {projectId: exampleProject.id});\nconst example_team_administrators = new azuredevops.TeamAdministrators(\"example-team-administrators\", {\n    projectId: exampleTeam.projectId,\n    teamId: exampleTeam.id,\n    mode: \"overwrite\",\n    administrators: [example_project_contributors.apply(example_project_contributors =\u003e example_project_contributors.descriptor)],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"Managed by Terraform\")\nexample_project_contributors = azuredevops.get_group_output(project_id=example_project.id,\n    name=\"Contributors\")\nexample_team = azuredevops.Team(\"exampleTeam\", project_id=example_project.id)\nexample_team_administrators = azuredevops.TeamAdministrators(\"example-team-administrators\",\n    project_id=example_team.project_id,\n    team_id=example_team.id,\n    mode=\"overwrite\",\n    administrators=[example_project_contributors.descriptor])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        WorkItemTemplate = \"Agile\",\n        VersionControl = \"Git\",\n        Visibility = \"private\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var example_project_contributors = AzureDevOps.GetGroup.Invoke(new()\n    {\n        ProjectId = exampleProject.Id,\n        Name = \"Contributors\",\n    });\n\n    var exampleTeam = new AzureDevOps.Team(\"exampleTeam\", new()\n    {\n        ProjectId = exampleProject.Id,\n    });\n\n    var example_team_administrators = new AzureDevOps.TeamAdministrators(\"example-team-administrators\", new()\n    {\n        ProjectId = exampleTeam.ProjectId,\n        TeamId = exampleTeam.Id,\n        Mode = \"overwrite\",\n        Administrators = new[]\n        {\n            example_project_contributors.Apply(example_project_contributors =\u003e example_project_contributors.Apply(getGroupResult =\u003e getGroupResult.Descriptor)),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample_project_contributors := azuredevops.LookupGroupOutput(ctx, azuredevops.GetGroupOutputArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tName:      pulumi.String(\"Contributors\"),\n\t\t}, nil)\n\t\texampleTeam, err := azuredevops.NewTeam(ctx, \"exampleTeam\", \u0026azuredevops.TeamArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewTeamAdministrators(ctx, \"example-team-administrators\", \u0026azuredevops.TeamAdministratorsArgs{\n\t\t\tProjectId: exampleTeam.ProjectId,\n\t\t\tTeamId:    exampleTeam.ID(),\n\t\t\tMode:      pulumi.String(\"overwrite\"),\n\t\t\tAdministrators: pulumi.StringArray{\n\t\t\t\texample_project_contributors.ApplyT(func(example_project_contributors azuredevops.GetGroupResult) (*string, error) {\n\t\t\t\t\treturn \u0026example_project_contributors.Descriptor, nil\n\t\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetGroupArgs;\nimport com.pulumi.azuredevops.Team;\nimport com.pulumi.azuredevops.TeamArgs;\nimport com.pulumi.azuredevops.TeamAdministrators;\nimport com.pulumi.azuredevops.TeamAdministratorsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .workItemTemplate(\"Agile\")\n            .versionControl(\"Git\")\n            .visibility(\"private\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        final var example-project-contributors = AzuredevopsFunctions.getGroup(GetGroupArgs.builder()\n            .projectId(exampleProject.id())\n            .name(\"Contributors\")\n            .build());\n\n        var exampleTeam = new Team(\"exampleTeam\", TeamArgs.builder()        \n            .projectId(exampleProject.id())\n            .build());\n\n        var example_team_administrators = new TeamAdministrators(\"example-team-administrators\", TeamAdministratorsArgs.builder()        \n            .projectId(exampleTeam.projectId())\n            .teamId(exampleTeam.id())\n            .mode(\"overwrite\")\n            .administrators(example_project_contributors.applyValue(example_project_contributors -\u003e example_project_contributors.descriptor()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      workItemTemplate: Agile\n      versionControl: Git\n      visibility: private\n      description: Managed by Terraform\n  exampleTeam:\n    type: azuredevops:Team\n    properties:\n      projectId: ${exampleProject.id}\n  example-team-administrators:\n    type: azuredevops:TeamAdministrators\n    properties:\n      projectId: ${exampleTeam.projectId}\n      teamId: ${exampleTeam.id}\n      mode: overwrite\n      administrators:\n        - ${[\"example-project-contributors\"].descriptor}\nvariables:\n  example-project-contributors:\n    fn::invoke:\n      Function: azuredevops:getGroup\n      Arguments:\n        projectId: ${exampleProject.id}\n        name: Contributors\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Teams - Update](https://docs.microsoft.com/en-us/rest/api/azure/devops/core/teams/update?view=azure-devops-rest-7.0)\n\n## PAT Permissions Required\n\n- **vso.project_write**:\tGrants the ability to read and update projects and teams.\n\n\n## Import\n\nThe resource does not support import. ",
            "properties": {
                "administrators": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of subject descriptors to define adminitrators of the team.\n\n\u003e NOTE: It's possible to define team administrators both within the\n\u003e `azuredevops.Team` resource via the `administrators` block and by using the\n\u003e `azuredevops.TeamAdministrators` resource. However it's not possible to use\n\u003e both methods to manage team administrators, since there'll be conflicts.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "The mode how the resource manages team administrators.\n- `mode == add`: the resource will ensure that all specified administrators will be part of the referenced team\n- `mode == overwrite`: the resource will replace all existing administrators with the administrators specified within the `administrators` block\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The Project ID.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the Team.\n"
                }
            },
            "required": [
                "administrators",
                "projectId",
                "teamId"
            ],
            "inputProperties": {
                "administrators": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of subject descriptors to define adminitrators of the team.\n\n\u003e NOTE: It's possible to define team administrators both within the\n\u003e `azuredevops.Team` resource via the `administrators` block and by using the\n\u003e `azuredevops.TeamAdministrators` resource. However it's not possible to use\n\u003e both methods to manage team administrators, since there'll be conflicts.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "The mode how the resource manages team administrators.\n- `mode == add`: the resource will ensure that all specified administrators will be part of the referenced team\n- `mode == overwrite`: the resource will replace all existing administrators with the administrators specified within the `administrators` block\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The Project ID.\n",
                    "willReplaceOnChanges": true
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the Team.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "administrators",
                "projectId",
                "teamId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TeamAdministrators resources.\n",
                "properties": {
                    "administrators": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of subject descriptors to define adminitrators of the team.\n\n\u003e NOTE: It's possible to define team administrators both within the\n\u003e `azuredevops.Team` resource via the `administrators` block and by using the\n\u003e `azuredevops.TeamAdministrators` resource. However it's not possible to use\n\u003e both methods to manage team administrators, since there'll be conflicts.\n"
                    },
                    "mode": {
                        "type": "string",
                        "description": "The mode how the resource manages team administrators.\n- `mode == add`: the resource will ensure that all specified administrators will be part of the referenced team\n- `mode == overwrite`: the resource will replace all existing administrators with the administrators specified within the `administrators` block\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The Project ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the Team.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/teamMembers:TeamMembers": {
            "description": "Manages members of a team within a project in a Azure DevOps organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"Managed by Terraform\",\n});\nconst example-project-readers = azuredevops.getGroupOutput({\n    projectId: exampleProject.id,\n    name: \"Readers\",\n});\nconst exampleTeam = new azuredevops.Team(\"exampleTeam\", {projectId: exampleProject.id});\nconst example_team_members = new azuredevops.TeamMembers(\"example-team-members\", {\n    projectId: exampleTeam.projectId,\n    teamId: exampleTeam.id,\n    mode: \"overwrite\",\n    members: [example_project_readers.apply(example_project_readers =\u003e example_project_readers.descriptor)],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"Managed by Terraform\")\nexample_project_readers = azuredevops.get_group_output(project_id=example_project.id,\n    name=\"Readers\")\nexample_team = azuredevops.Team(\"exampleTeam\", project_id=example_project.id)\nexample_team_members = azuredevops.TeamMembers(\"example-team-members\",\n    project_id=example_team.project_id,\n    team_id=example_team.id,\n    mode=\"overwrite\",\n    members=[example_project_readers.descriptor])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        WorkItemTemplate = \"Agile\",\n        VersionControl = \"Git\",\n        Visibility = \"private\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var example_project_readers = AzureDevOps.GetGroup.Invoke(new()\n    {\n        ProjectId = exampleProject.Id,\n        Name = \"Readers\",\n    });\n\n    var exampleTeam = new AzureDevOps.Team(\"exampleTeam\", new()\n    {\n        ProjectId = exampleProject.Id,\n    });\n\n    var example_team_members = new AzureDevOps.TeamMembers(\"example-team-members\", new()\n    {\n        ProjectId = exampleTeam.ProjectId,\n        TeamId = exampleTeam.Id,\n        Mode = \"overwrite\",\n        Members = new[]\n        {\n            example_project_readers.Apply(example_project_readers =\u003e example_project_readers.Apply(getGroupResult =\u003e getGroupResult.Descriptor)),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample_project_readers := azuredevops.LookupGroupOutput(ctx, azuredevops.GetGroupOutputArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tName:      pulumi.String(\"Readers\"),\n\t\t}, nil)\n\t\texampleTeam, err := azuredevops.NewTeam(ctx, \"exampleTeam\", \u0026azuredevops.TeamArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewTeamMembers(ctx, \"example-team-members\", \u0026azuredevops.TeamMembersArgs{\n\t\t\tProjectId: exampleTeam.ProjectId,\n\t\t\tTeamId:    exampleTeam.ID(),\n\t\t\tMode:      pulumi.String(\"overwrite\"),\n\t\t\tMembers: pulumi.StringArray{\n\t\t\t\texample_project_readers.ApplyT(func(example_project_readers azuredevops.GetGroupResult) (*string, error) {\n\t\t\t\t\treturn \u0026example_project_readers.Descriptor, nil\n\t\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetGroupArgs;\nimport com.pulumi.azuredevops.Team;\nimport com.pulumi.azuredevops.TeamArgs;\nimport com.pulumi.azuredevops.TeamMembers;\nimport com.pulumi.azuredevops.TeamMembersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .workItemTemplate(\"Agile\")\n            .versionControl(\"Git\")\n            .visibility(\"private\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        final var example-project-readers = AzuredevopsFunctions.getGroup(GetGroupArgs.builder()\n            .projectId(exampleProject.id())\n            .name(\"Readers\")\n            .build());\n\n        var exampleTeam = new Team(\"exampleTeam\", TeamArgs.builder()        \n            .projectId(exampleProject.id())\n            .build());\n\n        var example_team_members = new TeamMembers(\"example-team-members\", TeamMembersArgs.builder()        \n            .projectId(exampleTeam.projectId())\n            .teamId(exampleTeam.id())\n            .mode(\"overwrite\")\n            .members(example_project_readers.applyValue(example_project_readers -\u003e example_project_readers.descriptor()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      workItemTemplate: Agile\n      versionControl: Git\n      visibility: private\n      description: Managed by Terraform\n  exampleTeam:\n    type: azuredevops:Team\n    properties:\n      projectId: ${exampleProject.id}\n  example-team-members:\n    type: azuredevops:TeamMembers\n    properties:\n      projectId: ${exampleTeam.projectId}\n      teamId: ${exampleTeam.id}\n      mode: overwrite\n      members:\n        - ${[\"example-project-readers\"].descriptor}\nvariables:\n  example-project-readers:\n    fn::invoke:\n      Function: azuredevops:getGroup\n      Arguments:\n        projectId: ${exampleProject.id}\n        name: Readers\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Teams - Update](https://docs.microsoft.com/en-us/rest/api/azure/devops/core/teams/update?view=azure-devops-rest-7.0)\n\n## PAT Permissions Required\n\n- **vso.project_write**:\tGrants the ability to read and update projects and teams.\n\n\n## Import\n\nThe resource does not support import. ",
            "properties": {
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of subject descriptors to define members of the team.\n\n\u003e NOTE: It's possible to define team members both within the\n\u003e `azuredevops.Team` resource via the `members` block and by using the\n\u003e `azuredevops.TeamMembers` resource. However it's not possible to use\n\u003e both methods to manage team members, since there'll be conflicts.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "The mode how the resource manages team members.\n- `mode == add`: the resource will ensure that all specified members will be part of the referenced team\n- `mode == overwrite`: the resource will replace all existing members with the members specified within the `members` block\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The Project ID.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the Team.\n"
                }
            },
            "required": [
                "members",
                "projectId",
                "teamId"
            ],
            "inputProperties": {
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of subject descriptors to define members of the team.\n\n\u003e NOTE: It's possible to define team members both within the\n\u003e `azuredevops.Team` resource via the `members` block and by using the\n\u003e `azuredevops.TeamMembers` resource. However it's not possible to use\n\u003e both methods to manage team members, since there'll be conflicts.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "The mode how the resource manages team members.\n- `mode == add`: the resource will ensure that all specified members will be part of the referenced team\n- `mode == overwrite`: the resource will replace all existing members with the members specified within the `members` block\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The Project ID.\n",
                    "willReplaceOnChanges": true
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the Team.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "members",
                "projectId",
                "teamId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TeamMembers resources.\n",
                "properties": {
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of subject descriptors to define members of the team.\n\n\u003e NOTE: It's possible to define team members both within the\n\u003e `azuredevops.Team` resource via the `members` block and by using the\n\u003e `azuredevops.TeamMembers` resource. However it's not possible to use\n\u003e both methods to manage team members, since there'll be conflicts.\n"
                    },
                    "mode": {
                        "type": "string",
                        "description": "The mode how the resource manages team members.\n- `mode == add`: the resource will ensure that all specified members will be part of the referenced team\n- `mode == overwrite`: the resource will replace all existing members with the members specified within the `members` block\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The Project ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the Team.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/user:User": {
            "description": "Manages a user entitlement within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = new azuredevops.User(\"example\", {principalName: \"foo@contoso.com\"});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.User(\"example\", principal_name=\"foo@contoso.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureDevOps.User(\"example\", new()\n    {\n        PrincipalName = \"foo@contoso.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewUser(ctx, \"example\", \u0026azuredevops.UserArgs{\n\t\t\tPrincipalName: pulumi.String(\"foo@contoso.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.User;\nimport com.pulumi.azuredevops.UserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new User(\"example\", UserArgs.builder()        \n            .principalName(\"foo@contoso.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuredevops:User\n    properties:\n      principalName: foo@contoso.com\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - User Entitlements - Add](https://docs.microsoft.com/en-us/rest/api/azure/devops/memberentitlementmanagement/user-entitlements/add?view=azure-devops-rest-7.0)\n- [Programmatic mapping of access levels](https://docs.microsoft.com/en-us/azure/devops/organizations/security/access-levels?view=azure-devops#programmatic-mapping-of-access-levels)\n\n## PAT Permissions Required\n\n- **Member Entitlement Management**: Read \u0026 Write\n\n\n## Import\n\nThe resources allows the import via the UUID of a user entitlement or by using the principal name of a user owning an entitlement. ",
            "properties": {
                "accountLicenseType": {
                    "type": "string",
                    "description": "Type of Account License. Valid values: `advanced`, `earlyAdopter`, `express`, `none`, `professional`, or `stakeholder`. Defaults to `express`. In addition the value `basic` is allowed which is an alias for `express` and reflects the name of the `express` license used in the Azure DevOps web interface.\n"
                },
                "descriptor": {
                    "type": "string",
                    "description": "The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the user graph subject.\n"
                },
                "licensingSource": {
                    "type": "string",
                    "description": "The source of the licensing (e.g. Account. MSDN etc.) Valid values: `account` (Default), `auto`, `msdn`, `none`, `profile`, `trial`\n\n\u003e **NOTE:** A user can only be referenced by it's `principal_name` or by the combination of `origin_id` and `origin`.\n"
                },
                "origin": {
                    "type": "string",
                    "description": "The type of source provider for the origin identifier.\n"
                },
                "originId": {
                    "type": "string",
                    "description": "The unique identifier from the system of origin. Typically a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.\n"
                },
                "principalName": {
                    "type": "string",
                    "description": "The principal name is the PrincipalName of a graph member from the source provider. Usually, e-mail address.\n"
                }
            },
            "required": [
                "descriptor",
                "origin",
                "originId",
                "principalName"
            ],
            "inputProperties": {
                "accountLicenseType": {
                    "type": "string",
                    "description": "Type of Account License. Valid values: `advanced`, `earlyAdopter`, `express`, `none`, `professional`, or `stakeholder`. Defaults to `express`. In addition the value `basic` is allowed which is an alias for `express` and reflects the name of the `express` license used in the Azure DevOps web interface.\n"
                },
                "licensingSource": {
                    "type": "string",
                    "description": "The source of the licensing (e.g. Account. MSDN etc.) Valid values: `account` (Default), `auto`, `msdn`, `none`, `profile`, `trial`\n\n\u003e **NOTE:** A user can only be referenced by it's `principal_name` or by the combination of `origin_id` and `origin`.\n"
                },
                "origin": {
                    "type": "string",
                    "description": "The type of source provider for the origin identifier.\n",
                    "willReplaceOnChanges": true
                },
                "originId": {
                    "type": "string",
                    "description": "The unique identifier from the system of origin. Typically a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.\n",
                    "willReplaceOnChanges": true
                },
                "principalName": {
                    "type": "string",
                    "description": "The principal name is the PrincipalName of a graph member from the source provider. Usually, e-mail address.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "accountLicenseType": {
                        "type": "string",
                        "description": "Type of Account License. Valid values: `advanced`, `earlyAdopter`, `express`, `none`, `professional`, or `stakeholder`. Defaults to `express`. In addition the value `basic` is allowed which is an alias for `express` and reflects the name of the `express` license used in the Azure DevOps web interface.\n"
                    },
                    "descriptor": {
                        "type": "string",
                        "description": "The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the user graph subject.\n"
                    },
                    "licensingSource": {
                        "type": "string",
                        "description": "The source of the licensing (e.g. Account. MSDN etc.) Valid values: `account` (Default), `auto`, `msdn`, `none`, `profile`, `trial`\n\n\u003e **NOTE:** A user can only be referenced by it's `principal_name` or by the combination of `origin_id` and `origin`.\n"
                    },
                    "origin": {
                        "type": "string",
                        "description": "The type of source provider for the origin identifier.\n",
                        "willReplaceOnChanges": true
                    },
                    "originId": {
                        "type": "string",
                        "description": "The unique identifier from the system of origin. Typically a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.\n",
                        "willReplaceOnChanges": true
                    },
                    "principalName": {
                        "type": "string",
                        "description": "The principal name is the PrincipalName of a graph member from the source provider. Usually, e-mail address.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Entitlement/user:User"
                }
            ]
        },
        "azuredevops:index/variableGroup:VariableGroup": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"Managed by Terraform\",\n});\nconst exampleVariableGroup = new azuredevops.VariableGroup(\"exampleVariableGroup\", {\n    projectId: exampleProject.id,\n    description: \"Example Variable Group Description\",\n    allowAccess: true,\n    variables: [\n        {\n            name: \"key1\",\n            value: \"val1\",\n        },\n        {\n            name: \"key2\",\n            secretValue: \"val2\",\n            isSecret: true,\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"Managed by Terraform\")\nexample_variable_group = azuredevops.VariableGroup(\"exampleVariableGroup\",\n    project_id=example_project.id,\n    description=\"Example Variable Group Description\",\n    allow_access=True,\n    variables=[\n        azuredevops.VariableGroupVariableArgs(\n            name=\"key1\",\n            value=\"val1\",\n        ),\n        azuredevops.VariableGroupVariableArgs(\n            name=\"key2\",\n            secret_value=\"val2\",\n            is_secret=True,\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        WorkItemTemplate = \"Agile\",\n        VersionControl = \"Git\",\n        Visibility = \"private\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleVariableGroup = new AzureDevOps.VariableGroup(\"exampleVariableGroup\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Description = \"Example Variable Group Description\",\n        AllowAccess = true,\n        Variables = new[]\n        {\n            new AzureDevOps.Inputs.VariableGroupVariableArgs\n            {\n                Name = \"key1\",\n                Value = \"val1\",\n            },\n            new AzureDevOps.Inputs.VariableGroupVariableArgs\n            {\n                Name = \"key2\",\n                SecretValue = \"val2\",\n                IsSecret = true,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewVariableGroup(ctx, \"exampleVariableGroup\", \u0026azuredevops.VariableGroupArgs{\n\t\t\tProjectId:   exampleProject.ID(),\n\t\t\tDescription: pulumi.String(\"Example Variable Group Description\"),\n\t\t\tAllowAccess: pulumi.Bool(true),\n\t\t\tVariables: azuredevops.VariableGroupVariableArray{\n\t\t\t\t\u0026azuredevops.VariableGroupVariableArgs{\n\t\t\t\t\tName:  pulumi.String(\"key1\"),\n\t\t\t\t\tValue: pulumi.String(\"val1\"),\n\t\t\t\t},\n\t\t\t\t\u0026azuredevops.VariableGroupVariableArgs{\n\t\t\t\t\tName:        pulumi.String(\"key2\"),\n\t\t\t\t\tSecretValue: pulumi.String(\"val2\"),\n\t\t\t\t\tIsSecret:    pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.VariableGroup;\nimport com.pulumi.azuredevops.VariableGroupArgs;\nimport com.pulumi.azuredevops.inputs.VariableGroupVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .workItemTemplate(\"Agile\")\n            .versionControl(\"Git\")\n            .visibility(\"private\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleVariableGroup = new VariableGroup(\"exampleVariableGroup\", VariableGroupArgs.builder()        \n            .projectId(exampleProject.id())\n            .description(\"Example Variable Group Description\")\n            .allowAccess(true)\n            .variables(            \n                VariableGroupVariableArgs.builder()\n                    .name(\"key1\")\n                    .value(\"val1\")\n                    .build(),\n                VariableGroupVariableArgs.builder()\n                    .name(\"key2\")\n                    .secretValue(\"val2\")\n                    .isSecret(true)\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      workItemTemplate: Agile\n      versionControl: Git\n      visibility: private\n      description: Managed by Terraform\n  exampleVariableGroup:\n    type: azuredevops:VariableGroup\n    properties:\n      projectId: ${exampleProject.id}\n      description: Example Variable Group Description\n      allowAccess: true\n      variables:\n        - name: key1\n          value: val1\n        - name: key2\n          secretValue: val2\n          isSecret: true\n```\n\n{{% /example %}}\n{{% example %}}\n### With AzureRM Key Vault\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"Managed by Terraform\",\n});\nconst exampleServiceEndpointAzureRM = new azuredevops.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", {\n    projectId: exampleProject.id,\n    serviceEndpointName: \"Example AzureRM\",\n    description: \"Managed by Terraform\",\n    credentials: {\n        serviceprincipalid: \"00000000-0000-0000-0000-000000000000\",\n        serviceprincipalkey: \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    },\n    azurermSpnTenantid: \"00000000-0000-0000-0000-000000000000\",\n    azurermSubscriptionId: \"00000000-0000-0000-0000-000000000000\",\n    azurermSubscriptionName: \"Example Subscription Name\",\n});\nconst exampleVariableGroup = new azuredevops.VariableGroup(\"exampleVariableGroup\", {\n    projectId: exampleProject.id,\n    description: \"Example Variable Group Description\",\n    allowAccess: true,\n    keyVault: {\n        name: \"example-kv\",\n        serviceEndpointId: exampleServiceEndpointAzureRM.id,\n    },\n    variables: [\n        {\n            name: \"key1\",\n        },\n        {\n            name: \"key2\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"Managed by Terraform\")\nexample_service_endpoint_azure_rm = azuredevops.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\",\n    project_id=example_project.id,\n    service_endpoint_name=\"Example AzureRM\",\n    description=\"Managed by Terraform\",\n    credentials=azuredevops.ServiceEndpointAzureRMCredentialsArgs(\n        serviceprincipalid=\"00000000-0000-0000-0000-000000000000\",\n        serviceprincipalkey=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    ),\n    azurerm_spn_tenantid=\"00000000-0000-0000-0000-000000000000\",\n    azurerm_subscription_id=\"00000000-0000-0000-0000-000000000000\",\n    azurerm_subscription_name=\"Example Subscription Name\")\nexample_variable_group = azuredevops.VariableGroup(\"exampleVariableGroup\",\n    project_id=example_project.id,\n    description=\"Example Variable Group Description\",\n    allow_access=True,\n    key_vault=azuredevops.VariableGroupKeyVaultArgs(\n        name=\"example-kv\",\n        service_endpoint_id=example_service_endpoint_azure_rm.id,\n    ),\n    variables=[\n        azuredevops.VariableGroupVariableArgs(\n            name=\"key1\",\n        ),\n        azuredevops.VariableGroupVariableArgs(\n            name=\"key2\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        WorkItemTemplate = \"Agile\",\n        VersionControl = \"Git\",\n        Visibility = \"private\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleServiceEndpointAzureRM = new AzureDevOps.ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", new()\n    {\n        ProjectId = exampleProject.Id,\n        ServiceEndpointName = \"Example AzureRM\",\n        Description = \"Managed by Terraform\",\n        Credentials = new AzureDevOps.Inputs.ServiceEndpointAzureRMCredentialsArgs\n        {\n            Serviceprincipalid = \"00000000-0000-0000-0000-000000000000\",\n            Serviceprincipalkey = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n        },\n        AzurermSpnTenantid = \"00000000-0000-0000-0000-000000000000\",\n        AzurermSubscriptionId = \"00000000-0000-0000-0000-000000000000\",\n        AzurermSubscriptionName = \"Example Subscription Name\",\n    });\n\n    var exampleVariableGroup = new AzureDevOps.VariableGroup(\"exampleVariableGroup\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Description = \"Example Variable Group Description\",\n        AllowAccess = true,\n        KeyVault = new AzureDevOps.Inputs.VariableGroupKeyVaultArgs\n        {\n            Name = \"example-kv\",\n            ServiceEndpointId = exampleServiceEndpointAzureRM.Id,\n        },\n        Variables = new[]\n        {\n            new AzureDevOps.Inputs.VariableGroupVariableArgs\n            {\n                Name = \"key1\",\n            },\n            new AzureDevOps.Inputs.VariableGroupVariableArgs\n            {\n                Name = \"key2\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleServiceEndpointAzureRM, err := azuredevops.NewServiceEndpointAzureRM(ctx, \"exampleServiceEndpointAzureRM\", \u0026azuredevops.ServiceEndpointAzureRMArgs{\n\t\t\tProjectId:           exampleProject.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Example AzureRM\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t\tCredentials: \u0026azuredevops.ServiceEndpointAzureRMCredentialsArgs{\n\t\t\t\tServiceprincipalid:  pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\t\tServiceprincipalkey: pulumi.String(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"),\n\t\t\t},\n\t\t\tAzurermSpnTenantid:      pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurermSubscriptionId:   pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurermSubscriptionName: pulumi.String(\"Example Subscription Name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewVariableGroup(ctx, \"exampleVariableGroup\", \u0026azuredevops.VariableGroupArgs{\n\t\t\tProjectId:   exampleProject.ID(),\n\t\t\tDescription: pulumi.String(\"Example Variable Group Description\"),\n\t\t\tAllowAccess: pulumi.Bool(true),\n\t\t\tKeyVault: \u0026azuredevops.VariableGroupKeyVaultArgs{\n\t\t\t\tName:              pulumi.String(\"example-kv\"),\n\t\t\t\tServiceEndpointId: exampleServiceEndpointAzureRM.ID(),\n\t\t\t},\n\t\t\tVariables: azuredevops.VariableGroupVariableArray{\n\t\t\t\t\u0026azuredevops.VariableGroupVariableArgs{\n\t\t\t\t\tName: pulumi.String(\"key1\"),\n\t\t\t\t},\n\t\t\t\t\u0026azuredevops.VariableGroupVariableArgs{\n\t\t\t\t\tName: pulumi.String(\"key2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.ServiceEndpointAzureRM;\nimport com.pulumi.azuredevops.ServiceEndpointAzureRMArgs;\nimport com.pulumi.azuredevops.inputs.ServiceEndpointAzureRMCredentialsArgs;\nimport com.pulumi.azuredevops.VariableGroup;\nimport com.pulumi.azuredevops.VariableGroupArgs;\nimport com.pulumi.azuredevops.inputs.VariableGroupKeyVaultArgs;\nimport com.pulumi.azuredevops.inputs.VariableGroupVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .workItemTemplate(\"Agile\")\n            .versionControl(\"Git\")\n            .visibility(\"private\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleServiceEndpointAzureRM = new ServiceEndpointAzureRM(\"exampleServiceEndpointAzureRM\", ServiceEndpointAzureRMArgs.builder()        \n            .projectId(exampleProject.id())\n            .serviceEndpointName(\"Example AzureRM\")\n            .description(\"Managed by Terraform\")\n            .credentials(ServiceEndpointAzureRMCredentialsArgs.builder()\n                .serviceprincipalid(\"00000000-0000-0000-0000-000000000000\")\n                .serviceprincipalkey(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\")\n                .build())\n            .azurermSpnTenantid(\"00000000-0000-0000-0000-000000000000\")\n            .azurermSubscriptionId(\"00000000-0000-0000-0000-000000000000\")\n            .azurermSubscriptionName(\"Example Subscription Name\")\n            .build());\n\n        var exampleVariableGroup = new VariableGroup(\"exampleVariableGroup\", VariableGroupArgs.builder()        \n            .projectId(exampleProject.id())\n            .description(\"Example Variable Group Description\")\n            .allowAccess(true)\n            .keyVault(VariableGroupKeyVaultArgs.builder()\n                .name(\"example-kv\")\n                .serviceEndpointId(exampleServiceEndpointAzureRM.id())\n                .build())\n            .variables(            \n                VariableGroupVariableArgs.builder()\n                    .name(\"key1\")\n                    .build(),\n                VariableGroupVariableArgs.builder()\n                    .name(\"key2\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      workItemTemplate: Agile\n      versionControl: Git\n      visibility: private\n      description: Managed by Terraform\n  exampleServiceEndpointAzureRM:\n    type: azuredevops:ServiceEndpointAzureRM\n    properties:\n      projectId: ${exampleProject.id}\n      serviceEndpointName: Example AzureRM\n      description: Managed by Terraform\n      credentials:\n        serviceprincipalid: 00000000-0000-0000-0000-000000000000\n        serviceprincipalkey: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n      azurermSpnTenantid: 00000000-0000-0000-0000-000000000000\n      azurermSubscriptionId: 00000000-0000-0000-0000-000000000000\n      azurermSubscriptionName: Example Subscription Name\n  exampleVariableGroup:\n    type: azuredevops:VariableGroup\n    properties:\n      projectId: ${exampleProject.id}\n      description: Example Variable Group Description\n      allowAccess: true\n      keyVault:\n        name: example-kv\n        serviceEndpointId: ${exampleServiceEndpointAzureRM.id}\n      variables:\n        - name: key1\n        - name: key2\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Variable Groups](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/variablegroups?view=azure-devops-rest-7.0)\n- [Azure DevOps Service REST API 7.0 - Authorized Resources](https://docs.microsoft.com/en-us/rest/api/azure/devops/build/authorizedresources?view=azure-devops-rest-7.0)\n\n## PAT Permissions Required\n\n- **Variable Groups**: Read, Create, \u0026 Manage\n- **Build**: Read \u0026 execute\n- **Project and Team**: Read\n- **Token Administration**: Read \u0026 manage\n- **Tokens**: Read \u0026 manage\n- **Work Items**: Read\n\n\n## Import\n\n**Variable groups containing secret values cannot be imported.** Azure DevOps Variable groups can be imported using the project name/variable group ID or by the project Guid/variable group ID, e.g.\n\n```sh\n $ pulumi import azuredevops:index/variableGroup:VariableGroup example \"Example Project/10\"\n```\n\n or\n\n```sh\n $ pulumi import azuredevops:index/variableGroup:VariableGroup example 00000000-0000-0000-0000-000000000000/0\n```\n\n _Note that for secret variables, the import command retrieve blank value in the tfstate._ ",
            "properties": {
                "allowAccess": {
                    "type": "boolean",
                    "description": "Boolean that indicate if this variable group is shared by all pipelines of this project.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Variable Group.\n"
                },
                "keyVault": {
                    "$ref": "#/types/azuredevops:index/VariableGroupKeyVault:VariableGroupKeyVault",
                    "description": "A list of `key_vault` blocks as documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Variable Group.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/VariableGroupVariable:VariableGroupVariable"
                    },
                    "description": "One or more `variable` blocks as documented below.\n"
                }
            },
            "required": [
                "name",
                "projectId",
                "variables"
            ],
            "inputProperties": {
                "allowAccess": {
                    "type": "boolean",
                    "description": "Boolean that indicate if this variable group is shared by all pipelines of this project.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Variable Group.\n"
                },
                "keyVault": {
                    "$ref": "#/types/azuredevops:index/VariableGroupKeyVault:VariableGroupKeyVault",
                    "description": "A list of `key_vault` blocks as documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Variable Group.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project.\n",
                    "willReplaceOnChanges": true
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/VariableGroupVariable:VariableGroupVariable"
                    },
                    "description": "One or more `variable` blocks as documented below.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "variables"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VariableGroup resources.\n",
                "properties": {
                    "allowAccess": {
                        "type": "boolean",
                        "description": "Boolean that indicate if this variable group is shared by all pipelines of this project.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Variable Group.\n"
                    },
                    "keyVault": {
                        "$ref": "#/types/azuredevops:index/VariableGroupKeyVault:VariableGroupKeyVault",
                        "description": "A list of `key_vault` blocks as documented below.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Variable Group.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:index/VariableGroupVariable:VariableGroupVariable"
                        },
                        "description": "One or more `variable` blocks as documented below.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Pipeline/variableGroup:VariableGroup"
                }
            ]
        },
        "azuredevops:index/workItemQueryPermissions:WorkItemQueryPermissions": {
            "description": "Manages permissions for Work Item Queries. \n\n\u003e **Note** Permissions can be assigned to group principals and not to single user principals.\n\n## Permission levels\n\nPermission for Work Item Queries within Azure DevOps can be applied on two different levels.\nThose levels are reflected by specifying (or omitting) values for the arguments `project_id` and `path`.\n\n### Project level\n\nPermissions for all Work Item Queries inside a project (existing or newly created ones) are specified, if only the argument `project_id` has a value.\n\n#### Example usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = new azuredevops.Project(\"example\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"Managed by Terraform\",\n});\nconst example-readers = azuredevops.getGroupOutput({\n    projectId: example.id,\n    name: \"Readers\",\n});\nconst project_wiq_root_permissions = new azuredevops.WorkItemQueryPermissions(\"project-wiq-root-permissions\", {\n    projectId: example.id,\n    principal: example_readers.apply(example_readers =\u003e example_readers.id),\n    permissions: {\n        CreateRepository: \"Deny\",\n        DeleteRepository: \"Deny\",\n        RenameRepository: \"NotSet\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.Project(\"example\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"Managed by Terraform\")\nexample_readers = azuredevops.get_group_output(project_id=example.id,\n    name=\"Readers\")\nproject_wiq_root_permissions = azuredevops.WorkItemQueryPermissions(\"project-wiq-root-permissions\",\n    project_id=example.id,\n    principal=example_readers.id,\n    permissions={\n        \"CreateRepository\": \"Deny\",\n        \"DeleteRepository\": \"Deny\",\n        \"RenameRepository\": \"NotSet\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureDevOps.Project(\"example\", new()\n    {\n        WorkItemTemplate = \"Agile\",\n        VersionControl = \"Git\",\n        Visibility = \"private\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var example_readers = AzureDevOps.GetGroup.Invoke(new()\n    {\n        ProjectId = example.Id,\n        Name = \"Readers\",\n    });\n\n    var project_wiq_root_permissions = new AzureDevOps.WorkItemQueryPermissions(\"project-wiq-root-permissions\", new()\n    {\n        ProjectId = example.Id,\n        Principal = example_readers.Apply(example_readers =\u003e example_readers.Apply(getGroupResult =\u003e getGroupResult.Id)),\n        Permissions = \n        {\n            { \"CreateRepository\", \"Deny\" },\n            { \"DeleteRepository\", \"Deny\" },\n            { \"RenameRepository\", \"NotSet\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuredevops.NewProject(ctx, \"example\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample_readers := azuredevops.LookupGroupOutput(ctx, azuredevops.GetGroupOutputArgs{\n\t\t\tProjectId: example.ID(),\n\t\t\tName:      pulumi.String(\"Readers\"),\n\t\t}, nil)\n\t\t_, err = azuredevops.NewWorkItemQueryPermissions(ctx, \"project-wiq-root-permissions\", \u0026azuredevops.WorkItemQueryPermissionsArgs{\n\t\t\tProjectId: example.ID(),\n\t\t\tPrincipal: example_readers.ApplyT(func(example_readers azuredevops.GetGroupResult) (*string, error) {\n\t\t\t\treturn \u0026example_readers.Id, nil\n\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"CreateRepository\": pulumi.String(\"Deny\"),\n\t\t\t\t\"DeleteRepository\": pulumi.String(\"Deny\"),\n\t\t\t\t\"RenameRepository\": pulumi.String(\"NotSet\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetGroupArgs;\nimport com.pulumi.azuredevops.WorkItemQueryPermissions;\nimport com.pulumi.azuredevops.WorkItemQueryPermissionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Project(\"example\", ProjectArgs.builder()        \n            .workItemTemplate(\"Agile\")\n            .versionControl(\"Git\")\n            .visibility(\"private\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        final var example-readers = AzuredevopsFunctions.getGroup(GetGroupArgs.builder()\n            .projectId(example.id())\n            .name(\"Readers\")\n            .build());\n\n        var project_wiq_root_permissions = new WorkItemQueryPermissions(\"project-wiq-root-permissions\", WorkItemQueryPermissionsArgs.builder()        \n            .projectId(example.id())\n            .principal(example_readers.applyValue(example_readers -\u003e example_readers.id()))\n            .permissions(Map.ofEntries(\n                Map.entry(\"CreateRepository\", \"Deny\"),\n                Map.entry(\"DeleteRepository\", \"Deny\"),\n                Map.entry(\"RenameRepository\", \"NotSet\")\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuredevops:Project\n    properties:\n      workItemTemplate: Agile\n      versionControl: Git\n      visibility: private\n      description: Managed by Terraform\n  project-wiq-root-permissions:\n    type: azuredevops:WorkItemQueryPermissions\n    properties:\n      projectId: ${example.id}\n      principal: ${[\"example-readers\"].id}\n      permissions:\n        CreateRepository: Deny\n        DeleteRepository: Deny\n        RenameRepository: NotSet\nvariables:\n  example-readers:\n    fn::invoke:\n      Function: azuredevops:getGroup\n      Arguments:\n        projectId: ${example.id}\n        name: Readers\n```\n\n### Shared Queries folder level\n\nPermissions for a specific folder inside Shared Queries are specified if the arguments `project_id` and `path` are set.\n\n\u003e **Note** To set permissions for the Shared Queries folder itself use `/` as path value\n\n#### Example usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = new azuredevops.Project(\"example\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"Managed by Terraform\",\n});\nconst example-readers = azuredevops.getGroupOutput({\n    projectId: example.id,\n    name: \"Readers\",\n});\nconst example_permissions = new azuredevops.WorkItemQueryPermissions(\"example-permissions\", {\n    projectId: example.id,\n    path: \"/Team\",\n    principal: example_readers.apply(example_readers =\u003e example_readers.id),\n    permissions: {\n        Contribute: \"Allow\",\n        Delete: \"Deny\",\n        Read: \"NotSet\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.Project(\"example\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"Managed by Terraform\")\nexample_readers = azuredevops.get_group_output(project_id=example.id,\n    name=\"Readers\")\nexample_permissions = azuredevops.WorkItemQueryPermissions(\"example-permissions\",\n    project_id=example.id,\n    path=\"/Team\",\n    principal=example_readers.id,\n    permissions={\n        \"Contribute\": \"Allow\",\n        \"Delete\": \"Deny\",\n        \"Read\": \"NotSet\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureDevOps.Project(\"example\", new()\n    {\n        WorkItemTemplate = \"Agile\",\n        VersionControl = \"Git\",\n        Visibility = \"private\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var example_readers = AzureDevOps.GetGroup.Invoke(new()\n    {\n        ProjectId = example.Id,\n        Name = \"Readers\",\n    });\n\n    var example_permissions = new AzureDevOps.WorkItemQueryPermissions(\"example-permissions\", new()\n    {\n        ProjectId = example.Id,\n        Path = \"/Team\",\n        Principal = example_readers.Apply(example_readers =\u003e example_readers.Apply(getGroupResult =\u003e getGroupResult.Id)),\n        Permissions = \n        {\n            { \"Contribute\", \"Allow\" },\n            { \"Delete\", \"Deny\" },\n            { \"Read\", \"NotSet\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuredevops.NewProject(ctx, \"example\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample_readers := azuredevops.LookupGroupOutput(ctx, azuredevops.GetGroupOutputArgs{\n\t\t\tProjectId: example.ID(),\n\t\t\tName:      pulumi.String(\"Readers\"),\n\t\t}, nil)\n\t\t_, err = azuredevops.NewWorkItemQueryPermissions(ctx, \"example-permissions\", \u0026azuredevops.WorkItemQueryPermissionsArgs{\n\t\t\tProjectId: example.ID(),\n\t\t\tPath:      pulumi.String(\"/Team\"),\n\t\t\tPrincipal: example_readers.ApplyT(func(example_readers azuredevops.GetGroupResult) (*string, error) {\n\t\t\t\treturn \u0026example_readers.Id, nil\n\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"Contribute\": pulumi.String(\"Allow\"),\n\t\t\t\t\"Delete\":     pulumi.String(\"Deny\"),\n\t\t\t\t\"Read\":       pulumi.String(\"NotSet\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetGroupArgs;\nimport com.pulumi.azuredevops.WorkItemQueryPermissions;\nimport com.pulumi.azuredevops.WorkItemQueryPermissionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Project(\"example\", ProjectArgs.builder()        \n            .workItemTemplate(\"Agile\")\n            .versionControl(\"Git\")\n            .visibility(\"private\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        final var example-readers = AzuredevopsFunctions.getGroup(GetGroupArgs.builder()\n            .projectId(example.id())\n            .name(\"Readers\")\n            .build());\n\n        var example_permissions = new WorkItemQueryPermissions(\"example-permissions\", WorkItemQueryPermissionsArgs.builder()        \n            .projectId(example.id())\n            .path(\"/Team\")\n            .principal(example_readers.applyValue(example_readers -\u003e example_readers.id()))\n            .permissions(Map.ofEntries(\n                Map.entry(\"Contribute\", \"Allow\"),\n                Map.entry(\"Delete\", \"Deny\"),\n                Map.entry(\"Read\", \"NotSet\")\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuredevops:Project\n    properties:\n      workItemTemplate: Agile\n      versionControl: Git\n      visibility: private\n      description: Managed by Terraform\n  example-permissions:\n    type: azuredevops:WorkItemQueryPermissions\n    properties:\n      projectId: ${example.id}\n      path: /Team\n      principal: ${[\"example-readers\"].id}\n      permissions:\n        Contribute: Allow\n        Delete: Deny\n        Read: NotSet\nvariables:\n  example-readers:\n    fn::invoke:\n      Function: azuredevops:getGroup\n      Arguments:\n        projectId: ${example.id}\n        name: Readers\n```\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = new azuredevops.Project(\"example\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"Managed by Terraform\",\n});\nconst example-readers = azuredevops.getGroupOutput({\n    projectId: example.id,\n    name: \"Readers\",\n});\nconst example-contributors = azuredevops.getGroupOutput({\n    projectId: example.id,\n    name: \"Contributors\",\n});\nconst example_project_permissions = new azuredevops.WorkItemQueryPermissions(\"example-project-permissions\", {\n    projectId: example.id,\n    principal: example_readers.apply(example_readers =\u003e example_readers.id),\n    permissions: {\n        Read: \"Allow\",\n        Delete: \"Deny\",\n        Contribute: \"Deny\",\n        ManagePermissions: \"Deny\",\n    },\n});\nconst example_sharedqueries_permissions = new azuredevops.WorkItemQueryPermissions(\"example-sharedqueries-permissions\", {\n    projectId: example.id,\n    path: \"/\",\n    principal: example_contributors.apply(example_contributors =\u003e example_contributors.id),\n    permissions: {\n        Read: \"Allow\",\n        Delete: \"Deny\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.Project(\"example\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"Managed by Terraform\")\nexample_readers = azuredevops.get_group_output(project_id=example.id,\n    name=\"Readers\")\nexample_contributors = azuredevops.get_group_output(project_id=example.id,\n    name=\"Contributors\")\nexample_project_permissions = azuredevops.WorkItemQueryPermissions(\"example-project-permissions\",\n    project_id=example.id,\n    principal=example_readers.id,\n    permissions={\n        \"Read\": \"Allow\",\n        \"Delete\": \"Deny\",\n        \"Contribute\": \"Deny\",\n        \"ManagePermissions\": \"Deny\",\n    })\nexample_sharedqueries_permissions = azuredevops.WorkItemQueryPermissions(\"example-sharedqueries-permissions\",\n    project_id=example.id,\n    path=\"/\",\n    principal=example_contributors.id,\n    permissions={\n        \"Read\": \"Allow\",\n        \"Delete\": \"Deny\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureDevOps.Project(\"example\", new()\n    {\n        WorkItemTemplate = \"Agile\",\n        VersionControl = \"Git\",\n        Visibility = \"private\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var example_readers = AzureDevOps.GetGroup.Invoke(new()\n    {\n        ProjectId = example.Id,\n        Name = \"Readers\",\n    });\n\n    var example_contributors = AzureDevOps.GetGroup.Invoke(new()\n    {\n        ProjectId = example.Id,\n        Name = \"Contributors\",\n    });\n\n    var example_project_permissions = new AzureDevOps.WorkItemQueryPermissions(\"example-project-permissions\", new()\n    {\n        ProjectId = example.Id,\n        Principal = example_readers.Apply(example_readers =\u003e example_readers.Apply(getGroupResult =\u003e getGroupResult.Id)),\n        Permissions = \n        {\n            { \"Read\", \"Allow\" },\n            { \"Delete\", \"Deny\" },\n            { \"Contribute\", \"Deny\" },\n            { \"ManagePermissions\", \"Deny\" },\n        },\n    });\n\n    var example_sharedqueries_permissions = new AzureDevOps.WorkItemQueryPermissions(\"example-sharedqueries-permissions\", new()\n    {\n        ProjectId = example.Id,\n        Path = \"/\",\n        Principal = example_contributors.Apply(example_contributors =\u003e example_contributors.Apply(getGroupResult =\u003e getGroupResult.Id)),\n        Permissions = \n        {\n            { \"Read\", \"Allow\" },\n            { \"Delete\", \"Deny\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuredevops.NewProject(ctx, \"example\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample_readers := azuredevops.LookupGroupOutput(ctx, azuredevops.GetGroupOutputArgs{\n\t\t\tProjectId: example.ID(),\n\t\t\tName:      pulumi.String(\"Readers\"),\n\t\t}, nil)\n\t\texample_contributors := azuredevops.LookupGroupOutput(ctx, azuredevops.GetGroupOutputArgs{\n\t\t\tProjectId: example.ID(),\n\t\t\tName:      pulumi.String(\"Contributors\"),\n\t\t}, nil)\n\t\t_, err = azuredevops.NewWorkItemQueryPermissions(ctx, \"example-project-permissions\", \u0026azuredevops.WorkItemQueryPermissionsArgs{\n\t\t\tProjectId: example.ID(),\n\t\t\tPrincipal: example_readers.ApplyT(func(example_readers azuredevops.GetGroupResult) (*string, error) {\n\t\t\t\treturn \u0026example_readers.Id, nil\n\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"Read\":              pulumi.String(\"Allow\"),\n\t\t\t\t\"Delete\":            pulumi.String(\"Deny\"),\n\t\t\t\t\"Contribute\":        pulumi.String(\"Deny\"),\n\t\t\t\t\"ManagePermissions\": pulumi.String(\"Deny\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewWorkItemQueryPermissions(ctx, \"example-sharedqueries-permissions\", \u0026azuredevops.WorkItemQueryPermissionsArgs{\n\t\t\tProjectId: example.ID(),\n\t\t\tPath:      pulumi.String(\"/\"),\n\t\t\tPrincipal: example_contributors.ApplyT(func(example_contributors azuredevops.GetGroupResult) (*string, error) {\n\t\t\t\treturn \u0026example_contributors.Id, nil\n\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"Read\":   pulumi.String(\"Allow\"),\n\t\t\t\t\"Delete\": pulumi.String(\"Deny\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetGroupArgs;\nimport com.pulumi.azuredevops.WorkItemQueryPermissions;\nimport com.pulumi.azuredevops.WorkItemQueryPermissionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Project(\"example\", ProjectArgs.builder()        \n            .workItemTemplate(\"Agile\")\n            .versionControl(\"Git\")\n            .visibility(\"private\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        final var example-readers = AzuredevopsFunctions.getGroup(GetGroupArgs.builder()\n            .projectId(example.id())\n            .name(\"Readers\")\n            .build());\n\n        final var example-contributors = AzuredevopsFunctions.getGroup(GetGroupArgs.builder()\n            .projectId(example.id())\n            .name(\"Contributors\")\n            .build());\n\n        var example_project_permissions = new WorkItemQueryPermissions(\"example-project-permissions\", WorkItemQueryPermissionsArgs.builder()        \n            .projectId(example.id())\n            .principal(example_readers.applyValue(example_readers -\u003e example_readers.id()))\n            .permissions(Map.ofEntries(\n                Map.entry(\"Read\", \"Allow\"),\n                Map.entry(\"Delete\", \"Deny\"),\n                Map.entry(\"Contribute\", \"Deny\"),\n                Map.entry(\"ManagePermissions\", \"Deny\")\n            ))\n            .build());\n\n        var example_sharedqueries_permissions = new WorkItemQueryPermissions(\"example-sharedqueries-permissions\", WorkItemQueryPermissionsArgs.builder()        \n            .projectId(example.id())\n            .path(\"/\")\n            .principal(example_contributors.applyValue(example_contributors -\u003e example_contributors.id()))\n            .permissions(Map.ofEntries(\n                Map.entry(\"Read\", \"Allow\"),\n                Map.entry(\"Delete\", \"Deny\")\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuredevops:Project\n    properties:\n      workItemTemplate: Agile\n      versionControl: Git\n      visibility: private\n      description: Managed by Terraform\n  example-project-permissions:\n    type: azuredevops:WorkItemQueryPermissions\n    properties:\n      projectId: ${example.id}\n      principal: ${[\"example-readers\"].id}\n      permissions:\n        Read: Allow\n        Delete: Deny\n        Contribute: Deny\n        ManagePermissions: Deny\n  example-sharedqueries-permissions:\n    type: azuredevops:WorkItemQueryPermissions\n    properties:\n      projectId: ${example.id}\n      path: /\n      principal: ${[\"example-contributors\"].id}\n      permissions:\n        Read: Allow\n        Delete: Deny\nvariables:\n  example-readers:\n    fn::invoke:\n      Function: azuredevops:getGroup\n      Arguments:\n        projectId: ${example.id}\n        name: Readers\n  example-contributors:\n    fn::invoke:\n      Function: azuredevops:getGroup\n      Arguments:\n        projectId: ${example.id}\n        name: Contributors\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 7.0 - Security](https://docs.microsoft.com/en-us/rest/api/azure/devops/security/?view=azure-devops-rest-7.0)\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: vso.security_manage - Grants the ability to read, write, and manage security permissions.\n\n\n## Import\n\nThe resource does not support import. ",
            "properties": {
                "path": {
                    "type": "string",
                    "description": "Path to a query or folder beneath `Shared Queries`\n"
                },
                "permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "the permissions to assign. The following permissions are available\n\n| Permissions              | Description                        |\n|--------------------------|------------------------------------|\n| Read                     | Read                               |\n| Contribute               | Contribute                         |\n| Delete                   | Delete                             |\n| ManagePermissions        | Manage Permissions                 |\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The **group** principal to assign the permissions.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project to assign the permissions.\n"
                },
                "replace": {
                    "type": "boolean",
                    "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`\n"
                }
            },
            "required": [
                "permissions",
                "principal",
                "projectId"
            ],
            "inputProperties": {
                "path": {
                    "type": "string",
                    "description": "Path to a query or folder beneath `Shared Queries`\n",
                    "willReplaceOnChanges": true
                },
                "permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "the permissions to assign. The following permissions are available\n\n| Permissions              | Description                        |\n|--------------------------|------------------------------------|\n| Read                     | Read                               |\n| Contribute               | Contribute                         |\n| Delete                   | Delete                             |\n| ManagePermissions        | Manage Permissions                 |\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The **group** principal to assign the permissions.\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project to assign the permissions.\n",
                    "willReplaceOnChanges": true
                },
                "replace": {
                    "type": "boolean",
                    "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`\n"
                }
            },
            "requiredInputs": [
                "permissions",
                "principal",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkItemQueryPermissions resources.\n",
                "properties": {
                    "path": {
                        "type": "string",
                        "description": "Path to a query or folder beneath `Shared Queries`\n",
                        "willReplaceOnChanges": true
                    },
                    "permissions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "the permissions to assign. The following permissions are available\n\n| Permissions              | Description                        |\n|--------------------------|------------------------------------|\n| Read                     | Read                               |\n| Contribute               | Contribute                         |\n| Delete                   | Delete                             |\n| ManagePermissions        | Manage Permissions                 |\n"
                    },
                    "principal": {
                        "type": "string",
                        "description": "The **group** principal to assign the permissions.\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project to assign the permissions.\n",
                        "willReplaceOnChanges": true
                    },
                    "replace": {
                        "type": "boolean",
                        "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/workitem:Workitem": {
            "description": "Manages a Work Item in Azure Devops.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Basic usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"Managed by Terraform\",\n});\nconst exampleWorkitem = new azuredevops.Workitem(\"exampleWorkitem\", {\n    projectId: exampleProject.id,\n    title: \"Example Work Item\",\n    type: \"Issue\",\n    state: \"Active\",\n    tags: [\"Tag\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"Managed by Terraform\")\nexample_workitem = azuredevops.Workitem(\"exampleWorkitem\",\n    project_id=example_project.id,\n    title=\"Example Work Item\",\n    type=\"Issue\",\n    state=\"Active\",\n    tags=[\"Tag\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        WorkItemTemplate = \"Agile\",\n        VersionControl = \"Git\",\n        Visibility = \"private\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleWorkitem = new AzureDevOps.Workitem(\"exampleWorkitem\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Title = \"Example Work Item\",\n        Type = \"Issue\",\n        State = \"Active\",\n        Tags = new[]\n        {\n            \"Tag\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewWorkitem(ctx, \"exampleWorkitem\", \u0026azuredevops.WorkitemArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tTitle:     pulumi.String(\"Example Work Item\"),\n\t\t\tType:      pulumi.String(\"Issue\"),\n\t\t\tState:     pulumi.String(\"Active\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Tag\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.Workitem;\nimport com.pulumi.azuredevops.WorkitemArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .workItemTemplate(\"Agile\")\n            .versionControl(\"Git\")\n            .visibility(\"private\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleWorkitem = new Workitem(\"exampleWorkitem\", WorkitemArgs.builder()        \n            .projectId(exampleProject.id())\n            .title(\"Example Work Item\")\n            .type(\"Issue\")\n            .state(\"Active\")\n            .tags(\"Tag\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      workItemTemplate: Agile\n      versionControl: Git\n      visibility: private\n      description: Managed by Terraform\n  exampleWorkitem:\n    type: azuredevops:Workitem\n    properties:\n      projectId: ${exampleProject.id}\n      title: Example Work Item\n      type: Issue\n      state: Active\n      tags:\n        - Tag\n```\n{{% /example %}}\n{{% example %}}\n### With custom fields\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"Managed by Terraform\",\n});\nconst exampleWorkitem = new azuredevops.Workitem(\"exampleWorkitem\", {\n    projectId: exampleProject.id,\n    title: \"Example Work Item\",\n    type: \"Issue\",\n    state: \"Active\",\n    tags: [\"Tag\"],\n    customFields: {\n        example: \"example\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"Managed by Terraform\")\nexample_workitem = azuredevops.Workitem(\"exampleWorkitem\",\n    project_id=example_project.id,\n    title=\"Example Work Item\",\n    type=\"Issue\",\n    state=\"Active\",\n    tags=[\"Tag\"],\n    custom_fields={\n        \"example\": \"example\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        WorkItemTemplate = \"Agile\",\n        VersionControl = \"Git\",\n        Visibility = \"private\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleWorkitem = new AzureDevOps.Workitem(\"exampleWorkitem\", new()\n    {\n        ProjectId = exampleProject.Id,\n        Title = \"Example Work Item\",\n        Type = \"Issue\",\n        State = \"Active\",\n        Tags = new[]\n        {\n            \"Tag\",\n        },\n        CustomFields = \n        {\n            { \"example\", \"example\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewWorkitem(ctx, \"exampleWorkitem\", \u0026azuredevops.WorkitemArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tTitle:     pulumi.String(\"Example Work Item\"),\n\t\t\tType:      pulumi.String(\"Issue\"),\n\t\t\tState:     pulumi.String(\"Active\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Tag\"),\n\t\t\t},\n\t\t\tCustomFields: pulumi.StringMap{\n\t\t\t\t\"example\": pulumi.String(\"example\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.Workitem;\nimport com.pulumi.azuredevops.WorkitemArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .workItemTemplate(\"Agile\")\n            .versionControl(\"Git\")\n            .visibility(\"private\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        var exampleWorkitem = new Workitem(\"exampleWorkitem\", WorkitemArgs.builder()        \n            .projectId(exampleProject.id())\n            .title(\"Example Work Item\")\n            .type(\"Issue\")\n            .state(\"Active\")\n            .tags(\"Tag\")\n            .customFields(Map.of(\"example\", \"example\"))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      workItemTemplate: Agile\n      versionControl: Git\n      visibility: private\n      description: Managed by Terraform\n  exampleWorkitem:\n    type: azuredevops:Workitem\n    properties:\n      projectId: ${exampleProject.id}\n      title: Example Work Item\n      type: Issue\n      state: Active\n      tags:\n        - Tag\n      customFields:\n        example: example\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nWork Item resource does not support import. ",
            "properties": {
                "areaPath": {
                    "type": "string",
                    "description": "Specifies the area where the Work Item is used.\n"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Specifies a list with Custom Fields for the Work Item.\n"
                },
                "iterationPath": {
                    "type": "string",
                    "description": "Specifies the iteration in which the Work Item is used.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Project.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the Work Item. The four main states that are defined for the User Story (`Agile`) are `New`, `Active`, `Resolved`, and `Closed`. See [Workflow states](https://learn.microsoft.com/en-us/azure/devops/boards/work-items/workflow-and-state-categories?view=azure-devops\u0026tabs=agile-process#workflow-states) for more details.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of Tags.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The Title of the Work Item.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The Type of the Work Item. The work item type varies depending on the process used when creating the project(`Agile`, `Basic`, `Scrum`, `Scrum`). See [Work Item Types](https://learn.microsoft.com/en-us/azure/devops/boards/work-items/about-work-items?view=azure-devops) for more details.\n"
                }
            },
            "required": [
                "areaPath",
                "iterationPath",
                "projectId",
                "state",
                "title",
                "type"
            ],
            "inputProperties": {
                "areaPath": {
                    "type": "string",
                    "description": "Specifies the area where the Work Item is used.\n"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Specifies a list with Custom Fields for the Work Item.\n"
                },
                "iterationPath": {
                    "type": "string",
                    "description": "Specifies the iteration in which the Work Item is used.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the Project.\n",
                    "willReplaceOnChanges": true
                },
                "state": {
                    "type": "string",
                    "description": "The state of the Work Item. The four main states that are defined for the User Story (`Agile`) are `New`, `Active`, `Resolved`, and `Closed`. See [Workflow states](https://learn.microsoft.com/en-us/azure/devops/boards/work-items/workflow-and-state-categories?view=azure-devops\u0026tabs=agile-process#workflow-states) for more details.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of Tags.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The Title of the Work Item.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The Type of the Work Item. The work item type varies depending on the process used when creating the project(`Agile`, `Basic`, `Scrum`, `Scrum`). See [Work Item Types](https://learn.microsoft.com/en-us/azure/devops/boards/work-items/about-work-items?view=azure-devops) for more details.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "projectId",
                "title",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Workitem resources.\n",
                "properties": {
                    "areaPath": {
                        "type": "string",
                        "description": "Specifies the area where the Work Item is used.\n"
                    },
                    "customFields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Specifies a list with Custom Fields for the Work Item.\n"
                    },
                    "iterationPath": {
                        "type": "string",
                        "description": "Specifies the iteration in which the Work Item is used.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the Project.\n",
                        "willReplaceOnChanges": true
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of the Work Item. The four main states that are defined for the User Story (`Agile`) are `New`, `Active`, `Resolved`, and `Closed`. See [Workflow states](https://learn.microsoft.com/en-us/azure/devops/boards/work-items/workflow-and-state-categories?view=azure-devops\u0026tabs=agile-process#workflow-states) for more details.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies a list of Tags.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The Title of the Work Item.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The Type of the Work Item. The work item type varies depending on the process used when creating the project(`Agile`, `Basic`, `Scrum`, `Scrum`). See [Work Item Types](https://learn.microsoft.com/en-us/azure/devops/boards/work-items/about-work-items?view=azure-devops) for more details.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "azuredevops:Agent/getPool:getPool": {
            "deprecationMessage": "azuredevops.agent.getPool has been deprecated in favor of azuredevops.getPool",
            "description": "Use this data source to access information about an existing Agent Pool within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = azuredevops.getPool({\n    name: \"Example Agent Pool\",\n});\nexport const name = example.then(example =\u003e example.name);\nexport const poolType = example.then(example =\u003e example.poolType);\nexport const autoProvision = example.then(example =\u003e example.autoProvision);\nexport const autoUpdate = example.then(example =\u003e example.autoUpdate);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.get_pool(name=\"Example Agent Pool\")\npulumi.export(\"name\", example.name)\npulumi.export(\"poolType\", example.pool_type)\npulumi.export(\"autoProvision\", example.auto_provision)\npulumi.export(\"autoUpdate\", example.auto_update)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureDevOps.GetPool.Invoke(new()\n    {\n        Name = \"Example Agent Pool\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"name\"] = example.Apply(getPoolResult =\u003e getPoolResult.Name),\n        [\"poolType\"] = example.Apply(getPoolResult =\u003e getPoolResult.PoolType),\n        [\"autoProvision\"] = example.Apply(getPoolResult =\u003e getPoolResult.AutoProvision),\n        [\"autoUpdate\"] = example.Apply(getPoolResult =\u003e getPoolResult.AutoUpdate),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuredevops.LookupPool(ctx, \u0026azuredevops.LookupPoolArgs{\n\t\t\tName: \"Example Agent Pool\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"name\", example.Name)\n\t\tctx.Export(\"poolType\", example.PoolType)\n\t\tctx.Export(\"autoProvision\", example.AutoProvision)\n\t\tctx.Export(\"autoUpdate\", example.AutoUpdate)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetPoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzuredevopsFunctions.getPool(GetPoolArgs.builder()\n            .name(\"Example Agent Pool\")\n            .build());\n\n        ctx.export(\"name\", example.applyValue(getPoolResult -\u003e getPoolResult.name()));\n        ctx.export(\"poolType\", example.applyValue(getPoolResult -\u003e getPoolResult.poolType()));\n        ctx.export(\"autoProvision\", example.applyValue(getPoolResult -\u003e getPoolResult.autoProvision()));\n        ctx.export(\"autoUpdate\", example.applyValue(getPoolResult -\u003e getPoolResult.autoUpdate()));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: azuredevops:getPool\n      Arguments:\n        name: Example Agent Pool\noutputs:\n  name: ${example.name}\n  poolType: ${example.poolType}\n  autoProvision: ${example.autoProvision}\n  autoUpdate: ${example.autoUpdate}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Agent Pools - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/pools/get?view=azure-devops-rest-7.0)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPool.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Agent Pool.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPool.\n",
                "properties": {
                    "autoProvision": {
                        "type": "boolean"
                    },
                    "autoUpdate": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "poolType": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "autoProvision",
                    "autoUpdate",
                    "name",
                    "poolType",
                    "id"
                ]
            }
        },
        "azuredevops:Agent/getPools:getPools": {
            "deprecationMessage": "azuredevops.agent.getPools has been deprecated in favor of azuredevops.getPools",
            "description": "Use this data source to access information about existing Agent Pools within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = azuredevops.getPools({});\nexport const agentPoolName = example.then(example =\u003e example.agentPools.map(__item =\u003e __item.name));\nexport const autoProvision = example.then(example =\u003e example.agentPools.map(__item =\u003e __item.autoProvision));\nexport const autoUpdate = example.then(example =\u003e example.agentPools.map(__item =\u003e __item.autoUpdate));\nexport const poolType = example.then(example =\u003e example.agentPools.map(__item =\u003e __item.poolType));\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.get_pools()\npulumi.export(\"agentPoolName\", [__item.name for __item in example.agent_pools])\npulumi.export(\"autoProvision\", [__item.auto_provision for __item in example.agent_pools])\npulumi.export(\"autoUpdate\", [__item.auto_update for __item in example.agent_pools])\npulumi.export(\"poolType\", [__item.pool_type for __item in example.agent_pools])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureDevOps.GetPools.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"agentPoolName\"] = example.Apply(getPoolsResult =\u003e getPoolsResult.AgentPools).Select(__item =\u003e __item.Name).ToList(),\n        [\"autoProvision\"] = example.Apply(getPoolsResult =\u003e getPoolsResult.AgentPools).Select(__item =\u003e __item.AutoProvision).ToList(),\n        [\"autoUpdate\"] = example.Apply(getPoolsResult =\u003e getPoolsResult.AgentPools).Select(__item =\u003e __item.AutoUpdate).ToList(),\n        [\"poolType\"] = example.Apply(getPoolsResult =\u003e getPoolsResult.AgentPools).Select(__item =\u003e __item.PoolType).ToList(),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuredevops.GetPools(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tvar splat0 []*string\n\t\tfor _, val0 := range example.AgentPools {\n\t\t\tsplat0 = append(splat0, val0.Name)\n\t\t}\n\t\tctx.Export(\"agentPoolName\", splat0)\n\t\tvar splat1 []*bool\n\t\tfor _, val0 := range example.AgentPools {\n\t\t\tsplat1 = append(splat1, val0.AutoProvision)\n\t\t}\n\t\tctx.Export(\"autoProvision\", splat1)\n\t\tvar splat2 []*bool\n\t\tfor _, val0 := range example.AgentPools {\n\t\t\tsplat2 = append(splat2, val0.AutoUpdate)\n\t\t}\n\t\tctx.Export(\"autoUpdate\", splat2)\n\t\tvar splat3 []*string\n\t\tfor _, val0 := range example.AgentPools {\n\t\t\tsplat3 = append(splat3, val0.PoolType)\n\t\t}\n\t\tctx.Export(\"poolType\", splat3)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzuredevopsFunctions.getPools();\n\n        ctx.export(\"agentPoolName\", example.applyValue(getPoolsResult -\u003e getPoolsResult.agentPools()).stream().map(element -\u003e element.name()).collect(toList()));\n        ctx.export(\"autoProvision\", example.applyValue(getPoolsResult -\u003e getPoolsResult.agentPools()).stream().map(element -\u003e element.autoProvision()).collect(toList()));\n        ctx.export(\"autoUpdate\", example.applyValue(getPoolsResult -\u003e getPoolsResult.agentPools()).stream().map(element -\u003e element.autoUpdate()).collect(toList()));\n        ctx.export(\"poolType\", example.applyValue(getPoolsResult -\u003e getPoolsResult.agentPools()).stream().map(element -\u003e element.poolType()).collect(toList()));\n    }\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Agent Pools - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/pools/get?view=azure-devops-rest-7.0)\n",
            "outputs": {
                "description": "A collection of values returned by getPools.\n",
                "properties": {
                    "agentPools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:Agent/getPoolsAgentPool:getPoolsAgentPool"
                        },
                        "description": "A list of existing agent pools in your Azure DevOps Organization with the following details about every agent pool:\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "agentPools",
                    "id"
                ]
            }
        },
        "azuredevops:Core/getClientConfig:getClientConfig": {
            "deprecationMessage": "azuredevops.core.getClientConfig has been deprecated in favor of azuredevops.getClientConfig",
            "description": "Use this data source to access information about the Azure DevOps organization configured for the provider.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = azuredevops.getClientConfig({});\nexport const orgUrl = example.then(example =\u003e example.organizationUrl);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.get_client_config()\npulumi.export(\"orgUrl\", example.organization_url)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureDevOps.GetClientConfig.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"orgUrl\"] = example.Apply(getClientConfigResult =\u003e getClientConfigResult.OrganizationUrl),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuredevops.GetClientConfig(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"orgUrl\", example.OrganizationUrl)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzuredevopsFunctions.getClientConfig();\n\n        ctx.export(\"orgUrl\", example.applyValue(getClientConfigResult -\u003e getClientConfigResult.organizationUrl()));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: azuredevops:getClientConfig\n      Arguments: {}\noutputs:\n  orgUrl: ${example.organizationUrl}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getClientConfig.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "organizationUrl": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "organizationUrl",
                    "id"
                ]
            }
        },
        "azuredevops:Core/getProject:getProject": {
            "deprecationMessage": "azuredevops.core.getProject has been deprecated in favor of azuredevops.getProject",
            "description": "Use this data source to access information about an existing Project within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = azuredevops.getProject({\n    name: \"Example Project\",\n});\nexport const project = example;\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.get_project(name=\"Example Project\")\npulumi.export(\"project\", example)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureDevOps.GetProject.Invoke(new()\n    {\n        Name = \"Example Project\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"project\"] = example,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuredevops.LookupProject(ctx, \u0026azuredevops.LookupProjectArgs{\n\t\t\tName: pulumi.StringRef(\"Example Project\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"project\", example)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzuredevopsFunctions.getProject(GetProjectArgs.builder()\n            .name(\"Example Project\")\n            .build());\n\n        ctx.export(\"project\", example.applyValue(getProjectResult -\u003e getProjectResult));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: azuredevops:getProject\n      Arguments:\n        name: Example Project\noutputs:\n  project: ${example}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Projects - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/core/projects/get?view=azure-devops-rest-7.0)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProject.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Project.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of the Project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProject.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "features": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "processTemplateId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "versionControl": {
                        "type": "string"
                    },
                    "visibility": {
                        "type": "string"
                    },
                    "workItemTemplate": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "features",
                    "processTemplateId",
                    "versionControl",
                    "visibility",
                    "workItemTemplate",
                    "id"
                ]
            }
        },
        "azuredevops:Core/getProjects:getProjects": {
            "deprecationMessage": "azuredevops.core.getProjects has been deprecated in favor of azuredevops.getProjects",
            "description": "Use this data source to access information about existing Projects within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = azuredevops.getProjects({\n    name: \"Example Project\",\n    state: \"wellFormed\",\n});\nexport const projectId = example.then(example =\u003e example.projects.map(__item =\u003e __item.projectId));\nexport const name = example.then(example =\u003e example.projects.map(__item =\u003e __item.name));\nexport const projectUrl = example.then(example =\u003e example.projects.map(__item =\u003e __item.projectUrl));\nexport const state = example.then(example =\u003e example.projects.map(__item =\u003e __item.state));\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.get_projects(name=\"Example Project\",\n    state=\"wellFormed\")\npulumi.export(\"projectId\", [__item.project_id for __item in example.projects])\npulumi.export(\"name\", [__item.name for __item in example.projects])\npulumi.export(\"projectUrl\", [__item.project_url for __item in example.projects])\npulumi.export(\"state\", [__item.state for __item in example.projects])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureDevOps.GetProjects.Invoke(new()\n    {\n        Name = \"Example Project\",\n        State = \"wellFormed\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"projectId\"] = example.Apply(getProjectsResult =\u003e getProjectsResult.Projects).Select(__item =\u003e __item.ProjectId).ToList(),\n        [\"name\"] = example.Apply(getProjectsResult =\u003e getProjectsResult.Projects).Select(__item =\u003e __item.Name).ToList(),\n        [\"projectUrl\"] = example.Apply(getProjectsResult =\u003e getProjectsResult.Projects).Select(__item =\u003e __item.ProjectUrl).ToList(),\n        [\"state\"] = example.Apply(getProjectsResult =\u003e getProjectsResult.Projects).Select(__item =\u003e __item.State).ToList(),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuredevops.GetProjects(ctx, \u0026azuredevops.GetProjectsArgs{\n\t\t\tName:  pulumi.StringRef(\"Example Project\"),\n\t\t\tState: pulumi.StringRef(\"wellFormed\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tvar splat0 []*string\n\t\tfor _, val0 := range example.Projects {\n\t\t\tsplat0 = append(splat0, val0.ProjectId)\n\t\t}\n\t\tctx.Export(\"projectId\", splat0)\n\t\tvar splat1 []*string\n\t\tfor _, val0 := range example.Projects {\n\t\t\tsplat1 = append(splat1, val0.Name)\n\t\t}\n\t\tctx.Export(\"name\", splat1)\n\t\tvar splat2 []*string\n\t\tfor _, val0 := range example.Projects {\n\t\t\tsplat2 = append(splat2, val0.ProjectUrl)\n\t\t}\n\t\tctx.Export(\"projectUrl\", splat2)\n\t\tvar splat3 []*string\n\t\tfor _, val0 := range example.Projects {\n\t\t\tsplat3 = append(splat3, val0.State)\n\t\t}\n\t\tctx.Export(\"state\", splat3)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetProjectsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzuredevopsFunctions.getProjects(GetProjectsArgs.builder()\n            .name(\"Example Project\")\n            .state(\"wellFormed\")\n            .build());\n\n        ctx.export(\"projectId\", example.applyValue(getProjectsResult -\u003e getProjectsResult.projects()).stream().map(element -\u003e element.projectId()).collect(toList()));\n        ctx.export(\"name\", example.applyValue(getProjectsResult -\u003e getProjectsResult.projects()).stream().map(element -\u003e element.name()).collect(toList()));\n        ctx.export(\"projectUrl\", example.applyValue(getProjectsResult -\u003e getProjectsResult.projects()).stream().map(element -\u003e element.projectUrl()).collect(toList()));\n        ctx.export(\"state\", example.applyValue(getProjectsResult -\u003e getProjectsResult.projects()).stream().map(element -\u003e element.state()).collect(toList()));\n    }\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Projects - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/core/projects/get?view=azure-devops-rest-7.0)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProjects.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Project, if not specified all projects will be returned.\n",
                        "willReplaceOnChanges": true
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the Project, if not specified all projects will be returned. Valid values are `all`, `deleting`, `new`, `wellFormed`, `createPending`, `unchanged`,`deleted`.\n\nDataSource without specifying any arguments will return all projects.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProjects.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Project.\n"
                    },
                    "projects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:Core/getProjectsProject:getProjectsProject"
                        },
                        "description": "A list of existing projects in your Azure DevOps Organization with details about every project which includes:\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Project state.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projects",
                    "id"
                ]
            }
        },
        "azuredevops:Identities/getGroup:getGroup": {
            "deprecationMessage": "azuredevops.identities.getGroup has been deprecated in favor of azuredevops.getGroup",
            "description": "Use this data source to access information about an existing Group within Azure DevOps\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = azuredevops.getProject({\n    name: \"Example Project\",\n});\nconst exampleGroup = exampleProject.then(exampleProject =\u003e azuredevops.getGroup({\n    projectId: exampleProject.id,\n    name: \"Example Group\",\n}));\nexport const groupId = exampleGroup.then(exampleGroup =\u003e exampleGroup.id);\nexport const groupDescriptor = exampleGroup.then(exampleGroup =\u003e exampleGroup.descriptor);\nconst example-collection-group = azuredevops.getGroup({\n    name: \"Project Collection Administrators\",\n});\nexport const collectionGroupId = exampleGroup.then(exampleGroup =\u003e exampleGroup.id);\nexport const collectionGroupDescriptor = exampleGroup.then(exampleGroup =\u003e exampleGroup.descriptor);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.get_project(name=\"Example Project\")\nexample_group = azuredevops.get_group(project_id=example_project.id,\n    name=\"Example Group\")\npulumi.export(\"groupId\", example_group.id)\npulumi.export(\"groupDescriptor\", example_group.descriptor)\nexample_collection_group = azuredevops.get_group(name=\"Project Collection Administrators\")\npulumi.export(\"collectionGroupId\", example_group.id)\npulumi.export(\"collectionGroupDescriptor\", example_group.descriptor)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = AzureDevOps.GetProject.Invoke(new()\n    {\n        Name = \"Example Project\",\n    });\n\n    var exampleGroup = AzureDevOps.GetGroup.Invoke(new()\n    {\n        ProjectId = exampleProject.Apply(getProjectResult =\u003e getProjectResult.Id),\n        Name = \"Example Group\",\n    });\n\n    var example_collection_group = AzureDevOps.GetGroup.Invoke(new()\n    {\n        Name = \"Project Collection Administrators\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"groupId\"] = exampleGroup.Apply(getGroupResult =\u003e getGroupResult.Id),\n        [\"groupDescriptor\"] = exampleGroup.Apply(getGroupResult =\u003e getGroupResult.Descriptor),\n        [\"collectionGroupId\"] = exampleGroup.Apply(getGroupResult =\u003e getGroupResult.Id),\n        [\"collectionGroupDescriptor\"] = exampleGroup.Apply(getGroupResult =\u003e getGroupResult.Descriptor),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.LookupProject(ctx, \u0026azuredevops.LookupProjectArgs{\n\t\t\tName: pulumi.StringRef(\"Example Project\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGroup, err := azuredevops.LookupGroup(ctx, \u0026azuredevops.LookupGroupArgs{\n\t\t\tProjectId: pulumi.StringRef(exampleProject.Id),\n\t\t\tName:      \"Example Group\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"groupId\", exampleGroup.Id)\n\t\tctx.Export(\"groupDescriptor\", exampleGroup.Descriptor)\n\t\t_, err = azuredevops.LookupGroup(ctx, \u0026azuredevops.LookupGroupArgs{\n\t\t\tName: \"Project Collection Administrators\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"collectionGroupId\", exampleGroup.Id)\n\t\tctx.Export(\"collectionGroupDescriptor\", exampleGroup.Descriptor)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetProjectArgs;\nimport com.pulumi.azuredevops.inputs.GetGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleProject = AzuredevopsFunctions.getProject(GetProjectArgs.builder()\n            .name(\"Example Project\")\n            .build());\n\n        final var exampleGroup = AzuredevopsFunctions.getGroup(GetGroupArgs.builder()\n            .projectId(exampleProject.applyValue(getProjectResult -\u003e getProjectResult.id()))\n            .name(\"Example Group\")\n            .build());\n\n        ctx.export(\"groupId\", exampleGroup.applyValue(getGroupResult -\u003e getGroupResult.id()));\n        ctx.export(\"groupDescriptor\", exampleGroup.applyValue(getGroupResult -\u003e getGroupResult.descriptor()));\n        final var example-collection-group = AzuredevopsFunctions.getGroup(GetGroupArgs.builder()\n            .name(\"Project Collection Administrators\")\n            .build());\n\n        ctx.export(\"collectionGroupId\", exampleGroup.applyValue(getGroupResult -\u003e getGroupResult.id()));\n        ctx.export(\"collectionGroupDescriptor\", exampleGroup.applyValue(getGroupResult -\u003e getGroupResult.descriptor()));\n    }\n}\n```\n```yaml\nvariables:\n  exampleProject:\n    fn::invoke:\n      Function: azuredevops:getProject\n      Arguments:\n        name: Example Project\n  exampleGroup:\n    fn::invoke:\n      Function: azuredevops:getGroup\n      Arguments:\n        projectId: ${exampleProject.id}\n        name: Example Group\n  example-collection-group:\n    fn::invoke:\n      Function: azuredevops:getGroup\n      Arguments:\n        name: Project Collection Administrators\noutputs:\n  groupId: ${exampleGroup.id}\n  groupDescriptor: ${exampleGroup.descriptor}\n  collectionGroupId: ${exampleGroup.id}\n  collectionGroupDescriptor: ${exampleGroup.descriptor}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Groups - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/graph/groups/get?view=azure-devops-rest-7.0)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGroup.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The Group Name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The Project ID. If no project ID is specified the project collection groups will be searched.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGroup.\n",
                "properties": {
                    "descriptor": {
                        "type": "string",
                        "description": "The Descriptor is the primary way to reference the graph subject. This field will uniquely identify the same graph subject across both Accounts and Organizations.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "origin": {
                        "type": "string",
                        "description": "The type of source provider for the origin identifier (ex:AD, AAD, MSA)\n"
                    },
                    "originId": {
                        "type": "string",
                        "description": "The unique identifier from the system of origin. Typically a sid, object id or Guid. Linking and unlinking operations can cause this value to change for a user because the user is not backed by a different provider and has a different unique id in the new provider.\n"
                    },
                    "projectId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "descriptor",
                    "name",
                    "origin",
                    "originId",
                    "id"
                ]
            }
        },
        "azuredevops:Identities/getUsers:getUsers": {
            "deprecationMessage": "azuredevops.identities.getUsers has been deprecated in favor of azuredevops.getUsers",
            "description": "Use this data source to access information about an existing users within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = azuredevops.getUsers({\n    principalName: \"contoso-user@contoso.onmicrosoft.com\",\n});\nconst example-all-users = azuredevops.getUsers({});\nconst example-all-from-origin = azuredevops.getUsers({\n    origin: \"aad\",\n});\nconst example-all-from-subjectTypes = azuredevops.getUsers({\n    subjectTypes: [\n        \"aad\",\n        \"msa\",\n    ],\n});\nconst example-all-from-origin-id = azuredevops.getUsers({\n    origin: \"aad\",\n    originId: \"00000000-0000-0000-0000-000000000000\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.get_users(principal_name=\"contoso-user@contoso.onmicrosoft.com\")\nexample_all_users = azuredevops.get_users()\nexample_all_from_origin = azuredevops.get_users(origin=\"aad\")\nexample_all_from_subject_types = azuredevops.get_users(subject_types=[\n    \"aad\",\n    \"msa\",\n])\nexample_all_from_origin_id = azuredevops.get_users(origin=\"aad\",\n    origin_id=\"00000000-0000-0000-0000-000000000000\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureDevOps.GetUsers.Invoke(new()\n    {\n        PrincipalName = \"contoso-user@contoso.onmicrosoft.com\",\n    });\n\n    var example_all_users = AzureDevOps.GetUsers.Invoke();\n\n    var example_all_from_origin = AzureDevOps.GetUsers.Invoke(new()\n    {\n        Origin = \"aad\",\n    });\n\n    var example_all_from_subjectTypes = AzureDevOps.GetUsers.Invoke(new()\n    {\n        SubjectTypes = new[]\n        {\n            \"aad\",\n            \"msa\",\n        },\n    });\n\n    var example_all_from_origin_id = AzureDevOps.GetUsers.Invoke(new()\n    {\n        Origin = \"aad\",\n        OriginId = \"00000000-0000-0000-0000-000000000000\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.GetUsers(ctx, \u0026azuredevops.GetUsersArgs{\n\t\t\tPrincipalName: pulumi.StringRef(\"contoso-user@contoso.onmicrosoft.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.GetUsers(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.GetUsers(ctx, \u0026azuredevops.GetUsersArgs{\n\t\t\tOrigin: pulumi.StringRef(\"aad\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.GetUsers(ctx, \u0026azuredevops.GetUsersArgs{\n\t\t\tSubjectTypes: []string{\n\t\t\t\t\"aad\",\n\t\t\t\t\"msa\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.GetUsers(ctx, \u0026azuredevops.GetUsersArgs{\n\t\t\tOrigin:   pulumi.StringRef(\"aad\"),\n\t\t\tOriginId: pulumi.StringRef(\"00000000-0000-0000-0000-000000000000\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetUsersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzuredevopsFunctions.getUsers(GetUsersArgs.builder()\n            .principalName(\"contoso-user@contoso.onmicrosoft.com\")\n            .build());\n\n        final var example-all-users = AzuredevopsFunctions.getUsers();\n\n        final var example-all-from-origin = AzuredevopsFunctions.getUsers(GetUsersArgs.builder()\n            .origin(\"aad\")\n            .build());\n\n        final var example-all-from-subjectTypes = AzuredevopsFunctions.getUsers(GetUsersArgs.builder()\n            .subjectTypes(            \n                \"aad\",\n                \"msa\")\n            .build());\n\n        final var example-all-from-origin-id = AzuredevopsFunctions.getUsers(GetUsersArgs.builder()\n            .origin(\"aad\")\n            .originId(\"00000000-0000-0000-0000-000000000000\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: azuredevops:getUsers\n      Arguments:\n        principalName: contoso-user@contoso.onmicrosoft.com\n  example-all-users:\n    fn::invoke:\n      Function: azuredevops:getUsers\n      Arguments: {}\n  example-all-from-origin:\n    fn::invoke:\n      Function: azuredevops:getUsers\n      Arguments:\n        origin: aad\n  example-all-from-subjectTypes:\n    fn::invoke:\n      Function: azuredevops:getUsers\n      Arguments:\n        subjectTypes:\n          - aad\n          - msa\n  example-all-from-origin-id:\n    fn::invoke:\n      Function: azuredevops:getUsers\n      Arguments:\n        origin: aad\n        originId: 00000000-0000-0000-0000-000000000000\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Graph Users API](https://docs.microsoft.com/en-us/rest/api/azure/devops/graph/users?view=azure-devops-rest-7.0)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUsers.\n",
                "properties": {
                    "origin": {
                        "type": "string",
                        "description": "The type of source provider for the `origin_id` parameter (ex:AD, AAD, MSA) The supported origins are listed below.\n"
                    },
                    "originId": {
                        "type": "string",
                        "description": "The unique identifier from the system of origin.\n\nDataSource without specifying any arguments will return all users inside an organization.\n\nList of possible subject types\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n\nList of possible origins\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n"
                    },
                    "principalName": {
                        "type": "string",
                        "description": "The PrincipalName of this graph member from the source provider.\n"
                    },
                    "subjectTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of user subject subtypes to reduce the retrieved results, e.g. `msa`, `aad`, `svc` (service identity), `imp` (imported identity), etc. The supported subject types are listed below.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUsers.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "origin": {
                        "type": "string",
                        "description": "The type of source provider for the origin identifier (ex:AD, AAD, MSA)\n"
                    },
                    "originId": {
                        "type": "string",
                        "description": "The unique identifier from the system of origin. Typically a sid, object id or Guid. Linking and unlinking operations can cause this value to change for a user because the user is not backed by a different provider and has a different unique id in the new provider.\n"
                    },
                    "principalName": {
                        "type": "string",
                        "description": "This is the PrincipalName of this graph member from the source provider. The source provider may change this field over time and it is not guaranteed to be immutable for the life of the graph member by VSTS.\n"
                    },
                    "subjectTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:Identities/getUsersUser:getUsersUser"
                        },
                        "description": "A set of existing users in your Azure DevOps Organization with details about every single user which includes:\n"
                    }
                },
                "type": "object",
                "required": [
                    "users",
                    "id"
                ]
            }
        },
        "azuredevops:Repository/getRepositories:getRepositories": {
            "deprecationMessage": "azuredevops.repository.getRepositories has been deprecated in favor of azuredevops.getRepositories",
            "description": "Use this data source to access information about **multiple** existing Git Repositories within Azure DevOps.\nTo read informations about a **single** Git Repository use the data source `azuredevops.Git`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = azuredevops.getProject({\n    name: \"Example Project\",\n});\nconst example-all-repos = example.then(example =\u003e azuredevops.getRepositories({\n    projectId: example.id,\n    includeHidden: true,\n}));\nconst example-single-repo = example.then(example =\u003e azuredevops.getRepositories({\n    projectId: example.id,\n    name: \"Example Repository\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.get_project(name=\"Example Project\")\nexample_all_repos = azuredevops.get_repositories(project_id=example.id,\n    include_hidden=True)\nexample_single_repo = azuredevops.get_repositories(project_id=example.id,\n    name=\"Example Repository\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureDevOps.GetProject.Invoke(new()\n    {\n        Name = \"Example Project\",\n    });\n\n    var example_all_repos = AzureDevOps.GetRepositories.Invoke(new()\n    {\n        ProjectId = example.Apply(getProjectResult =\u003e getProjectResult.Id),\n        IncludeHidden = true,\n    });\n\n    var example_single_repo = AzureDevOps.GetRepositories.Invoke(new()\n    {\n        ProjectId = example.Apply(getProjectResult =\u003e getProjectResult.Id),\n        Name = \"Example Repository\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuredevops.LookupProject(ctx, \u0026azuredevops.LookupProjectArgs{\n\t\t\tName: pulumi.StringRef(\"Example Project\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.GetRepositories(ctx, \u0026azuredevops.GetRepositoriesArgs{\n\t\t\tProjectId:     pulumi.StringRef(example.Id),\n\t\t\tIncludeHidden: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.GetRepositories(ctx, \u0026azuredevops.GetRepositoriesArgs{\n\t\t\tProjectId: pulumi.StringRef(example.Id),\n\t\t\tName:      pulumi.StringRef(\"Example Repository\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetProjectArgs;\nimport com.pulumi.azuredevops.inputs.GetRepositoriesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzuredevopsFunctions.getProject(GetProjectArgs.builder()\n            .name(\"Example Project\")\n            .build());\n\n        final var example-all-repos = AzuredevopsFunctions.getRepositories(GetRepositoriesArgs.builder()\n            .projectId(example.applyValue(getProjectResult -\u003e getProjectResult.id()))\n            .includeHidden(true)\n            .build());\n\n        final var example-single-repo = AzuredevopsFunctions.getRepositories(GetRepositoriesArgs.builder()\n            .projectId(example.applyValue(getProjectResult -\u003e getProjectResult.id()))\n            .name(\"Example Repository\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: azuredevops:getProject\n      Arguments:\n        name: Example Project\n  example-all-repos:\n    fn::invoke:\n      Function: azuredevops:getRepositories\n      Arguments:\n        projectId: ${example.id}\n        includeHidden: true\n  example-single-repo:\n    fn::invoke:\n      Function: azuredevops:getRepositories\n      Arguments:\n        projectId: ${example.id}\n        name: Example Repository\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Git API](https://docs.microsoft.com/en-us/rest/api/azure/devops/git/?view=azure-devops-rest-7.0)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRepositories.\n",
                "properties": {
                    "includeHidden": {
                        "type": "boolean",
                        "description": "DataSource without specifying any arguments will return all Git repositories of an organization.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Git repository to retrieve; requires `project_id` to be specified as well\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of project to list Git repositories\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRepositories.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "includeHidden": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "Git repository name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier to which the Git repository belongs.\n"
                    },
                    "repositories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:Repository/getRepositoriesRepository:getRepositoriesRepository"
                        },
                        "description": "A list of existing projects in your Azure DevOps Organization with details about every project which includes:\n"
                    }
                },
                "type": "object",
                "required": [
                    "repositories",
                    "id"
                ]
            }
        },
        "azuredevops:index/getAgentQueue:getAgentQueue": {
            "description": "Use this data source to access information about an existing Agent Queue within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"Managed by Terraform\",\n});\nconst exampleAgentQueue = azuredevops.getAgentQueueOutput({\n    projectId: exampleProject.id,\n    name: \"Example Agent Queue\",\n});\nexport const name = exampleAgentQueue.apply(exampleAgentQueue =\u003e exampleAgentQueue.name);\nexport const poolId = exampleAgentQueue.apply(exampleAgentQueue =\u003e exampleAgentQueue.agentPoolId);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"Managed by Terraform\")\nexample_agent_queue = azuredevops.get_agent_queue_output(project_id=example_project.id,\n    name=\"Example Agent Queue\")\npulumi.export(\"name\", example_agent_queue.name)\npulumi.export(\"poolId\", example_agent_queue.agent_pool_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        WorkItemTemplate = \"Agile\",\n        VersionControl = \"Git\",\n        Visibility = \"private\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleAgentQueue = AzureDevOps.GetAgentQueue.Invoke(new()\n    {\n        ProjectId = exampleProject.Id,\n        Name = \"Example Agent Queue\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"name\"] = exampleAgentQueue.Apply(getAgentQueueResult =\u003e getAgentQueueResult.Name),\n        [\"poolId\"] = exampleAgentQueue.Apply(getAgentQueueResult =\u003e getAgentQueueResult.AgentPoolId),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleAgentQueue := azuredevops.GetAgentQueueOutput(ctx, azuredevops.GetAgentQueueOutputArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tName:      pulumi.String(\"Example Agent Queue\"),\n\t\t}, nil)\n\t\tctx.Export(\"name\", exampleAgentQueue.ApplyT(func(exampleAgentQueue azuredevops.GetAgentQueueResult) (*string, error) {\n\t\t\treturn \u0026exampleAgentQueue.Name, nil\n\t\t}).(pulumi.StringPtrOutput))\n\t\tctx.Export(\"poolId\", exampleAgentQueue.ApplyT(func(exampleAgentQueue azuredevops.GetAgentQueueResult) (*int, error) {\n\t\t\treturn \u0026exampleAgentQueue.AgentPoolId, nil\n\t\t}).(pulumi.IntPtrOutput))\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetAgentQueueArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .workItemTemplate(\"Agile\")\n            .versionControl(\"Git\")\n            .visibility(\"private\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        final var exampleAgentQueue = AzuredevopsFunctions.getAgentQueue(GetAgentQueueArgs.builder()\n            .projectId(exampleProject.id())\n            .name(\"Example Agent Queue\")\n            .build());\n\n        ctx.export(\"name\", exampleAgentQueue.applyValue(getAgentQueueResult -\u003e getAgentQueueResult).applyValue(exampleAgentQueue -\u003e exampleAgentQueue.applyValue(getAgentQueueResult -\u003e getAgentQueueResult.name())));\n        ctx.export(\"poolId\", exampleAgentQueue.applyValue(getAgentQueueResult -\u003e getAgentQueueResult).applyValue(exampleAgentQueue -\u003e exampleAgentQueue.applyValue(getAgentQueueResult -\u003e getAgentQueueResult.agentPoolId())));\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      workItemTemplate: Agile\n      versionControl: Git\n      visibility: private\n      description: Managed by Terraform\nvariables:\n  exampleAgentQueue:\n    fn::invoke:\n      Function: azuredevops:getAgentQueue\n      Arguments:\n        projectId: ${exampleProject.id}\n        name: Example Agent Queue\noutputs:\n  name: ${exampleAgentQueue.name}\n  poolId: ${exampleAgentQueue.agentPoolId}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Agent Queues - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/queues/get?view=azure-devops-rest-7.0)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAgentQueue.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Agent Queue.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The Project Id.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAgentQueue.\n",
                "properties": {
                    "agentPoolId": {
                        "type": "integer",
                        "description": "Agent pool identifier to which the agent queue belongs.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the agent queue.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier to which the agent queue belongs.\n"
                    }
                },
                "type": "object",
                "required": [
                    "agentPoolId",
                    "name",
                    "projectId",
                    "id"
                ]
            }
        },
        "azuredevops:index/getArea:getArea": {
            "description": "Use this data source to access information about an existing Area (Component) within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"Managed by Terraform\",\n});\nconst exampleArea = exampleProject.id.apply(id =\u003e azuredevops.getAreaOutput({\n    projectId: id,\n    path: \"/\",\n    fetchChildren: false,\n}));\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"Managed by Terraform\")\nexample_area = example_project.id.apply(lambda id: azuredevops.get_area_output(project_id=id,\n    path=\"/\",\n    fetch_children=False))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        WorkItemTemplate = \"Agile\",\n        VersionControl = \"Git\",\n        Visibility = \"private\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleArea = AzureDevOps.GetArea.Invoke(new()\n    {\n        ProjectId = exampleProject.Id,\n        Path = \"/\",\n        FetchChildren = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = exampleProject.ID().ApplyT(func(id string) (azuredevops.GetAreaResult, error) {\n\t\t\treturn azuredevops.GetAreaOutput(ctx, azuredevops.GetAreaOutputArgs{\n\t\t\t\tProjectId:     id,\n\t\t\t\tPath:          \"/\",\n\t\t\t\tFetchChildren: false,\n\t\t\t}, nil), nil\n\t\t}).(azuredevops.GetAreaResultOutput)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetAreaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .workItemTemplate(\"Agile\")\n            .versionControl(\"Git\")\n            .visibility(\"private\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        final var exampleArea = AzuredevopsFunctions.getArea(GetAreaArgs.builder()\n            .projectId(exampleProject.id())\n            .path(\"/\")\n            .fetchChildren(\"false\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      workItemTemplate: Agile\n      versionControl: Git\n      visibility: private\n      description: Managed by Terraform\nvariables:\n  exampleArea:\n    fn::invoke:\n      Function: azuredevops:getArea\n      Arguments:\n        projectId: ${exampleProject.id}\n        path: /\n        fetchChildren: 'false'\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Classification Nodes - Get Classification Nodes](https://docs.microsoft.com/en-us/rest/api/azure/devops/wit/classification-nodes/create-or-update?view=azure-devops-rest-7.0)\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: vso.work - Grants the ability to read work items, queries, boards, area and iterations paths, and other work item tracking related metadata. Also grants the ability to execute queries, search work items and to receive notifications about work item events via service hooks.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getArea.\n",
                "properties": {
                    "fetchChildren": {
                        "type": "boolean",
                        "description": "Read children nodes, _Depth_: 1, _Default_: `true`\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The path to the Area; _Format_: URL relative; if omitted, or value `\"/\"` is used, the root Area will be returned\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getArea.\n",
                "properties": {
                    "childrens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:index/getAreaChildren:getAreaChildren"
                        },
                        "description": "A list of `children` blocks as defined below, empty if `has_children == false`\n"
                    },
                    "fetchChildren": {
                        "type": "boolean"
                    },
                    "hasChildren": {
                        "type": "boolean",
                        "description": "Indicator if the child Area node has child nodes\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the child Area node\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The complete path (in relative URL format) of the child Area\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID of the child Area node\n"
                    }
                },
                "type": "object",
                "required": [
                    "childrens",
                    "hasChildren",
                    "name",
                    "path",
                    "projectId",
                    "id"
                ]
            }
        },
        "azuredevops:index/getBuildDefinition:getBuildDefinition": {
            "description": "Use this data source to access information about an existing Build Definition.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = azuredevops.getProject({\n    name: \"Example Project\",\n});\nconst exampleBuildDefinition = exampleProject.then(exampleProject =\u003e azuredevops.getBuildDefinition({\n    projectId: exampleProject.id,\n    name: \"existing\",\n}));\nexport const id = exampleBuildDefinition.then(exampleBuildDefinition =\u003e exampleBuildDefinition.id);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.get_project(name=\"Example Project\")\nexample_build_definition = azuredevops.get_build_definition(project_id=example_project.id,\n    name=\"existing\")\npulumi.export(\"id\", example_build_definition.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = AzureDevOps.GetProject.Invoke(new()\n    {\n        Name = \"Example Project\",\n    });\n\n    var exampleBuildDefinition = AzureDevOps.GetBuildDefinition.Invoke(new()\n    {\n        ProjectId = exampleProject.Apply(getProjectResult =\u003e getProjectResult.Id),\n        Name = \"existing\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"id\"] = exampleBuildDefinition.Apply(getBuildDefinitionResult =\u003e getBuildDefinitionResult.Id),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.LookupProject(ctx, \u0026azuredevops.LookupProjectArgs{\n\t\t\tName: pulumi.StringRef(\"Example Project\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleBuildDefinition, err := azuredevops.LookupBuildDefinition(ctx, \u0026azuredevops.LookupBuildDefinitionArgs{\n\t\t\tProjectId: exampleProject.Id,\n\t\t\tName:      \"existing\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"id\", exampleBuildDefinition.Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetProjectArgs;\nimport com.pulumi.azuredevops.inputs.GetBuildDefinitionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleProject = AzuredevopsFunctions.getProject(GetProjectArgs.builder()\n            .name(\"Example Project\")\n            .build());\n\n        final var exampleBuildDefinition = AzuredevopsFunctions.getBuildDefinition(GetBuildDefinitionArgs.builder()\n            .projectId(exampleProject.applyValue(getProjectResult -\u003e getProjectResult.id()))\n            .name(\"existing\")\n            .build());\n\n        ctx.export(\"id\", exampleBuildDefinition.applyValue(getBuildDefinitionResult -\u003e getBuildDefinitionResult.id()));\n    }\n}\n```\n```yaml\nvariables:\n  exampleProject:\n    fn::invoke:\n      Function: azuredevops:getProject\n      Arguments:\n        name: Example Project\n  exampleBuildDefinition:\n    fn::invoke:\n      Function: azuredevops:getBuildDefinition\n      Arguments:\n        projectId: ${exampleProject.id}\n        name: existing\noutputs:\n  id: ${exampleBuildDefinition.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getBuildDefinition.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of this Build Definition.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The path of the build definition. Default to `\\`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getBuildDefinition.\n",
                "properties": {
                    "agentPoolName": {
                        "type": "string",
                        "description": "The agent pool that should execute the build.\n"
                    },
                    "ciTriggers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:index/getBuildDefinitionCiTrigger:getBuildDefinitionCiTrigger"
                        },
                        "description": "A `ci_trigger` block as defined below.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the variable.\n"
                    },
                    "path": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "pullRequestTriggers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:index/getBuildDefinitionPullRequestTrigger:getBuildDefinitionPullRequestTrigger"
                        },
                        "description": "A `pull_request_trigger` block as defined below.\n"
                    },
                    "queueStatus": {
                        "type": "string",
                        "description": "The queue status of the build definition.\n"
                    },
                    "repositories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:index/getBuildDefinitionRepository:getBuildDefinitionRepository"
                        },
                        "description": "A `repository` block as defined below.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "The revision of the build definition.\n"
                    },
                    "schedules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:index/getBuildDefinitionSchedule:getBuildDefinitionSchedule"
                        },
                        "description": "A `schedules` block as defined below.\n"
                    },
                    "variableGroups": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of variable group IDs.\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:index/getBuildDefinitionVariable:getBuildDefinitionVariable"
                        },
                        "description": "A `variable` block as defined below.\n"
                    }
                },
                "type": "object",
                "required": [
                    "agentPoolName",
                    "ciTriggers",
                    "name",
                    "projectId",
                    "pullRequestTriggers",
                    "queueStatus",
                    "repositories",
                    "revision",
                    "schedules",
                    "variables",
                    "variableGroups",
                    "id"
                ]
            }
        },
        "azuredevops:index/getClientConfig:getClientConfig": {
            "description": "Use this data source to access information about the Azure DevOps organization configured for the provider.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = azuredevops.getClientConfig({});\nexport const orgUrl = example.then(example =\u003e example.organizationUrl);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.get_client_config()\npulumi.export(\"orgUrl\", example.organization_url)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureDevOps.GetClientConfig.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"orgUrl\"] = example.Apply(getClientConfigResult =\u003e getClientConfigResult.OrganizationUrl),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuredevops.GetClientConfig(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"orgUrl\", example.OrganizationUrl)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzuredevopsFunctions.getClientConfig();\n\n        ctx.export(\"orgUrl\", example.applyValue(getClientConfigResult -\u003e getClientConfigResult.organizationUrl()));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: azuredevops:getClientConfig\n      Arguments: {}\noutputs:\n  orgUrl: ${example.organizationUrl}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getClientConfig.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "organizationUrl": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "organizationUrl",
                    "id"
                ]
            }
        },
        "azuredevops:index/getEnvironment:getEnvironment": {
            "description": "Use this data source to access information about an Environment.\n\n## Relevant Links\n\n* [Azure DevOps Service REST API 7.0 - Environments](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/environments?view=azure-devops-rest-7.0)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEnvironment.\n",
                "properties": {
                    "environmentId": {
                        "type": "integer",
                        "description": "The ID of the Environment.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Environment.\n\n\u003e **NOTE:** One of either `environment_id` or `name` must be specified.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEnvironment.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A description for the Environment.\n"
                    },
                    "environmentId": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Environment.\n"
                    },
                    "projectId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "name",
                    "projectId",
                    "id"
                ]
            }
        },
        "azuredevops:index/getGitRepository:getGitRepository": {
            "description": "Use this data source to access information about a **single** (existing) Git Repository within Azure DevOps.\nTo read information about **multiple** Git Repositories use the data source `azuredevops.getRepositories`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = azuredevops.getProject({\n    name: \"Example Project\",\n});\nconst example-single-repo = example.then(example =\u003e azuredevops.getGitRepository({\n    projectId: example.id,\n    name: \"Example Repository\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.get_project(name=\"Example Project\")\nexample_single_repo = azuredevops.get_git_repository(project_id=example.id,\n    name=\"Example Repository\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureDevOps.GetProject.Invoke(new()\n    {\n        Name = \"Example Project\",\n    });\n\n    var example_single_repo = AzureDevOps.GetGitRepository.Invoke(new()\n    {\n        ProjectId = example.Apply(getProjectResult =\u003e getProjectResult.Id),\n        Name = \"Example Repository\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuredevops.LookupProject(ctx, \u0026azuredevops.LookupProjectArgs{\n\t\t\tName: pulumi.StringRef(\"Example Project\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.GetGitRepository(ctx, \u0026azuredevops.GetGitRepositoryArgs{\n\t\t\tProjectId: example.Id,\n\t\t\tName:      \"Example Repository\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetProjectArgs;\nimport com.pulumi.azuredevops.inputs.GetGitRepositoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzuredevopsFunctions.getProject(GetProjectArgs.builder()\n            .name(\"Example Project\")\n            .build());\n\n        final var example-single-repo = AzuredevopsFunctions.getGitRepository(GetGitRepositoryArgs.builder()\n            .projectId(example.applyValue(getProjectResult -\u003e getProjectResult.id()))\n            .name(\"Example Repository\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: azuredevops:getProject\n      Arguments:\n        name: Example Project\n  example-single-repo:\n    fn::invoke:\n      Function: azuredevops:getGitRepository\n      Arguments:\n        projectId: ${example.id}\n        name: Example Repository\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Git API](https://docs.microsoft.com/en-us/rest/api/azure/devops/git/?view=azure-devops-rest-7.0)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGitRepository.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Git repository to retrieve\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of project to list Git repositories\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGitRepository.\n",
                "properties": {
                    "defaultBranch": {
                        "type": "string",
                        "description": "The ref of the default branch.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isFork": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "Git repository name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier to which the Git repository belongs.\n"
                    },
                    "remoteUrl": {
                        "type": "string",
                        "description": "HTTPS Url to clone the Git repository\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "Compressed size (bytes) of the repository.\n"
                    },
                    "sshUrl": {
                        "type": "string",
                        "description": "SSH Url to clone the Git repository\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Details REST API endpoint for the Git Repository.\n"
                    },
                    "webUrl": {
                        "type": "string",
                        "description": "Url of the Git repository web view\n"
                    }
                },
                "type": "object",
                "required": [
                    "defaultBranch",
                    "isFork",
                    "name",
                    "projectId",
                    "remoteUrl",
                    "size",
                    "sshUrl",
                    "url",
                    "webUrl",
                    "id"
                ]
            }
        },
        "azuredevops:index/getGroup:getGroup": {
            "description": "Use this data source to access information about an existing Group within Azure DevOps\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = azuredevops.getProject({\n    name: \"Example Project\",\n});\nconst exampleGroup = exampleProject.then(exampleProject =\u003e azuredevops.getGroup({\n    projectId: exampleProject.id,\n    name: \"Example Group\",\n}));\nexport const groupId = exampleGroup.then(exampleGroup =\u003e exampleGroup.id);\nexport const groupDescriptor = exampleGroup.then(exampleGroup =\u003e exampleGroup.descriptor);\nconst example-collection-group = azuredevops.getGroup({\n    name: \"Project Collection Administrators\",\n});\nexport const collectionGroupId = exampleGroup.then(exampleGroup =\u003e exampleGroup.id);\nexport const collectionGroupDescriptor = exampleGroup.then(exampleGroup =\u003e exampleGroup.descriptor);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.get_project(name=\"Example Project\")\nexample_group = azuredevops.get_group(project_id=example_project.id,\n    name=\"Example Group\")\npulumi.export(\"groupId\", example_group.id)\npulumi.export(\"groupDescriptor\", example_group.descriptor)\nexample_collection_group = azuredevops.get_group(name=\"Project Collection Administrators\")\npulumi.export(\"collectionGroupId\", example_group.id)\npulumi.export(\"collectionGroupDescriptor\", example_group.descriptor)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = AzureDevOps.GetProject.Invoke(new()\n    {\n        Name = \"Example Project\",\n    });\n\n    var exampleGroup = AzureDevOps.GetGroup.Invoke(new()\n    {\n        ProjectId = exampleProject.Apply(getProjectResult =\u003e getProjectResult.Id),\n        Name = \"Example Group\",\n    });\n\n    var example_collection_group = AzureDevOps.GetGroup.Invoke(new()\n    {\n        Name = \"Project Collection Administrators\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"groupId\"] = exampleGroup.Apply(getGroupResult =\u003e getGroupResult.Id),\n        [\"groupDescriptor\"] = exampleGroup.Apply(getGroupResult =\u003e getGroupResult.Descriptor),\n        [\"collectionGroupId\"] = exampleGroup.Apply(getGroupResult =\u003e getGroupResult.Id),\n        [\"collectionGroupDescriptor\"] = exampleGroup.Apply(getGroupResult =\u003e getGroupResult.Descriptor),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.LookupProject(ctx, \u0026azuredevops.LookupProjectArgs{\n\t\t\tName: pulumi.StringRef(\"Example Project\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGroup, err := azuredevops.LookupGroup(ctx, \u0026azuredevops.LookupGroupArgs{\n\t\t\tProjectId: pulumi.StringRef(exampleProject.Id),\n\t\t\tName:      \"Example Group\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"groupId\", exampleGroup.Id)\n\t\tctx.Export(\"groupDescriptor\", exampleGroup.Descriptor)\n\t\t_, err = azuredevops.LookupGroup(ctx, \u0026azuredevops.LookupGroupArgs{\n\t\t\tName: \"Project Collection Administrators\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"collectionGroupId\", exampleGroup.Id)\n\t\tctx.Export(\"collectionGroupDescriptor\", exampleGroup.Descriptor)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetProjectArgs;\nimport com.pulumi.azuredevops.inputs.GetGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleProject = AzuredevopsFunctions.getProject(GetProjectArgs.builder()\n            .name(\"Example Project\")\n            .build());\n\n        final var exampleGroup = AzuredevopsFunctions.getGroup(GetGroupArgs.builder()\n            .projectId(exampleProject.applyValue(getProjectResult -\u003e getProjectResult.id()))\n            .name(\"Example Group\")\n            .build());\n\n        ctx.export(\"groupId\", exampleGroup.applyValue(getGroupResult -\u003e getGroupResult.id()));\n        ctx.export(\"groupDescriptor\", exampleGroup.applyValue(getGroupResult -\u003e getGroupResult.descriptor()));\n        final var example-collection-group = AzuredevopsFunctions.getGroup(GetGroupArgs.builder()\n            .name(\"Project Collection Administrators\")\n            .build());\n\n        ctx.export(\"collectionGroupId\", exampleGroup.applyValue(getGroupResult -\u003e getGroupResult.id()));\n        ctx.export(\"collectionGroupDescriptor\", exampleGroup.applyValue(getGroupResult -\u003e getGroupResult.descriptor()));\n    }\n}\n```\n```yaml\nvariables:\n  exampleProject:\n    fn::invoke:\n      Function: azuredevops:getProject\n      Arguments:\n        name: Example Project\n  exampleGroup:\n    fn::invoke:\n      Function: azuredevops:getGroup\n      Arguments:\n        projectId: ${exampleProject.id}\n        name: Example Group\n  example-collection-group:\n    fn::invoke:\n      Function: azuredevops:getGroup\n      Arguments:\n        name: Project Collection Administrators\noutputs:\n  groupId: ${exampleGroup.id}\n  groupDescriptor: ${exampleGroup.descriptor}\n  collectionGroupId: ${exampleGroup.id}\n  collectionGroupDescriptor: ${exampleGroup.descriptor}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Groups - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/graph/groups/get?view=azure-devops-rest-7.0)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGroup.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The Group Name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The Project ID. If no project ID is specified the project collection groups will be searched.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGroup.\n",
                "properties": {
                    "descriptor": {
                        "type": "string",
                        "description": "The Descriptor is the primary way to reference the graph subject. This field will uniquely identify the same graph subject across both Accounts and Organizations.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "origin": {
                        "type": "string",
                        "description": "The type of source provider for the origin identifier (ex:AD, AAD, MSA)\n"
                    },
                    "originId": {
                        "type": "string",
                        "description": "The unique identifier from the system of origin. Typically a sid, object id or Guid. Linking and unlinking operations can cause this value to change for a user because the user is not backed by a different provider and has a different unique id in the new provider.\n"
                    },
                    "projectId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "descriptor",
                    "name",
                    "origin",
                    "originId",
                    "id"
                ]
            }
        },
        "azuredevops:index/getGroups:getGroups": {
            "description": "Use this data source to access information about existing Groups within Azure DevOps\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = azuredevops.getProject({\n    name: \"Example Project\",\n});\nconst example-all-groups = azuredevops.getGroups({});\nconst example-project-groups = example.then(example =\u003e azuredevops.getGroups({\n    projectId: example.id,\n}));\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.get_project(name=\"Example Project\")\nexample_all_groups = azuredevops.get_groups()\nexample_project_groups = azuredevops.get_groups(project_id=example.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureDevOps.GetProject.Invoke(new()\n    {\n        Name = \"Example Project\",\n    });\n\n    var example_all_groups = AzureDevOps.GetGroups.Invoke();\n\n    var example_project_groups = AzureDevOps.GetGroups.Invoke(new()\n    {\n        ProjectId = example.Apply(getProjectResult =\u003e getProjectResult.Id),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuredevops.LookupProject(ctx, \u0026azuredevops.LookupProjectArgs{\n\t\t\tName: pulumi.StringRef(\"Example Project\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.GetGroups(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.GetGroups(ctx, \u0026azuredevops.GetGroupsArgs{\n\t\t\tProjectId: pulumi.StringRef(example.Id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetProjectArgs;\nimport com.pulumi.azuredevops.inputs.GetGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzuredevopsFunctions.getProject(GetProjectArgs.builder()\n            .name(\"Example Project\")\n            .build());\n\n        final var example-all-groups = AzuredevopsFunctions.getGroups();\n\n        final var example-project-groups = AzuredevopsFunctions.getGroups(GetGroupsArgs.builder()\n            .projectId(example.applyValue(getProjectResult -\u003e getProjectResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: azuredevops:getProject\n      Arguments:\n        name: Example Project\n  example-all-groups:\n    fn::invoke:\n      Function: azuredevops:getGroups\n      Arguments: {}\n  example-project-groups:\n    fn::invoke:\n      Function: azuredevops:getGroups\n      Arguments:\n        projectId: ${example.id}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Groups - List](https://docs.microsoft.com/en-us/rest/api/azure/devops/graph/groups/list?view=azure-devops-rest-7.0)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGroups.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "The Project ID. If no project ID is specified all groups of an organization will be returned\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGroups.\n",
                "properties": {
                    "groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:index/getGroupsGroup:getGroupsGroup"
                        },
                        "description": "A set of existing groups in your Azure DevOps Organization or project with details about every single group which includes:\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "projectId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "groups",
                    "id"
                ]
            }
        },
        "azuredevops:index/getIteration:getIteration": {
            "description": "Use this data source to access information about an existing Iteration (Sprint) within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = new azuredevops.Project(\"example\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"Managed by Terraform\",\n});\nconst example-root-iteration = azuredevops.getIterationOutput({\n    projectId: example.id,\n    path: \"/\",\n    fetchChildren: true,\n});\nconst example-child-iteration = azuredevops.getIterationOutput({\n    projectId: example.id,\n    path: \"/Iteration 1\",\n    fetchChildren: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.Project(\"example\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"Managed by Terraform\")\nexample_root_iteration = azuredevops.get_iteration_output(project_id=example.id,\n    path=\"/\",\n    fetch_children=True)\nexample_child_iteration = azuredevops.get_iteration_output(project_id=example.id,\n    path=\"/Iteration 1\",\n    fetch_children=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureDevOps.Project(\"example\", new()\n    {\n        WorkItemTemplate = \"Agile\",\n        VersionControl = \"Git\",\n        Visibility = \"private\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var example_root_iteration = AzureDevOps.GetIteration.Invoke(new()\n    {\n        ProjectId = example.Id,\n        Path = \"/\",\n        FetchChildren = true,\n    });\n\n    var example_child_iteration = AzureDevOps.GetIteration.Invoke(new()\n    {\n        ProjectId = example.Id,\n        Path = \"/Iteration 1\",\n        FetchChildren = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuredevops.NewProject(ctx, \"example\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = azuredevops.GetIterationOutput(ctx, azuredevops.GetIterationOutputArgs{\n\t\t\tProjectId:     example.ID(),\n\t\t\tPath:          pulumi.String(\"/\"),\n\t\t\tFetchChildren: pulumi.Bool(true),\n\t\t}, nil)\n\t\t_ = azuredevops.GetIterationOutput(ctx, azuredevops.GetIterationOutputArgs{\n\t\t\tProjectId:     example.ID(),\n\t\t\tPath:          pulumi.String(\"/Iteration 1\"),\n\t\t\tFetchChildren: pulumi.Bool(true),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetIterationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Project(\"example\", ProjectArgs.builder()        \n            .workItemTemplate(\"Agile\")\n            .versionControl(\"Git\")\n            .visibility(\"private\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        final var example-root-iteration = AzuredevopsFunctions.getIteration(GetIterationArgs.builder()\n            .projectId(example.id())\n            .path(\"/\")\n            .fetchChildren(true)\n            .build());\n\n        final var example-child-iteration = AzuredevopsFunctions.getIteration(GetIterationArgs.builder()\n            .projectId(example.id())\n            .path(\"/Iteration 1\")\n            .fetchChildren(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuredevops:Project\n    properties:\n      workItemTemplate: Agile\n      versionControl: Git\n      visibility: private\n      description: Managed by Terraform\nvariables:\n  example-root-iteration:\n    fn::invoke:\n      Function: azuredevops:getIteration\n      Arguments:\n        projectId: ${example.id}\n        path: /\n        fetchChildren: true\n  example-child-iteration:\n    fn::invoke:\n      Function: azuredevops:getIteration\n      Arguments:\n        projectId: ${example.id}\n        path: /Iteration 1\n        fetchChildren: true\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Classification Nodes - Get Classification Nodes](https://docs.microsoft.com/en-us/rest/api/azure/devops/wit/classification-nodes/get-classification-nodes?view=azure-devops-rest-7.0)\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: vso.work - Grants the ability to read work items, queries, boards, area and iterations paths, and other work item tracking related metadata. Also grants the ability to execute queries, search work items and to receive notifications about work item events via service hooks.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getIteration.\n",
                "properties": {
                    "fetchChildren": {
                        "type": "boolean",
                        "description": "Read children nodes, _Depth_: 1, _Default_: `true`\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The path to the Iteration, _Format_: URL relative; if omitted, or value `\"/\"` is used, the root Iteration will be returned\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIteration.\n",
                "properties": {
                    "childrens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:index/getIterationChildren:getIterationChildren"
                        },
                        "description": "A list of `children` blocks as defined below, empty if `has_children == false`\n"
                    },
                    "fetchChildren": {
                        "type": "boolean"
                    },
                    "hasChildren": {
                        "type": "boolean",
                        "description": "Indicator if the child Iteration node has child nodes\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the child Iteration node\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The complete path (in relative URL format) of the child Iteration\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID of the child Iteration node\n"
                    }
                },
                "type": "object",
                "required": [
                    "childrens",
                    "hasChildren",
                    "name",
                    "path",
                    "projectId",
                    "id"
                ]
            }
        },
        "azuredevops:index/getPool:getPool": {
            "description": "Use this data source to access information about an existing Agent Pool within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = azuredevops.getPool({\n    name: \"Example Agent Pool\",\n});\nexport const name = example.then(example =\u003e example.name);\nexport const poolType = example.then(example =\u003e example.poolType);\nexport const autoProvision = example.then(example =\u003e example.autoProvision);\nexport const autoUpdate = example.then(example =\u003e example.autoUpdate);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.get_pool(name=\"Example Agent Pool\")\npulumi.export(\"name\", example.name)\npulumi.export(\"poolType\", example.pool_type)\npulumi.export(\"autoProvision\", example.auto_provision)\npulumi.export(\"autoUpdate\", example.auto_update)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureDevOps.GetPool.Invoke(new()\n    {\n        Name = \"Example Agent Pool\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"name\"] = example.Apply(getPoolResult =\u003e getPoolResult.Name),\n        [\"poolType\"] = example.Apply(getPoolResult =\u003e getPoolResult.PoolType),\n        [\"autoProvision\"] = example.Apply(getPoolResult =\u003e getPoolResult.AutoProvision),\n        [\"autoUpdate\"] = example.Apply(getPoolResult =\u003e getPoolResult.AutoUpdate),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuredevops.LookupPool(ctx, \u0026azuredevops.LookupPoolArgs{\n\t\t\tName: \"Example Agent Pool\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"name\", example.Name)\n\t\tctx.Export(\"poolType\", example.PoolType)\n\t\tctx.Export(\"autoProvision\", example.AutoProvision)\n\t\tctx.Export(\"autoUpdate\", example.AutoUpdate)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetPoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzuredevopsFunctions.getPool(GetPoolArgs.builder()\n            .name(\"Example Agent Pool\")\n            .build());\n\n        ctx.export(\"name\", example.applyValue(getPoolResult -\u003e getPoolResult.name()));\n        ctx.export(\"poolType\", example.applyValue(getPoolResult -\u003e getPoolResult.poolType()));\n        ctx.export(\"autoProvision\", example.applyValue(getPoolResult -\u003e getPoolResult.autoProvision()));\n        ctx.export(\"autoUpdate\", example.applyValue(getPoolResult -\u003e getPoolResult.autoUpdate()));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: azuredevops:getPool\n      Arguments:\n        name: Example Agent Pool\noutputs:\n  name: ${example.name}\n  poolType: ${example.poolType}\n  autoProvision: ${example.autoProvision}\n  autoUpdate: ${example.autoUpdate}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Agent Pools - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/pools/get?view=azure-devops-rest-7.0)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPool.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Agent Pool.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPool.\n",
                "properties": {
                    "autoProvision": {
                        "type": "boolean"
                    },
                    "autoUpdate": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "poolType": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "autoProvision",
                    "autoUpdate",
                    "name",
                    "poolType",
                    "id"
                ]
            }
        },
        "azuredevops:index/getPools:getPools": {
            "description": "Use this data source to access information about existing Agent Pools within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = azuredevops.getPools({});\nexport const agentPoolName = example.then(example =\u003e example.agentPools.map(__item =\u003e __item.name));\nexport const autoProvision = example.then(example =\u003e example.agentPools.map(__item =\u003e __item.autoProvision));\nexport const autoUpdate = example.then(example =\u003e example.agentPools.map(__item =\u003e __item.autoUpdate));\nexport const poolType = example.then(example =\u003e example.agentPools.map(__item =\u003e __item.poolType));\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.get_pools()\npulumi.export(\"agentPoolName\", [__item.name for __item in example.agent_pools])\npulumi.export(\"autoProvision\", [__item.auto_provision for __item in example.agent_pools])\npulumi.export(\"autoUpdate\", [__item.auto_update for __item in example.agent_pools])\npulumi.export(\"poolType\", [__item.pool_type for __item in example.agent_pools])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureDevOps.GetPools.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"agentPoolName\"] = example.Apply(getPoolsResult =\u003e getPoolsResult.AgentPools).Select(__item =\u003e __item.Name).ToList(),\n        [\"autoProvision\"] = example.Apply(getPoolsResult =\u003e getPoolsResult.AgentPools).Select(__item =\u003e __item.AutoProvision).ToList(),\n        [\"autoUpdate\"] = example.Apply(getPoolsResult =\u003e getPoolsResult.AgentPools).Select(__item =\u003e __item.AutoUpdate).ToList(),\n        [\"poolType\"] = example.Apply(getPoolsResult =\u003e getPoolsResult.AgentPools).Select(__item =\u003e __item.PoolType).ToList(),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuredevops.GetPools(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tvar splat0 []*string\n\t\tfor _, val0 := range example.AgentPools {\n\t\t\tsplat0 = append(splat0, val0.Name)\n\t\t}\n\t\tctx.Export(\"agentPoolName\", splat0)\n\t\tvar splat1 []*bool\n\t\tfor _, val0 := range example.AgentPools {\n\t\t\tsplat1 = append(splat1, val0.AutoProvision)\n\t\t}\n\t\tctx.Export(\"autoProvision\", splat1)\n\t\tvar splat2 []*bool\n\t\tfor _, val0 := range example.AgentPools {\n\t\t\tsplat2 = append(splat2, val0.AutoUpdate)\n\t\t}\n\t\tctx.Export(\"autoUpdate\", splat2)\n\t\tvar splat3 []*string\n\t\tfor _, val0 := range example.AgentPools {\n\t\t\tsplat3 = append(splat3, val0.PoolType)\n\t\t}\n\t\tctx.Export(\"poolType\", splat3)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzuredevopsFunctions.getPools();\n\n        ctx.export(\"agentPoolName\", example.applyValue(getPoolsResult -\u003e getPoolsResult.agentPools()).stream().map(element -\u003e element.name()).collect(toList()));\n        ctx.export(\"autoProvision\", example.applyValue(getPoolsResult -\u003e getPoolsResult.agentPools()).stream().map(element -\u003e element.autoProvision()).collect(toList()));\n        ctx.export(\"autoUpdate\", example.applyValue(getPoolsResult -\u003e getPoolsResult.agentPools()).stream().map(element -\u003e element.autoUpdate()).collect(toList()));\n        ctx.export(\"poolType\", example.applyValue(getPoolsResult -\u003e getPoolsResult.agentPools()).stream().map(element -\u003e element.poolType()).collect(toList()));\n    }\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Agent Pools - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/pools/get?view=azure-devops-rest-7.0)\n",
            "outputs": {
                "description": "A collection of values returned by getPools.\n",
                "properties": {
                    "agentPools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:index/getPoolsAgentPool:getPoolsAgentPool"
                        },
                        "description": "A list of existing agent pools in your Azure DevOps Organization with the following details about every agent pool:\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "agentPools",
                    "id"
                ]
            }
        },
        "azuredevops:index/getProject:getProject": {
            "description": "Use this data source to access information about an existing Project within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = azuredevops.getProject({\n    name: \"Example Project\",\n});\nexport const project = example;\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.get_project(name=\"Example Project\")\npulumi.export(\"project\", example)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureDevOps.GetProject.Invoke(new()\n    {\n        Name = \"Example Project\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"project\"] = example,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuredevops.LookupProject(ctx, \u0026azuredevops.LookupProjectArgs{\n\t\t\tName: pulumi.StringRef(\"Example Project\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"project\", example)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzuredevopsFunctions.getProject(GetProjectArgs.builder()\n            .name(\"Example Project\")\n            .build());\n\n        ctx.export(\"project\", example.applyValue(getProjectResult -\u003e getProjectResult));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: azuredevops:getProject\n      Arguments:\n        name: Example Project\noutputs:\n  project: ${example}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Projects - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/core/projects/get?view=azure-devops-rest-7.0)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProject.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Project.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of the Project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProject.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "features": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "processTemplateId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "versionControl": {
                        "type": "string"
                    },
                    "visibility": {
                        "type": "string"
                    },
                    "workItemTemplate": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "features",
                    "processTemplateId",
                    "versionControl",
                    "visibility",
                    "workItemTemplate",
                    "id"
                ]
            }
        },
        "azuredevops:index/getProjects:getProjects": {
            "description": "Use this data source to access information about existing Projects within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = azuredevops.getProjects({\n    name: \"Example Project\",\n    state: \"wellFormed\",\n});\nexport const projectId = example.then(example =\u003e example.projects.map(__item =\u003e __item.projectId));\nexport const name = example.then(example =\u003e example.projects.map(__item =\u003e __item.name));\nexport const projectUrl = example.then(example =\u003e example.projects.map(__item =\u003e __item.projectUrl));\nexport const state = example.then(example =\u003e example.projects.map(__item =\u003e __item.state));\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.get_projects(name=\"Example Project\",\n    state=\"wellFormed\")\npulumi.export(\"projectId\", [__item.project_id for __item in example.projects])\npulumi.export(\"name\", [__item.name for __item in example.projects])\npulumi.export(\"projectUrl\", [__item.project_url for __item in example.projects])\npulumi.export(\"state\", [__item.state for __item in example.projects])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureDevOps.GetProjects.Invoke(new()\n    {\n        Name = \"Example Project\",\n        State = \"wellFormed\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"projectId\"] = example.Apply(getProjectsResult =\u003e getProjectsResult.Projects).Select(__item =\u003e __item.ProjectId).ToList(),\n        [\"name\"] = example.Apply(getProjectsResult =\u003e getProjectsResult.Projects).Select(__item =\u003e __item.Name).ToList(),\n        [\"projectUrl\"] = example.Apply(getProjectsResult =\u003e getProjectsResult.Projects).Select(__item =\u003e __item.ProjectUrl).ToList(),\n        [\"state\"] = example.Apply(getProjectsResult =\u003e getProjectsResult.Projects).Select(__item =\u003e __item.State).ToList(),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuredevops.GetProjects(ctx, \u0026azuredevops.GetProjectsArgs{\n\t\t\tName:  pulumi.StringRef(\"Example Project\"),\n\t\t\tState: pulumi.StringRef(\"wellFormed\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tvar splat0 []*string\n\t\tfor _, val0 := range example.Projects {\n\t\t\tsplat0 = append(splat0, val0.ProjectId)\n\t\t}\n\t\tctx.Export(\"projectId\", splat0)\n\t\tvar splat1 []*string\n\t\tfor _, val0 := range example.Projects {\n\t\t\tsplat1 = append(splat1, val0.Name)\n\t\t}\n\t\tctx.Export(\"name\", splat1)\n\t\tvar splat2 []*string\n\t\tfor _, val0 := range example.Projects {\n\t\t\tsplat2 = append(splat2, val0.ProjectUrl)\n\t\t}\n\t\tctx.Export(\"projectUrl\", splat2)\n\t\tvar splat3 []*string\n\t\tfor _, val0 := range example.Projects {\n\t\t\tsplat3 = append(splat3, val0.State)\n\t\t}\n\t\tctx.Export(\"state\", splat3)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetProjectsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzuredevopsFunctions.getProjects(GetProjectsArgs.builder()\n            .name(\"Example Project\")\n            .state(\"wellFormed\")\n            .build());\n\n        ctx.export(\"projectId\", example.applyValue(getProjectsResult -\u003e getProjectsResult.projects()).stream().map(element -\u003e element.projectId()).collect(toList()));\n        ctx.export(\"name\", example.applyValue(getProjectsResult -\u003e getProjectsResult.projects()).stream().map(element -\u003e element.name()).collect(toList()));\n        ctx.export(\"projectUrl\", example.applyValue(getProjectsResult -\u003e getProjectsResult.projects()).stream().map(element -\u003e element.projectUrl()).collect(toList()));\n        ctx.export(\"state\", example.applyValue(getProjectsResult -\u003e getProjectsResult.projects()).stream().map(element -\u003e element.state()).collect(toList()));\n    }\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Projects - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/core/projects/get?view=azure-devops-rest-7.0)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProjects.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Project, if not specified all projects will be returned.\n",
                        "willReplaceOnChanges": true
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the Project, if not specified all projects will be returned. Valid values are `all`, `deleting`, `new`, `wellFormed`, `createPending`, `unchanged`,`deleted`.\n\nDataSource without specifying any arguments will return all projects.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProjects.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Project.\n"
                    },
                    "projects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:index/getProjectsProject:getProjectsProject"
                        },
                        "description": "A list of existing projects in your Azure DevOps Organization with details about every project which includes:\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Project state.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projects",
                    "id"
                ]
            }
        },
        "azuredevops:index/getRepositories:getRepositories": {
            "description": "Use this data source to access information about **multiple** existing Git Repositories within Azure DevOps.\nTo read informations about a **single** Git Repository use the data source `azuredevops.Git`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = azuredevops.getProject({\n    name: \"Example Project\",\n});\nconst example-all-repos = example.then(example =\u003e azuredevops.getRepositories({\n    projectId: example.id,\n    includeHidden: true,\n}));\nconst example-single-repo = example.then(example =\u003e azuredevops.getRepositories({\n    projectId: example.id,\n    name: \"Example Repository\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.get_project(name=\"Example Project\")\nexample_all_repos = azuredevops.get_repositories(project_id=example.id,\n    include_hidden=True)\nexample_single_repo = azuredevops.get_repositories(project_id=example.id,\n    name=\"Example Repository\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureDevOps.GetProject.Invoke(new()\n    {\n        Name = \"Example Project\",\n    });\n\n    var example_all_repos = AzureDevOps.GetRepositories.Invoke(new()\n    {\n        ProjectId = example.Apply(getProjectResult =\u003e getProjectResult.Id),\n        IncludeHidden = true,\n    });\n\n    var example_single_repo = AzureDevOps.GetRepositories.Invoke(new()\n    {\n        ProjectId = example.Apply(getProjectResult =\u003e getProjectResult.Id),\n        Name = \"Example Repository\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuredevops.LookupProject(ctx, \u0026azuredevops.LookupProjectArgs{\n\t\t\tName: pulumi.StringRef(\"Example Project\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.GetRepositories(ctx, \u0026azuredevops.GetRepositoriesArgs{\n\t\t\tProjectId:     pulumi.StringRef(example.Id),\n\t\t\tIncludeHidden: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.GetRepositories(ctx, \u0026azuredevops.GetRepositoriesArgs{\n\t\t\tProjectId: pulumi.StringRef(example.Id),\n\t\t\tName:      pulumi.StringRef(\"Example Repository\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetProjectArgs;\nimport com.pulumi.azuredevops.inputs.GetRepositoriesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzuredevopsFunctions.getProject(GetProjectArgs.builder()\n            .name(\"Example Project\")\n            .build());\n\n        final var example-all-repos = AzuredevopsFunctions.getRepositories(GetRepositoriesArgs.builder()\n            .projectId(example.applyValue(getProjectResult -\u003e getProjectResult.id()))\n            .includeHidden(true)\n            .build());\n\n        final var example-single-repo = AzuredevopsFunctions.getRepositories(GetRepositoriesArgs.builder()\n            .projectId(example.applyValue(getProjectResult -\u003e getProjectResult.id()))\n            .name(\"Example Repository\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: azuredevops:getProject\n      Arguments:\n        name: Example Project\n  example-all-repos:\n    fn::invoke:\n      Function: azuredevops:getRepositories\n      Arguments:\n        projectId: ${example.id}\n        includeHidden: true\n  example-single-repo:\n    fn::invoke:\n      Function: azuredevops:getRepositories\n      Arguments:\n        projectId: ${example.id}\n        name: Example Repository\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Git API](https://docs.microsoft.com/en-us/rest/api/azure/devops/git/?view=azure-devops-rest-7.0)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRepositories.\n",
                "properties": {
                    "includeHidden": {
                        "type": "boolean",
                        "description": "DataSource without specifying any arguments will return all Git repositories of an organization.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Git repository to retrieve; requires `project_id` to be specified as well\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of project to list Git repositories\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRepositories.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "includeHidden": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "Git repository name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier to which the Git repository belongs.\n"
                    },
                    "repositories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:index/getRepositoriesRepository:getRepositoriesRepository"
                        },
                        "description": "A list of existing projects in your Azure DevOps Organization with details about every project which includes:\n"
                    }
                },
                "type": "object",
                "required": [
                    "repositories",
                    "id"
                ]
            }
        },
        "azuredevops:index/getServiceEndpointAzureRM:getServiceEndpointAzureRM": {
            "description": "Use this data source to access information about an existing AzureRM service Endpoint.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### By Service Endpoint ID\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst sample = azuredevops.getProject({\n    name: \"Sample Project\",\n});\nconst serviceendpoint = sample.then(sample =\u003e azuredevops.getServiceEndpointAzureRM({\n    projectId: sample.id,\n    serviceEndpointId: \"00000000-0000-0000-0000-000000000000\",\n}));\nexport const serviceEndpointName = serviceendpoint.then(serviceendpoint =\u003e serviceendpoint.serviceEndpointName);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nsample = azuredevops.get_project(name=\"Sample Project\")\nserviceendpoint = azuredevops.get_service_endpoint_azure_rm(project_id=sample.id,\n    service_endpoint_id=\"00000000-0000-0000-0000-000000000000\")\npulumi.export(\"serviceEndpointName\", serviceendpoint.service_endpoint_name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sample = AzureDevOps.GetProject.Invoke(new()\n    {\n        Name = \"Sample Project\",\n    });\n\n    var serviceendpoint = AzureDevOps.GetServiceEndpointAzureRM.Invoke(new()\n    {\n        ProjectId = sample.Apply(getProjectResult =\u003e getProjectResult.Id),\n        ServiceEndpointId = \"00000000-0000-0000-0000-000000000000\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"serviceEndpointName\"] = serviceendpoint.Apply(getServiceEndpointAzureRMResult =\u003e getServiceEndpointAzureRMResult.ServiceEndpointName),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsample, err := azuredevops.LookupProject(ctx, \u0026azuredevops.LookupProjectArgs{\n\t\t\tName: pulumi.StringRef(\"Sample Project\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tserviceendpoint, err := azuredevops.LookupServiceEndpointAzureRM(ctx, \u0026azuredevops.LookupServiceEndpointAzureRMArgs{\n\t\t\tProjectId:         sample.Id,\n\t\t\tServiceEndpointId: pulumi.StringRef(\"00000000-0000-0000-0000-000000000000\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"serviceEndpointName\", serviceendpoint.ServiceEndpointName)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetProjectArgs;\nimport com.pulumi.azuredevops.inputs.GetServiceEndpointAzureRMArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var sample = AzuredevopsFunctions.getProject(GetProjectArgs.builder()\n            .name(\"Sample Project\")\n            .build());\n\n        final var serviceendpoint = AzuredevopsFunctions.getServiceEndpointAzureRM(GetServiceEndpointAzureRMArgs.builder()\n            .projectId(sample.applyValue(getProjectResult -\u003e getProjectResult.id()))\n            .serviceEndpointId(\"00000000-0000-0000-0000-000000000000\")\n            .build());\n\n        ctx.export(\"serviceEndpointName\", serviceendpoint.applyValue(getServiceEndpointAzureRMResult -\u003e getServiceEndpointAzureRMResult.serviceEndpointName()));\n    }\n}\n```\n```yaml\nvariables:\n  sample:\n    fn::invoke:\n      Function: azuredevops:getProject\n      Arguments:\n        name: Sample Project\n  serviceendpoint:\n    fn::invoke:\n      Function: azuredevops:getServiceEndpointAzureRM\n      Arguments:\n        projectId: ${sample.id}\n        serviceEndpointId: 00000000-0000-0000-0000-000000000000\noutputs:\n  serviceEndpointName: ${serviceendpoint.serviceEndpointName}\n```\n{{% /example %}}\n{{% example %}}\n### By Service Endpoint Name\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst sample = azuredevops.getProject({\n    name: \"Sample Project\",\n});\nconst serviceendpoint = sample.then(sample =\u003e azuredevops.getServiceEndpointAzureRM({\n    projectId: sample.id,\n    serviceEndpointName: \"Example-Service-Endpoint\",\n}));\nexport const serviceEndpointId = serviceendpoint.then(serviceendpoint =\u003e serviceendpoint.id);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nsample = azuredevops.get_project(name=\"Sample Project\")\nserviceendpoint = azuredevops.get_service_endpoint_azure_rm(project_id=sample.id,\n    service_endpoint_name=\"Example-Service-Endpoint\")\npulumi.export(\"serviceEndpointId\", serviceendpoint.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sample = AzureDevOps.GetProject.Invoke(new()\n    {\n        Name = \"Sample Project\",\n    });\n\n    var serviceendpoint = AzureDevOps.GetServiceEndpointAzureRM.Invoke(new()\n    {\n        ProjectId = sample.Apply(getProjectResult =\u003e getProjectResult.Id),\n        ServiceEndpointName = \"Example-Service-Endpoint\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"serviceEndpointId\"] = serviceendpoint.Apply(getServiceEndpointAzureRMResult =\u003e getServiceEndpointAzureRMResult.Id),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsample, err := azuredevops.LookupProject(ctx, \u0026azuredevops.LookupProjectArgs{\n\t\t\tName: pulumi.StringRef(\"Sample Project\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tserviceendpoint, err := azuredevops.LookupServiceEndpointAzureRM(ctx, \u0026azuredevops.LookupServiceEndpointAzureRMArgs{\n\t\t\tProjectId:           sample.Id,\n\t\t\tServiceEndpointName: pulumi.StringRef(\"Example-Service-Endpoint\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"serviceEndpointId\", serviceendpoint.Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetProjectArgs;\nimport com.pulumi.azuredevops.inputs.GetServiceEndpointAzureRMArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var sample = AzuredevopsFunctions.getProject(GetProjectArgs.builder()\n            .name(\"Sample Project\")\n            .build());\n\n        final var serviceendpoint = AzuredevopsFunctions.getServiceEndpointAzureRM(GetServiceEndpointAzureRMArgs.builder()\n            .projectId(sample.applyValue(getProjectResult -\u003e getProjectResult.id()))\n            .serviceEndpointName(\"Example-Service-Endpoint\")\n            .build());\n\n        ctx.export(\"serviceEndpointId\", serviceendpoint.applyValue(getServiceEndpointAzureRMResult -\u003e getServiceEndpointAzureRMResult.id()));\n    }\n}\n```\n```yaml\nvariables:\n  sample:\n    fn::invoke:\n      Function: azuredevops:getProject\n      Arguments:\n        name: Sample Project\n  serviceendpoint:\n    fn::invoke:\n      Function: azuredevops:getServiceEndpointAzureRM\n      Arguments:\n        projectId: ${sample.id}\n        serviceEndpointName: Example-Service-Endpoint\noutputs:\n  serviceEndpointId: ${serviceendpoint.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getServiceEndpointAzureRM.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n"
                    },
                    "serviceEndpointId": {
                        "type": "string",
                        "description": "the ID of the Service Endpoint.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "the Name of the Service Endpoint.\n\n\u003e **NOTE:** One of either `service_endpoint_id` or `service_endpoint_name` must be specified.\n\u003e **NOTE:** When supplying `service_endpoint_name`, take care to ensure that this is a unique name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getServiceEndpointAzureRM.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Specifies the Authorization Scheme Map.\n"
                    },
                    "azurermManagementGroupId": {
                        "type": "string",
                        "description": "Specified the Management Group ID of the Service Endpoint is target, if available.\n"
                    },
                    "azurermManagementGroupName": {
                        "type": "string",
                        "description": "Specified the Management Group Name of the Service Endpoint target, if available.\n"
                    },
                    "azurermSpnTenantid": {
                        "type": "string",
                        "description": "Specifies the Tenant ID of the Azure targets.\n"
                    },
                    "azurermSubscriptionId": {
                        "type": "string",
                        "description": "Specifies the Subscription ID of the Service Endpoint target, if available.\n"
                    },
                    "azurermSubscriptionName": {
                        "type": "string",
                        "description": "Specifies the Subscription Name of the Service Endpoint target, if available.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Specifies the description of the Service Endpoint.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "The Cloud Environment. Possible values are `AzureCloud` and `AzureChinaCloud`.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "resourceGroup": {
                        "type": "string",
                        "description": "Specifies the Resource Group of the Service Endpoint target, if available.\n"
                    },
                    "serviceEndpointAuthenticationScheme": {
                        "type": "string",
                        "description": "Specifies the authentication scheme of azurerm endpoint, either `WorkloadIdentityFederation`, `ManagedServiceIdentity` or `ServicePrincipal`.\n"
                    },
                    "serviceEndpointId": {
                        "type": "string"
                    },
                    "serviceEndpointName": {
                        "type": "string"
                    },
                    "workloadIdentityFederationIssuer": {
                        "type": "string",
                        "description": "The issuer if `service_endpoint_authentication_scheme` is set to `WorkloadIdentityFederation`. This looks like `https://vstoken.dev.azure.com/f66a4bc2-08ad-4ec0-a25e-e769d6b3b294`, where the GUID is the Organization ID of your Azure DevOps Organisation.\n"
                    },
                    "workloadIdentityFederationSubject": {
                        "type": "string",
                        "description": "The subject if `service_endpoint_authentication_scheme` is set to `WorkloadIdentityFederation`. This looks like `sc://my-organisation/my-project/my-service-connection-name`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "authorization",
                    "azurermManagementGroupId",
                    "azurermManagementGroupName",
                    "azurermSpnTenantid",
                    "azurermSubscriptionId",
                    "azurermSubscriptionName",
                    "description",
                    "environment",
                    "projectId",
                    "resourceGroup",
                    "serviceEndpointAuthenticationScheme",
                    "serviceEndpointId",
                    "serviceEndpointName",
                    "workloadIdentityFederationIssuer",
                    "workloadIdentityFederationSubject",
                    "id"
                ]
            }
        },
        "azuredevops:index/getServiceEndpointGithub:getServiceEndpointGithub": {
            "description": "Use this data source to access information about an existing GitHub service Endpoint.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### By Service Endpoint ID\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst sample = azuredevops.getProject({\n    name: \"Sample Project\",\n});\nconst serviceendpoint = sample.then(sample =\u003e azuredevops.getServiceEndpointGithub({\n    projectId: sample.id,\n    serviceEndpointId: \"00000000-0000-0000-0000-000000000000\",\n}));\nexport const serviceEndpointName = serviceendpoint.then(serviceendpoint =\u003e serviceendpoint.serviceEndpointName);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nsample = azuredevops.get_project(name=\"Sample Project\")\nserviceendpoint = azuredevops.get_service_endpoint_github(project_id=sample.id,\n    service_endpoint_id=\"00000000-0000-0000-0000-000000000000\")\npulumi.export(\"serviceEndpointName\", serviceendpoint.service_endpoint_name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sample = AzureDevOps.GetProject.Invoke(new()\n    {\n        Name = \"Sample Project\",\n    });\n\n    var serviceendpoint = AzureDevOps.GetServiceEndpointGithub.Invoke(new()\n    {\n        ProjectId = sample.Apply(getProjectResult =\u003e getProjectResult.Id),\n        ServiceEndpointId = \"00000000-0000-0000-0000-000000000000\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"serviceEndpointName\"] = serviceendpoint.Apply(getServiceEndpointGithubResult =\u003e getServiceEndpointGithubResult.ServiceEndpointName),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsample, err := azuredevops.LookupProject(ctx, \u0026azuredevops.LookupProjectArgs{\n\t\t\tName: pulumi.StringRef(\"Sample Project\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tserviceendpoint, err := azuredevops.GetServiceEndpointGithub(ctx, \u0026azuredevops.GetServiceEndpointGithubArgs{\n\t\t\tProjectId:         sample.Id,\n\t\t\tServiceEndpointId: pulumi.StringRef(\"00000000-0000-0000-0000-000000000000\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"serviceEndpointName\", serviceendpoint.ServiceEndpointName)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetProjectArgs;\nimport com.pulumi.azuredevops.inputs.GetServiceEndpointGithubArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var sample = AzuredevopsFunctions.getProject(GetProjectArgs.builder()\n            .name(\"Sample Project\")\n            .build());\n\n        final var serviceendpoint = AzuredevopsFunctions.getServiceEndpointGithub(GetServiceEndpointGithubArgs.builder()\n            .projectId(sample.applyValue(getProjectResult -\u003e getProjectResult.id()))\n            .serviceEndpointId(\"00000000-0000-0000-0000-000000000000\")\n            .build());\n\n        ctx.export(\"serviceEndpointName\", serviceendpoint.applyValue(getServiceEndpointGithubResult -\u003e getServiceEndpointGithubResult.serviceEndpointName()));\n    }\n}\n```\n```yaml\nvariables:\n  sample:\n    fn::invoke:\n      Function: azuredevops:getProject\n      Arguments:\n        name: Sample Project\n  serviceendpoint:\n    fn::invoke:\n      Function: azuredevops:getServiceEndpointGithub\n      Arguments:\n        projectId: ${sample.id}\n        serviceEndpointId: 00000000-0000-0000-0000-000000000000\noutputs:\n  serviceEndpointName: ${serviceendpoint.serviceEndpointName}\n```\n{{% /example %}}\n{{% example %}}\n### By Service Endpoint Name\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst sample = azuredevops.getProject({\n    name: \"Sample Project\",\n});\nconst serviceendpoint = sample.then(sample =\u003e azuredevops.getServiceEndpointGithub({\n    projectId: sample.id,\n    serviceEndpointName: \"Example-Service-Endpoint\",\n}));\nexport const serviceEndpointId = serviceendpoint.then(serviceendpoint =\u003e serviceendpoint.id);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nsample = azuredevops.get_project(name=\"Sample Project\")\nserviceendpoint = azuredevops.get_service_endpoint_github(project_id=sample.id,\n    service_endpoint_name=\"Example-Service-Endpoint\")\npulumi.export(\"serviceEndpointId\", serviceendpoint.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sample = AzureDevOps.GetProject.Invoke(new()\n    {\n        Name = \"Sample Project\",\n    });\n\n    var serviceendpoint = AzureDevOps.GetServiceEndpointGithub.Invoke(new()\n    {\n        ProjectId = sample.Apply(getProjectResult =\u003e getProjectResult.Id),\n        ServiceEndpointName = \"Example-Service-Endpoint\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"serviceEndpointId\"] = serviceendpoint.Apply(getServiceEndpointGithubResult =\u003e getServiceEndpointGithubResult.Id),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsample, err := azuredevops.LookupProject(ctx, \u0026azuredevops.LookupProjectArgs{\n\t\t\tName: pulumi.StringRef(\"Sample Project\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tserviceendpoint, err := azuredevops.GetServiceEndpointGithub(ctx, \u0026azuredevops.GetServiceEndpointGithubArgs{\n\t\t\tProjectId:           sample.Id,\n\t\t\tServiceEndpointName: pulumi.StringRef(\"Example-Service-Endpoint\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"serviceEndpointId\", serviceendpoint.Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetProjectArgs;\nimport com.pulumi.azuredevops.inputs.GetServiceEndpointGithubArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var sample = AzuredevopsFunctions.getProject(GetProjectArgs.builder()\n            .name(\"Sample Project\")\n            .build());\n\n        final var serviceendpoint = AzuredevopsFunctions.getServiceEndpointGithub(GetServiceEndpointGithubArgs.builder()\n            .projectId(sample.applyValue(getProjectResult -\u003e getProjectResult.id()))\n            .serviceEndpointName(\"Example-Service-Endpoint\")\n            .build());\n\n        ctx.export(\"serviceEndpointId\", serviceendpoint.applyValue(getServiceEndpointGithubResult -\u003e getServiceEndpointGithubResult.id()));\n    }\n}\n```\n```yaml\nvariables:\n  sample:\n    fn::invoke:\n      Function: azuredevops:getProject\n      Arguments:\n        name: Sample Project\n  serviceendpoint:\n    fn::invoke:\n      Function: azuredevops:getServiceEndpointGithub\n      Arguments:\n        projectId: ${sample.id}\n        serviceEndpointName: Example-Service-Endpoint\noutputs:\n  serviceEndpointId: ${serviceendpoint.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getServiceEndpointGithub.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n"
                    },
                    "serviceEndpointId": {
                        "type": "string",
                        "description": "the ID of the Service Endpoint.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "the Name of the Service Endpoint.\n\n\u003e **NOTE:** One of either `service_endpoint_id` or `service_endpoint_name` must be specified.\n\u003e **NOTE:** When supplying `service_endpoint_name`, take care to ensure that this is a unique name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getServiceEndpointGithub.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Specifies the Authorization Scheme Map.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Specifies the description of the Service Endpoint.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "serviceEndpointId": {
                        "type": "string"
                    },
                    "serviceEndpointName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "authorization",
                    "description",
                    "projectId",
                    "serviceEndpointId",
                    "serviceEndpointName",
                    "id"
                ]
            }
        },
        "azuredevops:index/getServiceendpointAzurecr:getServiceendpointAzurecr": {
            "description": "Use this data source to access information about an existing Azure Container Registry Service Endpoint.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = azuredevops.getServiceendpointAzurecr({\n    projectId: azuredevops_project.example.id,\n    serviceEndpointName: \"Example Azure Container Registry\",\n});\nexport const serviceEndpointId = example.then(example =\u003e example.id);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.get_serviceendpoint_azurecr(project_id=azuredevops_project[\"example\"][\"id\"],\n    service_endpoint_name=\"Example Azure Container Registry\")\npulumi.export(\"serviceEndpointId\", example.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureDevOps.GetServiceendpointAzurecr.Invoke(new()\n    {\n        ProjectId = azuredevops_project.Example.Id,\n        ServiceEndpointName = \"Example Azure Container Registry\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"serviceEndpointId\"] = example.Apply(getServiceendpointAzurecrResult =\u003e getServiceendpointAzurecrResult.Id),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuredevops.GetServiceendpointAzurecr(ctx, \u0026azuredevops.GetServiceendpointAzurecrArgs{\n\t\t\tProjectId:           azuredevops_project.Example.Id,\n\t\t\tServiceEndpointName: pulumi.StringRef(\"Example Azure Container Registry\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"serviceEndpointId\", example.Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetServiceendpointAzurecrArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzuredevopsFunctions.getServiceendpointAzurecr(GetServiceendpointAzurecrArgs.builder()\n            .projectId(azuredevops_project.example().id())\n            .serviceEndpointName(\"Example Azure Container Registry\")\n            .build());\n\n        ctx.export(\"serviceEndpointId\", example.applyValue(getServiceendpointAzurecrResult -\u003e getServiceendpointAzurecrResult.id()));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: azuredevops:getServiceendpointAzurecr\n      Arguments:\n        projectId: ${azuredevops_project.example.id}\n        serviceEndpointName: Example Azure Container Registry\noutputs:\n  serviceEndpointId: ${example.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getServiceendpointAzurecr.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n"
                    },
                    "serviceEndpointId": {
                        "type": "string",
                        "description": "the ID of the Service Endpoint.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "the Name of the Service Endpoint.\n\n\u003e **NOTE:** One of either `service_endpoint_id` or `service_endpoint_name` must be specified.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getServiceendpointAzurecr.\n",
                "properties": {
                    "appObjectId": {
                        "type": "string",
                        "description": "The Object ID of the Service Principal.\n"
                    },
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Specifies the Authorization Scheme Map.\n"
                    },
                    "azSpnRoleAssignmentId": {
                        "type": "string",
                        "description": "The ID of Service Principal Role Assignment.\n"
                    },
                    "azSpnRolePermissions": {
                        "type": "string",
                        "description": "The Service Principal Role Permissions.\n"
                    },
                    "azurecrName": {
                        "type": "string",
                        "description": "The Azure Container Registry name.\n"
                    },
                    "azurecrSpnTenantid": {
                        "type": "string",
                        "description": "The Tenant ID of the service principal.\n"
                    },
                    "azurecrSubscriptionId": {
                        "type": "string",
                        "description": "The Subscription ID of the Azure targets.\n"
                    },
                    "azurecrSubscriptionName": {
                        "type": "string",
                        "description": "The Subscription Name of the Azure targets.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The Service Endpoint description.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "resourceGroup": {
                        "type": "string",
                        "description": "The Resource Group to which the Container Registry belongs.\n"
                    },
                    "serviceEndpointId": {
                        "type": "string"
                    },
                    "serviceEndpointName": {
                        "type": "string"
                    },
                    "servicePrincipalId": {
                        "type": "string",
                        "description": "The Application(Client) ID of the Service Principal.\n"
                    },
                    "spnObjectId": {
                        "type": "string",
                        "description": "The ID of the Service Principal.\n"
                    }
                },
                "type": "object",
                "required": [
                    "appObjectId",
                    "authorization",
                    "azSpnRoleAssignmentId",
                    "azSpnRolePermissions",
                    "azurecrName",
                    "azurecrSpnTenantid",
                    "azurecrSubscriptionId",
                    "azurecrSubscriptionName",
                    "description",
                    "projectId",
                    "resourceGroup",
                    "serviceEndpointId",
                    "serviceEndpointName",
                    "servicePrincipalId",
                    "spnObjectId",
                    "id"
                ]
            }
        },
        "azuredevops:index/getServiceendpointNpm:getServiceendpointNpm": {
            "description": "Use this data source to access information about an existing NPM Service Endpoint.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = azuredevops.getServiceendpointNpm({\n    projectId: azuredevops_project.example.id,\n    serviceEndpointName: \"Example npm\",\n});\nexport const serviceEndpointId = example.then(example =\u003e example.id);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.get_serviceendpoint_npm(project_id=azuredevops_project[\"example\"][\"id\"],\n    service_endpoint_name=\"Example npm\")\npulumi.export(\"serviceEndpointId\", example.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureDevOps.GetServiceendpointNpm.Invoke(new()\n    {\n        ProjectId = azuredevops_project.Example.Id,\n        ServiceEndpointName = \"Example npm\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"serviceEndpointId\"] = example.Apply(getServiceendpointNpmResult =\u003e getServiceendpointNpmResult.Id),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuredevops.GetServiceendpointNpm(ctx, \u0026azuredevops.GetServiceendpointNpmArgs{\n\t\t\tProjectId:           azuredevops_project.Example.Id,\n\t\t\tServiceEndpointName: pulumi.StringRef(\"Example npm\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"serviceEndpointId\", example.Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetServiceendpointNpmArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzuredevopsFunctions.getServiceendpointNpm(GetServiceendpointNpmArgs.builder()\n            .projectId(azuredevops_project.example().id())\n            .serviceEndpointName(\"Example npm\")\n            .build());\n\n        ctx.export(\"serviceEndpointId\", example.applyValue(getServiceendpointNpmResult -\u003e getServiceendpointNpmResult.id()));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: azuredevops:getServiceendpointNpm\n      Arguments:\n        projectId: ${azuredevops_project.example.id}\n        serviceEndpointName: Example npm\noutputs:\n  serviceEndpointId: ${example.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getServiceendpointNpm.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n"
                    },
                    "serviceEndpointId": {
                        "type": "string",
                        "description": "the ID of the Service Endpoint.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "the Name of the Service Endpoint.\n\n\u003e **NOTE:** One of either `service_endpoint_id` or `service_endpoint_name` must be specified.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getServiceendpointNpm.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Specifies the Authorization Scheme Map.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Specifies the description of the Service Endpoint.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "serviceEndpointId": {
                        "type": "string"
                    },
                    "serviceEndpointName": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string",
                        "description": "Specifies the URL of the npm registry to connect with.\n"
                    }
                },
                "type": "object",
                "required": [
                    "authorization",
                    "description",
                    "projectId",
                    "serviceEndpointId",
                    "serviceEndpointName",
                    "url",
                    "id"
                ]
            }
        },
        "azuredevops:index/getServiceendpointSonarcloud:getServiceendpointSonarcloud": {
            "description": "Use this data source to access information about an existing Sonar Cloud Service Endpoint.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = azuredevops.getServiceendpointSonarcloud({\n    projectId: azuredevops_project.example.id,\n    serviceEndpointName: \"Example Sonar Cloud\",\n});\nexport const serviceEndpointId = example.then(example =\u003e example.id);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.get_serviceendpoint_sonarcloud(project_id=azuredevops_project[\"example\"][\"id\"],\n    service_endpoint_name=\"Example Sonar Cloud\")\npulumi.export(\"serviceEndpointId\", example.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureDevOps.GetServiceendpointSonarcloud.Invoke(new()\n    {\n        ProjectId = azuredevops_project.Example.Id,\n        ServiceEndpointName = \"Example Sonar Cloud\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"serviceEndpointId\"] = example.Apply(getServiceendpointSonarcloudResult =\u003e getServiceendpointSonarcloudResult.Id),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuredevops.GetServiceendpointSonarcloud(ctx, \u0026azuredevops.GetServiceendpointSonarcloudArgs{\n\t\t\tProjectId:           azuredevops_project.Example.Id,\n\t\t\tServiceEndpointName: pulumi.StringRef(\"Example Sonar Cloud\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"serviceEndpointId\", example.Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetServiceendpointSonarcloudArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzuredevopsFunctions.getServiceendpointSonarcloud(GetServiceendpointSonarcloudArgs.builder()\n            .projectId(azuredevops_project.example().id())\n            .serviceEndpointName(\"Example Sonar Cloud\")\n            .build());\n\n        ctx.export(\"serviceEndpointId\", example.applyValue(getServiceendpointSonarcloudResult -\u003e getServiceendpointSonarcloudResult.id()));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: azuredevops:getServiceendpointSonarcloud\n      Arguments:\n        projectId: ${azuredevops_project.example.id}\n        serviceEndpointName: Example Sonar Cloud\noutputs:\n  serviceEndpointId: ${example.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getServiceendpointSonarcloud.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project.\n"
                    },
                    "serviceEndpointId": {
                        "type": "string",
                        "description": "the ID of the Service Endpoint.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "the Name of the Service Endpoint.\n\n\u003e **NOTE:** One of either `service_endpoint_id` or `service_endpoint_name` must be specified.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getServiceendpointSonarcloud.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Specifies the Authorization Scheme Map.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Specifies the description of the Service Endpoint.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "serviceEndpointId": {
                        "type": "string"
                    },
                    "serviceEndpointName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "authorization",
                    "description",
                    "projectId",
                    "serviceEndpointId",
                    "serviceEndpointName",
                    "id"
                ]
            }
        },
        "azuredevops:index/getTeam:getTeam": {
            "description": "Use this data source to access information about an existing Team in a Project within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = new azuredevops.Project(\"exampleProject\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"Managed by Terraform\",\n});\nconst exampleTeam = azuredevops.getTeamOutput({\n    projectId: exampleProject.id,\n    name: \"Example Project Team\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.Project(\"exampleProject\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"Managed by Terraform\")\nexample_team = azuredevops.get_team_output(project_id=example_project.id,\n    name=\"Example Project Team\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new AzureDevOps.Project(\"exampleProject\", new()\n    {\n        WorkItemTemplate = \"Agile\",\n        VersionControl = \"Git\",\n        Visibility = \"private\",\n        Description = \"Managed by Terraform\",\n    });\n\n    var exampleTeam = AzureDevOps.GetTeam.Invoke(new()\n    {\n        ProjectId = exampleProject.Id,\n        Name = \"Example Project Team\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.NewProject(ctx, \"exampleProject\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = azuredevops.LookupTeamOutput(ctx, azuredevops.GetTeamOutputArgs{\n\t\t\tProjectId: exampleProject.ID(),\n\t\t\tName:      pulumi.String(\"Example Project Team\"),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.Project;\nimport com.pulumi.azuredevops.ProjectArgs;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetTeamArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .workItemTemplate(\"Agile\")\n            .versionControl(\"Git\")\n            .visibility(\"private\")\n            .description(\"Managed by Terraform\")\n            .build());\n\n        final var exampleTeam = AzuredevopsFunctions.getTeam(GetTeamArgs.builder()\n            .projectId(exampleProject.id())\n            .name(\"Example Project Team\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: azuredevops:Project\n    properties:\n      workItemTemplate: Agile\n      versionControl: Git\n      visibility: private\n      description: Managed by Terraform\nvariables:\n  exampleTeam:\n    fn::invoke:\n      Function: azuredevops:getTeam\n      Arguments:\n        projectId: ${exampleProject.id}\n        name: Example Project Team\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Teams - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/core/teams/get?view=azure-devops-rest-7.0)\n\n## PAT Permissions Required\n\n- **vso.project**:\tGrants the ability to read projects and teams.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTeam.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the Team.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The Project ID.\n"
                    },
                    "top": {
                        "type": "integer",
                        "description": "The maximum number of teams to return. Defaults to `100`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTeam.\n",
                "properties": {
                    "administrators": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of subject descriptors for `administrators` of the team.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Team description.\n"
                    },
                    "descriptor": {
                        "type": "string",
                        "description": "The descriptor of the Team.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of subject descriptors for `members` of the team.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "top": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "administrators",
                    "description",
                    "descriptor",
                    "members",
                    "name",
                    "projectId",
                    "id"
                ]
            }
        },
        "azuredevops:index/getTeams:getTeams": {
            "description": "Use this data source to access information about existing Teams in a Project or globally within an Azure DevOps organization\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = azuredevops.getTeams({});\nexport const projectId = example.then(example =\u003e example.teams.map(__item =\u003e __item.projectId));\nexport const name = example.then(example =\u003e example.teams.map(__item =\u003e __item.name));\nexport const alladministrators = example.then(example =\u003e example.teams.map(__item =\u003e __item.administrators));\nexport const administrators = example.then(example =\u003e example.teams.map(__item =\u003e __item.members));\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.get_teams()\npulumi.export(\"projectId\", [__item.project_id for __item in example.teams])\npulumi.export(\"name\", [__item.name for __item in example.teams])\npulumi.export(\"alladministrators\", [__item.administrators for __item in example.teams])\npulumi.export(\"administrators\", [__item.members for __item in example.teams])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureDevOps.GetTeams.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"projectId\"] = example.Apply(getTeamsResult =\u003e getTeamsResult.Teams).Select(__item =\u003e __item.ProjectId).ToList(),\n        [\"name\"] = example.Apply(getTeamsResult =\u003e getTeamsResult.Teams).Select(__item =\u003e __item.Name).ToList(),\n        [\"alladministrators\"] = example.Apply(getTeamsResult =\u003e getTeamsResult.Teams).Select(__item =\u003e __item.Administrators).ToList(),\n        [\"administrators\"] = example.Apply(getTeamsResult =\u003e getTeamsResult.Teams).Select(__item =\u003e __item.Members).ToList(),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuredevops.GetTeams(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tvar splat0 []*string\n\t\tfor _, val0 := range example.Teams {\n\t\t\tsplat0 = append(splat0, val0.ProjectId)\n\t\t}\n\t\tctx.Export(\"projectId\", splat0)\n\t\tvar splat1 []*string\n\t\tfor _, val0 := range example.Teams {\n\t\t\tsplat1 = append(splat1, val0.Name)\n\t\t}\n\t\tctx.Export(\"name\", splat1)\n\t\tvar splat2 []interface{}\n\t\tfor _, val0 := range example.Teams {\n\t\t\tsplat2 = append(splat2, val0.Administrators)\n\t\t}\n\t\tctx.Export(\"alladministrators\", splat2)\n\t\tvar splat3 []interface{}\n\t\tfor _, val0 := range example.Teams {\n\t\t\tsplat3 = append(splat3, val0.Members)\n\t\t}\n\t\tctx.Export(\"administrators\", splat3)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetTeamsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzuredevopsFunctions.getTeams();\n\n        ctx.export(\"projectId\", example.applyValue(getTeamsResult -\u003e getTeamsResult.teams()).stream().map(element -\u003e element.projectId()).collect(toList()));\n        ctx.export(\"name\", example.applyValue(getTeamsResult -\u003e getTeamsResult.teams()).stream().map(element -\u003e element.name()).collect(toList()));\n        ctx.export(\"alladministrators\", example.applyValue(getTeamsResult -\u003e getTeamsResult.teams()).stream().map(element -\u003e element.administrators()).collect(toList()));\n        ctx.export(\"administrators\", example.applyValue(getTeamsResult -\u003e getTeamsResult.teams()).stream().map(element -\u003e element.members()).collect(toList()));\n    }\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Teams - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/core/teams/get?view=azure-devops-rest-7.0)\n\n## PAT Permissions Required\n\n- **vso.project**:\tGrants the ability to read projects and teams.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTeams.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "The Project ID. If no project ID all teams of the organization will be returned.\n"
                    },
                    "top": {
                        "type": "integer",
                        "description": "The maximum number of teams to return. Defaults to `100`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTeams.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier.\n- `id - Team identifier\n"
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:index/getTeamsTeam:getTeamsTeam"
                        },
                        "description": "A list of existing projects in your Azure DevOps Organization with details about every project which includes:\n"
                    },
                    "top": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "teams",
                    "id"
                ]
            }
        },
        "azuredevops:index/getUsers:getUsers": {
            "description": "Use this data source to access information about an existing users within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst example = azuredevops.getUsers({\n    principalName: \"contoso-user@contoso.onmicrosoft.com\",\n});\nconst example-all-users = azuredevops.getUsers({});\nconst example-all-from-origin = azuredevops.getUsers({\n    origin: \"aad\",\n});\nconst example-all-from-subjectTypes = azuredevops.getUsers({\n    subjectTypes: [\n        \"aad\",\n        \"msa\",\n    ],\n});\nconst example-all-from-origin-id = azuredevops.getUsers({\n    origin: \"aad\",\n    originId: \"00000000-0000-0000-0000-000000000000\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample = azuredevops.get_users(principal_name=\"contoso-user@contoso.onmicrosoft.com\")\nexample_all_users = azuredevops.get_users()\nexample_all_from_origin = azuredevops.get_users(origin=\"aad\")\nexample_all_from_subject_types = azuredevops.get_users(subject_types=[\n    \"aad\",\n    \"msa\",\n])\nexample_all_from_origin_id = azuredevops.get_users(origin=\"aad\",\n    origin_id=\"00000000-0000-0000-0000-000000000000\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureDevOps.GetUsers.Invoke(new()\n    {\n        PrincipalName = \"contoso-user@contoso.onmicrosoft.com\",\n    });\n\n    var example_all_users = AzureDevOps.GetUsers.Invoke();\n\n    var example_all_from_origin = AzureDevOps.GetUsers.Invoke(new()\n    {\n        Origin = \"aad\",\n    });\n\n    var example_all_from_subjectTypes = AzureDevOps.GetUsers.Invoke(new()\n    {\n        SubjectTypes = new[]\n        {\n            \"aad\",\n            \"msa\",\n        },\n    });\n\n    var example_all_from_origin_id = AzureDevOps.GetUsers.Invoke(new()\n    {\n        Origin = \"aad\",\n        OriginId = \"00000000-0000-0000-0000-000000000000\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.GetUsers(ctx, \u0026azuredevops.GetUsersArgs{\n\t\t\tPrincipalName: pulumi.StringRef(\"contoso-user@contoso.onmicrosoft.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.GetUsers(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.GetUsers(ctx, \u0026azuredevops.GetUsersArgs{\n\t\t\tOrigin: pulumi.StringRef(\"aad\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.GetUsers(ctx, \u0026azuredevops.GetUsersArgs{\n\t\t\tSubjectTypes: []string{\n\t\t\t\t\"aad\",\n\t\t\t\t\"msa\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.GetUsers(ctx, \u0026azuredevops.GetUsersArgs{\n\t\t\tOrigin:   pulumi.StringRef(\"aad\"),\n\t\t\tOriginId: pulumi.StringRef(\"00000000-0000-0000-0000-000000000000\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetUsersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzuredevopsFunctions.getUsers(GetUsersArgs.builder()\n            .principalName(\"contoso-user@contoso.onmicrosoft.com\")\n            .build());\n\n        final var example-all-users = AzuredevopsFunctions.getUsers();\n\n        final var example-all-from-origin = AzuredevopsFunctions.getUsers(GetUsersArgs.builder()\n            .origin(\"aad\")\n            .build());\n\n        final var example-all-from-subjectTypes = AzuredevopsFunctions.getUsers(GetUsersArgs.builder()\n            .subjectTypes(            \n                \"aad\",\n                \"msa\")\n            .build());\n\n        final var example-all-from-origin-id = AzuredevopsFunctions.getUsers(GetUsersArgs.builder()\n            .origin(\"aad\")\n            .originId(\"00000000-0000-0000-0000-000000000000\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: azuredevops:getUsers\n      Arguments:\n        principalName: contoso-user@contoso.onmicrosoft.com\n  example-all-users:\n    fn::invoke:\n      Function: azuredevops:getUsers\n      Arguments: {}\n  example-all-from-origin:\n    fn::invoke:\n      Function: azuredevops:getUsers\n      Arguments:\n        origin: aad\n  example-all-from-subjectTypes:\n    fn::invoke:\n      Function: azuredevops:getUsers\n      Arguments:\n        subjectTypes:\n          - aad\n          - msa\n  example-all-from-origin-id:\n    fn::invoke:\n      Function: azuredevops:getUsers\n      Arguments:\n        origin: aad\n        originId: 00000000-0000-0000-0000-000000000000\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Graph Users API](https://docs.microsoft.com/en-us/rest/api/azure/devops/graph/users?view=azure-devops-rest-7.0)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUsers.\n",
                "properties": {
                    "origin": {
                        "type": "string",
                        "description": "The type of source provider for the `origin_id` parameter (ex:AD, AAD, MSA) The supported origins are listed below.\n"
                    },
                    "originId": {
                        "type": "string",
                        "description": "The unique identifier from the system of origin.\n\nDataSource without specifying any arguments will return all users inside an organization.\n\nList of possible subject types\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n\nList of possible origins\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n"
                    },
                    "principalName": {
                        "type": "string",
                        "description": "The PrincipalName of this graph member from the source provider.\n"
                    },
                    "subjectTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of user subject subtypes to reduce the retrieved results, e.g. `msa`, `aad`, `svc` (service identity), `imp` (imported identity), etc. The supported subject types are listed below.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUsers.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "origin": {
                        "type": "string",
                        "description": "The type of source provider for the origin identifier (ex:AD, AAD, MSA)\n"
                    },
                    "originId": {
                        "type": "string",
                        "description": "The unique identifier from the system of origin. Typically a sid, object id or Guid. Linking and unlinking operations can cause this value to change for a user because the user is not backed by a different provider and has a different unique id in the new provider.\n"
                    },
                    "principalName": {
                        "type": "string",
                        "description": "This is the PrincipalName of this graph member from the source provider. The source provider may change this field over time and it is not guaranteed to be immutable for the life of the graph member by VSTS.\n"
                    },
                    "subjectTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:index/getUsersUser:getUsersUser"
                        },
                        "description": "A set of existing users in your Azure DevOps Organization with details about every single user which includes:\n"
                    }
                },
                "type": "object",
                "required": [
                    "users",
                    "id"
                ]
            }
        },
        "azuredevops:index/getVariableGroup:getVariableGroup": {
            "description": "Use this data source to access information about existing Variable Groups within Azure DevOps.\n\n\u003e **Note:** Secret values are masked by service and cannot be obtained through API. [Set secret variables](https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops\u0026tabs=yaml%2Cbatch#secret-variables)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst exampleProject = azuredevops.getProject({\n    name: \"Example Project\",\n});\nconst exampleVariableGroup = exampleProject.then(exampleProject =\u003e azuredevops.getVariableGroup({\n    projectId: exampleProject.id,\n    name: \"Example Variable Group\",\n}));\nexport const id = exampleVariableGroup.then(exampleVariableGroup =\u003e exampleVariableGroup.id);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nexample_project = azuredevops.get_project(name=\"Example Project\")\nexample_variable_group = azuredevops.get_variable_group(project_id=example_project.id,\n    name=\"Example Variable Group\")\npulumi.export(\"id\", example_variable_group.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = AzureDevOps.GetProject.Invoke(new()\n    {\n        Name = \"Example Project\",\n    });\n\n    var exampleVariableGroup = AzureDevOps.GetVariableGroup.Invoke(new()\n    {\n        ProjectId = exampleProject.Apply(getProjectResult =\u003e getProjectResult.Id),\n        Name = \"Example Variable Group\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"id\"] = exampleVariableGroup.Apply(getVariableGroupResult =\u003e getVariableGroupResult.Id),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := azuredevops.LookupProject(ctx, \u0026azuredevops.LookupProjectArgs{\n\t\t\tName: pulumi.StringRef(\"Example Project\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleVariableGroup, err := azuredevops.LookupVariableGroup(ctx, \u0026azuredevops.LookupVariableGroupArgs{\n\t\t\tProjectId: exampleProject.Id,\n\t\t\tName:      \"Example Variable Group\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"id\", exampleVariableGroup.Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuredevops.AzuredevopsFunctions;\nimport com.pulumi.azuredevops.inputs.GetProjectArgs;\nimport com.pulumi.azuredevops.inputs.GetVariableGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleProject = AzuredevopsFunctions.getProject(GetProjectArgs.builder()\n            .name(\"Example Project\")\n            .build());\n\n        final var exampleVariableGroup = AzuredevopsFunctions.getVariableGroup(GetVariableGroupArgs.builder()\n            .projectId(exampleProject.applyValue(getProjectResult -\u003e getProjectResult.id()))\n            .name(\"Example Variable Group\")\n            .build());\n\n        ctx.export(\"id\", exampleVariableGroup.applyValue(getVariableGroupResult -\u003e getVariableGroupResult.id()));\n    }\n}\n```\n```yaml\nvariables:\n  exampleProject:\n    fn::invoke:\n      Function: azuredevops:getProject\n      Arguments:\n        name: Example Project\n  exampleVariableGroup:\n    fn::invoke:\n      Function: azuredevops:getVariableGroup\n      Arguments:\n        projectId: ${exampleProject.id}\n        name: Example Variable Group\noutputs:\n  id: ${exampleVariableGroup.id}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 7.0 - Variable Groups](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/variablegroups?view=azure-devops-rest-7.0)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVariableGroup.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the Variable Group to retrieve.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVariableGroup.\n",
                "properties": {
                    "allowAccess": {
                        "type": "boolean",
                        "description": "Boolean that indicate if this Variable Group is shared by all pipelines of this project.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Variable Group.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "keyVaults": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:index/getVariableGroupKeyVault:getVariableGroupKeyVault"
                        },
                        "description": "A list of `key_vault` blocks as documented below.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Azure key vault to link secrets from as variables.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:index/getVariableGroupVariable:getVariableGroupVariable"
                        },
                        "description": "One or more `variable` blocks as documented below.\n"
                    }
                },
                "type": "object",
                "required": [
                    "allowAccess",
                    "description",
                    "keyVaults",
                    "name",
                    "projectId",
                    "variables",
                    "id"
                ]
            }
        }
    }
}