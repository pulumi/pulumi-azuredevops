{
    "name": "azuredevops",
    "description": "A Pulumi package for creating and managing Azure DevOps.",
    "keywords": [
        "pulumi",
        "azuredevops"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`azuredevops` Terraform Provider](https://github.com/microsoft/terraform-provider-azuredevops).",
    "repository": "https://github.com/pulumi/pulumi-azuredevops",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "orgServiceUrl": {
                "type": "string",
                "description": "The url of the Azure DevOps instance which should be used.\n",
                "defaultInfo": {
                    "environment": [
                        "AZDO_ORG_SERVICE_URL"
                    ]
                }
            },
            "personalAccessToken": {
                "type": "string",
                "description": "The personal access token which should be used.\n"
            }
        }
    },
    "types": {
        "azuredevops:Agent/getPoolsAgentPool:getPoolsAgentPool": {
            "properties": {
                "autoProvision": {
                    "type": "boolean",
                    "description": "Specifies whether or not a queue should be automatically provisioned for each project collection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the agent pool\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "poolType": {
                    "type": "string",
                    "description": "Specifies whether the agent pool type is Automation or Deployment.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "autoProvision",
                "id",
                "name",
                "poolType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:Build/BuildDefinitionCiTrigger:BuildDefinitionCiTrigger": {
            "properties": {
                "override": {
                    "$ref": "#/types/azuredevops:Build/BuildDefinitionCiTriggerOverride:BuildDefinitionCiTriggerOverride",
                    "description": "Override the azure-pipeline file and use a this configuration for all builds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useYaml": {
                    "type": "boolean",
                    "description": "Use the azure-pipeline file for the build configuration. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:Build/BuildDefinitionCiTriggerOverride:BuildDefinitionCiTriggerOverride": {
            "properties": {
                "batch": {
                    "type": "boolean",
                    "description": "If you set batch to true, when a pipeline is running, the system waits until the run is completed, then starts another run with all changes that have not yet been built. Defaults to `true`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "branchFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Build/BuildDefinitionCiTriggerOverrideBranchFilter:BuildDefinitionCiTriggerOverrideBranchFilter"
                    },
                    "description": "The branches to include and exclude from the trigger.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxConcurrentBuildsPerBranch": {
                    "type": "integer",
                    "description": "The number of max builds per branch. Defaults to `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Build/BuildDefinitionCiTriggerOverridePathFilter:BuildDefinitionCiTriggerOverridePathFilter"
                    },
                    "description": "Specify file paths to include or exclude. Note that the wildcard syntax is different between branches/tags and file paths.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pollingInterval": {
                    "type": "integer",
                    "description": "How often the external repository is polled. Defaults to `0`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pollingJobId": {
                    "type": "string",
                    "description": "This is the ID of the polling job that polls the external repository. Once the build definition is saved/updated, this value is set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "pollingJobId"
                    ]
                }
            }
        },
        "azuredevops:Build/BuildDefinitionCiTriggerOverrideBranchFilter:BuildDefinitionCiTriggerOverrideBranchFilter": {
            "properties": {
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to exclude.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to include.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:Build/BuildDefinitionCiTriggerOverridePathFilter:BuildDefinitionCiTriggerOverridePathFilter": {
            "properties": {
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to exclude.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to include.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:Build/BuildDefinitionPullRequestTrigger:BuildDefinitionPullRequestTrigger": {
            "properties": {
                "commentRequired": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "forks": {
                    "$ref": "#/types/azuredevops:Build/BuildDefinitionPullRequestTriggerForks:BuildDefinitionPullRequestTriggerForks",
                    "description": "Set permissions for Forked repositories.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "initialBranch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "override": {
                    "$ref": "#/types/azuredevops:Build/BuildDefinitionPullRequestTriggerOverride:BuildDefinitionPullRequestTriggerOverride",
                    "description": "Override the azure-pipeline file and use this configuration for all builds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useYaml": {
                    "type": "boolean",
                    "description": "Use the azure-pipeline file for the build configuration. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "forks"
            ]
        },
        "azuredevops:Build/BuildDefinitionPullRequestTriggerForks:BuildDefinitionPullRequestTriggerForks": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Build pull requests form forms of this repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shareSecrets": {
                    "type": "boolean",
                    "description": "Make secrets available to builds of forks.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "shareSecrets"
            ]
        },
        "azuredevops:Build/BuildDefinitionPullRequestTriggerOverride:BuildDefinitionPullRequestTriggerOverride": {
            "properties": {
                "autoCancel": {
                    "type": "boolean",
                    "description": ". Defaults to `true`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "branchFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Build/BuildDefinitionPullRequestTriggerOverrideBranchFilter:BuildDefinitionPullRequestTriggerOverrideBranchFilter"
                    },
                    "description": "The branches to include and exclude from the trigger.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Build/BuildDefinitionPullRequestTriggerOverridePathFilter:BuildDefinitionPullRequestTriggerOverridePathFilter"
                    },
                    "description": "Specify file paths to include or exclude. Note that the wildcard syntax is different between branches/tags and file paths.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:Build/BuildDefinitionPullRequestTriggerOverrideBranchFilter:BuildDefinitionPullRequestTriggerOverrideBranchFilter": {
            "properties": {
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to exclude.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to include.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:Build/BuildDefinitionPullRequestTriggerOverridePathFilter:BuildDefinitionPullRequestTriggerOverridePathFilter": {
            "properties": {
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to exclude.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to include.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:Build/BuildDefinitionRepository:BuildDefinitionRepository": {
            "properties": {
                "branchName": {
                    "type": "string",
                    "description": "The branch name for which builds are triggered. Defaults to `master`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "githubEnterpriseUrl": {
                    "type": "string",
                    "description": "The Github Enterprise URL. Used if `repo_type` is `GithubEnterprise`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repoId": {
                    "type": "string",
                    "description": "The id of the repository. For `TfsGit` repos, this is simply the ID of the repository. For `Github` repos, this will take the form of `\u003cGitHub Org\u003e/\u003cRepo Name\u003e`. For `Bitbucket` repos, this will take the form of `\u003cWorkspace ID\u003e/\u003cRepo Name\u003e`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repoType": {
                    "type": "string",
                    "description": "The repository type. Valid values: `GitHub` or `TfsGit` or `Bitbucket` or `GitHub Enterprise`. Defaults to `GitHub`. If `repo_type` is `GitHubEnterprise`, must use existing project and GitHub Enterprise service connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reportBuildStatus": {
                    "type": "boolean",
                    "description": "Report build status. Default is true.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceConnectionId": {
                    "type": "string",
                    "description": "The service connection ID. Used if the `repo_type` is `GitHub` or `GitHubEnterprise`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ymlPath": {
                    "type": "string",
                    "description": "The path of the Yaml file describing the build definition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "repoId",
                "repoType",
                "ymlPath"
            ]
        },
        "azuredevops:Build/BuildDefinitionSchedule:BuildDefinitionSchedule": {
            "properties": {
                "branchFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Build/BuildDefinitionScheduleBranchFilter:BuildDefinitionScheduleBranchFilter"
                    },
                    "description": "block supports the following:\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "daysToBuilds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scheduleJobId": {
                    "type": "string",
                    "description": "The ID of the schedule job\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scheduleOnlyWithChanges": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startHours": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startMinutes": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeZone": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "daysToBuilds"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "daysToBuilds",
                        "scheduleJobId"
                    ]
                }
            }
        },
        "azuredevops:Build/BuildDefinitionScheduleBranchFilter:BuildDefinitionScheduleBranchFilter": {
            "properties": {
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to exclude.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to include.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:Build/BuildDefinitionVariable:BuildDefinitionVariable": {
            "properties": {
                "allowOverride": {
                    "type": "boolean",
                    "description": "True if the variable can be overridden. Defaults to `true`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isSecret": {
                    "type": "boolean",
                    "description": "True if the variable is a secret. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the variable.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretValue": {
                    "type": "string",
                    "description": "The secret value of the variable. Used when `is_secret` set to `true`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variable.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "azuredevops:Core/getProjectsProject:getProjectsProject": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Project, if not specified all projects will be returned.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "description": "Project identifier.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectUrl": {
                    "type": "string",
                    "description": "Url to the full version of the object.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "description": "State of the Project, if not specified all projects will be returned. Valid values are `all`, `deleting`, `new`, `wellFormed`, `createPending`, `unchanged`,`deleted`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "projectId",
                "projectUrl",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:Identities/getUsersUser:getUsersUser": {
            "properties": {
                "descriptor": {
                    "type": "string",
                    "description": "The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "displayName": {
                    "type": "string",
                    "description": "This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The user ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mailAddress": {
                    "type": "string",
                    "description": "The email address of record for a given graph member. This may be different than the principal name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "origin": {
                    "type": "string",
                    "description": "The type of source provider for the `origin_id` parameter (ex:AD, AAD, MSA) The supported origins are listed below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "originId": {
                    "type": "string",
                    "description": "The unique identifier from the system of origin.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "principalName": {
                    "type": "string",
                    "description": "The PrincipalName of this graph member from the source provider.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "descriptor",
                "displayName",
                "id",
                "mailAddress",
                "origin",
                "principalName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:Pipeline/VariableGroupKeyVault:VariableGroupKeyVault": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the Variable Group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceEndpointId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "serviceEndpointId"
            ]
        },
        "azuredevops:Pipeline/VariableGroupVariable:VariableGroupVariable": {
            "properties": {
                "contentType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expires": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isSecret": {
                    "type": "boolean",
                    "description": "A boolean flag describing if the variable value is sensitive. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The key value used for the variable. Must be unique within the Variable Group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretValue": {
                    "type": "string",
                    "description": "The secret value of the variable. If omitted, it will default to empty string. Used when `is_secret` set to `true`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variable. If omitted, it will default to empty string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "contentType",
                        "enabled",
                        "expires",
                        "name"
                    ]
                }
            }
        },
        "azuredevops:Policy/BranchPolicyBuildValidationSettings:BranchPolicyBuildValidationSettings": {
            "properties": {
                "buildDefinitionId": {
                    "type": "integer",
                    "description": "The ID of the build to monitor for the policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name for the policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filenamePatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "If a path filter is set, the policy will only apply when files which match the filter are changes. Not setting this field means that the policy will always apply. You can specify absolute paths and wildcards. Example: `[\"/WebApp/Models/Data.cs\", \"/WebApp/*\", \"*.cs\"]`. Paths prefixed with \"!\" are excluded. Example: `[\"/WebApp/*\", \"!/WebApp/Tests/*\"]`. Order is significant.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "manualQueueOnly": {
                    "type": "boolean",
                    "description": "If set to true, the build will need to be manually queued. Defaults to `false`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queueOnSourceUpdateOnly": {
                    "type": "boolean",
                    "description": "True if the build should queue on source updates only. Defaults to `true`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Policy/BranchPolicyBuildValidationSettingsScope:BranchPolicyBuildValidationSettingsScope"
                    },
                    "description": "Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "validDuration": {
                    "type": "integer",
                    "description": "The number of minutes for which the build is valid. If `0`, the build will not expire. Defaults to `720` (12 hours).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "buildDefinitionId",
                "displayName",
                "scopes"
            ]
        },
        "azuredevops:Policy/BranchPolicyBuildValidationSettingsScope:BranchPolicyBuildValidationSettingsScope": {
            "properties": {
                "matchType": {
                    "type": "string",
                    "description": "The match type to use when applying the policy. Supported values are `Exact` (default) or `Prefix`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The repository ID. Needed only if the scope of the policy will be limited to a single repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositoryRef": {
                    "type": "string",
                    "description": "The ref pattern to use for the match. If `match_type` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `match_type` is `Prefix`, this should be a ref path such as `refs/heads/releases`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:Policy/BranchPolicyMinReviewersSettings:BranchPolicyMinReviewersSettings": {
            "properties": {
                "allowCompletionWithRejectsOrWaits": {
                    "type": "boolean",
                    "description": "Allow completion even if some reviewers vote to wait or reject. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastPusherCannotApprove": {
                    "type": "boolean",
                    "description": "Prohibit the most recent pusher from approving their own changes. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "onLastIterationRequireVote": {
                    "type": "boolean",
                    "description": "On last iteration require vote. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "onPushResetAllVotes": {
                    "type": "boolean",
                    "description": "When new changes are pushed reset all code reviewer votes. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "onPushResetApprovedVotes": {
                    "type": "boolean",
                    "description": "When new changes are pushed reset all approval votes (does not reset votes to reject or wait). Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reviewerCount": {
                    "type": "integer",
                    "description": "The number of reviewers needed to approve.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Policy/BranchPolicyMinReviewersSettingsScope:BranchPolicyMinReviewersSettingsScope"
                    },
                    "description": "Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "submitterCanVote": {
                    "type": "boolean",
                    "description": "Allow requesters to approve their own changes. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "scopes"
            ]
        },
        "azuredevops:Policy/BranchPolicyMinReviewersSettingsScope:BranchPolicyMinReviewersSettingsScope": {
            "properties": {
                "matchType": {
                    "type": "string",
                    "description": "The match type to use when applying the policy. Supported values are `Exact` (default) or `Prefix`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The repository ID. Needed only if the scope of the policy will be limited to a single repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositoryRef": {
                    "type": "string",
                    "description": "The ref pattern to use for the match. If `match_type` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `match_type` is `Prefix`, this should be a ref path such as `refs/heads/releases`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:Repository/GitInitialization:GitInitialization": {
            "properties": {
                "initType": {
                    "type": "string",
                    "description": "The type of repository to create. Valid values: `Uninitialized`, `Clean` or `Import`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceConnectionId": {
                    "type": "string",
                    "description": "The id of service connection used to authenticate to a private repository for import initialization.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceType": {
                    "type": "string",
                    "description": "Type of the source repository. Used if the `init_type` is `Import`. Valid values: `Git`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceUrl": {
                    "type": "string",
                    "description": "The URL of the source repository. Used if the `init_type` is `Import`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "initType"
            ]
        },
        "azuredevops:Repository/getRepositoriesRepository:getRepositoriesRepository": {
            "properties": {
                "defaultBranch": {
                    "type": "string",
                    "description": "The ref of the default branch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "Git repository identifier.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Git repository to retrieve; requires `project_id` to be specified as well\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of project to list Git repositories\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remoteUrl": {
                    "type": "string",
                    "description": "HTTPS Url to clone the Git repository\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "integer",
                    "description": "Compressed size (bytes) of the repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshUrl": {
                    "type": "string",
                    "description": "SSH Url to clone the Git repository\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Details REST API endpoint for the Git Repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "webUrl": {
                    "type": "string",
                    "description": "Url of the Git repository web view\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "defaultBranch",
                "id",
                "name",
                "projectId",
                "remoteUrl",
                "size",
                "sshUrl",
                "url",
                "webUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:ServiceEndpoint/AzureRMCredentials:AzureRMCredentials": {
            "properties": {
                "serviceprincipalid": {
                    "type": "string",
                    "description": "The service principal application Id\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceprincipalkey": {
                    "type": "string",
                    "description": "The service principal secret.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceprincipalkeyHash": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "serviceprincipalid",
                "serviceprincipalkey"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "serviceprincipalid",
                        "serviceprincipalkey",
                        "serviceprincipalkeyHash"
                    ]
                }
            }
        },
        "azuredevops:ServiceEndpoint/GitHubAuthOauth:GitHubAuthOauth": {
            "properties": {
                "oauthConfigurationId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "oauthConfigurationId"
            ]
        },
        "azuredevops:ServiceEndpoint/GitHubAuthPersonal:GitHubAuthPersonal": {
            "properties": {
                "personalAccessToken": {
                    "type": "string",
                    "description": "The Personal Access Token for Github.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "personalAccessTokenHash": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "personalAccessToken"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "personalAccessToken",
                        "personalAccessTokenHash"
                    ]
                }
            }
        },
        "azuredevops:ServiceEndpoint/KubernetesAzureSubscription:KubernetesAzureSubscription": {
            "properties": {
                "azureEnvironment": {
                    "type": "string",
                    "description": "Azure environment refers to whether the public cloud offering or domestic (government) clouds are being used. Currently, only the public cloud is supported. The value must be AzureCloud. This is also the default-value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterAdmin": {
                    "type": "boolean",
                    "description": "Set this option to allow use cluster admin credentials.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterName": {
                    "type": "string",
                    "description": "The name of the Kubernetes cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes namespace. Default value is \"default\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcegroupId": {
                    "type": "string",
                    "description": "The resource group name, to which the Kubernetes cluster is deployed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "The id of the Azure subscription.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subscriptionName": {
                    "type": "string",
                    "description": "The name of the Azure subscription.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "The id of the tenant used by the subscription.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clusterName",
                "resourcegroupId",
                "subscriptionId",
                "subscriptionName",
                "tenantId"
            ]
        },
        "azuredevops:ServiceEndpoint/KubernetesKubeconfig:KubernetesKubeconfig": {
            "properties": {
                "acceptUntrustedCerts": {
                    "type": "boolean",
                    "description": "Set this option to allow clients to accept a self-signed certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterContext": {
                    "type": "string",
                    "description": "Context within the kubeconfig file that is to be used for identifying the cluster. Default value is the current-context set in kubeconfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeConfig": {
                    "type": "string",
                    "description": "The content of the kubeconfig in yaml notation to be used to communicate with the API-Server of Kubernetes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeConfigHash": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kubeConfig"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kubeConfig",
                        "kubeConfigHash"
                    ]
                }
            }
        },
        "azuredevops:ServiceEndpoint/KubernetesServiceAccount:KubernetesServiceAccount": {
            "properties": {
                "caCert": {
                    "type": "string",
                    "description": "The certificate from a Kubernetes secret object.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caCertHash": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "token": {
                    "type": "string",
                    "description": "The token from a Kubernetes secret object.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tokenHash": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "caCert",
                "token"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "caCert",
                        "caCertHash",
                        "token",
                        "tokenHash"
                    ]
                }
            }
        },
        "azuredevops:index/BranchPolicyAutoReviewersSettings:BranchPolicyAutoReviewersSettings": {
            "properties": {
                "autoReviewerIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Required reviewers ids. Supports multiples user Ids.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "description": "Activity feed message, Message will appear in the activity feed of pull requests with automatically added reviewers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Filter path(s) on which the policy is applied. Supports absolute paths, wildcards and multiple paths. Example: /WebApp/Models/Data.cs, /WebApp/* or *.cs,/WebApp/Models/Data.cs;ClientApp/Models/Data.cs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/BranchPolicyAutoReviewersSettingsScope:BranchPolicyAutoReviewersSettingsScope"
                    },
                    "description": "Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "submitterCanVote": {
                    "type": "boolean",
                    "description": "Controls whether or not the submitter's vote counts. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "autoReviewerIds",
                "scopes"
            ]
        },
        "azuredevops:index/BranchPolicyAutoReviewersSettingsScope:BranchPolicyAutoReviewersSettingsScope": {
            "properties": {
                "matchType": {
                    "type": "string",
                    "description": "The match type to use when applying the policy. Supported values are `Exact` (default) or `Prefix`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The repository ID. Needed only if the scope of the policy will be limited to a single repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositoryRef": {
                    "type": "string",
                    "description": "The ref pattern to use for the match. If `match_type` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `match_type` is `Prefix`, this should be a ref path such as `refs/heads/releases`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:index/BranchPolicyBuildValidationSettings:BranchPolicyBuildValidationSettings": {
            "properties": {
                "buildDefinitionId": {
                    "type": "integer",
                    "description": "The ID of the build to monitor for the policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name for the policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filenamePatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "If a path filter is set, the policy will only apply when files which match the filter are changes. Not setting this field means that the policy will always apply. You can specify absolute paths and wildcards. Example: `[\"/WebApp/Models/Data.cs\", \"/WebApp/*\", \"*.cs\"]`. Paths prefixed with \"!\" are excluded. Example: `[\"/WebApp/*\", \"!/WebApp/Tests/*\"]`. Order is significant.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "manualQueueOnly": {
                    "type": "boolean",
                    "description": "If set to true, the build will need to be manually queued. Defaults to `false`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queueOnSourceUpdateOnly": {
                    "type": "boolean",
                    "description": "True if the build should queue on source updates only. Defaults to `true`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/BranchPolicyBuildValidationSettingsScope:BranchPolicyBuildValidationSettingsScope"
                    },
                    "description": "Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "validDuration": {
                    "type": "integer",
                    "description": "The number of minutes for which the build is valid. If `0`, the build will not expire. Defaults to `720` (12 hours).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "buildDefinitionId",
                "displayName",
                "scopes"
            ]
        },
        "azuredevops:index/BranchPolicyBuildValidationSettingsScope:BranchPolicyBuildValidationSettingsScope": {
            "properties": {
                "matchType": {
                    "type": "string",
                    "description": "The match type to use when applying the policy. Supported values are `Exact` (default) or `Prefix`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The repository ID. Needed only if the scope of the policy will be limited to a single repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositoryRef": {
                    "type": "string",
                    "description": "The ref pattern to use for the match. If `match_type` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `match_type` is `Prefix`, this should be a ref path such as `refs/heads/releases`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:index/BranchPolicyCommentResolutionSettings:BranchPolicyCommentResolutionSettings": {
            "properties": {
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/BranchPolicyCommentResolutionSettingsScope:BranchPolicyCommentResolutionSettingsScope"
                    },
                    "description": "Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "scopes"
            ]
        },
        "azuredevops:index/BranchPolicyCommentResolutionSettingsScope:BranchPolicyCommentResolutionSettingsScope": {
            "properties": {
                "matchType": {
                    "type": "string",
                    "description": "The match type to use when applying the policy. Supported values are `Exact` (default) or `Prefix`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The repository ID. Needed only if the scope of the policy will be limited to a single repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositoryRef": {
                    "type": "string",
                    "description": "The ref pattern to use for the match. If `match_type` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `match_type` is `Prefix`, this should be a ref path such as `refs/heads/releases`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:index/BranchPolicyMergeTypesSettings:BranchPolicyMergeTypesSettings": {
            "properties": {
                "allowBasicNoFastForward": {
                    "type": "boolean",
                    "description": "Allow basic merge with no fast forward. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowRebaseAndFastForward": {
                    "type": "boolean",
                    "description": "Allow rebase with fast forward. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowRebaseWithMerge": {
                    "type": "boolean",
                    "description": "Allow rebase with merge commit. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowSquash": {
                    "type": "boolean",
                    "description": "Allow squash merge. Defaults to `false`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/BranchPolicyMergeTypesSettingsScope:BranchPolicyMergeTypesSettingsScope"
                    },
                    "description": "Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "scopes"
            ]
        },
        "azuredevops:index/BranchPolicyMergeTypesSettingsScope:BranchPolicyMergeTypesSettingsScope": {
            "properties": {
                "matchType": {
                    "type": "string",
                    "description": "The match type to use when applying the policy. Supported values are `Exact` (default) or `Prefix`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The repository ID. Needed only if the scope of the policy will be limited to a single repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositoryRef": {
                    "type": "string",
                    "description": "The ref pattern to use for the match. If `match_type` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `match_type` is `Prefix`, this should be a ref path such as `refs/heads/releases`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:index/BranchPolicyMinReviewersSettings:BranchPolicyMinReviewersSettings": {
            "properties": {
                "allowCompletionWithRejectsOrWaits": {
                    "type": "boolean",
                    "description": "Allow completion even if some reviewers vote to wait or reject. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastPusherCannotApprove": {
                    "type": "boolean",
                    "description": "Prohibit the most recent pusher from approving their own changes. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "onLastIterationRequireVote": {
                    "type": "boolean",
                    "description": "On last iteration require vote. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "onPushResetAllVotes": {
                    "type": "boolean",
                    "description": "When new changes are pushed reset all code reviewer votes. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "onPushResetApprovedVotes": {
                    "type": "boolean",
                    "description": "When new changes are pushed reset all approval votes (does not reset votes to reject or wait). Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reviewerCount": {
                    "type": "integer",
                    "description": "The number of reviewers needed to approve.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/BranchPolicyMinReviewersSettingsScope:BranchPolicyMinReviewersSettingsScope"
                    },
                    "description": "Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "submitterCanVote": {
                    "type": "boolean",
                    "description": "Allow requesters to approve their own changes. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "scopes"
            ]
        },
        "azuredevops:index/BranchPolicyMinReviewersSettingsScope:BranchPolicyMinReviewersSettingsScope": {
            "properties": {
                "matchType": {
                    "type": "string",
                    "description": "The match type to use when applying the policy. Supported values are `Exact` (default) or `Prefix`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The repository ID. Needed only if the scope of the policy will be limited to a single repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositoryRef": {
                    "type": "string",
                    "description": "The ref pattern to use for the match. If `match_type` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `match_type` is `Prefix`, this should be a ref path such as `refs/heads/releases`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:index/BranchPolicyStatusCheckSettings:BranchPolicyStatusCheckSettings": {
            "properties": {
                "applicability": {
                    "type": "string",
                    "description": "Policy applicability. If policy `applicability` is `default`, apply unless \"Not Applicable\" \nstatus is posted to the pull request. If policy `applicability` is `conditional`, policy is applied only after a status\nis posted to the pull request.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authorId": {
                    "type": "string",
                    "description": "The authorized user can post the status.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filenamePatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "If a path filter is set, the policy will only apply when files which match the filter are changes. Not setting this field means that the policy will always apply. You can specify absolute paths and wildcards. Example: `[\"/WebApp/Models/Data.cs\", \"/WebApp/*\", \"*.cs\"]`. Paths prefixed with \"!\" are excluded. Example: `[\"/WebApp/*\", \"!/WebApp/Tests/*\"]`. Order is significant.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "genre": {
                    "type": "string",
                    "description": "The genre of the status to check (see [Microsoft Documentation](https://docs.microsoft.com/en-us/azure/devops/repos/git/pull-request-status?view=azure-devops#status-policy))\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "invalidateOnUpdate": {
                    "type": "boolean",
                    "description": "Reset status whenever there are new changes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The status name to check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/BranchPolicyStatusCheckSettingsScope:BranchPolicyStatusCheckSettingsScope"
                    },
                    "description": "Controls which repositories and branches the policy will be enabled for. This block must be defined\nat least once.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "scopes"
            ]
        },
        "azuredevops:index/BranchPolicyStatusCheckSettingsScope:BranchPolicyStatusCheckSettingsScope": {
            "properties": {
                "matchType": {
                    "type": "string",
                    "description": "The match type to use when applying the policy. Supported values are `Exact` (default)\nor `Prefix`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The repository ID. Needed only if the scope of the policy will be limited to a single\nrepository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositoryRef": {
                    "type": "string",
                    "description": "The ref pattern to use for the match. If `match_type` is `Exact`, this should be a\nqualified ref such as `refs/heads/master`. If `match_type` is `Prefix`, this should be a ref path such\nas `refs/heads/releases`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:index/BranchPolicyWorkItemLinkingSettings:BranchPolicyWorkItemLinkingSettings": {
            "properties": {
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/BranchPolicyWorkItemLinkingSettingsScope:BranchPolicyWorkItemLinkingSettingsScope"
                    },
                    "description": "Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "scopes"
            ]
        },
        "azuredevops:index/BranchPolicyWorkItemLinkingSettingsScope:BranchPolicyWorkItemLinkingSettingsScope": {
            "properties": {
                "matchType": {
                    "type": "string",
                    "description": "The match type to use when applying the policy. Supported values are `Exact` (default) or `Prefix`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The repository ID. Needed only if the scope of the policy will be limited to a single repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositoryRef": {
                    "type": "string",
                    "description": "The ref pattern to use for the match. If `match_type` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `match_type` is `Prefix`, this should be a ref path such as `refs/heads/releases`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:index/BuildDefinitionCiTrigger:BuildDefinitionCiTrigger": {
            "properties": {
                "override": {
                    "$ref": "#/types/azuredevops:index/BuildDefinitionCiTriggerOverride:BuildDefinitionCiTriggerOverride",
                    "description": "Override the azure-pipeline file and use a this configuration for all builds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useYaml": {
                    "type": "boolean",
                    "description": "Use the azure-pipeline file for the build configuration. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:index/BuildDefinitionCiTriggerOverride:BuildDefinitionCiTriggerOverride": {
            "properties": {
                "batch": {
                    "type": "boolean",
                    "description": "If you set batch to true, when a pipeline is running, the system waits until the run is completed, then starts another run with all changes that have not yet been built. Defaults to `true`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "branchFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/BuildDefinitionCiTriggerOverrideBranchFilter:BuildDefinitionCiTriggerOverrideBranchFilter"
                    },
                    "description": "The branches to include and exclude from the trigger.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxConcurrentBuildsPerBranch": {
                    "type": "integer",
                    "description": "The number of max builds per branch. Defaults to `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/BuildDefinitionCiTriggerOverridePathFilter:BuildDefinitionCiTriggerOverridePathFilter"
                    },
                    "description": "Specify file paths to include or exclude. Note that the wildcard syntax is different between branches/tags and file paths.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pollingInterval": {
                    "type": "integer",
                    "description": "How often the external repository is polled. Defaults to `0`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pollingJobId": {
                    "type": "string",
                    "description": "This is the ID of the polling job that polls the external repository. Once the build definition is saved/updated, this value is set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "pollingJobId"
                    ]
                }
            }
        },
        "azuredevops:index/BuildDefinitionCiTriggerOverrideBranchFilter:BuildDefinitionCiTriggerOverrideBranchFilter": {
            "properties": {
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to exclude.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to include.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:index/BuildDefinitionCiTriggerOverridePathFilter:BuildDefinitionCiTriggerOverridePathFilter": {
            "properties": {
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to exclude.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to include.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:index/BuildDefinitionPullRequestTrigger:BuildDefinitionPullRequestTrigger": {
            "properties": {
                "commentRequired": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "forks": {
                    "$ref": "#/types/azuredevops:index/BuildDefinitionPullRequestTriggerForks:BuildDefinitionPullRequestTriggerForks",
                    "description": "Set permissions for Forked repositories.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "initialBranch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "override": {
                    "$ref": "#/types/azuredevops:index/BuildDefinitionPullRequestTriggerOverride:BuildDefinitionPullRequestTriggerOverride",
                    "description": "Override the azure-pipeline file and use this configuration for all builds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useYaml": {
                    "type": "boolean",
                    "description": "Use the azure-pipeline file for the build configuration. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "forks"
            ]
        },
        "azuredevops:index/BuildDefinitionPullRequestTriggerForks:BuildDefinitionPullRequestTriggerForks": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Build pull requests form forms of this repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shareSecrets": {
                    "type": "boolean",
                    "description": "Make secrets available to builds of forks.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "shareSecrets"
            ]
        },
        "azuredevops:index/BuildDefinitionPullRequestTriggerOverride:BuildDefinitionPullRequestTriggerOverride": {
            "properties": {
                "autoCancel": {
                    "type": "boolean",
                    "description": ". Defaults to `true`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "branchFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/BuildDefinitionPullRequestTriggerOverrideBranchFilter:BuildDefinitionPullRequestTriggerOverrideBranchFilter"
                    },
                    "description": "The branches to include and exclude from the trigger.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/BuildDefinitionPullRequestTriggerOverridePathFilter:BuildDefinitionPullRequestTriggerOverridePathFilter"
                    },
                    "description": "Specify file paths to include or exclude. Note that the wildcard syntax is different between branches/tags and file paths.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:index/BuildDefinitionPullRequestTriggerOverrideBranchFilter:BuildDefinitionPullRequestTriggerOverrideBranchFilter": {
            "properties": {
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to exclude.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to include.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:index/BuildDefinitionPullRequestTriggerOverridePathFilter:BuildDefinitionPullRequestTriggerOverridePathFilter": {
            "properties": {
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to exclude.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to include.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:index/BuildDefinitionRepository:BuildDefinitionRepository": {
            "properties": {
                "branchName": {
                    "type": "string",
                    "description": "The branch name for which builds are triggered. Defaults to `master`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "githubEnterpriseUrl": {
                    "type": "string",
                    "description": "The Github Enterprise URL. Used if `repo_type` is `GithubEnterprise`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repoId": {
                    "type": "string",
                    "description": "The id of the repository. For `TfsGit` repos, this is simply the ID of the repository. For `Github` repos, this will take the form of `\u003cGitHub Org\u003e/\u003cRepo Name\u003e`. For `Bitbucket` repos, this will take the form of `\u003cWorkspace ID\u003e/\u003cRepo Name\u003e`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repoType": {
                    "type": "string",
                    "description": "The repository type. Valid values: `GitHub` or `TfsGit` or `Bitbucket` or `GitHub Enterprise`. Defaults to `GitHub`. If `repo_type` is `GitHubEnterprise`, must use existing project and GitHub Enterprise service connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reportBuildStatus": {
                    "type": "boolean",
                    "description": "Report build status. Default is true.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceConnectionId": {
                    "type": "string",
                    "description": "The service connection ID. Used if the `repo_type` is `GitHub` or `GitHubEnterprise`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ymlPath": {
                    "type": "string",
                    "description": "The path of the Yaml file describing the build definition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "repoId",
                "repoType",
                "ymlPath"
            ]
        },
        "azuredevops:index/BuildDefinitionSchedule:BuildDefinitionSchedule": {
            "properties": {
                "branchFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/BuildDefinitionScheduleBranchFilter:BuildDefinitionScheduleBranchFilter"
                    },
                    "description": "block supports the following:\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "daysToBuilds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scheduleJobId": {
                    "type": "string",
                    "description": "The ID of the schedule job\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scheduleOnlyWithChanges": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startHours": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startMinutes": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeZone": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "daysToBuilds"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "daysToBuilds",
                        "scheduleJobId"
                    ]
                }
            }
        },
        "azuredevops:index/BuildDefinitionScheduleBranchFilter:BuildDefinitionScheduleBranchFilter": {
            "properties": {
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to exclude.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of branch patterns to include.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:index/BuildDefinitionVariable:BuildDefinitionVariable": {
            "properties": {
                "allowOverride": {
                    "type": "boolean",
                    "description": "True if the variable can be overridden. Defaults to `true`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isSecret": {
                    "type": "boolean",
                    "description": "True if the variable is a secret. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the variable.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretValue": {
                    "type": "string",
                    "description": "The secret value of the variable. Used when `is_secret` set to `true`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variable.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "azuredevops:index/GitInitialization:GitInitialization": {
            "properties": {
                "initType": {
                    "type": "string",
                    "description": "The type of repository to create. Valid values: `Uninitialized`, `Clean` or `Import`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceConnectionId": {
                    "type": "string",
                    "description": "The id of service connection used to authenticate to a private repository for import initialization.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceType": {
                    "type": "string",
                    "description": "Type of the source repository. Used if the `init_type` is `Import`. Valid values: `Git`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceUrl": {
                    "type": "string",
                    "description": "The URL of the source repository. Used if the `init_type` is `Import`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "initType"
            ]
        },
        "azuredevops:index/ServiceEndpointArtifactoryAuthenticationBasic:ServiceEndpointArtifactoryAuthenticationBasic": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "Artifactory Password.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "passwordHash": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "Artifactory Username.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usernameHash": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "password",
                        "passwordHash",
                        "username",
                        "usernameHash"
                    ]
                }
            }
        },
        "azuredevops:index/ServiceEndpointArtifactoryAuthenticationToken:ServiceEndpointArtifactoryAuthenticationToken": {
            "properties": {
                "token": {
                    "type": "string",
                    "description": "Authentication Token generated through Artifactory.\n* `authentication_basic`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tokenHash": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "token"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "token",
                        "tokenHash"
                    ]
                }
            }
        },
        "azuredevops:index/ServiceEndpointAzureRMCredentials:ServiceEndpointAzureRMCredentials": {
            "properties": {
                "serviceprincipalid": {
                    "type": "string",
                    "description": "The service principal application Id\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceprincipalkey": {
                    "type": "string",
                    "description": "The service principal secret.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceprincipalkeyHash": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "serviceprincipalid",
                "serviceprincipalkey"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "serviceprincipalid",
                        "serviceprincipalkey",
                        "serviceprincipalkeyHash"
                    ]
                }
            }
        },
        "azuredevops:index/ServiceEndpointGitHubAuthOauth:ServiceEndpointGitHubAuthOauth": {
            "properties": {
                "oauthConfigurationId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "oauthConfigurationId"
            ]
        },
        "azuredevops:index/ServiceEndpointGitHubAuthPersonal:ServiceEndpointGitHubAuthPersonal": {
            "properties": {
                "personalAccessToken": {
                    "type": "string",
                    "description": "The Personal Access Token for Github.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "personalAccessTokenHash": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "personalAccessToken"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "personalAccessToken",
                        "personalAccessTokenHash"
                    ]
                }
            }
        },
        "azuredevops:index/ServiceEndpointGitHubEnterpriseAuthPersonal:ServiceEndpointGitHubEnterpriseAuthPersonal": {
            "properties": {
                "personalAccessToken": {
                    "type": "string",
                    "description": "The Personal Access Token for Github.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "personalAccessTokenHash": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "personalAccessToken"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "personalAccessToken",
                        "personalAccessTokenHash"
                    ]
                }
            }
        },
        "azuredevops:index/ServiceEndpointKubernetesAzureSubscription:ServiceEndpointKubernetesAzureSubscription": {
            "properties": {
                "azureEnvironment": {
                    "type": "string",
                    "description": "Azure environment refers to whether the public cloud offering or domestic (government) clouds are being used. Currently, only the public cloud is supported. The value must be AzureCloud. This is also the default-value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterAdmin": {
                    "type": "boolean",
                    "description": "Set this option to allow use cluster admin credentials.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterName": {
                    "type": "string",
                    "description": "The name of the Kubernetes cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes namespace. Default value is \"default\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcegroupId": {
                    "type": "string",
                    "description": "The resource group name, to which the Kubernetes cluster is deployed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "The id of the Azure subscription.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subscriptionName": {
                    "type": "string",
                    "description": "The name of the Azure subscription.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "The id of the tenant used by the subscription.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clusterName",
                "resourcegroupId",
                "subscriptionId",
                "subscriptionName",
                "tenantId"
            ]
        },
        "azuredevops:index/ServiceEndpointKubernetesKubeconfig:ServiceEndpointKubernetesKubeconfig": {
            "properties": {
                "acceptUntrustedCerts": {
                    "type": "boolean",
                    "description": "Set this option to allow clients to accept a self-signed certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterContext": {
                    "type": "string",
                    "description": "Context within the kubeconfig file that is to be used for identifying the cluster. Default value is the current-context set in kubeconfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeConfig": {
                    "type": "string",
                    "description": "The content of the kubeconfig in yaml notation to be used to communicate with the API-Server of Kubernetes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeConfigHash": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kubeConfig"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kubeConfig",
                        "kubeConfigHash"
                    ]
                }
            }
        },
        "azuredevops:index/ServiceEndpointKubernetesServiceAccount:ServiceEndpointKubernetesServiceAccount": {
            "properties": {
                "caCert": {
                    "type": "string",
                    "description": "The certificate from a Kubernetes secret object.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caCertHash": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "token": {
                    "type": "string",
                    "description": "The token from a Kubernetes secret object.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tokenHash": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "caCert",
                "token"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "caCert",
                        "caCertHash",
                        "token",
                        "tokenHash"
                    ]
                }
            }
        },
        "azuredevops:index/ServiceEndpointPipelineAuthPersonal:ServiceEndpointPipelineAuthPersonal": {
            "properties": {
                "personalAccessToken": {
                    "type": "string",
                    "description": "The Personal Access Token for Azure DevOps Pipeline. It also can be set with AZDO_PERSONAL_ACCESS_TOKEN environment variable.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "personalAccessTokenHash": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "personalAccessToken"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "personalAccessToken",
                        "personalAccessTokenHash"
                    ]
                }
            }
        },
        "azuredevops:index/ServiceEndpointServiceFabricAzureActiveDirectory:ServiceEndpointServiceFabricAzureActiveDirectory": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "- Password for the Azure Active Directory account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "passwordHash": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverCertificateCommonName": {
                    "type": "string",
                    "description": "The common name(s) of the cluster's certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple common names with a comma (',')\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverCertificateLookup": {
                    "type": "string",
                    "description": "Verification mode for the cluster. Possible values include `Thumbprint` or `CommonName`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverCertificateThumbprint": {
                    "type": "string",
                    "description": "The thumbprint(s) of the cluster's certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple thumbprints with a comma (',')\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "- Specify an Azure Active Directory account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "password",
                "serverCertificateLookup",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "password",
                        "passwordHash",
                        "serverCertificateLookup",
                        "username"
                    ]
                }
            }
        },
        "azuredevops:index/ServiceEndpointServiceFabricCertificate:ServiceEndpointServiceFabricCertificate": {
            "properties": {
                "clientCertificate": {
                    "type": "string",
                    "description": "Base64 encoding of the cluster's client certificate file.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientCertificateHash": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientCertificatePassword": {
                    "type": "string",
                    "description": "Password for the certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientCertificatePasswordHash": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverCertificateCommonName": {
                    "type": "string",
                    "description": "The common name(s) of the cluster's certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple common names with a comma (',')\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverCertificateLookup": {
                    "type": "string",
                    "description": "Verification mode for the cluster. Possible values include `Thumbprint` or `CommonName`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverCertificateThumbprint": {
                    "type": "string",
                    "description": "The thumbprint(s) of the cluster's certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple thumbprints with a comma (',')\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clientCertificate",
                "serverCertificateLookup"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clientCertificate",
                        "clientCertificateHash",
                        "clientCertificatePasswordHash",
                        "serverCertificateLookup"
                    ]
                }
            }
        },
        "azuredevops:index/ServiceEndpointServiceFabricNone:ServiceEndpointServiceFabricNone": {
            "properties": {
                "clusterSpn": {
                    "type": "string",
                    "description": "Fully qualified domain SPN for gMSA account. This is applicable only if `unsecured` option is disabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unsecured": {
                    "type": "boolean",
                    "description": "Skip using windows security for authentication.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuredevops:index/VariableGroupKeyVault:VariableGroupKeyVault": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the Variable Group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceEndpointId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "serviceEndpointId"
            ]
        },
        "azuredevops:index/VariableGroupVariable:VariableGroupVariable": {
            "properties": {
                "contentType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expires": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isSecret": {
                    "type": "boolean",
                    "description": "A boolean flag describing if the variable value is sensitive. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The key value used for the variable. Must be unique within the Variable Group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretValue": {
                    "type": "string",
                    "description": "The secret value of the variable. If omitted, it will default to empty string. Used when `is_secret` set to `true`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variable. If omitted, it will default to empty string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "contentType",
                        "enabled",
                        "expires",
                        "name"
                    ]
                }
            }
        },
        "azuredevops:index/getAreaChildren:getAreaChildren": {
            "properties": {
                "hasChildren": {
                    "type": "boolean",
                    "description": "Indicator if the child Area node has child nodes\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of the child Area node\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the child Area node\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "The path to the Area; _Format_: URL relative; if omitted, or value `\"/\"` is used, the root Area will be returned\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "hasChildren",
                "id",
                "name",
                "path",
                "projectId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:index/getIterationChildren:getIterationChildren": {
            "properties": {
                "hasChildren": {
                    "type": "boolean",
                    "description": "Indicator if the child Iteration node has child nodes\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of the child Iteration node\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the child Iteration node\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "The path to the Iteration, _Format_: URL relative; if omitted, or value `\"/\"` is used, the root Iteration will be returned\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "hasChildren",
                "id",
                "name",
                "path",
                "projectId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:index/getPoolsAgentPool:getPoolsAgentPool": {
            "properties": {
                "autoProvision": {
                    "type": "boolean",
                    "description": "Specifies whether or not a queue should be automatically provisioned for each project collection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the agent pool\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "poolType": {
                    "type": "string",
                    "description": "Specifies whether the agent pool type is Automation or Deployment.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "autoProvision",
                "id",
                "name",
                "poolType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:index/getProjectsProject:getProjectsProject": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Project, if not specified all projects will be returned.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "description": "Project identifier.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectUrl": {
                    "type": "string",
                    "description": "Url to the full version of the object.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "description": "State of the Project, if not specified all projects will be returned. Valid values are `all`, `deleting`, `new`, `wellFormed`, `createPending`, `unchanged`,`deleted`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "projectId",
                "projectUrl",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:index/getRepositoriesRepository:getRepositoriesRepository": {
            "properties": {
                "defaultBranch": {
                    "type": "string",
                    "description": "The ref of the default branch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "Git repository identifier.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Git repository to retrieve; requires `project_id` to be specified as well\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of project to list Git repositories\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remoteUrl": {
                    "type": "string",
                    "description": "HTTPS Url to clone the Git repository\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "integer",
                    "description": "Compressed size (bytes) of the repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshUrl": {
                    "type": "string",
                    "description": "SSH Url to clone the Git repository\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Details REST API endpoint for the Git Repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "webUrl": {
                    "type": "string",
                    "description": "Url of the Git repository web view\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "defaultBranch",
                "id",
                "name",
                "projectId",
                "remoteUrl",
                "size",
                "sshUrl",
                "url",
                "webUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:index/getTeamsTeam:getTeamsTeam": {
            "properties": {
                "administrators": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "administrators",
                "description",
                "id",
                "members",
                "name",
                "projectId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuredevops:index/getUsersUser:getUsersUser": {
            "properties": {
                "descriptor": {
                    "type": "string",
                    "description": "The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "displayName": {
                    "type": "string",
                    "description": "This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The user ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mailAddress": {
                    "type": "string",
                    "description": "The email address of record for a given graph member. This may be different than the principal name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "origin": {
                    "type": "string",
                    "description": "The type of source provider for the `origin_id` parameter (ex:AD, AAD, MSA) The supported origins are listed below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "originId": {
                    "type": "string",
                    "description": "The unique identifier from the system of origin.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "principalName": {
                    "type": "string",
                    "description": "The PrincipalName of this graph member from the source provider.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "descriptor",
                "displayName",
                "id",
                "mailAddress",
                "origin",
                "principalName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the azuredevops package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "orgServiceUrl": {
                "type": "string",
                "description": "The url of the Azure DevOps instance which should be used.\n"
            },
            "personalAccessToken": {
                "type": "string",
                "description": "The personal access token which should be used.\n"
            }
        },
        "inputProperties": {
            "orgServiceUrl": {
                "type": "string",
                "description": "The url of the Azure DevOps instance which should be used.\n",
                "defaultInfo": {
                    "environment": [
                        "AZDO_ORG_SERVICE_URL"
                    ]
                }
            },
            "personalAccessToken": {
                "type": "string",
                "description": "The personal access token which should be used.\n"
            }
        }
    },
    "resources": {
        "azuredevops:Agent/pool:Pool": {
            "description": "Manages an agent pool within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst pool = new azuredevops.Pool(\"pool\", {\n    autoProvision: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\npool = azuredevops.Pool(\"pool\", auto_provision=False)\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var pool = new AzureDevOps.Pool(\"pool\", new AzureDevOps.PoolArgs\n        {\n            AutoProvision = false,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewPool(ctx, \"pool\", \u0026azuredevops.PoolArgs{\n\t\t\tAutoProvision: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Agent Pools](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/pools?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps Agent Pools can be imported using the agent pool ID, e.g.\n\n```sh\n $ pulumi import azuredevops:Agent/pool:Pool pool 42\n```\n\n ",
            "properties": {
                "autoProvision": {
                    "type": "boolean",
                    "description": "Specifies whether or not a queue should be automatically provisioned for each project collection. Defaults to `false`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the agent pool.\n"
                },
                "poolType": {
                    "type": "string",
                    "description": "Specifies whether the agent pool type is Automation or Deployment. Defaults to `automation`.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "autoProvision": {
                    "type": "boolean",
                    "description": "Specifies whether or not a queue should be automatically provisioned for each project collection. Defaults to `false`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the agent pool.\n"
                },
                "poolType": {
                    "type": "string",
                    "description": "Specifies whether the agent pool type is Automation or Deployment. Defaults to `automation`.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Pool resources.\n",
                "properties": {
                    "autoProvision": {
                        "type": "boolean",
                        "description": "Specifies whether or not a queue should be automatically provisioned for each project collection. Defaults to `false`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the agent pool.\n"
                    },
                    "poolType": {
                        "type": "string",
                        "description": "Specifies whether the agent pool type is Automation or Deployment. Defaults to `automation`.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.agent.Pool has been deprecated in favor of azuredevops.Pool"
        },
        "azuredevops:Agent/queue:Queue": {
            "description": "Manages an agent queue within Azure DevOps. In the UI, this is equivalent to adding an\nOrganization defined pool to a project.\n\nThe created queue is not authorized for use by all pipelines in the project. However,\nthe `azuredevops.ResourceAuthorization` resource can be used to grant authorization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {});\nconst pool = azuredevops.getPool({\n    name: \"contoso-pool\",\n});\nconst queue = new azuredevops.Queue(\"queue\", {\n    projectId: project.id,\n    agentPoolId: pool.then(pool =\u003e pool.id),\n});\n// Grant acccess to queue to all pipelines in the project\nconst auth = new azuredevops.ResourceAuthorization(\"auth\", {\n    projectId: project.id,\n    resourceId: queue.id,\n    type: \"queue\",\n    authorized: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\")\npool = azuredevops.get_pool(name=\"contoso-pool\")\nqueue = azuredevops.Queue(\"queue\",\n    project_id=project.id,\n    agent_pool_id=pool.id)\n# Grant acccess to queue to all pipelines in the project\nauth = azuredevops.ResourceAuthorization(\"auth\",\n    project_id=project.id,\n    resource_id=queue.id,\n    type=\"queue\",\n    authorized=True)\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n        });\n        var pool = Output.Create(AzureDevOps.GetPool.InvokeAsync(new AzureDevOps.GetPoolArgs\n        {\n            Name = \"contoso-pool\",\n        }));\n        var queue = new AzureDevOps.Queue(\"queue\", new AzureDevOps.QueueArgs\n        {\n            ProjectId = project.Id,\n            AgentPoolId = pool.Apply(pool =\u003e pool.Id),\n        });\n        // Grant acccess to queue to all pipelines in the project\n        var auth = new AzureDevOps.ResourceAuthorization(\"auth\", new AzureDevOps.ResourceAuthorizationArgs\n        {\n            ProjectId = project.Id,\n            ResourceId = queue.Id,\n            Type = \"queue\",\n            Authorized = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpool, err := azuredevops.LookupPool(ctx, \u0026GetPoolArgs{\n\t\t\tName: \"contoso-pool\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tqueue, err := azuredevops.NewQueue(ctx, \"queue\", \u0026azuredevops.QueueArgs{\n\t\t\tProjectId:   project.ID(),\n\t\t\tAgentPoolId: pulumi.String(pool.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewResourceAuthorization(ctx, \"auth\", \u0026azuredevops.ResourceAuthorizationArgs{\n\t\t\tProjectId:  project.ID(),\n\t\t\tResourceId: queue.ID(),\n\t\t\tType:       pulumi.String(\"queue\"),\n\t\t\tAuthorized: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Agent Queues](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/queues?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps Agent Pools can be imported using the project ID and agent queue ID, e.g.\n\n```sh\n $ pulumi import azuredevops:Agent/queue:Queue q 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "agentPoolId": {
                    "type": "integer",
                    "description": "The ID of the organization agent pool.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which to create the resource.\n"
                }
            },
            "required": [
                "agentPoolId",
                "projectId"
            ],
            "inputProperties": {
                "agentPoolId": {
                    "type": "integer",
                    "description": "The ID of the organization agent pool.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which to create the resource.\n"
                }
            },
            "requiredInputs": [
                "agentPoolId",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Queue resources.\n",
                "properties": {
                    "agentPoolId": {
                        "type": "integer",
                        "description": "The ID of the organization agent pool.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which to create the resource.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.agent.Queue has been deprecated in favor of azuredevops.Queue"
        },
        "azuredevops:Build/buildDefinition:BuildDefinition": {
            "description": "Manages a Build Definition within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Tfs\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst repository = new azuredevops.Git(\"repository\", {\n    projectId: project.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst vars = new azuredevops.VariableGroup(\"vars\", {\n    projectId: project.id,\n    description: \"Managed by Terraform\",\n    allowAccess: true,\n    variables: [{\n        name: \"FOO\",\n        value: \"BAR\",\n    }],\n});\nconst build = new azuredevops.BuildDefinition(\"build\", {\n    projectId: project.id,\n    path: \"\\\\ExampleFolder\",\n    ciTrigger: {\n        useYaml: true,\n    },\n    schedules: [{\n        branchFilters: [{\n            includes: [\"master\"],\n            excludes: [\n                \"test\",\n                \"regression\",\n            ],\n        }],\n        daysToBuilds: [\n            \"Wed\",\n            \"Sun\",\n        ],\n        scheduleOnlyWithChanges: true,\n        startHours: 10,\n        startMinutes: 59,\n        timeZone: \"(UTC) Coordinated Universal Time\",\n    }],\n    repository: {\n        repoType: \"TfsGit\",\n        repoId: repository.id,\n        branchName: repository.defaultBranch,\n        ymlPath: \"azure-pipelines.yml\",\n    },\n    variableGroups: [vars.id],\n    variables: [\n        {\n            name: \"PipelineVariable\",\n            value: \"Go Microsoft!\",\n        },\n        {\n            name: \"PipelineSecret\",\n            secretValue: \"ZGV2cw\",\n            isSecret: true,\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nrepository = azuredevops.Git(\"repository\",\n    project_id=project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nvars = azuredevops.VariableGroup(\"vars\",\n    project_id=project.id,\n    description=\"Managed by Terraform\",\n    allow_access=True,\n    variables=[azuredevops.VariableGroupVariableArgs(\n        name=\"FOO\",\n        value=\"BAR\",\n    )])\nbuild = azuredevops.BuildDefinition(\"build\",\n    project_id=project.id,\n    path=\"\\\\ExampleFolder\",\n    ci_trigger=azuredevops.BuildDefinitionCiTriggerArgs(\n        use_yaml=True,\n    ),\n    schedules=[azuredevops.BuildDefinitionScheduleArgs(\n        branch_filters=[azuredevops.BuildDefinitionScheduleBranchFilterArgs(\n            includes=[\"master\"],\n            excludes=[\n                \"test\",\n                \"regression\",\n            ],\n        )],\n        days_to_builds=[\n            \"Wed\",\n            \"Sun\",\n        ],\n        schedule_only_with_changes=True,\n        start_hours=10,\n        start_minutes=59,\n        time_zone=\"(UTC) Coordinated Universal Time\",\n    )],\n    repository=azuredevops.BuildDefinitionRepositoryArgs(\n        repo_type=\"TfsGit\",\n        repo_id=repository.id,\n        branch_name=repository.default_branch,\n        yml_path=\"azure-pipelines.yml\",\n    ),\n    variable_groups=[vars.id],\n    variables=[\n        azuredevops.BuildDefinitionVariableArgs(\n            name=\"PipelineVariable\",\n            value=\"Go Microsoft!\",\n        ),\n        azuredevops.BuildDefinitionVariableArgs(\n            name=\"PipelineSecret\",\n            secret_value=\"ZGV2cw\",\n            is_secret=True,\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var repository = new AzureDevOps.Git(\"repository\", new AzureDevOps.GitArgs\n        {\n            ProjectId = project.Id,\n            Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n            {\n                InitType = \"Clean\",\n            },\n        });\n        var vars = new AzureDevOps.VariableGroup(\"vars\", new AzureDevOps.VariableGroupArgs\n        {\n            ProjectId = project.Id,\n            Description = \"Managed by Terraform\",\n            AllowAccess = true,\n            Variables = \n            {\n                new AzureDevOps.Inputs.VariableGroupVariableArgs\n                {\n                    Name = \"FOO\",\n                    Value = \"BAR\",\n                },\n            },\n        });\n        var build = new AzureDevOps.BuildDefinition(\"build\", new AzureDevOps.BuildDefinitionArgs\n        {\n            ProjectId = project.Id,\n            Path = \"\\\\ExampleFolder\",\n            CiTrigger = new AzureDevOps.Inputs.BuildDefinitionCiTriggerArgs\n            {\n                UseYaml = true,\n            },\n            Schedules = \n            {\n                new AzureDevOps.Inputs.BuildDefinitionScheduleArgs\n                {\n                    BranchFilters = \n                    {\n                        new AzureDevOps.Inputs.BuildDefinitionScheduleBranchFilterArgs\n                        {\n                            Includes = \n                            {\n                                \"master\",\n                            },\n                            Excludes = \n                            {\n                                \"test\",\n                                \"regression\",\n                            },\n                        },\n                    },\n                    DaysToBuilds = \n                    {\n                        \"Wed\",\n                        \"Sun\",\n                    },\n                    ScheduleOnlyWithChanges = true,\n                    StartHours = 10,\n                    StartMinutes = 59,\n                    TimeZone = \"(UTC) Coordinated Universal Time\",\n                },\n            },\n            Repository = new AzureDevOps.Inputs.BuildDefinitionRepositoryArgs\n            {\n                RepoType = \"TfsGit\",\n                RepoId = repository.Id,\n                BranchName = repository.DefaultBranch,\n                YmlPath = \"azure-pipelines.yml\",\n            },\n            VariableGroups = \n            {\n                vars.Id,\n            },\n            Variables = \n            {\n                new AzureDevOps.Inputs.BuildDefinitionVariableArgs\n                {\n                    Name = \"PipelineVariable\",\n                    Value = \"Go Microsoft!\",\n                },\n                new AzureDevOps.Inputs.BuildDefinitionVariableArgs\n                {\n                    Name = \"PipelineSecret\",\n                    SecretValue = \"ZGV2cw\",\n                    IsSecret = true,\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\trepository, err := azuredevops.NewGit(ctx, \"repository\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tInitialization: \u0026GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tvars, err := azuredevops.NewVariableGroup(ctx, \"vars\", \u0026azuredevops.VariableGroupArgs{\n\t\t\tProjectId:   project.ID(),\n\t\t\tDescription: pulumi.String(\"Managed by Terraform\"),\n\t\t\tAllowAccess: pulumi.Bool(true),\n\t\t\tVariables: VariableGroupVariableArray{\n\t\t\t\t\u0026VariableGroupVariableArgs{\n\t\t\t\t\tName:  pulumi.String(\"FOO\"),\n\t\t\t\t\tValue: pulumi.String(\"BAR\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewBuildDefinition(ctx, \"build\", \u0026azuredevops.BuildDefinitionArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tPath:      pulumi.String(\"\\\\ExampleFolder\"),\n\t\t\tCiTrigger: \u0026BuildDefinitionCiTriggerArgs{\n\t\t\t\tUseYaml: pulumi.Bool(true),\n\t\t\t},\n\t\t\tSchedules: BuildDefinitionScheduleArray{\n\t\t\t\t\u0026BuildDefinitionScheduleArgs{\n\t\t\t\t\tBranchFilters: BuildDefinitionScheduleBranchFilterArray{\n\t\t\t\t\t\t\u0026BuildDefinitionScheduleBranchFilterArgs{\n\t\t\t\t\t\t\tIncludes: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"master\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tExcludes: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"test\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"regression\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tDaysToBuilds: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"Wed\"),\n\t\t\t\t\t\tpulumi.String(\"Sun\"),\n\t\t\t\t\t},\n\t\t\t\t\tScheduleOnlyWithChanges: pulumi.Bool(true),\n\t\t\t\t\tStartHours:              pulumi.Int(10),\n\t\t\t\t\tStartMinutes:            pulumi.Int(59),\n\t\t\t\t\tTimeZone:                pulumi.String(\"(UTC) Coordinated Universal Time\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRepository: \u0026BuildDefinitionRepositoryArgs{\n\t\t\t\tRepoType:   pulumi.String(\"TfsGit\"),\n\t\t\t\tRepoId:     repository.ID(),\n\t\t\t\tBranchName: repository.DefaultBranch,\n\t\t\t\tYmlPath:    pulumi.String(\"azure-pipelines.yml\"),\n\t\t\t},\n\t\t\tVariableGroups: pulumi.IntArray{\n\t\t\t\tvars.ID(),\n\t\t\t},\n\t\t\tVariables: BuildDefinitionVariableArray{\n\t\t\t\t\u0026BuildDefinitionVariableArgs{\n\t\t\t\t\tName:  pulumi.String(\"PipelineVariable\"),\n\t\t\t\t\tValue: pulumi.String(\"Go Microsoft!\"),\n\t\t\t\t},\n\t\t\t\t\u0026BuildDefinitionVariableArgs{\n\t\t\t\t\tName:        pulumi.String(\"PipelineSecret\"),\n\t\t\t\t\tSecretValue: pulumi.String(\"ZGV2cw\"),\n\t\t\t\t\tIsSecret:    pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% example %}}\n### GitHub Enterprise\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst sampleDotnetcoreAppRelease = new azuredevops.BuildDefinition(\"sampleDotnetcoreAppRelease\", {\n    projectId: azuredevops_project.project.id,\n    path: \"\\\\ExampleFolder\",\n    ciTrigger: {\n        useYaml: true,\n    },\n    repository: {\n        repoType: \"GitHubEnterprise\",\n        repoId: \"\u003cGitHub Org\u003e/\u003cRepo Name\u003e\",\n        githubEnterpriseUrl: \"https://github.company.com\",\n        branchName: \"master\",\n        ymlPath: \"azure-pipelines.yml\",\n        serviceConnectionId: \"...\",\n    },\n    schedules: [{\n        branchFilters: [{\n            includes: [\"main\"],\n            excludes: [\n                \"test\",\n                \"regression\",\n            ],\n        }],\n        daysToBuilds: [\n            \"Wed\",\n            \"Sun\",\n        ],\n        scheduleOnlyWithChanges: true,\n        startHours: 10,\n        startMinutes: 59,\n        timeZone: \"(UTC) Coordinated Universal Time\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nsample_dotnetcore_app_release = azuredevops.BuildDefinition(\"sampleDotnetcoreAppRelease\",\n    project_id=azuredevops_project[\"project\"][\"id\"],\n    path=\"\\\\ExampleFolder\",\n    ci_trigger=azuredevops.BuildDefinitionCiTriggerArgs(\n        use_yaml=True,\n    ),\n    repository=azuredevops.BuildDefinitionRepositoryArgs(\n        repo_type=\"GitHubEnterprise\",\n        repo_id=\"\u003cGitHub Org\u003e/\u003cRepo Name\u003e\",\n        github_enterprise_url=\"https://github.company.com\",\n        branch_name=\"master\",\n        yml_path=\"azure-pipelines.yml\",\n        service_connection_id=\"...\",\n    ),\n    schedules=[azuredevops.BuildDefinitionScheduleArgs(\n        branch_filters=[azuredevops.BuildDefinitionScheduleBranchFilterArgs(\n            includes=[\"main\"],\n            excludes=[\n                \"test\",\n                \"regression\",\n            ],\n        )],\n        days_to_builds=[\n            \"Wed\",\n            \"Sun\",\n        ],\n        schedule_only_with_changes=True,\n        start_hours=10,\n        start_minutes=59,\n        time_zone=\"(UTC) Coordinated Universal Time\",\n    )])\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var sampleDotnetcoreAppRelease = new AzureDevOps.BuildDefinition(\"sampleDotnetcoreAppRelease\", new AzureDevOps.BuildDefinitionArgs\n        {\n            ProjectId = azuredevops_project.Project.Id,\n            Path = \"\\\\ExampleFolder\",\n            CiTrigger = new AzureDevOps.Inputs.BuildDefinitionCiTriggerArgs\n            {\n                UseYaml = true,\n            },\n            Repository = new AzureDevOps.Inputs.BuildDefinitionRepositoryArgs\n            {\n                RepoType = \"GitHubEnterprise\",\n                RepoId = \"\u003cGitHub Org\u003e/\u003cRepo Name\u003e\",\n                GithubEnterpriseUrl = \"https://github.company.com\",\n                BranchName = \"master\",\n                YmlPath = \"azure-pipelines.yml\",\n                ServiceConnectionId = \"...\",\n            },\n            Schedules = \n            {\n                new AzureDevOps.Inputs.BuildDefinitionScheduleArgs\n                {\n                    BranchFilters = \n                    {\n                        new AzureDevOps.Inputs.BuildDefinitionScheduleBranchFilterArgs\n                        {\n                            Includes = \n                            {\n                                \"main\",\n                            },\n                            Excludes = \n                            {\n                                \"test\",\n                                \"regression\",\n                            },\n                        },\n                    },\n                    DaysToBuilds = \n                    {\n                        \"Wed\",\n                        \"Sun\",\n                    },\n                    ScheduleOnlyWithChanges = true,\n                    StartHours = 10,\n                    StartMinutes = 59,\n                    TimeZone = \"(UTC) Coordinated Universal Time\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewBuildDefinition(ctx, \"sampleDotnetcoreAppRelease\", \u0026azuredevops.BuildDefinitionArgs{\n\t\t\tProjectId: pulumi.Any(azuredevops_project.Project.Id),\n\t\t\tPath:      pulumi.String(\"\\\\ExampleFolder\"),\n\t\t\tCiTrigger: \u0026BuildDefinitionCiTriggerArgs{\n\t\t\t\tUseYaml: pulumi.Bool(true),\n\t\t\t},\n\t\t\tRepository: \u0026BuildDefinitionRepositoryArgs{\n\t\t\t\tRepoType:            pulumi.String(\"GitHubEnterprise\"),\n\t\t\t\tRepoId:              pulumi.String(\"\u003cGitHub Org\u003e/\u003cRepo Name\u003e\"),\n\t\t\t\tGithubEnterpriseUrl: pulumi.String(\"https://github.company.com\"),\n\t\t\t\tBranchName:          pulumi.String(\"master\"),\n\t\t\t\tYmlPath:             pulumi.String(\"azure-pipelines.yml\"),\n\t\t\t\tServiceConnectionId: pulumi.String(\"...\"),\n\t\t\t},\n\t\t\tSchedules: BuildDefinitionScheduleArray{\n\t\t\t\t\u0026BuildDefinitionScheduleArgs{\n\t\t\t\t\tBranchFilters: BuildDefinitionScheduleBranchFilterArray{\n\t\t\t\t\t\t\u0026BuildDefinitionScheduleBranchFilterArgs{\n\t\t\t\t\t\t\tIncludes: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"main\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tExcludes: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"test\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"regression\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tDaysToBuilds: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"Wed\"),\n\t\t\t\t\t\tpulumi.String(\"Sun\"),\n\t\t\t\t\t},\n\t\t\t\t\tScheduleOnlyWithChanges: pulumi.Bool(true),\n\t\t\t\t\tStartHours:              pulumi.Int(10),\n\t\t\t\t\tStartMinutes:            pulumi.Int(59),\n\t\t\t\t\tTimeZone:                pulumi.String(\"(UTC) Coordinated Universal Time\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Build Definitions](https://docs.microsoft.com/en-us/rest/api/azure/devops/build/definitions?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps Build Definitions can be imported using the project name/definitions Id or by the project Guid/definitions Id, e.g.\n\n```sh\n $ pulumi import azuredevops:Build/buildDefinition:BuildDefinition build \"Test Project\"/10\n```\n\n or\n\n```sh\n $ pulumi import azuredevops:Build/buildDefinition:BuildDefinition build 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "agentPoolName": {
                    "type": "string",
                    "description": "The agent pool that should execute the build. Defaults to `Azure Pipelines`.\n"
                },
                "ciTrigger": {
                    "$ref": "#/types/azuredevops:Build/BuildDefinitionCiTrigger:BuildDefinitionCiTrigger",
                    "description": "Continuous Integration trigger.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the build definition.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The folder path of the build definition.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "pullRequestTrigger": {
                    "$ref": "#/types/azuredevops:Build/BuildDefinitionPullRequestTrigger:BuildDefinitionPullRequestTrigger",
                    "description": "Pull Request Integration Integration trigger.\n"
                },
                "repository": {
                    "$ref": "#/types/azuredevops:Build/BuildDefinitionRepository:BuildDefinitionRepository",
                    "description": "A `repository` block as documented below.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "The revision of the build definition\n"
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Build/BuildDefinitionSchedule:BuildDefinitionSchedule"
                    }
                },
                "variableGroups": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of variable group IDs (integers) to link to the build definition.\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Build/BuildDefinitionVariable:BuildDefinitionVariable"
                    },
                    "description": "A list of `variable` blocks, as documented below.\n"
                }
            },
            "required": [
                "name",
                "projectId",
                "repository",
                "revision"
            ],
            "inputProperties": {
                "agentPoolName": {
                    "type": "string",
                    "description": "The agent pool that should execute the build. Defaults to `Azure Pipelines`.\n"
                },
                "ciTrigger": {
                    "$ref": "#/types/azuredevops:Build/BuildDefinitionCiTrigger:BuildDefinitionCiTrigger",
                    "description": "Continuous Integration trigger.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the build definition.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The folder path of the build definition.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "pullRequestTrigger": {
                    "$ref": "#/types/azuredevops:Build/BuildDefinitionPullRequestTrigger:BuildDefinitionPullRequestTrigger",
                    "description": "Pull Request Integration Integration trigger.\n"
                },
                "repository": {
                    "$ref": "#/types/azuredevops:Build/BuildDefinitionRepository:BuildDefinitionRepository",
                    "description": "A `repository` block as documented below.\n"
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Build/BuildDefinitionSchedule:BuildDefinitionSchedule"
                    }
                },
                "variableGroups": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of variable group IDs (integers) to link to the build definition.\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Build/BuildDefinitionVariable:BuildDefinitionVariable"
                    },
                    "description": "A list of `variable` blocks, as documented below.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BuildDefinition resources.\n",
                "properties": {
                    "agentPoolName": {
                        "type": "string",
                        "description": "The agent pool that should execute the build. Defaults to `Azure Pipelines`.\n"
                    },
                    "ciTrigger": {
                        "$ref": "#/types/azuredevops:Build/BuildDefinitionCiTrigger:BuildDefinitionCiTrigger",
                        "description": "Continuous Integration trigger.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the build definition.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The folder path of the build definition.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "pullRequestTrigger": {
                        "$ref": "#/types/azuredevops:Build/BuildDefinitionPullRequestTrigger:BuildDefinitionPullRequestTrigger",
                        "description": "Pull Request Integration Integration trigger.\n"
                    },
                    "repository": {
                        "$ref": "#/types/azuredevops:Build/BuildDefinitionRepository:BuildDefinitionRepository",
                        "description": "A `repository` block as documented below.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "The revision of the build definition\n"
                    },
                    "schedules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:Build/BuildDefinitionSchedule:BuildDefinitionSchedule"
                        }
                    },
                    "variableGroups": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of variable group IDs (integers) to link to the build definition.\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:Build/BuildDefinitionVariable:BuildDefinitionVariable"
                        },
                        "description": "A list of `variable` blocks, as documented below.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.build.BuildDefinition has been deprecated in favor of azuredevops.BuildDefinition"
        },
        "azuredevops:Core/project:Project": {
            "description": "Manages a project within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    description: \"Test Project Description\",\n    features: {\n        artifacts: \"disabled\",\n        testplans: \"disabled\",\n    },\n    versionControl: \"Git\",\n    visibility: \"private\",\n    workItemTemplate: \"Agile\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    description=\"Test Project Description\",\n    features={\n        \"artifacts\": \"disabled\",\n        \"testplans\": \"disabled\",\n    },\n    version_control=\"Git\",\n    visibility=\"private\",\n    work_item_template=\"Agile\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Description = \"Test Project Description\",\n            Features = \n            {\n                { \"artifacts\", \"disabled\" },\n                { \"testplans\", \"disabled\" },\n            },\n            VersionControl = \"Git\",\n            Visibility = \"private\",\n            WorkItemTemplate = \"Agile\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tDescription: pulumi.String(\"Test Project Description\"),\n\t\t\tFeatures: pulumi.StringMap{\n\t\t\t\t\"artifacts\": pulumi.String(\"disabled\"),\n\t\t\t\t\"testplans\": pulumi.String(\"disabled\"),\n\t\t\t},\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Projects](https://docs.microsoft.com/en-us/rest/api/azure/devops/core/projects?view=azure-devops-rest-5.1)\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: Read, Write, \u0026 Manage\n\n\n## Import\n\nAzure DevOps Projects can be imported using the project name or by the project Guid, e.g.\n\n```sh\n $ pulumi import azuredevops:Core/project:Project project \"Test Project\"\n```\n\n or\n\n```sh\n $ pulumi import azuredevops:Core/project:Project project 00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The Description of the Project.\n"
                },
                "features": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Defines the status (`enabled`, `disabled`) of the project features.  \nValid features are `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Project Name.\n"
                },
                "processTemplateId": {
                    "type": "string",
                    "description": "The Process Template ID used by the Project.\n"
                },
                "versionControl": {
                    "type": "string",
                    "description": "Specifies the version control system. Valid values: `Git` or `Tfvc`. Defaults to `Git`.\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Specifies the visibility of the Project. Valid values: `private` or `public`. Defaults to `private`.\n"
                },
                "workItemTemplate": {
                    "type": "string",
                    "description": "Specifies the work item template. Valid values: `Agile`, `Basic`, `CMMI` or `Scrum`. Defaults to `Agile`.\n"
                }
            },
            "required": [
                "name",
                "processTemplateId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The Description of the Project.\n"
                },
                "features": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Defines the status (`enabled`, `disabled`) of the project features.  \nValid features are `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Project Name.\n"
                },
                "versionControl": {
                    "type": "string",
                    "description": "Specifies the version control system. Valid values: `Git` or `Tfvc`. Defaults to `Git`.\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Specifies the visibility of the Project. Valid values: `private` or `public`. Defaults to `private`.\n"
                },
                "workItemTemplate": {
                    "type": "string",
                    "description": "Specifies the work item template. Valid values: `Agile`, `Basic`, `CMMI` or `Scrum`. Defaults to `Agile`.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The Description of the Project.\n"
                    },
                    "features": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Defines the status (`enabled`, `disabled`) of the project features.  \nValid features are `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Project Name.\n"
                    },
                    "processTemplateId": {
                        "type": "string",
                        "description": "The Process Template ID used by the Project.\n"
                    },
                    "versionControl": {
                        "type": "string",
                        "description": "Specifies the version control system. Valid values: `Git` or `Tfvc`. Defaults to `Git`.\n"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "Specifies the visibility of the Project. Valid values: `private` or `public`. Defaults to `private`.\n"
                    },
                    "workItemTemplate": {
                        "type": "string",
                        "description": "Specifies the work item template. Valid values: `Agile`, `Basic`, `CMMI` or `Scrum`. Defaults to `Agile`.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.core.Project has been deprecated in favor of azuredevops.Project"
        },
        "azuredevops:Core/projectFeatures:ProjectFeatures": {
            "description": "Manages features for Azure DevOps projects\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst tf-project-test-001 = azuredevops.getProject({\n    name: \"Test Project\",\n});\nconst my_project_features = new azuredevops.ProjectFeatures(\"my-project-features\", {\n    projectId: tf_project_test_001.then(tf_project_test_001 =\u003e tf_project_test_001.id),\n    features: {\n        testplans: \"disabled\",\n        artifacts: \"enabled\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\ntf_project_test_001 = azuredevops.get_project(name=\"Test Project\")\nmy_project_features = azuredevops.ProjectFeatures(\"my-project-features\",\n    project_id=tf_project_test_001.id,\n    features={\n        \"testplans\": \"disabled\",\n        \"artifacts\": \"enabled\",\n    })\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var tf_project_test_001 = Output.Create(AzureDevOps.GetProject.InvokeAsync(new AzureDevOps.GetProjectArgs\n        {\n            Name = \"Test Project\",\n        }));\n        var my_project_features = new AzureDevOps.ProjectFeatures(\"my-project-features\", new AzureDevOps.ProjectFeaturesArgs\n        {\n            ProjectId = tf_project_test_001.Apply(tf_project_test_001 =\u003e tf_project_test_001.Id),\n            Features = \n            {\n                { \"testplans\", \"disabled\" },\n                { \"artifacts\", \"enabled\" },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttf_project_test_001, err := azuredevops.LookupProject(ctx, \u0026GetProjectArgs{\n\t\t\tName: pulumi.StringRef(\"Test Project\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewProjectFeatures(ctx, \"my-project-features\", \u0026azuredevops.ProjectFeaturesArgs{\n\t\t\tProjectId: pulumi.String(tf_project_test_001.Id),\n\t\t\tFeatures: pulumi.StringMap{\n\t\t\t\t\"testplans\": pulumi.String(\"disabled\"),\n\t\t\t\t\"artifacts\": pulumi.String(\"enabled\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\nNo official documentation available\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: Read, Write, \u0026 Manage\n\n\n## Import\n\nAzure DevOps feature settings can be imported using the project id, e.g.\n\n```sh\n $ pulumi import azuredevops:Core/projectFeatures:ProjectFeatures project_id 00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "features": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Defines the status (`enabled`, `disabled`) of the project features.  \nValid features `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`\n"
                },
                "projectId": {
                    "type": "string"
                }
            },
            "required": [
                "features",
                "projectId"
            ],
            "inputProperties": {
                "features": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Defines the status (`enabled`, `disabled`) of the project features.  \nValid features `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`\n"
                },
                "projectId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "features",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectFeatures resources.\n",
                "properties": {
                    "features": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Defines the status (`enabled`, `disabled`) of the project features.  \nValid features `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`\n"
                    },
                    "projectId": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.core.ProjectFeatures has been deprecated in favor of azuredevops.ProjectFeatures"
        },
        "azuredevops:Entitlement/user:User": {
            "description": "Manages a user entitlement within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst user = new azuredevops.User(\"user\", {\n    principalName: \"foo@contoso.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nuser = azuredevops.User(\"user\", principal_name=\"foo@contoso.com\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var user = new AzureDevOps.User(\"user\", new AzureDevOps.UserArgs\n        {\n            PrincipalName = \"foo@contoso.com\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewUser(ctx, \"user\", \u0026azuredevops.UserArgs{\n\t\t\tPrincipalName: pulumi.String(\"foo@contoso.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - User Entitlements - Add](https://docs.microsoft.com/en-us/rest/api/azure/devops/memberentitlementmanagement/user%20entitlements/add?view=azure-devops-rest-5.1)\n\n## PAT Permissions Required\n\n- **Member Entitlement Management**: Read \u0026 Write\n\n\n## Import\n\nThe resources allows the import via the UUID of a user entitlement or by using the principal name of a user owning an entitlement. ",
            "properties": {
                "accountLicenseType": {
                    "type": "string",
                    "description": "Type of Account License. Valid values: `advanced`, `earlyAdopter`, `express`, `none`, `professional`, or `stakeholder`. Defaults to `express`. In addition the value `basic` is allowed which is an alias for `express` and reflects the name of the `express` license used in the Azure DevOps web interface.\n"
                },
                "descriptor": {
                    "type": "string",
                    "description": "The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the user graph subject.\n"
                },
                "licensingSource": {
                    "type": "string",
                    "description": "The source of the licensing (e.g. Account. MSDN etc.) Valid values: `account` (Default), `auto`, `msdn`, `none`, `profile`, `trail`\n"
                },
                "origin": {
                    "type": "string",
                    "description": "The type of source provider for the origin identifier.\n"
                },
                "originId": {
                    "type": "string",
                    "description": "The unique identifier from the system of origin. Typically a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.\n"
                },
                "principalName": {
                    "type": "string",
                    "description": "The principal name is the PrincipalName of a graph member from the source provider. Usually, e-mail address.\n"
                }
            },
            "required": [
                "descriptor",
                "origin",
                "originId",
                "principalName"
            ],
            "inputProperties": {
                "accountLicenseType": {
                    "type": "string",
                    "description": "Type of Account License. Valid values: `advanced`, `earlyAdopter`, `express`, `none`, `professional`, or `stakeholder`. Defaults to `express`. In addition the value `basic` is allowed which is an alias for `express` and reflects the name of the `express` license used in the Azure DevOps web interface.\n"
                },
                "licensingSource": {
                    "type": "string",
                    "description": "The source of the licensing (e.g. Account. MSDN etc.) Valid values: `account` (Default), `auto`, `msdn`, `none`, `profile`, `trail`\n"
                },
                "origin": {
                    "type": "string",
                    "description": "The type of source provider for the origin identifier.\n"
                },
                "originId": {
                    "type": "string",
                    "description": "The unique identifier from the system of origin. Typically a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.\n"
                },
                "principalName": {
                    "type": "string",
                    "description": "The principal name is the PrincipalName of a graph member from the source provider. Usually, e-mail address.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "accountLicenseType": {
                        "type": "string",
                        "description": "Type of Account License. Valid values: `advanced`, `earlyAdopter`, `express`, `none`, `professional`, or `stakeholder`. Defaults to `express`. In addition the value `basic` is allowed which is an alias for `express` and reflects the name of the `express` license used in the Azure DevOps web interface.\n"
                    },
                    "descriptor": {
                        "type": "string",
                        "description": "The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the user graph subject.\n"
                    },
                    "licensingSource": {
                        "type": "string",
                        "description": "The source of the licensing (e.g. Account. MSDN etc.) Valid values: `account` (Default), `auto`, `msdn`, `none`, `profile`, `trail`\n"
                    },
                    "origin": {
                        "type": "string",
                        "description": "The type of source provider for the origin identifier.\n"
                    },
                    "originId": {
                        "type": "string",
                        "description": "The unique identifier from the system of origin. Typically a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.\n"
                    },
                    "principalName": {
                        "type": "string",
                        "description": "The principal name is the PrincipalName of a graph member from the source provider. Usually, e-mail address.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.entitlement.User has been deprecated in favor of azuredevops.User"
        },
        "azuredevops:Identities/group:Group": {
            "description": "Manages a group within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {});\nconst tf-project-readers = azuredevops.getGroupOutput({\n    projectId: project.id,\n    name: \"Readers\",\n});\nconst tf-project-contributors = azuredevops.getGroupOutput({\n    projectId: project.id,\n    name: \"Contributors\",\n});\nconst group = new azuredevops.Group(\"group\", {\n    scope: project.id,\n    displayName: \"Test group\",\n    description: \"Test description\",\n    members: [\n        tf_project_readers.apply(tf_project_readers =\u003e tf_project_readers.descriptor),\n        tf_project_contributors.apply(tf_project_contributors =\u003e tf_project_contributors.descriptor),\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\")\ntf_project_readers = azuredevops.get_group_output(project_id=project.id,\n    name=\"Readers\")\ntf_project_contributors = azuredevops.get_group_output(project_id=project.id,\n    name=\"Contributors\")\ngroup = azuredevops.Group(\"group\",\n    scope=project.id,\n    display_name=\"Test group\",\n    description=\"Test description\",\n    members=[\n        tf_project_readers.descriptor,\n        tf_project_contributors.descriptor,\n    ])\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n        });\n        var tf_project_readers = AzureDevOps.GetGroup.Invoke(new AzureDevOps.GetGroupInvokeArgs\n        {\n            ProjectId = project.Id,\n            Name = \"Readers\",\n        });\n        var tf_project_contributors = AzureDevOps.GetGroup.Invoke(new AzureDevOps.GetGroupInvokeArgs\n        {\n            ProjectId = project.Id,\n            Name = \"Contributors\",\n        });\n        var @group = new AzureDevOps.Group(\"group\", new AzureDevOps.GroupArgs\n        {\n            Scope = project.Id,\n            DisplayName = \"Test group\",\n            Description = \"Test description\",\n            Members = \n            {\n                tf_project_readers.Apply(tf_project_readers =\u003e tf_project_readers.Descriptor),\n                tf_project_contributors.Apply(tf_project_contributors =\u003e tf_project_contributors.Descriptor),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttf_project_readers := azuredevops.LookupGroupOutput(ctx, GetGroupOutputArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tName:      pulumi.String(\"Readers\"),\n\t\t}, nil)\n\t\ttf_project_contributors := azuredevops.LookupGroupOutput(ctx, GetGroupOutputArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tName:      pulumi.String(\"Contributors\"),\n\t\t}, nil)\n\t\t_, err = azuredevops.NewGroup(ctx, \"group\", \u0026azuredevops.GroupArgs{\n\t\t\tScope:       project.ID(),\n\t\t\tDisplayName: pulumi.String(\"Test group\"),\n\t\t\tDescription: pulumi.String(\"Test description\"),\n\t\t\tMembers: pulumi.StringArray{\n\t\t\t\ttf_project_readers.ApplyT(func(tf_project_readers GetGroupResult) (string, error) {\n\t\t\t\t\treturn tf_project_readers.Descriptor, nil\n\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\ttf_project_contributors.ApplyT(func(tf_project_contributors GetGroupResult) (string, error) {\n\t\t\t\t\treturn tf_project_contributors.Descriptor, nil\n\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Groups](https://docs.microsoft.com/en-us/rest/api/azure/devops/graph/groups?view=azure-devops-rest-5.1)\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: Read, Write, \u0026 Manage\n\n\n## Import\n\nAzure DevOps groups can be imported using the group identity descriptor, e.g.\n\n```sh\n $ pulumi import azuredevops:Identities/group:Group id aadgp.Uy0xLTktMTU1MTM3NDI0NS0xMjA0NDAwOTY5LTI0MDI5ODY0MTMtMjE3OTQwODYxNi0zLTIxNjc2NjQyNTMtMzI1Nzg0NDI4OS0yMjU4MjcwOTc0LTI2MDYxODY2NDU\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The Description of the Project.\n"
                },
                "descriptor": {
                    "type": "string",
                    "description": "The identity (subject) descriptor of the Group.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of a new Azure DevOps group that is not backed by an external provider. The `origin_id` and `mail` arguments cannot be used simultaneously with `display_name`.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "This represents the name of the container of origin for a graph member.\n"
                },
                "mail": {
                    "type": "string",
                    "description": "The mail address as a reference to an existing group from an external AD or AAD backed provider. The `scope`, `origin_id` and `display_name` arguments cannot be used simultaneously with `mail`.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "\u003e NOTE: It's possible to define group members both within the `azuredevops.Group` resource via the members block and by using the `azuredevops.GroupMembership` resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.\n"
                },
                "origin": {
                    "type": "string",
                    "description": "The type of source provider for the origin identifier (ex:AD, AAD, MSA)\n"
                },
                "originId": {
                    "type": "string",
                    "description": "The OriginID as a reference to a group from an external AD or AAD backed provider. The `scope`, `mail` and `display_name` arguments cannot be used simultaneously with `origin_id`.\n"
                },
                "principalName": {
                    "type": "string",
                    "description": "This is the PrincipalName of this graph member from the source provider.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of the group. A descriptor referencing the scope (collection, project) in which the group should be created. If omitted, will be created in the scope of the enclosing account or organization.x\n"
                },
                "subjectKind": {
                    "type": "string",
                    "description": "This field identifies the type of the graph subject (ex: Group, Scope, User).\n"
                },
                "url": {
                    "type": "string",
                    "description": "This url is the full route to the source resource of this graph subject.\n"
                }
            },
            "required": [
                "descriptor",
                "displayName",
                "domain",
                "mail",
                "members",
                "origin",
                "originId",
                "principalName",
                "subjectKind",
                "url"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The Description of the Project.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of a new Azure DevOps group that is not backed by an external provider. The `origin_id` and `mail` arguments cannot be used simultaneously with `display_name`.\n"
                },
                "mail": {
                    "type": "string",
                    "description": "The mail address as a reference to an existing group from an external AD or AAD backed provider. The `scope`, `origin_id` and `display_name` arguments cannot be used simultaneously with `mail`.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "\u003e NOTE: It's possible to define group members both within the `azuredevops.Group` resource via the members block and by using the `azuredevops.GroupMembership` resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.\n"
                },
                "originId": {
                    "type": "string",
                    "description": "The OriginID as a reference to a group from an external AD or AAD backed provider. The `scope`, `mail` and `display_name` arguments cannot be used simultaneously with `origin_id`.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of the group. A descriptor referencing the scope (collection, project) in which the group should be created. If omitted, will be created in the scope of the enclosing account or organization.x\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The Description of the Project.\n"
                    },
                    "descriptor": {
                        "type": "string",
                        "description": "The identity (subject) descriptor of the Group.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name of a new Azure DevOps group that is not backed by an external provider. The `origin_id` and `mail` arguments cannot be used simultaneously with `display_name`.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "This represents the name of the container of origin for a graph member.\n"
                    },
                    "mail": {
                        "type": "string",
                        "description": "The mail address as a reference to an existing group from an external AD or AAD backed provider. The `scope`, `origin_id` and `display_name` arguments cannot be used simultaneously with `mail`.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "\u003e NOTE: It's possible to define group members both within the `azuredevops.Group` resource via the members block and by using the `azuredevops.GroupMembership` resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.\n"
                    },
                    "origin": {
                        "type": "string",
                        "description": "The type of source provider for the origin identifier (ex:AD, AAD, MSA)\n"
                    },
                    "originId": {
                        "type": "string",
                        "description": "The OriginID as a reference to a group from an external AD or AAD backed provider. The `scope`, `mail` and `display_name` arguments cannot be used simultaneously with `origin_id`.\n"
                    },
                    "principalName": {
                        "type": "string",
                        "description": "This is the PrincipalName of this graph member from the source provider.\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of the group. A descriptor referencing the scope (collection, project) in which the group should be created. If omitted, will be created in the scope of the enclosing account or organization.x\n"
                    },
                    "subjectKind": {
                        "type": "string",
                        "description": "This field identifies the type of the graph subject (ex: Group, Scope, User).\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "This url is the full route to the source resource of this graph subject.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.identities.Group has been deprecated in favor of azuredevops.Group"
        },
        "azuredevops:Identities/groupMembership:GroupMembership": {
            "description": "Manages group membership within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {});\nconst user = new azuredevops.User(\"user\", {principalName: \"foo@contoso.com\"});\nconst group = azuredevops.getGroupOutput({\n    projectId: project.id,\n    name: \"Build Administrators\",\n});\nconst membership = new azuredevops.GroupMembership(\"membership\", {\n    group: group.apply(group =\u003e group.descriptor),\n    members: [user.descriptor],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\")\nuser = azuredevops.User(\"user\", principal_name=\"foo@contoso.com\")\ngroup = azuredevops.get_group_output(project_id=project.id,\n    name=\"Build Administrators\")\nmembership = azuredevops.GroupMembership(\"membership\",\n    group=group.descriptor,\n    members=[user.descriptor])\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n        });\n        var user = new AzureDevOps.User(\"user\", new AzureDevOps.UserArgs\n        {\n            PrincipalName = \"foo@contoso.com\",\n        });\n        var @group = AzureDevOps.GetGroup.Invoke(new AzureDevOps.GetGroupInvokeArgs\n        {\n            ProjectId = project.Id,\n            Name = \"Build Administrators\",\n        });\n        var membership = new AzureDevOps.GroupMembership(\"membership\", new AzureDevOps.GroupMembershipArgs\n        {\n            Group = @group.Apply(@group =\u003e @group.Descriptor),\n            Members = \n            {\n                user.Descriptor,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuser, err := azuredevops.NewUser(ctx, \"user\", \u0026azuredevops.UserArgs{\n\t\t\tPrincipalName: pulumi.String(\"foo@contoso.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgroup := azuredevops.LookupGroupOutput(ctx, GetGroupOutputArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tName:      pulumi.String(\"Build Administrators\"),\n\t\t}, nil)\n\t\t_, err = azuredevops.NewGroupMembership(ctx, \"membership\", \u0026azuredevops.GroupMembershipArgs{\n\t\t\tGroup: group.ApplyT(func(group GetGroupResult) (string, error) {\n\t\t\t\treturn group.Descriptor, nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tMembers: pulumi.StringArray{\n\t\t\t\tuser.Descriptor,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Memberships](https://docs.microsoft.com/en-us/rest/api/azure/devops/graph/memberships?view=azure-devops-rest-5.0)\n\n## PAT Permissions Required\n\n- **Deployment Groups**: Read \u0026 Manage\n\n\n## Import\n\nNot supported. ",
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The descriptor of the group being managed.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of user or group descriptors that will become members of the group.\n\u003e NOTE: It's possible to define group members both within the `azuredevops.GroupMembership resource` via the members block and by using the `azuredevops.Group` resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "The mode how the resource manages group members.\n- `mode == add`: the resource will ensure that all specified members will be part of the referenced group\n- `mode == overwrite`: the resource will replace all existing members with the members specified within the `members` block\n\u003e NOTE: To clear all members from a group, specify an empty list of descriptors in the `members` attribute and set the `mode` member to `overwrite`.\n"
                }
            },
            "required": [
                "group",
                "members"
            ],
            "inputProperties": {
                "group": {
                    "type": "string",
                    "description": "The descriptor of the group being managed.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of user or group descriptors that will become members of the group.\n\u003e NOTE: It's possible to define group members both within the `azuredevops.GroupMembership resource` via the members block and by using the `azuredevops.Group` resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "The mode how the resource manages group members.\n- `mode == add`: the resource will ensure that all specified members will be part of the referenced group\n- `mode == overwrite`: the resource will replace all existing members with the members specified within the `members` block\n\u003e NOTE: To clear all members from a group, specify an empty list of descriptors in the `members` attribute and set the `mode` member to `overwrite`.\n"
                }
            },
            "requiredInputs": [
                "group",
                "members"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupMembership resources.\n",
                "properties": {
                    "group": {
                        "type": "string",
                        "description": "The descriptor of the group being managed.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of user or group descriptors that will become members of the group.\n\u003e NOTE: It's possible to define group members both within the `azuredevops.GroupMembership resource` via the members block and by using the `azuredevops.Group` resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.\n"
                    },
                    "mode": {
                        "type": "string",
                        "description": "The mode how the resource manages group members.\n- `mode == add`: the resource will ensure that all specified members will be part of the referenced group\n- `mode == overwrite`: the resource will replace all existing members with the members specified within the `members` block\n\u003e NOTE: To clear all members from a group, specify an empty list of descriptors in the `members` attribute and set the `mode` member to `overwrite`.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.identities.GroupMembership has been deprecated in favor of azuredevops.GroupMembership"
        },
        "azuredevops:Pipeline/variableGroup:VariableGroup": {
            "description": "Manages variable groups within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {});\nconst variablegroup = new azuredevops.VariableGroup(\"variablegroup\", {\n    projectId: project.id,\n    description: \"Test Variable Group Description\",\n    allowAccess: true,\n    variables: [\n        {\n            name: \"key\",\n            value: \"value\",\n        },\n        {\n            name: \"Account Password\",\n            secretValue: \"p@ssword123\",\n            isSecret: true,\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\")\nvariablegroup = azuredevops.VariableGroup(\"variablegroup\",\n    project_id=project.id,\n    description=\"Test Variable Group Description\",\n    allow_access=True,\n    variables=[\n        azuredevops.VariableGroupVariableArgs(\n            name=\"key\",\n            value=\"value\",\n        ),\n        azuredevops.VariableGroupVariableArgs(\n            name=\"Account Password\",\n            secret_value=\"p@ssword123\",\n            is_secret=True,\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n        });\n        var variablegroup = new AzureDevOps.VariableGroup(\"variablegroup\", new AzureDevOps.VariableGroupArgs\n        {\n            ProjectId = project.Id,\n            Description = \"Test Variable Group Description\",\n            AllowAccess = true,\n            Variables = \n            {\n                new AzureDevOps.Inputs.VariableGroupVariableArgs\n                {\n                    Name = \"key\",\n                    Value = \"value\",\n                },\n                new AzureDevOps.Inputs.VariableGroupVariableArgs\n                {\n                    Name = \"Account Password\",\n                    SecretValue = \"p@ssword123\",\n                    IsSecret = true,\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewVariableGroup(ctx, \"variablegroup\", \u0026azuredevops.VariableGroupArgs{\n\t\t\tProjectId:   project.ID(),\n\t\t\tDescription: pulumi.String(\"Test Variable Group Description\"),\n\t\t\tAllowAccess: pulumi.Bool(true),\n\t\t\tVariables: VariableGroupVariableArray{\n\t\t\t\t\u0026VariableGroupVariableArgs{\n\t\t\t\t\tName:  pulumi.String(\"key\"),\n\t\t\t\t\tValue: pulumi.String(\"value\"),\n\t\t\t\t},\n\t\t\t\t\u0026VariableGroupVariableArgs{\n\t\t\t\t\tName:        pulumi.String(\"Account Password\"),\n\t\t\t\t\tSecretValue: pulumi.String(\"p@ssword123\"),\n\t\t\t\t\tIsSecret:    pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Variable Groups](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/variablegroups?view=azure-devops-rest-5.1)\n- [Azure DevOps Service REST API 5.1 - Authorized Resources](https://docs.microsoft.com/en-us/rest/api/azure/devops/build/authorizedresources?view=azure-devops-rest-5.1)\n\n## PAT Permissions Required\n\n- **Variable Groups**: Read, Create, \u0026 Manage\n- **Build**: Read \u0026 execute\n- **Project and Team**: Read\n- **Token Administration**: Read \u0026 manage\n- **Tokens**: Read \u0026 manage\n- **Work Items**: Read\n\n\n## Import\n\n**Variable groups containing secret values cannot be imported.** Azure DevOps Variable groups can be imported using the project name/variable group ID or by the project Guid/variable group ID, e.g.\n\n```sh\n $ pulumi import azuredevops:Pipeline/variableGroup:VariableGroup variablegroup \"Test Project/10\"\n```\n\n or\n\n```sh\n $ pulumi import azuredevops:Pipeline/variableGroup:VariableGroup variablegroup 00000000-0000-0000-0000-000000000000/0\n```\n\n _Note that for secret variables, the import command retrieve blank value in the tfstate._ ",
            "properties": {
                "allowAccess": {
                    "type": "boolean",
                    "description": "Boolean that indicate if this variable group is shared by all pipelines of this project.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Variable Group.\n"
                },
                "keyVault": {
                    "$ref": "#/types/azuredevops:Pipeline/VariableGroupKeyVault:VariableGroupKeyVault"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Variable Group.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Pipeline/VariableGroupVariable:VariableGroupVariable"
                    },
                    "description": "One or more `variable` blocks as documented below.\n"
                }
            },
            "required": [
                "name",
                "projectId",
                "variables"
            ],
            "inputProperties": {
                "allowAccess": {
                    "type": "boolean",
                    "description": "Boolean that indicate if this variable group is shared by all pipelines of this project.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Variable Group.\n"
                },
                "keyVault": {
                    "$ref": "#/types/azuredevops:Pipeline/VariableGroupKeyVault:VariableGroupKeyVault"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Variable Group.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:Pipeline/VariableGroupVariable:VariableGroupVariable"
                    },
                    "description": "One or more `variable` blocks as documented below.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "variables"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VariableGroup resources.\n",
                "properties": {
                    "allowAccess": {
                        "type": "boolean",
                        "description": "Boolean that indicate if this variable group is shared by all pipelines of this project.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Variable Group.\n"
                    },
                    "keyVault": {
                        "$ref": "#/types/azuredevops:Pipeline/VariableGroupKeyVault:VariableGroupKeyVault"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Variable Group.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:Pipeline/VariableGroupVariable:VariableGroupVariable"
                        },
                        "description": "One or more `variable` blocks as documented below.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.pipeline.VariableGroup has been deprecated in favor of azuredevops.VariableGroup"
        },
        "azuredevops:Policy/branchPolicyBuildValidation:BranchPolicyBuildValidation": {
            "description": "Manages a build validation branch policy within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {});\nconst git = new azuredevops.Git(\"git\", {\n    projectId: project.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst buildDefinition = new azuredevops.BuildDefinition(\"buildDefinition\", {\n    projectId: project.id,\n    repository: {\n        repoType: \"TfsGit\",\n        repoId: git.id,\n        ymlPath: \"azure-pipelines.yml\",\n    },\n});\nconst branchPolicyBuildValidation = new azuredevops.BranchPolicyBuildValidation(\"branchPolicyBuildValidation\", {\n    projectId: project.id,\n    enabled: true,\n    blocking: true,\n    settings: {\n        displayName: \"Don't break the build!\",\n        buildDefinitionId: buildDefinition.id,\n        validDuration: 720,\n        filenamePatterns: [\n            \"/WebApp/*\",\n            \"!/WebApp/Tests/*\",\n            \"*.cs\",\n        ],\n        scopes: [\n            {\n                repositoryId: git.id,\n                repositoryRef: git.defaultBranch,\n                matchType: \"Exact\",\n            },\n            {\n                repositoryId: git.id,\n                repositoryRef: \"refs/heads/releases\",\n                matchType: \"Prefix\",\n            },\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\")\ngit = azuredevops.Git(\"git\",\n    project_id=project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nbuild_definition = azuredevops.BuildDefinition(\"buildDefinition\",\n    project_id=project.id,\n    repository=azuredevops.BuildDefinitionRepositoryArgs(\n        repo_type=\"TfsGit\",\n        repo_id=git.id,\n        yml_path=\"azure-pipelines.yml\",\n    ))\nbranch_policy_build_validation = azuredevops.BranchPolicyBuildValidation(\"branchPolicyBuildValidation\",\n    project_id=project.id,\n    enabled=True,\n    blocking=True,\n    settings=azuredevops.BranchPolicyBuildValidationSettingsArgs(\n        display_name=\"Don't break the build!\",\n        build_definition_id=build_definition.id,\n        valid_duration=720,\n        filename_patterns=[\n            \"/WebApp/*\",\n            \"!/WebApp/Tests/*\",\n            \"*.cs\",\n        ],\n        scopes=[\n            azuredevops.BranchPolicyBuildValidationSettingsScopeArgs(\n                repository_id=git.id,\n                repository_ref=git.default_branch,\n                match_type=\"Exact\",\n            ),\n            azuredevops.BranchPolicyBuildValidationSettingsScopeArgs(\n                repository_id=git.id,\n                repository_ref=\"refs/heads/releases\",\n                match_type=\"Prefix\",\n            ),\n        ],\n    ))\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n        });\n        var git = new AzureDevOps.Git(\"git\", new AzureDevOps.GitArgs\n        {\n            ProjectId = project.Id,\n            Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n            {\n                InitType = \"Clean\",\n            },\n        });\n        var buildDefinition = new AzureDevOps.BuildDefinition(\"buildDefinition\", new AzureDevOps.BuildDefinitionArgs\n        {\n            ProjectId = project.Id,\n            Repository = new AzureDevOps.Inputs.BuildDefinitionRepositoryArgs\n            {\n                RepoType = \"TfsGit\",\n                RepoId = git.Id,\n                YmlPath = \"azure-pipelines.yml\",\n            },\n        });\n        var branchPolicyBuildValidation = new AzureDevOps.BranchPolicyBuildValidation(\"branchPolicyBuildValidation\", new AzureDevOps.BranchPolicyBuildValidationArgs\n        {\n            ProjectId = project.Id,\n            Enabled = true,\n            Blocking = true,\n            Settings = new AzureDevOps.Inputs.BranchPolicyBuildValidationSettingsArgs\n            {\n                DisplayName = \"Don't break the build!\",\n                BuildDefinitionId = buildDefinition.Id,\n                ValidDuration = 720,\n                FilenamePatterns = \n                {\n                    \"/WebApp/*\",\n                    \"!/WebApp/Tests/*\",\n                    \"*.cs\",\n                },\n                Scopes = \n                {\n                    new AzureDevOps.Inputs.BranchPolicyBuildValidationSettingsScopeArgs\n                    {\n                        RepositoryId = git.Id,\n                        RepositoryRef = git.DefaultBranch,\n                        MatchType = \"Exact\",\n                    },\n                    new AzureDevOps.Inputs.BranchPolicyBuildValidationSettingsScopeArgs\n                    {\n                        RepositoryId = git.Id,\n                        RepositoryRef = \"refs/heads/releases\",\n                        MatchType = \"Prefix\",\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgit, err := azuredevops.NewGit(ctx, \"git\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tInitialization: \u0026GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbuildDefinition, err := azuredevops.NewBuildDefinition(ctx, \"buildDefinition\", \u0026azuredevops.BuildDefinitionArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tRepository: \u0026BuildDefinitionRepositoryArgs{\n\t\t\t\tRepoType: pulumi.String(\"TfsGit\"),\n\t\t\t\tRepoId:   git.ID(),\n\t\t\t\tYmlPath:  pulumi.String(\"azure-pipelines.yml\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewBranchPolicyBuildValidation(ctx, \"branchPolicyBuildValidation\", \u0026azuredevops.BranchPolicyBuildValidationArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t\tSettings: \u0026BranchPolicyBuildValidationSettingsArgs{\n\t\t\t\tDisplayName:       pulumi.String(\"Don't break the build!\"),\n\t\t\t\tBuildDefinitionId: buildDefinition.ID(),\n\t\t\t\tValidDuration:     pulumi.Int(720),\n\t\t\t\tFilenamePatterns: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"/WebApp/*\"),\n\t\t\t\t\tpulumi.String(\"!/WebApp/Tests/*\"),\n\t\t\t\t\tpulumi.String(\"*.cs\"),\n\t\t\t\t},\n\t\t\t\tScopes: BranchPolicyBuildValidationSettingsScopeArray{\n\t\t\t\t\t\u0026BranchPolicyBuildValidationSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  git.ID(),\n\t\t\t\t\t\tRepositoryRef: git.DefaultBranch,\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Exact\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026BranchPolicyBuildValidationSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  git.ID(),\n\t\t\t\t\t\tRepositoryRef: pulumi.String(\"refs/heads/releases\"),\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Prefix\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Policy Configurations](https://docs.microsoft.com/en-us/rest/api/azure/devops/policy/configurations/create?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps Branch Policies can be imported using the project ID and policy configuration ID\n\n```sh\n $ pulumi import azuredevops:Policy/branchPolicyBuildValidation:BranchPolicyBuildValidation p 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "settings": {
                    "$ref": "#/types/azuredevops:Policy/BranchPolicyBuildValidationSettings:BranchPolicyBuildValidationSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "required": [
                "projectId",
                "settings"
            ],
            "inputProperties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "settings": {
                    "$ref": "#/types/azuredevops:Policy/BranchPolicyBuildValidationSettings:BranchPolicyBuildValidationSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "settings"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BranchPolicyBuildValidation resources.\n",
                "properties": {
                    "blocking": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the policy will be created.\n"
                    },
                    "settings": {
                        "$ref": "#/types/azuredevops:Policy/BranchPolicyBuildValidationSettings:BranchPolicyBuildValidationSettings",
                        "description": "Configuration for the policy. This block must be defined exactly once.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.policy.BranchPolicyBuildValidation has been deprecated in favor of azuredevops.BranchPolicyBuildValidation"
        },
        "azuredevops:Policy/branchPolicyMinReviewers:BranchPolicyMinReviewers": {
            "description": "Branch policy for reviewers on pull requests. Includes the minimum number of reviewers and other conditions.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {});\nconst git = new azuredevops.Git(\"git\", {\n    projectId: project.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst branchPolicyMinReviewers = new azuredevops.BranchPolicyMinReviewers(\"branchPolicyMinReviewers\", {\n    projectId: project.id,\n    enabled: true,\n    blocking: true,\n    settings: {\n        reviewerCount: 7,\n        submitterCanVote: false,\n        lastPusherCannotApprove: true,\n        allowCompletionWithRejectsOrWaits: false,\n        onPushResetApprovedVotes: true,\n        onLastIterationRequireVote: false,\n        scopes: [\n            {\n                repositoryId: git.id,\n                repositoryRef: git.defaultBranch,\n                matchType: \"Exact\",\n            },\n            {\n                repositoryId: undefined,\n                repositoryRef: \"refs/heads/releases\",\n                matchType: \"Prefix\",\n            },\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\")\ngit = azuredevops.Git(\"git\",\n    project_id=project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nbranch_policy_min_reviewers = azuredevops.BranchPolicyMinReviewers(\"branchPolicyMinReviewers\",\n    project_id=project.id,\n    enabled=True,\n    blocking=True,\n    settings=azuredevops.BranchPolicyMinReviewersSettingsArgs(\n        reviewer_count=7,\n        submitter_can_vote=False,\n        last_pusher_cannot_approve=True,\n        allow_completion_with_rejects_or_waits=False,\n        on_push_reset_approved_votes=True,\n        on_last_iteration_require_vote=False,\n        scopes=[\n            azuredevops.BranchPolicyMinReviewersSettingsScopeArgs(\n                repository_id=git.id,\n                repository_ref=git.default_branch,\n                match_type=\"Exact\",\n            ),\n            azuredevops.BranchPolicyMinReviewersSettingsScopeArgs(\n                repository_id=None,\n                repository_ref=\"refs/heads/releases\",\n                match_type=\"Prefix\",\n            ),\n        ],\n    ))\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n        });\n        var git = new AzureDevOps.Git(\"git\", new AzureDevOps.GitArgs\n        {\n            ProjectId = project.Id,\n            Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n            {\n                InitType = \"Clean\",\n            },\n        });\n        var branchPolicyMinReviewers = new AzureDevOps.BranchPolicyMinReviewers(\"branchPolicyMinReviewers\", new AzureDevOps.BranchPolicyMinReviewersArgs\n        {\n            ProjectId = project.Id,\n            Enabled = true,\n            Blocking = true,\n            Settings = new AzureDevOps.Inputs.BranchPolicyMinReviewersSettingsArgs\n            {\n                ReviewerCount = 7,\n                SubmitterCanVote = false,\n                LastPusherCannotApprove = true,\n                AllowCompletionWithRejectsOrWaits = false,\n                OnPushResetApprovedVotes = true,\n                OnLastIterationRequireVote = false,\n                Scopes = \n                {\n                    new AzureDevOps.Inputs.BranchPolicyMinReviewersSettingsScopeArgs\n                    {\n                        RepositoryId = git.Id,\n                        RepositoryRef = git.DefaultBranch,\n                        MatchType = \"Exact\",\n                    },\n                    new AzureDevOps.Inputs.BranchPolicyMinReviewersSettingsScopeArgs\n                    {\n                        RepositoryId = null,\n                        RepositoryRef = \"refs/heads/releases\",\n                        MatchType = \"Prefix\",\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgit, err := azuredevops.NewGit(ctx, \"git\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tInitialization: \u0026GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewBranchPolicyMinReviewers(ctx, \"branchPolicyMinReviewers\", \u0026azuredevops.BranchPolicyMinReviewersArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t\tSettings: \u0026BranchPolicyMinReviewersSettingsArgs{\n\t\t\t\tReviewerCount:                     pulumi.Int(7),\n\t\t\t\tSubmitterCanVote:                  pulumi.Bool(false),\n\t\t\t\tLastPusherCannotApprove:           pulumi.Bool(true),\n\t\t\t\tAllowCompletionWithRejectsOrWaits: pulumi.Bool(false),\n\t\t\t\tOnPushResetApprovedVotes:          pulumi.Bool(true),\n\t\t\t\tOnLastIterationRequireVote:        pulumi.Bool(false),\n\t\t\t\tScopes: BranchPolicyMinReviewersSettingsScopeArray{\n\t\t\t\t\t\u0026BranchPolicyMinReviewersSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  git.ID(),\n\t\t\t\t\t\tRepositoryRef: git.DefaultBranch,\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Exact\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026BranchPolicyMinReviewersSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  nil,\n\t\t\t\t\t\tRepositoryRef: pulumi.String(\"refs/heads/releases\"),\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Prefix\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Policy Configurations](https://docs.microsoft.com/en-us/rest/api/azure/devops/policy/configurations/create?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps Branch Policies can be imported using the project ID and policy configuration ID\n\n```sh\n $ pulumi import azuredevops:Policy/branchPolicyMinReviewers:BranchPolicyMinReviewers p 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "settings": {
                    "$ref": "#/types/azuredevops:Policy/BranchPolicyMinReviewersSettings:BranchPolicyMinReviewersSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "required": [
                "projectId",
                "settings"
            ],
            "inputProperties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "settings": {
                    "$ref": "#/types/azuredevops:Policy/BranchPolicyMinReviewersSettings:BranchPolicyMinReviewersSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "settings"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BranchPolicyMinReviewers resources.\n",
                "properties": {
                    "blocking": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the policy will be created.\n"
                    },
                    "settings": {
                        "$ref": "#/types/azuredevops:Policy/BranchPolicyMinReviewersSettings:BranchPolicyMinReviewersSettings",
                        "description": "Configuration for the policy. This block must be defined exactly once.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.policy.BranchPolicyMinReviewers has been deprecated in favor of azuredevops.BranchPolicyMinReviewers"
        },
        "azuredevops:Repository/git:Git": {
            "description": "\n\n\n## Import\n\nAzure DevOps Repositories can be imported using the repo name or by the repo Guid e.g.\n\n```sh\n $ pulumi import azuredevops:Repository/git:Git repository projectName/repoName\n```\n\n or\n\n```sh\n $ pulumi import azuredevops:Repository/git:Git repository projectName/00000000-0000-0000-0000-000000000000\n```\n\n hcl resource \"azuredevops_git_repository\" \"repo\" {\n\n project_id = azuredevops_project.project.id\n\n name\n\n\n\n\n\n = \"Existing Git Repository\"\n\n default_branch = \"refs/heads/main\"\n\n initialization {\n\n\n\n init_type = \"Clean\"\n\n }\n\n lifecycle {\n\n\n\n ignore_changes = [\n\n\n\n\n\n # Ignore changes to initialization to support importing existing repositories\n\n\n\n\n\n # Given that a repo now exists, either imported into terraform state or created by terraform,\n\n\n\n\n\n # we don't care for the configuration of initialization against the existing resource\n\n\n\n\n\n initialization,\n\n\n\n ]\n\n } } ",
            "properties": {
                "defaultBranch": {
                    "type": "string",
                    "description": "The ref of the default branch. Will be used as the branch name for initialized repositories.\n"
                },
                "initialization": {
                    "$ref": "#/types/azuredevops:Repository/GitInitialization:GitInitialization",
                    "description": "An `initialization` block as documented below.\n"
                },
                "isFork": {
                    "type": "boolean",
                    "description": "True if the repository was created as a fork.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the git repository.\n"
                },
                "parentRepositoryId": {
                    "type": "string",
                    "description": "The ID of a Git project from which a fork is to be created.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "remoteUrl": {
                    "type": "string",
                    "description": "Git HTTPS URL of the repository\n"
                },
                "size": {
                    "type": "integer",
                    "description": "Size in bytes.\n"
                },
                "sshUrl": {
                    "type": "string",
                    "description": "Git SSH URL of the repository.\n"
                },
                "url": {
                    "type": "string",
                    "description": "REST API URL of the repository.\n"
                },
                "webUrl": {
                    "type": "string",
                    "description": "Web link to the repository.\n"
                }
            },
            "required": [
                "defaultBranch",
                "initialization",
                "isFork",
                "name",
                "projectId",
                "remoteUrl",
                "size",
                "sshUrl",
                "url",
                "webUrl"
            ],
            "inputProperties": {
                "defaultBranch": {
                    "type": "string",
                    "description": "The ref of the default branch. Will be used as the branch name for initialized repositories.\n"
                },
                "initialization": {
                    "$ref": "#/types/azuredevops:Repository/GitInitialization:GitInitialization",
                    "description": "An `initialization` block as documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the git repository.\n"
                },
                "parentRepositoryId": {
                    "type": "string",
                    "description": "The ID of a Git project from which a fork is to be created.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                }
            },
            "requiredInputs": [
                "initialization",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Git resources.\n",
                "properties": {
                    "defaultBranch": {
                        "type": "string",
                        "description": "The ref of the default branch. Will be used as the branch name for initialized repositories.\n"
                    },
                    "initialization": {
                        "$ref": "#/types/azuredevops:Repository/GitInitialization:GitInitialization",
                        "description": "An `initialization` block as documented below.\n"
                    },
                    "isFork": {
                        "type": "boolean",
                        "description": "True if the repository was created as a fork.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the git repository.\n"
                    },
                    "parentRepositoryId": {
                        "type": "string",
                        "description": "The ID of a Git project from which a fork is to be created.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "remoteUrl": {
                        "type": "string",
                        "description": "Git HTTPS URL of the repository\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "Size in bytes.\n"
                    },
                    "sshUrl": {
                        "type": "string",
                        "description": "Git SSH URL of the repository.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "REST API URL of the repository.\n"
                    },
                    "webUrl": {
                        "type": "string",
                        "description": "Web link to the repository.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.repository.Git has been deprecated in favor of azuredevops.Git"
        },
        "azuredevops:Security/resourceAuthorization:ResourceAuthorization": {
            "description": "Manages authorization of resources, e.g. for access in build pipelines.\n\nCurrently supported resources: service endpoint (aka service connection, endpoint).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {});\nconst bitbucketAccount = new azuredevops.ServiceEndpointBitBucket(\"bitbucketAccount\", {\n    projectId: project.id,\n    username: \"xxxx\",\n    password: \"xxxx\",\n    serviceEndpointName: \"test-bitbucket\",\n    description: \"test\",\n});\nconst auth = new azuredevops.ResourceAuthorization(\"auth\", {\n    projectId: project.id,\n    resourceId: bitbucketAccount.id,\n    authorized: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\")\nbitbucket_account = azuredevops.ServiceEndpointBitBucket(\"bitbucketAccount\",\n    project_id=project.id,\n    username=\"xxxx\",\n    password=\"xxxx\",\n    service_endpoint_name=\"test-bitbucket\",\n    description=\"test\")\nauth = azuredevops.ResourceAuthorization(\"auth\",\n    project_id=project.id,\n    resource_id=bitbucket_account.id,\n    authorized=True)\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n        });\n        var bitbucketAccount = new AzureDevOps.ServiceEndpointBitBucket(\"bitbucketAccount\", new AzureDevOps.ServiceEndpointBitBucketArgs\n        {\n            ProjectId = project.Id,\n            Username = \"xxxx\",\n            Password = \"xxxx\",\n            ServiceEndpointName = \"test-bitbucket\",\n            Description = \"test\",\n        });\n        var auth = new AzureDevOps.ResourceAuthorization(\"auth\", new AzureDevOps.ResourceAuthorizationArgs\n        {\n            ProjectId = project.Id,\n            ResourceId = bitbucketAccount.Id,\n            Authorized = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbitbucketAccount, err := azuredevops.NewServiceEndpointBitBucket(ctx, \"bitbucketAccount\", \u0026azuredevops.ServiceEndpointBitBucketArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tUsername:            pulumi.String(\"xxxx\"),\n\t\t\tPassword:            pulumi.String(\"xxxx\"),\n\t\t\tServiceEndpointName: pulumi.String(\"test-bitbucket\"),\n\t\t\tDescription:         pulumi.String(\"test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewResourceAuthorization(ctx, \"auth\", \u0026azuredevops.ResourceAuthorizationArgs{\n\t\t\tProjectId:  project.ID(),\n\t\t\tResourceId: bitbucketAccount.ID(),\n\t\t\tAuthorized: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Authorize Definition Resource](https://docs.microsoft.com/en-us/rest/api/azure/devops/build/resources/authorize%20definition%20resources?view=azure-devops-rest-5.1)\n",
            "properties": {
                "authorized": {
                    "type": "boolean",
                    "description": "Set to true to allow public access in the project. Type: boolean.\n"
                },
                "definitionId": {
                    "type": "integer",
                    "description": "The ID of the build definition to authorize. Type: string.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name. Type: string.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The ID of the resource to authorize. Type: string.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the resource to authorize. Type: string. Valid values: `endpoint`, `queue`, `variablegroup`. Default value: `endpoint`.\n"
                }
            },
            "required": [
                "authorized",
                "projectId",
                "resourceId"
            ],
            "inputProperties": {
                "authorized": {
                    "type": "boolean",
                    "description": "Set to true to allow public access in the project. Type: boolean.\n"
                },
                "definitionId": {
                    "type": "integer",
                    "description": "The ID of the build definition to authorize. Type: string.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name. Type: string.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The ID of the resource to authorize. Type: string.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the resource to authorize. Type: string. Valid values: `endpoint`, `queue`, `variablegroup`. Default value: `endpoint`.\n"
                }
            },
            "requiredInputs": [
                "authorized",
                "projectId",
                "resourceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ResourceAuthorization resources.\n",
                "properties": {
                    "authorized": {
                        "type": "boolean",
                        "description": "Set to true to allow public access in the project. Type: boolean.\n"
                    },
                    "definitionId": {
                        "type": "integer",
                        "description": "The ID of the build definition to authorize. Type: string.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name. Type: string.\n"
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "The ID of the resource to authorize. Type: string.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the resource to authorize. Type: string. Valid values: `endpoint`, `queue`, `variablegroup`. Default value: `endpoint`.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.security.ResourceAuthorization has been deprecated in favor of azuredevops.ResourceAuthorization"
        },
        "azuredevops:ServiceEndpoint/azureRM:AzureRM": {
            "description": "Manages Manual or Automatic AzureRM service endpoint within Azure DevOps.\n\n## Requirements (Manual AzureRM Service Endpoint)\n\nBefore to create a service end point in Azure DevOps, you need to create a Service Principal in your Azure subscription.\n\nFor detailed steps to create a service principal with Azure cli see the [documentation](https://docs.microsoft.com/en-us/cli/azure/create-an-azure-service-principal-azure-cli?view=azure-cli-latest)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Manual AzureRM Service Endpoint\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst endpointazure = new azuredevops.ServiceEndpointAzureRM(\"endpointazure\", {\n    projectId: project.id,\n    serviceEndpointName: \"Sample AzureRM\",\n    description: \"Managed by Terraform\",\n    credentials: {\n        serviceprincipalid: \"00000000-0000-0000-0000-000000000000\",\n        serviceprincipalkey: \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    },\n    azurermSpnTenantid: \"00000000-0000-0000-0000-000000000000\",\n    azurermSubscriptionId: \"00000000-0000-0000-0000-000000000000\",\n    azurermSubscriptionName: \"Sample Subscription\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nendpointazure = azuredevops.ServiceEndpointAzureRM(\"endpointazure\",\n    project_id=project.id,\n    service_endpoint_name=\"Sample AzureRM\",\n    description=\"Managed by Terraform\",\n    credentials=azuredevops.ServiceEndpointAzureRMCredentialsArgs(\n        serviceprincipalid=\"00000000-0000-0000-0000-000000000000\",\n        serviceprincipalkey=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    ),\n    azurerm_spn_tenantid=\"00000000-0000-0000-0000-000000000000\",\n    azurerm_subscription_id=\"00000000-0000-0000-0000-000000000000\",\n    azurerm_subscription_name=\"Sample Subscription\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var endpointazure = new AzureDevOps.ServiceEndpointAzureRM(\"endpointazure\", new AzureDevOps.ServiceEndpointAzureRMArgs\n        {\n            ProjectId = project.Id,\n            ServiceEndpointName = \"Sample AzureRM\",\n            Description = \"Managed by Terraform\",\n            Credentials = new AzureDevOps.Inputs.ServiceEndpointAzureRMCredentialsArgs\n            {\n                Serviceprincipalid = \"00000000-0000-0000-0000-000000000000\",\n                Serviceprincipalkey = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n            },\n            AzurermSpnTenantid = \"00000000-0000-0000-0000-000000000000\",\n            AzurermSubscriptionId = \"00000000-0000-0000-0000-000000000000\",\n            AzurermSubscriptionName = \"Sample Subscription\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointAzureRM(ctx, \"endpointazure\", \u0026azuredevops.ServiceEndpointAzureRMArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample AzureRM\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t\tCredentials: \u0026ServiceEndpointAzureRMCredentialsArgs{\n\t\t\t\tServiceprincipalid:  pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\t\tServiceprincipalkey: pulumi.String(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"),\n\t\t\t},\n\t\t\tAzurermSpnTenantid:      pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurermSubscriptionId:   pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurermSubscriptionName: pulumi.String(\"Sample Subscription\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% example %}}\n### Automatic AzureRM Service Endpoint\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst endpointazure = new azuredevops.ServiceEndpointAzureRM(\"endpointazure\", {\n    projectId: project.id,\n    serviceEndpointName: \"Sample AzureRM\",\n    description: \"Managed by Terraform\",\n    azurermSpnTenantid: \"00000000-0000-0000-0000-000000000000\",\n    azurermSubscriptionId: \"00000000-0000-0000-0000-000000000000\",\n    azurermSubscriptionName: \"Microsoft Azure DEMO\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nendpointazure = azuredevops.ServiceEndpointAzureRM(\"endpointazure\",\n    project_id=project.id,\n    service_endpoint_name=\"Sample AzureRM\",\n    description=\"Managed by Terraform\",\n    azurerm_spn_tenantid=\"00000000-0000-0000-0000-000000000000\",\n    azurerm_subscription_id=\"00000000-0000-0000-0000-000000000000\",\n    azurerm_subscription_name=\"Microsoft Azure DEMO\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var endpointazure = new AzureDevOps.ServiceEndpointAzureRM(\"endpointazure\", new AzureDevOps.ServiceEndpointAzureRMArgs\n        {\n            ProjectId = project.Id,\n            ServiceEndpointName = \"Sample AzureRM\",\n            Description = \"Managed by Terraform\",\n            AzurermSpnTenantid = \"00000000-0000-0000-0000-000000000000\",\n            AzurermSubscriptionId = \"00000000-0000-0000-0000-000000000000\",\n            AzurermSubscriptionName = \"Microsoft Azure DEMO\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointAzureRM(ctx, \"endpointazure\", \u0026azuredevops.ServiceEndpointAzureRMArgs{\n\t\t\tProjectId:               project.ID(),\n\t\t\tServiceEndpointName:     pulumi.String(\"Sample AzureRM\"),\n\t\t\tDescription:             pulumi.String(\"Managed by Terraform\"),\n\t\t\tAzurermSpnTenantid:      pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurermSubscriptionId:   pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurermSubscriptionName: pulumi.String(\"Microsoft Azure DEMO\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Service End points](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps Service Endpoint Azure Resource Manage can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:ServiceEndpoint/azureRM:AzureRM serviceendpoint 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "azurermSpnTenantid": {
                    "type": "string",
                    "description": "The tenant id if the service principal.\n"
                },
                "azurermSubscriptionId": {
                    "type": "string",
                    "description": "The subscription Id of the Azure targets.\n"
                },
                "azurermSubscriptionName": {
                    "type": "string",
                    "description": "The subscription Name of the targets.\n"
                },
                "credentials": {
                    "$ref": "#/types/azuredevops:ServiceEndpoint/AzureRMCredentials:AzureRMCredentials",
                    "description": "A `credentials` block.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Service connection description.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "resourceGroup": {
                    "type": "string",
                    "description": "The resource group used for scope of automatic service endpoint.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "required": [
                "authorization",
                "azurermSpnTenantid",
                "azurermSubscriptionId",
                "azurermSubscriptionName",
                "projectId",
                "serviceEndpointName"
            ],
            "inputProperties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "azurermSpnTenantid": {
                    "type": "string",
                    "description": "The tenant id if the service principal.\n"
                },
                "azurermSubscriptionId": {
                    "type": "string",
                    "description": "The subscription Id of the Azure targets.\n"
                },
                "azurermSubscriptionName": {
                    "type": "string",
                    "description": "The subscription Name of the targets.\n"
                },
                "credentials": {
                    "$ref": "#/types/azuredevops:ServiceEndpoint/AzureRMCredentials:AzureRMCredentials",
                    "description": "A `credentials` block.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Service connection description.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "resourceGroup": {
                    "type": "string",
                    "description": "The resource group used for scope of automatic service endpoint.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "requiredInputs": [
                "azurermSpnTenantid",
                "azurermSubscriptionId",
                "azurermSubscriptionName",
                "projectId",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureRM resources.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "azurermSpnTenantid": {
                        "type": "string",
                        "description": "The tenant id if the service principal.\n"
                    },
                    "azurermSubscriptionId": {
                        "type": "string",
                        "description": "The subscription Id of the Azure targets.\n"
                    },
                    "azurermSubscriptionName": {
                        "type": "string",
                        "description": "The subscription Name of the targets.\n"
                    },
                    "credentials": {
                        "$ref": "#/types/azuredevops:ServiceEndpoint/AzureRMCredentials:AzureRMCredentials",
                        "description": "A `credentials` block.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Service connection description.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "resourceGroup": {
                        "type": "string",
                        "description": "The resource group used for scope of automatic service endpoint.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.serviceendpoint.AzureRM has been deprecated in favor of azuredevops.ServiceEndpointAzureRM"
        },
        "azuredevops:ServiceEndpoint/bitBucket:BitBucket": {
            "description": "Manages a Bitbucket service endpoint within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst serviceendpoint = new azuredevops.ServiceEndpointBitBucket(\"serviceendpoint\", {\n    projectId: project.id,\n    username: \"username\",\n    password: \"password\",\n    serviceEndpointName: \"Sample Bitbucket\",\n    description: \"Managed by Terraform\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nserviceendpoint = azuredevops.ServiceEndpointBitBucket(\"serviceendpoint\",\n    project_id=project.id,\n    username=\"username\",\n    password=\"password\",\n    service_endpoint_name=\"Sample Bitbucket\",\n    description=\"Managed by Terraform\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var serviceendpoint = new AzureDevOps.ServiceEndpointBitBucket(\"serviceendpoint\", new AzureDevOps.ServiceEndpointBitBucketArgs\n        {\n            ProjectId = project.Id,\n            Username = \"username\",\n            Password = \"password\",\n            ServiceEndpointName = \"Sample Bitbucket\",\n            Description = \"Managed by Terraform\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointBitBucket(ctx, \"serviceendpoint\", \u0026azuredevops.ServiceEndpointBitBucketArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tUsername:            pulumi.String(\"username\"),\n\t\t\tPassword:            pulumi.String(\"password\"),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample Bitbucket\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Agent Pools](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps Service Endpoint Bitbucket can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:ServiceEndpoint/bitBucket:BitBucket serviceendpoint 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "description": "Bitbucket account password.\n"
                },
                "passwordHash": {
                    "type": "string",
                    "description": "A bcrypted hash of the attribute 'password'\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Bitbucket account username.\n"
                }
            },
            "required": [
                "authorization",
                "password",
                "passwordHash",
                "projectId",
                "serviceEndpointName",
                "username"
            ],
            "inputProperties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "description": "Bitbucket account password.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Bitbucket account username.\n"
                }
            },
            "requiredInputs": [
                "password",
                "projectId",
                "serviceEndpointName",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BitBucket resources.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string",
                        "description": "Bitbucket account password.\n"
                    },
                    "passwordHash": {
                        "type": "string",
                        "description": "A bcrypted hash of the attribute 'password'\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Bitbucket account username.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.serviceendpoint.BitBucket has been deprecated in favor of azuredevops.ServiceEndpointBitBucket"
        },
        "azuredevops:ServiceEndpoint/dockerRegistry:DockerRegistry": {
            "description": "Manages a Docker Registry service endpoint within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\n// dockerhub registry service connection\nconst dockerhubregistry = new azuredevops.ServiceEndpointDockerRegistry(\"dockerhubregistry\", {\n    projectId: project.id,\n    serviceEndpointName: \"Sample Docker Hub\",\n    dockerUsername: \"sample\",\n    dockerEmail: \"email@example.com\",\n    dockerPassword: \"12345\",\n    registryType: \"DockerHub\",\n});\n// other docker registry service connection\nconst otherregistry = new azuredevops.ServiceEndpointDockerRegistry(\"otherregistry\", {\n    projectId: project.id,\n    serviceEndpointName: \"Sample Docker Registry\",\n    dockerRegistry: \"https://sample.azurecr.io/v1\",\n    dockerUsername: \"sample\",\n    dockerPassword: \"12345\",\n    registryType: \"Others\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\n# dockerhub registry service connection\ndockerhubregistry = azuredevops.ServiceEndpointDockerRegistry(\"dockerhubregistry\",\n    project_id=project.id,\n    service_endpoint_name=\"Sample Docker Hub\",\n    docker_username=\"sample\",\n    docker_email=\"email@example.com\",\n    docker_password=\"12345\",\n    registry_type=\"DockerHub\")\n# other docker registry service connection\notherregistry = azuredevops.ServiceEndpointDockerRegistry(\"otherregistry\",\n    project_id=project.id,\n    service_endpoint_name=\"Sample Docker Registry\",\n    docker_registry=\"https://sample.azurecr.io/v1\",\n    docker_username=\"sample\",\n    docker_password=\"12345\",\n    registry_type=\"Others\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        // dockerhub registry service connection\n        var dockerhubregistry = new AzureDevOps.ServiceEndpointDockerRegistry(\"dockerhubregistry\", new AzureDevOps.ServiceEndpointDockerRegistryArgs\n        {\n            ProjectId = project.Id,\n            ServiceEndpointName = \"Sample Docker Hub\",\n            DockerUsername = \"sample\",\n            DockerEmail = \"email@example.com\",\n            DockerPassword = \"12345\",\n            RegistryType = \"DockerHub\",\n        });\n        // other docker registry service connection\n        var otherregistry = new AzureDevOps.ServiceEndpointDockerRegistry(\"otherregistry\", new AzureDevOps.ServiceEndpointDockerRegistryArgs\n        {\n            ProjectId = project.Id,\n            ServiceEndpointName = \"Sample Docker Registry\",\n            DockerRegistry = \"https://sample.azurecr.io/v1\",\n            DockerUsername = \"sample\",\n            DockerPassword = \"12345\",\n            RegistryType = \"Others\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointDockerRegistry(ctx, \"dockerhubregistry\", \u0026azuredevops.ServiceEndpointDockerRegistryArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample Docker Hub\"),\n\t\t\tDockerUsername:      pulumi.String(\"sample\"),\n\t\t\tDockerEmail:         pulumi.String(\"email@example.com\"),\n\t\t\tDockerPassword:      pulumi.String(\"12345\"),\n\t\t\tRegistryType:        pulumi.String(\"DockerHub\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointDockerRegistry(ctx, \"otherregistry\", \u0026azuredevops.ServiceEndpointDockerRegistryArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample Docker Registry\"),\n\t\t\tDockerRegistry:      pulumi.String(\"https://sample.azurecr.io/v1\"),\n\t\t\tDockerUsername:      pulumi.String(\"sample\"),\n\t\t\tDockerPassword:      pulumi.String(\"12345\"),\n\t\t\tRegistryType:        pulumi.String(\"Others\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Service Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-5.1)\n- [Docker Registry Service Connection](https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops\u0026tabs=yaml#sep-docreg)\n\n\n## Import\n\nAzure DevOps Service Endpoint Docker Registry can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:ServiceEndpoint/dockerRegistry:DockerRegistry serviceendpoint 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "dockerEmail": {
                    "type": "string",
                    "description": "The email for Docker account user.\n"
                },
                "dockerPassword": {
                    "type": "string",
                    "description": "The password for the account user identified above.\n"
                },
                "dockerPasswordHash": {
                    "type": "string",
                    "description": "A bcrypted hash of the attribute 'docker_password'\n"
                },
                "dockerRegistry": {
                    "type": "string",
                    "description": "The URL of the Docker registry. (Default: \"https://index.docker.io/v1/\")\n",
                    "language": {
                        "csharp": {
                            "name": "DockerRegistryUrl"
                        }
                    }
                },
                "dockerUsername": {
                    "type": "string",
                    "description": "The identifier of the Docker account user.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "registryType": {
                    "type": "string",
                    "description": "Can be \"DockerHub\" or \"Others\" (Default \"DockerHub\")\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The name you will use to refer to this service connection in task inputs.\n"
                }
            },
            "required": [
                "authorization",
                "dockerPasswordHash",
                "dockerRegistry",
                "projectId",
                "registryType",
                "serviceEndpointName"
            ],
            "inputProperties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "dockerEmail": {
                    "type": "string",
                    "description": "The email for Docker account user.\n"
                },
                "dockerPassword": {
                    "type": "string",
                    "description": "The password for the account user identified above.\n"
                },
                "dockerRegistry": {
                    "type": "string",
                    "description": "The URL of the Docker registry. (Default: \"https://index.docker.io/v1/\")\n",
                    "language": {
                        "csharp": {
                            "name": "DockerRegistryUrl"
                        }
                    }
                },
                "dockerUsername": {
                    "type": "string",
                    "description": "The identifier of the Docker account user.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "registryType": {
                    "type": "string",
                    "description": "Can be \"DockerHub\" or \"Others\" (Default \"DockerHub\")\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The name you will use to refer to this service connection in task inputs.\n"
                }
            },
            "requiredInputs": [
                "dockerRegistry",
                "projectId",
                "registryType",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DockerRegistry resources.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "dockerEmail": {
                        "type": "string",
                        "description": "The email for Docker account user.\n"
                    },
                    "dockerPassword": {
                        "type": "string",
                        "description": "The password for the account user identified above.\n"
                    },
                    "dockerPasswordHash": {
                        "type": "string",
                        "description": "A bcrypted hash of the attribute 'docker_password'\n"
                    },
                    "dockerRegistry": {
                        "type": "string",
                        "description": "The URL of the Docker registry. (Default: \"https://index.docker.io/v1/\")\n",
                        "language": {
                            "csharp": {
                                "name": "DockerRegistryUrl"
                            }
                        }
                    },
                    "dockerUsername": {
                        "type": "string",
                        "description": "The identifier of the Docker account user.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "registryType": {
                        "type": "string",
                        "description": "Can be \"DockerHub\" or \"Others\" (Default \"DockerHub\")\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The name you will use to refer to this service connection in task inputs.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.serviceendpoint.DockerRegistry has been deprecated in favor of azuredevops.ServiceEndpointDockerRegistry"
        },
        "azuredevops:ServiceEndpoint/gitHub:GitHub": {
            "description": "Manages a GitHub service endpoint within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst serviceendpointGh1 = new azuredevops.ServiceEndpointGitHub(\"serviceendpointGh1\", {\n    projectId: project.id,\n    serviceEndpointName: \"Sample GithHub Personal Access Token\",\n    authPersonal: {\n        personalAccessToken: \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nserviceendpoint_gh1 = azuredevops.ServiceEndpointGitHub(\"serviceendpointGh1\",\n    project_id=project.id,\n    service_endpoint_name=\"Sample GithHub Personal Access Token\",\n    auth_personal=azuredevops.ServiceEndpointGitHubAuthPersonalArgs(\n        personal_access_token=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    ))\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var serviceendpointGh1 = new AzureDevOps.ServiceEndpointGitHub(\"serviceendpointGh1\", new AzureDevOps.ServiceEndpointGitHubArgs\n        {\n            ProjectId = project.Id,\n            ServiceEndpointName = \"Sample GithHub Personal Access Token\",\n            AuthPersonal = new AzureDevOps.Inputs.ServiceEndpointGitHubAuthPersonalArgs\n            {\n                PersonalAccessToken = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointGitHub(ctx, \"serviceendpointGh1\", \u0026azuredevops.ServiceEndpointGitHubArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample GithHub Personal Access Token\"),\n\t\t\tAuthPersonal: \u0026ServiceEndpointGitHubAuthPersonalArgs{\n\t\t\t\tPersonalAccessToken: pulumi.String(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst serviceendpointGh2 = new azuredevops.ServiceEndpointGitHub(\"serviceendpointGh2\", {\n    projectId: azuredevops_project.project.id,\n    serviceEndpointName: \"Sample GithHub Grant\",\n    authOauth: {\n        oauthConfigurationId: \"00000000-0000-0000-0000-000000000000\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nserviceendpoint_gh2 = azuredevops.ServiceEndpointGitHub(\"serviceendpointGh2\",\n    project_id=azuredevops_project[\"project\"][\"id\"],\n    service_endpoint_name=\"Sample GithHub Grant\",\n    auth_oauth=azuredevops.ServiceEndpointGitHubAuthOauthArgs(\n        oauth_configuration_id=\"00000000-0000-0000-0000-000000000000\",\n    ))\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var serviceendpointGh2 = new AzureDevOps.ServiceEndpointGitHub(\"serviceendpointGh2\", new AzureDevOps.ServiceEndpointGitHubArgs\n        {\n            ProjectId = azuredevops_project.Project.Id,\n            ServiceEndpointName = \"Sample GithHub Grant\",\n            AuthOauth = new AzureDevOps.Inputs.ServiceEndpointGitHubAuthOauthArgs\n            {\n                OauthConfigurationId = \"00000000-0000-0000-0000-000000000000\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewServiceEndpointGitHub(ctx, \"serviceendpointGh2\", \u0026azuredevops.ServiceEndpointGitHubArgs{\n\t\t\tProjectId:           pulumi.Any(azuredevops_project.Project.Id),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample GithHub Grant\"),\n\t\t\tAuthOauth: \u0026ServiceEndpointGitHubAuthOauthArgs{\n\t\t\t\tOauthConfigurationId: pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst serviceendpointGh3 = new azuredevops.ServiceEndpointGitHub(\"serviceendpointGh3\", {\n    projectId: azuredevops_project.project.id,\n    serviceEndpointName: \"Sample GithHub Apps: Azure Pipelines\",\n    description: \"Managed by Terraform\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nserviceendpoint_gh3 = azuredevops.ServiceEndpointGitHub(\"serviceendpointGh3\",\n    project_id=azuredevops_project[\"project\"][\"id\"],\n    service_endpoint_name=\"Sample GithHub Apps: Azure Pipelines\",\n    description=\"Managed by Terraform\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var serviceendpointGh3 = new AzureDevOps.ServiceEndpointGitHub(\"serviceendpointGh3\", new AzureDevOps.ServiceEndpointGitHubArgs\n        {\n            ProjectId = azuredevops_project.Project.Id,\n            ServiceEndpointName = \"Sample GithHub Apps: Azure Pipelines\",\n            Description = \"Managed by Terraform\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewServiceEndpointGitHub(ctx, \"serviceendpointGh3\", \u0026azuredevops.ServiceEndpointGitHubArgs{\n\t\t\tProjectId:           pulumi.Any(azuredevops_project.Project.Id),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample GithHub Apps: Azure Pipelines\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Service Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps Service Endpoint GitHub can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:ServiceEndpoint/gitHub:GitHub serviceendpoint 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authOauth": {
                    "$ref": "#/types/azuredevops:ServiceEndpoint/GitHubAuthOauth:GitHubAuthOauth",
                    "description": "An `auth_oauth` block as documented below. Allows connecting using an Oauth token.\n"
                },
                "authPersonal": {
                    "$ref": "#/types/azuredevops:ServiceEndpoint/GitHubAuthPersonal:GitHubAuthPersonal",
                    "description": "An `auth_personal` block as documented below. Allows connecting using a personal access token.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "required": [
                "authorization",
                "projectId",
                "serviceEndpointName"
            ],
            "inputProperties": {
                "authOauth": {
                    "$ref": "#/types/azuredevops:ServiceEndpoint/GitHubAuthOauth:GitHubAuthOauth",
                    "description": "An `auth_oauth` block as documented below. Allows connecting using an Oauth token.\n"
                },
                "authPersonal": {
                    "$ref": "#/types/azuredevops:ServiceEndpoint/GitHubAuthPersonal:GitHubAuthPersonal",
                    "description": "An `auth_personal` block as documented below. Allows connecting using a personal access token.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GitHub resources.\n",
                "properties": {
                    "authOauth": {
                        "$ref": "#/types/azuredevops:ServiceEndpoint/GitHubAuthOauth:GitHubAuthOauth",
                        "description": "An `auth_oauth` block as documented below. Allows connecting using an Oauth token.\n"
                    },
                    "authPersonal": {
                        "$ref": "#/types/azuredevops:ServiceEndpoint/GitHubAuthPersonal:GitHubAuthPersonal",
                        "description": "An `auth_personal` block as documented below. Allows connecting using a personal access token.\n"
                    },
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.serviceendpoint.GitHub has been deprecated in favor of azuredevops.ServiceEndpointGitHub"
        },
        "azuredevops:ServiceEndpoint/kubernetes:Kubernetes": {
            "description": "Manages a Kubernetes service endpoint within Azure DevOps.\n\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps Service Endpoint Kubernetes can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:ServiceEndpoint/kubernetes:Kubernetes serviceendpoint 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "apiserverUrl": {
                    "type": "string",
                    "description": "The hostname (in form of URI) of the Kubernetes API.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "authorizationType": {
                    "type": "string",
                    "description": "The authentication method used to authenticate on the Kubernetes cluster. The value should be one of AzureSubscription, Kubeconfig, ServiceAccount.\n"
                },
                "azureSubscriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:ServiceEndpoint/KubernetesAzureSubscription:KubernetesAzureSubscription"
                    },
                    "description": "The configuration for authorization_type=\"AzureSubscription\".\n"
                },
                "description": {
                    "type": "string"
                },
                "kubeconfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:ServiceEndpoint/KubernetesKubeconfig:KubernetesKubeconfig"
                    },
                    "description": "The configuration for authorization_type=\"Kubeconfig\".\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceAccounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:ServiceEndpoint/KubernetesServiceAccount:KubernetesServiceAccount"
                    },
                    "description": "The configuration for authorization_type=\"ServiceAccount\". This type uses the credentials of a service account currently deployed to the cluster.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "required": [
                "apiserverUrl",
                "authorization",
                "authorizationType",
                "projectId",
                "serviceEndpointName"
            ],
            "inputProperties": {
                "apiserverUrl": {
                    "type": "string",
                    "description": "The hostname (in form of URI) of the Kubernetes API.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "authorizationType": {
                    "type": "string",
                    "description": "The authentication method used to authenticate on the Kubernetes cluster. The value should be one of AzureSubscription, Kubeconfig, ServiceAccount.\n"
                },
                "azureSubscriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:ServiceEndpoint/KubernetesAzureSubscription:KubernetesAzureSubscription"
                    },
                    "description": "The configuration for authorization_type=\"AzureSubscription\".\n"
                },
                "description": {
                    "type": "string"
                },
                "kubeconfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:ServiceEndpoint/KubernetesKubeconfig:KubernetesKubeconfig"
                    },
                    "description": "The configuration for authorization_type=\"Kubeconfig\".\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceAccounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:ServiceEndpoint/KubernetesServiceAccount:KubernetesServiceAccount"
                    },
                    "description": "The configuration for authorization_type=\"ServiceAccount\". This type uses the credentials of a service account currently deployed to the cluster.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "requiredInputs": [
                "apiserverUrl",
                "authorizationType",
                "projectId",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Kubernetes resources.\n",
                "properties": {
                    "apiserverUrl": {
                        "type": "string",
                        "description": "The hostname (in form of URI) of the Kubernetes API.\n"
                    },
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "authorizationType": {
                        "type": "string",
                        "description": "The authentication method used to authenticate on the Kubernetes cluster. The value should be one of AzureSubscription, Kubeconfig, ServiceAccount.\n"
                    },
                    "azureSubscriptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:ServiceEndpoint/KubernetesAzureSubscription:KubernetesAzureSubscription"
                        },
                        "description": "The configuration for authorization_type=\"AzureSubscription\".\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "kubeconfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:ServiceEndpoint/KubernetesKubeconfig:KubernetesKubeconfig"
                        },
                        "description": "The configuration for authorization_type=\"Kubeconfig\".\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "serviceAccounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:ServiceEndpoint/KubernetesServiceAccount:KubernetesServiceAccount"
                        },
                        "description": "The configuration for authorization_type=\"ServiceAccount\". This type uses the credentials of a service account currently deployed to the cluster.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "azuredevops.serviceendpoint.Kubernetes has been deprecated in favor of azuredevops.ServiceEndpointKubernetes"
        },
        "azuredevops:index/areaPermissions:AreaPermissions": {
            "description": "Manages permissions for an Area (Component)\n\n\u003e **Note** Permissions can be assigned to group principals and not to single user principals.\n\n## Permission levels\n\nPermission for Areas within Azure DevOps can be applied on two different levels.\nThose levels are reflected by specifying (or omitting) values for the arguments `project_id` and `path`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"Managed by Terraform\",\n});\nconst project-readers = azuredevops.getGroupOutput({\n    projectId: project.id,\n    name: \"Readers\",\n});\nconst root_permissions = new azuredevops.AreaPermissions(\"root-permissions\", {\n    projectId: project.id,\n    principal: project_readers.apply(project_readers =\u003e project_readers.id),\n    path: \"/\",\n    permissions: {\n        CREATE_CHILDREN: \"Deny\",\n        GENERIC_READ: \"Allow\",\n        DELETE: \"Deny\",\n        WORK_ITEM_READ: \"Allow\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"Managed by Terraform\")\nproject_readers = azuredevops.get_group_output(project_id=project.id,\n    name=\"Readers\")\nroot_permissions = azuredevops.AreaPermissions(\"root-permissions\",\n    project_id=project.id,\n    principal=project_readers.id,\n    path=\"/\",\n    permissions={\n        \"CREATE_CHILDREN\": \"Deny\",\n        \"GENERIC_READ\": \"Allow\",\n        \"DELETE\": \"Deny\",\n        \"WORK_ITEM_READ\": \"Allow\",\n    })\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            WorkItemTemplate = \"Agile\",\n            VersionControl = \"Git\",\n            Visibility = \"private\",\n            Description = \"Managed by Terraform\",\n        });\n        var project_readers = AzureDevOps.GetGroup.Invoke(new AzureDevOps.GetGroupInvokeArgs\n        {\n            ProjectId = project.Id,\n            Name = \"Readers\",\n        });\n        var root_permissions = new AzureDevOps.AreaPermissions(\"root-permissions\", new AzureDevOps.AreaPermissionsArgs\n        {\n            ProjectId = project.Id,\n            Principal = project_readers.Apply(project_readers =\u003e project_readers.Id),\n            Path = \"/\",\n            Permissions = \n            {\n                { \"CREATE_CHILDREN\", \"Deny\" },\n                { \"GENERIC_READ\", \"Allow\" },\n                { \"DELETE\", \"Deny\" },\n                { \"WORK_ITEM_READ\", \"Allow\" },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tproject_readers := azuredevops.LookupGroupOutput(ctx, GetGroupOutputArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tName:      pulumi.String(\"Readers\"),\n\t\t}, nil)\n\t\t_, err = azuredevops.NewAreaPermissions(ctx, \"root-permissions\", \u0026azuredevops.AreaPermissionsArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tPrincipal: project_readers.ApplyT(func(project_readers GetGroupResult) (string, error) {\n\t\t\t\treturn project_readers.Id, nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tPath: pulumi.String(\"/\"),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"CREATE_CHILDREN\": pulumi.String(\"Deny\"),\n\t\t\t\t\"GENERIC_READ\":    pulumi.String(\"Allow\"),\n\t\t\t\t\"DELETE\":          pulumi.String(\"Deny\"),\n\t\t\t\t\"WORK_ITEM_READ\":  pulumi.String(\"Allow\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Security](https://docs.microsoft.com/en-us/rest/api/azure/devops/security/?view=azure-devops-rest-5.1)\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: vso.security_manage - Grants the ability to read, write, and manage security permissions.\n\n\n## Import\n\nThe resource does not support import. ",
            "properties": {
                "path": {
                    "type": "string",
                    "description": "The name of the branch to assign the permissions.\n"
                },
                "permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "the permissions to assign. The following permissions are available.\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The **group** principal to assign the permissions.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project to assign the permissions.\n"
                },
                "replace": {
                    "type": "boolean",
                    "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`.\n"
                }
            },
            "required": [
                "permissions",
                "principal",
                "projectId"
            ],
            "inputProperties": {
                "path": {
                    "type": "string",
                    "description": "The name of the branch to assign the permissions.\n"
                },
                "permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "the permissions to assign. The following permissions are available.\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The **group** principal to assign the permissions.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project to assign the permissions.\n"
                },
                "replace": {
                    "type": "boolean",
                    "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`.\n"
                }
            },
            "requiredInputs": [
                "permissions",
                "principal",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AreaPermissions resources.\n",
                "properties": {
                    "path": {
                        "type": "string",
                        "description": "The name of the branch to assign the permissions.\n"
                    },
                    "permissions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "the permissions to assign. The following permissions are available.\n"
                    },
                    "principal": {
                        "type": "string",
                        "description": "The **group** principal to assign the permissions.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project to assign the permissions.\n"
                    },
                    "replace": {
                        "type": "boolean",
                        "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/branchPolicyAutoReviewers:BranchPolicyAutoReviewers": {
            "description": "Manages required reviewer policy branch policy within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {});\nconst git = new azuredevops.Git(\"git\", {\n    projectId: project.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst user = new azuredevops.User(\"user\", {\n    principalName: \"mail@email.com\",\n    accountLicenseType: \"basic\",\n});\nconst branchPolicyAutoReviewers = new azuredevops.BranchPolicyAutoReviewers(\"branchPolicyAutoReviewers\", {\n    projectId: project.id,\n    enabled: true,\n    blocking: true,\n    settings: {\n        autoReviewerIds: [user.id],\n        submitterCanVote: false,\n        message: \"Auto reviewer\",\n        pathFilters: [\"*/src/*.ts\"],\n        scopes: [{\n            repositoryId: git.id,\n            repositoryRef: git.defaultBranch,\n            matchType: \"Exact\",\n        }],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\")\ngit = azuredevops.Git(\"git\",\n    project_id=project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nuser = azuredevops.User(\"user\",\n    principal_name=\"mail@email.com\",\n    account_license_type=\"basic\")\nbranch_policy_auto_reviewers = azuredevops.BranchPolicyAutoReviewers(\"branchPolicyAutoReviewers\",\n    project_id=project.id,\n    enabled=True,\n    blocking=True,\n    settings=azuredevops.BranchPolicyAutoReviewersSettingsArgs(\n        auto_reviewer_ids=[user.id],\n        submitter_can_vote=False,\n        message=\"Auto reviewer\",\n        path_filters=[\"*/src/*.ts\"],\n        scopes=[azuredevops.BranchPolicyAutoReviewersSettingsScopeArgs(\n            repository_id=git.id,\n            repository_ref=git.default_branch,\n            match_type=\"Exact\",\n        )],\n    ))\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n        });\n        var git = new AzureDevOps.Git(\"git\", new AzureDevOps.GitArgs\n        {\n            ProjectId = project.Id,\n            Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n            {\n                InitType = \"Clean\",\n            },\n        });\n        var user = new AzureDevOps.User(\"user\", new AzureDevOps.UserArgs\n        {\n            PrincipalName = \"mail@email.com\",\n            AccountLicenseType = \"basic\",\n        });\n        var branchPolicyAutoReviewers = new AzureDevOps.BranchPolicyAutoReviewers(\"branchPolicyAutoReviewers\", new AzureDevOps.BranchPolicyAutoReviewersArgs\n        {\n            ProjectId = project.Id,\n            Enabled = true,\n            Blocking = true,\n            Settings = new AzureDevOps.Inputs.BranchPolicyAutoReviewersSettingsArgs\n            {\n                AutoReviewerIds = \n                {\n                    user.Id,\n                },\n                SubmitterCanVote = false,\n                Message = \"Auto reviewer\",\n                PathFilters = \n                {\n                    \"*/src/*.ts\",\n                },\n                Scopes = \n                {\n                    new AzureDevOps.Inputs.BranchPolicyAutoReviewersSettingsScopeArgs\n                    {\n                        RepositoryId = git.Id,\n                        RepositoryRef = git.DefaultBranch,\n                        MatchType = \"Exact\",\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgit, err := azuredevops.NewGit(ctx, \"git\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tInitialization: \u0026GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuser, err := azuredevops.NewUser(ctx, \"user\", \u0026azuredevops.UserArgs{\n\t\t\tPrincipalName:      pulumi.String(\"mail@email.com\"),\n\t\t\tAccountLicenseType: pulumi.String(\"basic\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewBranchPolicyAutoReviewers(ctx, \"branchPolicyAutoReviewers\", \u0026azuredevops.BranchPolicyAutoReviewersArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t\tSettings: \u0026BranchPolicyAutoReviewersSettingsArgs{\n\t\t\t\tAutoReviewerIds: pulumi.StringArray{\n\t\t\t\t\tuser.ID(),\n\t\t\t\t},\n\t\t\t\tSubmitterCanVote: pulumi.Bool(false),\n\t\t\t\tMessage:          pulumi.String(\"Auto reviewer\"),\n\t\t\t\tPathFilters: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"*/src/*.ts\"),\n\t\t\t\t},\n\t\t\t\tScopes: BranchPolicyAutoReviewersSettingsScopeArray{\n\t\t\t\t\t\u0026BranchPolicyAutoReviewersSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  git.ID(),\n\t\t\t\t\t\tRepositoryRef: git.DefaultBranch,\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Exact\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Policy Configurations](https://docs.microsoft.com/en-us/rest/api/azure/devops/policy/configurations/create?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps Branch Policies can be imported using the project ID and policy configuration ID\n\n```sh\n $ pulumi import azuredevops:index/branchPolicyAutoReviewers:BranchPolicyAutoReviewers p 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. This relates to the Azure DevOps terms \"optional\" and \"required\" reviewers. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "settings": {
                    "$ref": "#/types/azuredevops:index/BranchPolicyAutoReviewersSettings:BranchPolicyAutoReviewersSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "required": [
                "projectId",
                "settings"
            ],
            "inputProperties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. This relates to the Azure DevOps terms \"optional\" and \"required\" reviewers. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "settings": {
                    "$ref": "#/types/azuredevops:index/BranchPolicyAutoReviewersSettings:BranchPolicyAutoReviewersSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "settings"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BranchPolicyAutoReviewers resources.\n",
                "properties": {
                    "blocking": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be blocking. This relates to the Azure DevOps terms \"optional\" and \"required\" reviewers. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the policy will be created.\n"
                    },
                    "settings": {
                        "$ref": "#/types/azuredevops:index/BranchPolicyAutoReviewersSettings:BranchPolicyAutoReviewersSettings",
                        "description": "Configuration for the policy. This block must be defined exactly once.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/branchPolicyBuildValidation:BranchPolicyBuildValidation": {
            "description": "Manages a build validation branch policy within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {});\nconst git = new azuredevops.Git(\"git\", {\n    projectId: project.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst buildDefinition = new azuredevops.BuildDefinition(\"buildDefinition\", {\n    projectId: project.id,\n    repository: {\n        repoType: \"TfsGit\",\n        repoId: git.id,\n        ymlPath: \"azure-pipelines.yml\",\n    },\n});\nconst branchPolicyBuildValidation = new azuredevops.BranchPolicyBuildValidation(\"branchPolicyBuildValidation\", {\n    projectId: project.id,\n    enabled: true,\n    blocking: true,\n    settings: {\n        displayName: \"Don't break the build!\",\n        buildDefinitionId: buildDefinition.id,\n        validDuration: 720,\n        filenamePatterns: [\n            \"/WebApp/*\",\n            \"!/WebApp/Tests/*\",\n            \"*.cs\",\n        ],\n        scopes: [\n            {\n                repositoryId: git.id,\n                repositoryRef: git.defaultBranch,\n                matchType: \"Exact\",\n            },\n            {\n                repositoryId: git.id,\n                repositoryRef: \"refs/heads/releases\",\n                matchType: \"Prefix\",\n            },\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\")\ngit = azuredevops.Git(\"git\",\n    project_id=project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nbuild_definition = azuredevops.BuildDefinition(\"buildDefinition\",\n    project_id=project.id,\n    repository=azuredevops.BuildDefinitionRepositoryArgs(\n        repo_type=\"TfsGit\",\n        repo_id=git.id,\n        yml_path=\"azure-pipelines.yml\",\n    ))\nbranch_policy_build_validation = azuredevops.BranchPolicyBuildValidation(\"branchPolicyBuildValidation\",\n    project_id=project.id,\n    enabled=True,\n    blocking=True,\n    settings=azuredevops.BranchPolicyBuildValidationSettingsArgs(\n        display_name=\"Don't break the build!\",\n        build_definition_id=build_definition.id,\n        valid_duration=720,\n        filename_patterns=[\n            \"/WebApp/*\",\n            \"!/WebApp/Tests/*\",\n            \"*.cs\",\n        ],\n        scopes=[\n            azuredevops.BranchPolicyBuildValidationSettingsScopeArgs(\n                repository_id=git.id,\n                repository_ref=git.default_branch,\n                match_type=\"Exact\",\n            ),\n            azuredevops.BranchPolicyBuildValidationSettingsScopeArgs(\n                repository_id=git.id,\n                repository_ref=\"refs/heads/releases\",\n                match_type=\"Prefix\",\n            ),\n        ],\n    ))\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n        });\n        var git = new AzureDevOps.Git(\"git\", new AzureDevOps.GitArgs\n        {\n            ProjectId = project.Id,\n            Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n            {\n                InitType = \"Clean\",\n            },\n        });\n        var buildDefinition = new AzureDevOps.BuildDefinition(\"buildDefinition\", new AzureDevOps.BuildDefinitionArgs\n        {\n            ProjectId = project.Id,\n            Repository = new AzureDevOps.Inputs.BuildDefinitionRepositoryArgs\n            {\n                RepoType = \"TfsGit\",\n                RepoId = git.Id,\n                YmlPath = \"azure-pipelines.yml\",\n            },\n        });\n        var branchPolicyBuildValidation = new AzureDevOps.BranchPolicyBuildValidation(\"branchPolicyBuildValidation\", new AzureDevOps.BranchPolicyBuildValidationArgs\n        {\n            ProjectId = project.Id,\n            Enabled = true,\n            Blocking = true,\n            Settings = new AzureDevOps.Inputs.BranchPolicyBuildValidationSettingsArgs\n            {\n                DisplayName = \"Don't break the build!\",\n                BuildDefinitionId = buildDefinition.Id,\n                ValidDuration = 720,\n                FilenamePatterns = \n                {\n                    \"/WebApp/*\",\n                    \"!/WebApp/Tests/*\",\n                    \"*.cs\",\n                },\n                Scopes = \n                {\n                    new AzureDevOps.Inputs.BranchPolicyBuildValidationSettingsScopeArgs\n                    {\n                        RepositoryId = git.Id,\n                        RepositoryRef = git.DefaultBranch,\n                        MatchType = \"Exact\",\n                    },\n                    new AzureDevOps.Inputs.BranchPolicyBuildValidationSettingsScopeArgs\n                    {\n                        RepositoryId = git.Id,\n                        RepositoryRef = \"refs/heads/releases\",\n                        MatchType = \"Prefix\",\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgit, err := azuredevops.NewGit(ctx, \"git\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tInitialization: \u0026GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbuildDefinition, err := azuredevops.NewBuildDefinition(ctx, \"buildDefinition\", \u0026azuredevops.BuildDefinitionArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tRepository: \u0026BuildDefinitionRepositoryArgs{\n\t\t\t\tRepoType: pulumi.String(\"TfsGit\"),\n\t\t\t\tRepoId:   git.ID(),\n\t\t\t\tYmlPath:  pulumi.String(\"azure-pipelines.yml\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewBranchPolicyBuildValidation(ctx, \"branchPolicyBuildValidation\", \u0026azuredevops.BranchPolicyBuildValidationArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t\tSettings: \u0026BranchPolicyBuildValidationSettingsArgs{\n\t\t\t\tDisplayName:       pulumi.String(\"Don't break the build!\"),\n\t\t\t\tBuildDefinitionId: buildDefinition.ID(),\n\t\t\t\tValidDuration:     pulumi.Int(720),\n\t\t\t\tFilenamePatterns: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"/WebApp/*\"),\n\t\t\t\t\tpulumi.String(\"!/WebApp/Tests/*\"),\n\t\t\t\t\tpulumi.String(\"*.cs\"),\n\t\t\t\t},\n\t\t\t\tScopes: BranchPolicyBuildValidationSettingsScopeArray{\n\t\t\t\t\t\u0026BranchPolicyBuildValidationSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  git.ID(),\n\t\t\t\t\t\tRepositoryRef: git.DefaultBranch,\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Exact\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026BranchPolicyBuildValidationSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  git.ID(),\n\t\t\t\t\t\tRepositoryRef: pulumi.String(\"refs/heads/releases\"),\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Prefix\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Policy Configurations](https://docs.microsoft.com/en-us/rest/api/azure/devops/policy/configurations/create?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps Branch Policies can be imported using the project ID and policy configuration ID\n\n```sh\n $ pulumi import azuredevops:index/branchPolicyBuildValidation:BranchPolicyBuildValidation p 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "settings": {
                    "$ref": "#/types/azuredevops:index/BranchPolicyBuildValidationSettings:BranchPolicyBuildValidationSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "required": [
                "projectId",
                "settings"
            ],
            "inputProperties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "settings": {
                    "$ref": "#/types/azuredevops:index/BranchPolicyBuildValidationSettings:BranchPolicyBuildValidationSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "settings"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BranchPolicyBuildValidation resources.\n",
                "properties": {
                    "blocking": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the policy will be created.\n"
                    },
                    "settings": {
                        "$ref": "#/types/azuredevops:index/BranchPolicyBuildValidationSettings:BranchPolicyBuildValidationSettings",
                        "description": "Configuration for the policy. This block must be defined exactly once.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Policy/branchPolicyBuildValidation:BranchPolicyBuildValidation"
                }
            ]
        },
        "azuredevops:index/branchPolicyCommentResolution:BranchPolicyCommentResolution": {
            "description": "Configure a comment resolution policy for your branch within Azure DevOps project.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {});\nconst git = new azuredevops.Git(\"git\", {\n    projectId: project.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst branchPolicyCommentResolution = new azuredevops.BranchPolicyCommentResolution(\"branchPolicyCommentResolution\", {\n    projectId: project.id,\n    enabled: true,\n    blocking: true,\n    settings: {\n        scopes: [\n            {\n                repositoryId: git.id,\n                repositoryRef: git.defaultBranch,\n                matchType: \"Exact\",\n            },\n            {\n                repositoryId: git.id,\n                repositoryRef: \"refs/heads/releases\",\n                matchType: \"Prefix\",\n            },\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\")\ngit = azuredevops.Git(\"git\",\n    project_id=project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nbranch_policy_comment_resolution = azuredevops.BranchPolicyCommentResolution(\"branchPolicyCommentResolution\",\n    project_id=project.id,\n    enabled=True,\n    blocking=True,\n    settings=azuredevops.BranchPolicyCommentResolutionSettingsArgs(\n        scopes=[\n            azuredevops.BranchPolicyCommentResolutionSettingsScopeArgs(\n                repository_id=git.id,\n                repository_ref=git.default_branch,\n                match_type=\"Exact\",\n            ),\n            azuredevops.BranchPolicyCommentResolutionSettingsScopeArgs(\n                repository_id=git.id,\n                repository_ref=\"refs/heads/releases\",\n                match_type=\"Prefix\",\n            ),\n        ],\n    ))\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n        });\n        var git = new AzureDevOps.Git(\"git\", new AzureDevOps.GitArgs\n        {\n            ProjectId = project.Id,\n            Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n            {\n                InitType = \"Clean\",\n            },\n        });\n        var branchPolicyCommentResolution = new AzureDevOps.BranchPolicyCommentResolution(\"branchPolicyCommentResolution\", new AzureDevOps.BranchPolicyCommentResolutionArgs\n        {\n            ProjectId = project.Id,\n            Enabled = true,\n            Blocking = true,\n            Settings = new AzureDevOps.Inputs.BranchPolicyCommentResolutionSettingsArgs\n            {\n                Scopes = \n                {\n                    new AzureDevOps.Inputs.BranchPolicyCommentResolutionSettingsScopeArgs\n                    {\n                        RepositoryId = git.Id,\n                        RepositoryRef = git.DefaultBranch,\n                        MatchType = \"Exact\",\n                    },\n                    new AzureDevOps.Inputs.BranchPolicyCommentResolutionSettingsScopeArgs\n                    {\n                        RepositoryId = git.Id,\n                        RepositoryRef = \"refs/heads/releases\",\n                        MatchType = \"Prefix\",\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgit, err := azuredevops.NewGit(ctx, \"git\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tInitialization: \u0026GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewBranchPolicyCommentResolution(ctx, \"branchPolicyCommentResolution\", \u0026azuredevops.BranchPolicyCommentResolutionArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t\tSettings: \u0026BranchPolicyCommentResolutionSettingsArgs{\n\t\t\t\tScopes: BranchPolicyCommentResolutionSettingsScopeArray{\n\t\t\t\t\t\u0026BranchPolicyCommentResolutionSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  git.ID(),\n\t\t\t\t\t\tRepositoryRef: git.DefaultBranch,\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Exact\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026BranchPolicyCommentResolutionSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  git.ID(),\n\t\t\t\t\t\tRepositoryRef: pulumi.String(\"refs/heads/releases\"),\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Prefix\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Policy Configurations](https://docs.microsoft.com/en-us/rest/api/azure/devops/policy/configurations/create?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps Branch Policies can be imported using the project ID and policy configuration ID\n\n```sh\n $ pulumi import azuredevops:index/branchPolicyCommentResolution:BranchPolicyCommentResolution p 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "settings": {
                    "$ref": "#/types/azuredevops:index/BranchPolicyCommentResolutionSettings:BranchPolicyCommentResolutionSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "required": [
                "projectId",
                "settings"
            ],
            "inputProperties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "settings": {
                    "$ref": "#/types/azuredevops:index/BranchPolicyCommentResolutionSettings:BranchPolicyCommentResolutionSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "settings"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BranchPolicyCommentResolution resources.\n",
                "properties": {
                    "blocking": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the policy will be created.\n"
                    },
                    "settings": {
                        "$ref": "#/types/azuredevops:index/BranchPolicyCommentResolutionSettings:BranchPolicyCommentResolutionSettings",
                        "description": "Configuration for the policy. This block must be defined exactly once.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/branchPolicyMergeTypes:BranchPolicyMergeTypes": {
            "description": "Branch policy for merge types allowed on a specified branch.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {});\nconst git = new azuredevops.Git(\"git\", {\n    projectId: project.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst branchPolicyMergeTypes = new azuredevops.BranchPolicyMergeTypes(\"branchPolicyMergeTypes\", {\n    projectId: project.id,\n    enabled: true,\n    blocking: true,\n    settings: {\n        allowSquash: true,\n        allowRebaseAndFastForward: true,\n        allowBasicNoFastForward: true,\n        allowRebaseWithMerge: true,\n        scopes: [\n            {\n                repositoryId: git.id,\n                repositoryRef: git.defaultBranch,\n                matchType: \"Exact\",\n            },\n            {\n                repositoryId: undefined,\n                repositoryRef: \"refs/heads/releases\",\n                matchType: \"Prefix\",\n            },\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\")\ngit = azuredevops.Git(\"git\",\n    project_id=project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nbranch_policy_merge_types = azuredevops.BranchPolicyMergeTypes(\"branchPolicyMergeTypes\",\n    project_id=project.id,\n    enabled=True,\n    blocking=True,\n    settings=azuredevops.BranchPolicyMergeTypesSettingsArgs(\n        allow_squash=True,\n        allow_rebase_and_fast_forward=True,\n        allow_basic_no_fast_forward=True,\n        allow_rebase_with_merge=True,\n        scopes=[\n            azuredevops.BranchPolicyMergeTypesSettingsScopeArgs(\n                repository_id=git.id,\n                repository_ref=git.default_branch,\n                match_type=\"Exact\",\n            ),\n            azuredevops.BranchPolicyMergeTypesSettingsScopeArgs(\n                repository_id=None,\n                repository_ref=\"refs/heads/releases\",\n                match_type=\"Prefix\",\n            ),\n        ],\n    ))\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n        });\n        var git = new AzureDevOps.Git(\"git\", new AzureDevOps.GitArgs\n        {\n            ProjectId = project.Id,\n            Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n            {\n                InitType = \"Clean\",\n            },\n        });\n        var branchPolicyMergeTypes = new AzureDevOps.BranchPolicyMergeTypes(\"branchPolicyMergeTypes\", new AzureDevOps.BranchPolicyMergeTypesArgs\n        {\n            ProjectId = project.Id,\n            Enabled = true,\n            Blocking = true,\n            Settings = new AzureDevOps.Inputs.BranchPolicyMergeTypesSettingsArgs\n            {\n                AllowSquash = true,\n                AllowRebaseAndFastForward = true,\n                AllowBasicNoFastForward = true,\n                AllowRebaseWithMerge = true,\n                Scopes = \n                {\n                    new AzureDevOps.Inputs.BranchPolicyMergeTypesSettingsScopeArgs\n                    {\n                        RepositoryId = git.Id,\n                        RepositoryRef = git.DefaultBranch,\n                        MatchType = \"Exact\",\n                    },\n                    new AzureDevOps.Inputs.BranchPolicyMergeTypesSettingsScopeArgs\n                    {\n                        RepositoryId = null,\n                        RepositoryRef = \"refs/heads/releases\",\n                        MatchType = \"Prefix\",\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgit, err := azuredevops.NewGit(ctx, \"git\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tInitialization: \u0026GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewBranchPolicyMergeTypes(ctx, \"branchPolicyMergeTypes\", \u0026azuredevops.BranchPolicyMergeTypesArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t\tSettings: \u0026BranchPolicyMergeTypesSettingsArgs{\n\t\t\t\tAllowSquash:               pulumi.Bool(true),\n\t\t\t\tAllowRebaseAndFastForward: pulumi.Bool(true),\n\t\t\t\tAllowBasicNoFastForward:   pulumi.Bool(true),\n\t\t\t\tAllowRebaseWithMerge:      pulumi.Bool(true),\n\t\t\t\tScopes: BranchPolicyMergeTypesSettingsScopeArray{\n\t\t\t\t\t\u0026BranchPolicyMergeTypesSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  git.ID(),\n\t\t\t\t\t\tRepositoryRef: git.DefaultBranch,\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Exact\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026BranchPolicyMergeTypesSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  nil,\n\t\t\t\t\t\tRepositoryRef: pulumi.String(\"refs/heads/releases\"),\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Prefix\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Policy Configurations](https://docs.microsoft.com/en-us/rest/api/azure/devops/policy/configurations/create?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps Branch Policies can be imported using the project ID and policy configuration ID\n\n```sh\n $ pulumi import azuredevops:index/branchPolicyMergeTypes:BranchPolicyMergeTypes p 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "settings": {
                    "$ref": "#/types/azuredevops:index/BranchPolicyMergeTypesSettings:BranchPolicyMergeTypesSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "required": [
                "projectId",
                "settings"
            ],
            "inputProperties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "settings": {
                    "$ref": "#/types/azuredevops:index/BranchPolicyMergeTypesSettings:BranchPolicyMergeTypesSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "settings"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BranchPolicyMergeTypes resources.\n",
                "properties": {
                    "blocking": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the policy will be created.\n"
                    },
                    "settings": {
                        "$ref": "#/types/azuredevops:index/BranchPolicyMergeTypesSettings:BranchPolicyMergeTypesSettings",
                        "description": "Configuration for the policy. This block must be defined exactly once.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/branchPolicyMinReviewers:BranchPolicyMinReviewers": {
            "description": "Branch policy for reviewers on pull requests. Includes the minimum number of reviewers and other conditions.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {});\nconst git = new azuredevops.Git(\"git\", {\n    projectId: project.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst branchPolicyMinReviewers = new azuredevops.BranchPolicyMinReviewers(\"branchPolicyMinReviewers\", {\n    projectId: project.id,\n    enabled: true,\n    blocking: true,\n    settings: {\n        reviewerCount: 7,\n        submitterCanVote: false,\n        lastPusherCannotApprove: true,\n        allowCompletionWithRejectsOrWaits: false,\n        onPushResetApprovedVotes: true,\n        onLastIterationRequireVote: false,\n        scopes: [\n            {\n                repositoryId: git.id,\n                repositoryRef: git.defaultBranch,\n                matchType: \"Exact\",\n            },\n            {\n                repositoryId: undefined,\n                repositoryRef: \"refs/heads/releases\",\n                matchType: \"Prefix\",\n            },\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\")\ngit = azuredevops.Git(\"git\",\n    project_id=project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nbranch_policy_min_reviewers = azuredevops.BranchPolicyMinReviewers(\"branchPolicyMinReviewers\",\n    project_id=project.id,\n    enabled=True,\n    blocking=True,\n    settings=azuredevops.BranchPolicyMinReviewersSettingsArgs(\n        reviewer_count=7,\n        submitter_can_vote=False,\n        last_pusher_cannot_approve=True,\n        allow_completion_with_rejects_or_waits=False,\n        on_push_reset_approved_votes=True,\n        on_last_iteration_require_vote=False,\n        scopes=[\n            azuredevops.BranchPolicyMinReviewersSettingsScopeArgs(\n                repository_id=git.id,\n                repository_ref=git.default_branch,\n                match_type=\"Exact\",\n            ),\n            azuredevops.BranchPolicyMinReviewersSettingsScopeArgs(\n                repository_id=None,\n                repository_ref=\"refs/heads/releases\",\n                match_type=\"Prefix\",\n            ),\n        ],\n    ))\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n        });\n        var git = new AzureDevOps.Git(\"git\", new AzureDevOps.GitArgs\n        {\n            ProjectId = project.Id,\n            Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n            {\n                InitType = \"Clean\",\n            },\n        });\n        var branchPolicyMinReviewers = new AzureDevOps.BranchPolicyMinReviewers(\"branchPolicyMinReviewers\", new AzureDevOps.BranchPolicyMinReviewersArgs\n        {\n            ProjectId = project.Id,\n            Enabled = true,\n            Blocking = true,\n            Settings = new AzureDevOps.Inputs.BranchPolicyMinReviewersSettingsArgs\n            {\n                ReviewerCount = 7,\n                SubmitterCanVote = false,\n                LastPusherCannotApprove = true,\n                AllowCompletionWithRejectsOrWaits = false,\n                OnPushResetApprovedVotes = true,\n                OnLastIterationRequireVote = false,\n                Scopes = \n                {\n                    new AzureDevOps.Inputs.BranchPolicyMinReviewersSettingsScopeArgs\n                    {\n                        RepositoryId = git.Id,\n                        RepositoryRef = git.DefaultBranch,\n                        MatchType = \"Exact\",\n                    },\n                    new AzureDevOps.Inputs.BranchPolicyMinReviewersSettingsScopeArgs\n                    {\n                        RepositoryId = null,\n                        RepositoryRef = \"refs/heads/releases\",\n                        MatchType = \"Prefix\",\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgit, err := azuredevops.NewGit(ctx, \"git\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tInitialization: \u0026GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewBranchPolicyMinReviewers(ctx, \"branchPolicyMinReviewers\", \u0026azuredevops.BranchPolicyMinReviewersArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t\tSettings: \u0026BranchPolicyMinReviewersSettingsArgs{\n\t\t\t\tReviewerCount:                     pulumi.Int(7),\n\t\t\t\tSubmitterCanVote:                  pulumi.Bool(false),\n\t\t\t\tLastPusherCannotApprove:           pulumi.Bool(true),\n\t\t\t\tAllowCompletionWithRejectsOrWaits: pulumi.Bool(false),\n\t\t\t\tOnPushResetApprovedVotes:          pulumi.Bool(true),\n\t\t\t\tOnLastIterationRequireVote:        pulumi.Bool(false),\n\t\t\t\tScopes: BranchPolicyMinReviewersSettingsScopeArray{\n\t\t\t\t\t\u0026BranchPolicyMinReviewersSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  git.ID(),\n\t\t\t\t\t\tRepositoryRef: git.DefaultBranch,\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Exact\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026BranchPolicyMinReviewersSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  nil,\n\t\t\t\t\t\tRepositoryRef: pulumi.String(\"refs/heads/releases\"),\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Prefix\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Policy Configurations](https://docs.microsoft.com/en-us/rest/api/azure/devops/policy/configurations/create?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps Branch Policies can be imported using the project ID and policy configuration ID\n\n```sh\n $ pulumi import azuredevops:index/branchPolicyMinReviewers:BranchPolicyMinReviewers p 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "settings": {
                    "$ref": "#/types/azuredevops:index/BranchPolicyMinReviewersSettings:BranchPolicyMinReviewersSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "required": [
                "projectId",
                "settings"
            ],
            "inputProperties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "settings": {
                    "$ref": "#/types/azuredevops:index/BranchPolicyMinReviewersSettings:BranchPolicyMinReviewersSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "settings"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BranchPolicyMinReviewers resources.\n",
                "properties": {
                    "blocking": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the policy will be created.\n"
                    },
                    "settings": {
                        "$ref": "#/types/azuredevops:index/BranchPolicyMinReviewersSettings:BranchPolicyMinReviewersSettings",
                        "description": "Configuration for the policy. This block must be defined exactly once.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Policy/branchPolicyMinReviewers:BranchPolicyMinReviewers"
                }
            ]
        },
        "azuredevops:index/branchPolicyStatusCheck:BranchPolicyStatusCheck": {
            "description": "Manages a status check branch policy within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    description: \"Managed by Terraform\",\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n    features: {\n        testplans: \"disabled\",\n        artifacts: \"disabled\",\n    },\n});\nconst git = new azuredevops.Git(\"git\", {\n    projectId: project.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst user = new azuredevops.User(\"user\", {\n    principalName: \"mail@email.com\",\n    accountLicenseType: \"basic\",\n});\nconst branchPolicyStatusCheck = new azuredevops.BranchPolicyStatusCheck(\"branchPolicyStatusCheck\", {\n    projectId: project.id,\n    enabled: true,\n    blocking: true,\n    settings: {\n        name: \"Release\",\n        authorId: user.id,\n        invalidateOnUpdate: true,\n        applicability: \"conditional\",\n        displayName: \"PreCheck\",\n        scopes: [{\n            repositoryId: git.id,\n            repositoryRef: git.defaultBranch,\n            matchType: \"Exact\",\n        }],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    description=\"Managed by Terraform\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\",\n    features={\n        \"testplans\": \"disabled\",\n        \"artifacts\": \"disabled\",\n    })\ngit = azuredevops.Git(\"git\",\n    project_id=project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nuser = azuredevops.User(\"user\",\n    principal_name=\"mail@email.com\",\n    account_license_type=\"basic\")\nbranch_policy_status_check = azuredevops.BranchPolicyStatusCheck(\"branchPolicyStatusCheck\",\n    project_id=project.id,\n    enabled=True,\n    blocking=True,\n    settings=azuredevops.BranchPolicyStatusCheckSettingsArgs(\n        name=\"Release\",\n        author_id=user.id,\n        invalidate_on_update=True,\n        applicability=\"conditional\",\n        display_name=\"PreCheck\",\n        scopes=[azuredevops.BranchPolicyStatusCheckSettingsScopeArgs(\n            repository_id=git.id,\n            repository_ref=git.default_branch,\n            match_type=\"Exact\",\n        )],\n    ))\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Description = \"Managed by Terraform\",\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n            Features = \n            {\n                { \"testplans\", \"disabled\" },\n                { \"artifacts\", \"disabled\" },\n            },\n        });\n        var git = new AzureDevOps.Git(\"git\", new AzureDevOps.GitArgs\n        {\n            ProjectId = project.Id,\n            Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n            {\n                InitType = \"Clean\",\n            },\n        });\n        var user = new AzureDevOps.User(\"user\", new AzureDevOps.UserArgs\n        {\n            PrincipalName = \"mail@email.com\",\n            AccountLicenseType = \"basic\",\n        });\n        var branchPolicyStatusCheck = new AzureDevOps.BranchPolicyStatusCheck(\"branchPolicyStatusCheck\", new AzureDevOps.BranchPolicyStatusCheckArgs\n        {\n            ProjectId = project.Id,\n            Enabled = true,\n            Blocking = true,\n            Settings = new AzureDevOps.Inputs.BranchPolicyStatusCheckSettingsArgs\n            {\n                Name = \"Release\",\n                AuthorId = user.Id,\n                InvalidateOnUpdate = true,\n                Applicability = \"conditional\",\n                DisplayName = \"PreCheck\",\n                Scopes = \n                {\n                    new AzureDevOps.Inputs.BranchPolicyStatusCheckSettingsScopeArgs\n                    {\n                        RepositoryId = git.Id,\n                        RepositoryRef = git.DefaultBranch,\n                        MatchType = \"Exact\",\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tFeatures: pulumi.StringMap{\n\t\t\t\t\"testplans\": pulumi.String(\"disabled\"),\n\t\t\t\t\"artifacts\": pulumi.String(\"disabled\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgit, err := azuredevops.NewGit(ctx, \"git\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tInitialization: \u0026GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuser, err := azuredevops.NewUser(ctx, \"user\", \u0026azuredevops.UserArgs{\n\t\t\tPrincipalName:      pulumi.String(\"mail@email.com\"),\n\t\t\tAccountLicenseType: pulumi.String(\"basic\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewBranchPolicyStatusCheck(ctx, \"branchPolicyStatusCheck\", \u0026azuredevops.BranchPolicyStatusCheckArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t\tSettings: \u0026BranchPolicyStatusCheckSettingsArgs{\n\t\t\t\tName:               pulumi.String(\"Release\"),\n\t\t\t\tAuthorId:           user.ID(),\n\t\t\t\tInvalidateOnUpdate: pulumi.Bool(true),\n\t\t\t\tApplicability:      pulumi.String(\"conditional\"),\n\t\t\t\tDisplayName:        pulumi.String(\"PreCheck\"),\n\t\t\t\tScopes: BranchPolicyStatusCheckSettingsScopeArray{\n\t\t\t\t\t\u0026BranchPolicyStatusCheckSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  git.ID(),\n\t\t\t\t\t\tRepositoryRef: git.DefaultBranch,\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Exact\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Policy Configurations](https://docs.microsoft.com/en-us/rest/api/azure/devops/policy/configurations/create?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps Branch Policies can be imported using the project ID and policy configuration ID\n\n```sh\n $ pulumi import azuredevops:index/branchPolicyStatusCheck:BranchPolicyStatusCheck p 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "settings": {
                    "$ref": "#/types/azuredevops:index/BranchPolicyStatusCheckSettings:BranchPolicyStatusCheckSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "required": [
                "projectId",
                "settings"
            ],
            "inputProperties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "settings": {
                    "$ref": "#/types/azuredevops:index/BranchPolicyStatusCheckSettings:BranchPolicyStatusCheckSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "settings"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BranchPolicyStatusCheck resources.\n",
                "properties": {
                    "blocking": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the policy will be created.\n"
                    },
                    "settings": {
                        "$ref": "#/types/azuredevops:index/BranchPolicyStatusCheckSettings:BranchPolicyStatusCheckSettings",
                        "description": "Configuration for the policy. This block must be defined exactly once.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/branchPolicyWorkItemLinking:BranchPolicyWorkItemLinking": {
            "description": "Require associations between branches and a work item within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {});\nconst git = new azuredevops.Git(\"git\", {\n    projectId: project.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst branchPolicyWorkItemLinking = new azuredevops.BranchPolicyWorkItemLinking(\"branchPolicyWorkItemLinking\", {\n    projectId: project.id,\n    enabled: true,\n    blocking: true,\n    settings: {\n        scopes: [\n            {\n                repositoryId: git.id,\n                repositoryRef: git.defaultBranch,\n                matchType: \"Exact\",\n            },\n            {\n                repositoryId: git.id,\n                repositoryRef: \"refs/heads/releases\",\n                matchType: \"Prefix\",\n            },\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\")\ngit = azuredevops.Git(\"git\",\n    project_id=project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nbranch_policy_work_item_linking = azuredevops.BranchPolicyWorkItemLinking(\"branchPolicyWorkItemLinking\",\n    project_id=project.id,\n    enabled=True,\n    blocking=True,\n    settings=azuredevops.BranchPolicyWorkItemLinkingSettingsArgs(\n        scopes=[\n            azuredevops.BranchPolicyWorkItemLinkingSettingsScopeArgs(\n                repository_id=git.id,\n                repository_ref=git.default_branch,\n                match_type=\"Exact\",\n            ),\n            azuredevops.BranchPolicyWorkItemLinkingSettingsScopeArgs(\n                repository_id=git.id,\n                repository_ref=\"refs/heads/releases\",\n                match_type=\"Prefix\",\n            ),\n        ],\n    ))\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n        });\n        var git = new AzureDevOps.Git(\"git\", new AzureDevOps.GitArgs\n        {\n            ProjectId = project.Id,\n            Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n            {\n                InitType = \"Clean\",\n            },\n        });\n        var branchPolicyWorkItemLinking = new AzureDevOps.BranchPolicyWorkItemLinking(\"branchPolicyWorkItemLinking\", new AzureDevOps.BranchPolicyWorkItemLinkingArgs\n        {\n            ProjectId = project.Id,\n            Enabled = true,\n            Blocking = true,\n            Settings = new AzureDevOps.Inputs.BranchPolicyWorkItemLinkingSettingsArgs\n            {\n                Scopes = \n                {\n                    new AzureDevOps.Inputs.BranchPolicyWorkItemLinkingSettingsScopeArgs\n                    {\n                        RepositoryId = git.Id,\n                        RepositoryRef = git.DefaultBranch,\n                        MatchType = \"Exact\",\n                    },\n                    new AzureDevOps.Inputs.BranchPolicyWorkItemLinkingSettingsScopeArgs\n                    {\n                        RepositoryId = git.Id,\n                        RepositoryRef = \"refs/heads/releases\",\n                        MatchType = \"Prefix\",\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgit, err := azuredevops.NewGit(ctx, \"git\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tInitialization: \u0026GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewBranchPolicyWorkItemLinking(ctx, \"branchPolicyWorkItemLinking\", \u0026azuredevops.BranchPolicyWorkItemLinkingArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t\tSettings: \u0026BranchPolicyWorkItemLinkingSettingsArgs{\n\t\t\t\tScopes: BranchPolicyWorkItemLinkingSettingsScopeArray{\n\t\t\t\t\t\u0026BranchPolicyWorkItemLinkingSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  git.ID(),\n\t\t\t\t\t\tRepositoryRef: git.DefaultBranch,\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Exact\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026BranchPolicyWorkItemLinkingSettingsScopeArgs{\n\t\t\t\t\t\tRepositoryId:  git.ID(),\n\t\t\t\t\t\tRepositoryRef: pulumi.String(\"refs/heads/releases\"),\n\t\t\t\t\t\tMatchType:     pulumi.String(\"Prefix\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Policy Configurations](https://docs.microsoft.com/en-us/rest/api/azure/devops/policy/configurations/create?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps Branch Policies can be imported using the project ID and policy configuration ID\n\n```sh\n $ pulumi import azuredevops:index/branchPolicyWorkItemLinking:BranchPolicyWorkItemLinking p 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "settings": {
                    "$ref": "#/types/azuredevops:index/BranchPolicyWorkItemLinkingSettings:BranchPolicyWorkItemLinkingSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "required": [
                "projectId",
                "settings"
            ],
            "inputProperties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "settings": {
                    "$ref": "#/types/azuredevops:index/BranchPolicyWorkItemLinkingSettings:BranchPolicyWorkItemLinkingSettings",
                    "description": "Configuration for the policy. This block must be defined exactly once.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "settings"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BranchPolicyWorkItemLinking resources.\n",
                "properties": {
                    "blocking": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the policy will be created.\n"
                    },
                    "settings": {
                        "$ref": "#/types/azuredevops:index/BranchPolicyWorkItemLinkingSettings:BranchPolicyWorkItemLinkingSettings",
                        "description": "Configuration for the policy. This block must be defined exactly once.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/buildDefinition:BuildDefinition": {
            "description": "Manages a Build Definition within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Tfs\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst repository = new azuredevops.Git(\"repository\", {\n    projectId: project.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst vars = new azuredevops.VariableGroup(\"vars\", {\n    projectId: project.id,\n    description: \"Managed by Terraform\",\n    allowAccess: true,\n    variables: [{\n        name: \"FOO\",\n        value: \"BAR\",\n    }],\n});\nconst build = new azuredevops.BuildDefinition(\"build\", {\n    projectId: project.id,\n    path: \"\\\\ExampleFolder\",\n    ciTrigger: {\n        useYaml: true,\n    },\n    schedules: [{\n        branchFilters: [{\n            includes: [\"master\"],\n            excludes: [\n                \"test\",\n                \"regression\",\n            ],\n        }],\n        daysToBuilds: [\n            \"Wed\",\n            \"Sun\",\n        ],\n        scheduleOnlyWithChanges: true,\n        startHours: 10,\n        startMinutes: 59,\n        timeZone: \"(UTC) Coordinated Universal Time\",\n    }],\n    repository: {\n        repoType: \"TfsGit\",\n        repoId: repository.id,\n        branchName: repository.defaultBranch,\n        ymlPath: \"azure-pipelines.yml\",\n    },\n    variableGroups: [vars.id],\n    variables: [\n        {\n            name: \"PipelineVariable\",\n            value: \"Go Microsoft!\",\n        },\n        {\n            name: \"PipelineSecret\",\n            secretValue: \"ZGV2cw\",\n            isSecret: true,\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nrepository = azuredevops.Git(\"repository\",\n    project_id=project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nvars = azuredevops.VariableGroup(\"vars\",\n    project_id=project.id,\n    description=\"Managed by Terraform\",\n    allow_access=True,\n    variables=[azuredevops.VariableGroupVariableArgs(\n        name=\"FOO\",\n        value=\"BAR\",\n    )])\nbuild = azuredevops.BuildDefinition(\"build\",\n    project_id=project.id,\n    path=\"\\\\ExampleFolder\",\n    ci_trigger=azuredevops.BuildDefinitionCiTriggerArgs(\n        use_yaml=True,\n    ),\n    schedules=[azuredevops.BuildDefinitionScheduleArgs(\n        branch_filters=[azuredevops.BuildDefinitionScheduleBranchFilterArgs(\n            includes=[\"master\"],\n            excludes=[\n                \"test\",\n                \"regression\",\n            ],\n        )],\n        days_to_builds=[\n            \"Wed\",\n            \"Sun\",\n        ],\n        schedule_only_with_changes=True,\n        start_hours=10,\n        start_minutes=59,\n        time_zone=\"(UTC) Coordinated Universal Time\",\n    )],\n    repository=azuredevops.BuildDefinitionRepositoryArgs(\n        repo_type=\"TfsGit\",\n        repo_id=repository.id,\n        branch_name=repository.default_branch,\n        yml_path=\"azure-pipelines.yml\",\n    ),\n    variable_groups=[vars.id],\n    variables=[\n        azuredevops.BuildDefinitionVariableArgs(\n            name=\"PipelineVariable\",\n            value=\"Go Microsoft!\",\n        ),\n        azuredevops.BuildDefinitionVariableArgs(\n            name=\"PipelineSecret\",\n            secret_value=\"ZGV2cw\",\n            is_secret=True,\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var repository = new AzureDevOps.Git(\"repository\", new AzureDevOps.GitArgs\n        {\n            ProjectId = project.Id,\n            Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n            {\n                InitType = \"Clean\",\n            },\n        });\n        var vars = new AzureDevOps.VariableGroup(\"vars\", new AzureDevOps.VariableGroupArgs\n        {\n            ProjectId = project.Id,\n            Description = \"Managed by Terraform\",\n            AllowAccess = true,\n            Variables = \n            {\n                new AzureDevOps.Inputs.VariableGroupVariableArgs\n                {\n                    Name = \"FOO\",\n                    Value = \"BAR\",\n                },\n            },\n        });\n        var build = new AzureDevOps.BuildDefinition(\"build\", new AzureDevOps.BuildDefinitionArgs\n        {\n            ProjectId = project.Id,\n            Path = \"\\\\ExampleFolder\",\n            CiTrigger = new AzureDevOps.Inputs.BuildDefinitionCiTriggerArgs\n            {\n                UseYaml = true,\n            },\n            Schedules = \n            {\n                new AzureDevOps.Inputs.BuildDefinitionScheduleArgs\n                {\n                    BranchFilters = \n                    {\n                        new AzureDevOps.Inputs.BuildDefinitionScheduleBranchFilterArgs\n                        {\n                            Includes = \n                            {\n                                \"master\",\n                            },\n                            Excludes = \n                            {\n                                \"test\",\n                                \"regression\",\n                            },\n                        },\n                    },\n                    DaysToBuilds = \n                    {\n                        \"Wed\",\n                        \"Sun\",\n                    },\n                    ScheduleOnlyWithChanges = true,\n                    StartHours = 10,\n                    StartMinutes = 59,\n                    TimeZone = \"(UTC) Coordinated Universal Time\",\n                },\n            },\n            Repository = new AzureDevOps.Inputs.BuildDefinitionRepositoryArgs\n            {\n                RepoType = \"TfsGit\",\n                RepoId = repository.Id,\n                BranchName = repository.DefaultBranch,\n                YmlPath = \"azure-pipelines.yml\",\n            },\n            VariableGroups = \n            {\n                vars.Id,\n            },\n            Variables = \n            {\n                new AzureDevOps.Inputs.BuildDefinitionVariableArgs\n                {\n                    Name = \"PipelineVariable\",\n                    Value = \"Go Microsoft!\",\n                },\n                new AzureDevOps.Inputs.BuildDefinitionVariableArgs\n                {\n                    Name = \"PipelineSecret\",\n                    SecretValue = \"ZGV2cw\",\n                    IsSecret = true,\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\trepository, err := azuredevops.NewGit(ctx, \"repository\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tInitialization: \u0026GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tvars, err := azuredevops.NewVariableGroup(ctx, \"vars\", \u0026azuredevops.VariableGroupArgs{\n\t\t\tProjectId:   project.ID(),\n\t\t\tDescription: pulumi.String(\"Managed by Terraform\"),\n\t\t\tAllowAccess: pulumi.Bool(true),\n\t\t\tVariables: VariableGroupVariableArray{\n\t\t\t\t\u0026VariableGroupVariableArgs{\n\t\t\t\t\tName:  pulumi.String(\"FOO\"),\n\t\t\t\t\tValue: pulumi.String(\"BAR\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewBuildDefinition(ctx, \"build\", \u0026azuredevops.BuildDefinitionArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tPath:      pulumi.String(\"\\\\ExampleFolder\"),\n\t\t\tCiTrigger: \u0026BuildDefinitionCiTriggerArgs{\n\t\t\t\tUseYaml: pulumi.Bool(true),\n\t\t\t},\n\t\t\tSchedules: BuildDefinitionScheduleArray{\n\t\t\t\t\u0026BuildDefinitionScheduleArgs{\n\t\t\t\t\tBranchFilters: BuildDefinitionScheduleBranchFilterArray{\n\t\t\t\t\t\t\u0026BuildDefinitionScheduleBranchFilterArgs{\n\t\t\t\t\t\t\tIncludes: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"master\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tExcludes: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"test\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"regression\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tDaysToBuilds: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"Wed\"),\n\t\t\t\t\t\tpulumi.String(\"Sun\"),\n\t\t\t\t\t},\n\t\t\t\t\tScheduleOnlyWithChanges: pulumi.Bool(true),\n\t\t\t\t\tStartHours:              pulumi.Int(10),\n\t\t\t\t\tStartMinutes:            pulumi.Int(59),\n\t\t\t\t\tTimeZone:                pulumi.String(\"(UTC) Coordinated Universal Time\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRepository: \u0026BuildDefinitionRepositoryArgs{\n\t\t\t\tRepoType:   pulumi.String(\"TfsGit\"),\n\t\t\t\tRepoId:     repository.ID(),\n\t\t\t\tBranchName: repository.DefaultBranch,\n\t\t\t\tYmlPath:    pulumi.String(\"azure-pipelines.yml\"),\n\t\t\t},\n\t\t\tVariableGroups: pulumi.IntArray{\n\t\t\t\tvars.ID(),\n\t\t\t},\n\t\t\tVariables: BuildDefinitionVariableArray{\n\t\t\t\t\u0026BuildDefinitionVariableArgs{\n\t\t\t\t\tName:  pulumi.String(\"PipelineVariable\"),\n\t\t\t\t\tValue: pulumi.String(\"Go Microsoft!\"),\n\t\t\t\t},\n\t\t\t\t\u0026BuildDefinitionVariableArgs{\n\t\t\t\t\tName:        pulumi.String(\"PipelineSecret\"),\n\t\t\t\t\tSecretValue: pulumi.String(\"ZGV2cw\"),\n\t\t\t\t\tIsSecret:    pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% example %}}\n### GitHub Enterprise\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst sampleDotnetcoreAppRelease = new azuredevops.BuildDefinition(\"sampleDotnetcoreAppRelease\", {\n    projectId: azuredevops_project.project.id,\n    path: \"\\\\ExampleFolder\",\n    ciTrigger: {\n        useYaml: true,\n    },\n    repository: {\n        repoType: \"GitHubEnterprise\",\n        repoId: \"\u003cGitHub Org\u003e/\u003cRepo Name\u003e\",\n        githubEnterpriseUrl: \"https://github.company.com\",\n        branchName: \"master\",\n        ymlPath: \"azure-pipelines.yml\",\n        serviceConnectionId: \"...\",\n    },\n    schedules: [{\n        branchFilters: [{\n            includes: [\"main\"],\n            excludes: [\n                \"test\",\n                \"regression\",\n            ],\n        }],\n        daysToBuilds: [\n            \"Wed\",\n            \"Sun\",\n        ],\n        scheduleOnlyWithChanges: true,\n        startHours: 10,\n        startMinutes: 59,\n        timeZone: \"(UTC) Coordinated Universal Time\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nsample_dotnetcore_app_release = azuredevops.BuildDefinition(\"sampleDotnetcoreAppRelease\",\n    project_id=azuredevops_project[\"project\"][\"id\"],\n    path=\"\\\\ExampleFolder\",\n    ci_trigger=azuredevops.BuildDefinitionCiTriggerArgs(\n        use_yaml=True,\n    ),\n    repository=azuredevops.BuildDefinitionRepositoryArgs(\n        repo_type=\"GitHubEnterprise\",\n        repo_id=\"\u003cGitHub Org\u003e/\u003cRepo Name\u003e\",\n        github_enterprise_url=\"https://github.company.com\",\n        branch_name=\"master\",\n        yml_path=\"azure-pipelines.yml\",\n        service_connection_id=\"...\",\n    ),\n    schedules=[azuredevops.BuildDefinitionScheduleArgs(\n        branch_filters=[azuredevops.BuildDefinitionScheduleBranchFilterArgs(\n            includes=[\"main\"],\n            excludes=[\n                \"test\",\n                \"regression\",\n            ],\n        )],\n        days_to_builds=[\n            \"Wed\",\n            \"Sun\",\n        ],\n        schedule_only_with_changes=True,\n        start_hours=10,\n        start_minutes=59,\n        time_zone=\"(UTC) Coordinated Universal Time\",\n    )])\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var sampleDotnetcoreAppRelease = new AzureDevOps.BuildDefinition(\"sampleDotnetcoreAppRelease\", new AzureDevOps.BuildDefinitionArgs\n        {\n            ProjectId = azuredevops_project.Project.Id,\n            Path = \"\\\\ExampleFolder\",\n            CiTrigger = new AzureDevOps.Inputs.BuildDefinitionCiTriggerArgs\n            {\n                UseYaml = true,\n            },\n            Repository = new AzureDevOps.Inputs.BuildDefinitionRepositoryArgs\n            {\n                RepoType = \"GitHubEnterprise\",\n                RepoId = \"\u003cGitHub Org\u003e/\u003cRepo Name\u003e\",\n                GithubEnterpriseUrl = \"https://github.company.com\",\n                BranchName = \"master\",\n                YmlPath = \"azure-pipelines.yml\",\n                ServiceConnectionId = \"...\",\n            },\n            Schedules = \n            {\n                new AzureDevOps.Inputs.BuildDefinitionScheduleArgs\n                {\n                    BranchFilters = \n                    {\n                        new AzureDevOps.Inputs.BuildDefinitionScheduleBranchFilterArgs\n                        {\n                            Includes = \n                            {\n                                \"main\",\n                            },\n                            Excludes = \n                            {\n                                \"test\",\n                                \"regression\",\n                            },\n                        },\n                    },\n                    DaysToBuilds = \n                    {\n                        \"Wed\",\n                        \"Sun\",\n                    },\n                    ScheduleOnlyWithChanges = true,\n                    StartHours = 10,\n                    StartMinutes = 59,\n                    TimeZone = \"(UTC) Coordinated Universal Time\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewBuildDefinition(ctx, \"sampleDotnetcoreAppRelease\", \u0026azuredevops.BuildDefinitionArgs{\n\t\t\tProjectId: pulumi.Any(azuredevops_project.Project.Id),\n\t\t\tPath:      pulumi.String(\"\\\\ExampleFolder\"),\n\t\t\tCiTrigger: \u0026BuildDefinitionCiTriggerArgs{\n\t\t\t\tUseYaml: pulumi.Bool(true),\n\t\t\t},\n\t\t\tRepository: \u0026BuildDefinitionRepositoryArgs{\n\t\t\t\tRepoType:            pulumi.String(\"GitHubEnterprise\"),\n\t\t\t\tRepoId:              pulumi.String(\"\u003cGitHub Org\u003e/\u003cRepo Name\u003e\"),\n\t\t\t\tGithubEnterpriseUrl: pulumi.String(\"https://github.company.com\"),\n\t\t\t\tBranchName:          pulumi.String(\"master\"),\n\t\t\t\tYmlPath:             pulumi.String(\"azure-pipelines.yml\"),\n\t\t\t\tServiceConnectionId: pulumi.String(\"...\"),\n\t\t\t},\n\t\t\tSchedules: BuildDefinitionScheduleArray{\n\t\t\t\t\u0026BuildDefinitionScheduleArgs{\n\t\t\t\t\tBranchFilters: BuildDefinitionScheduleBranchFilterArray{\n\t\t\t\t\t\t\u0026BuildDefinitionScheduleBranchFilterArgs{\n\t\t\t\t\t\t\tIncludes: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"main\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tExcludes: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"test\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"regression\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tDaysToBuilds: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"Wed\"),\n\t\t\t\t\t\tpulumi.String(\"Sun\"),\n\t\t\t\t\t},\n\t\t\t\t\tScheduleOnlyWithChanges: pulumi.Bool(true),\n\t\t\t\t\tStartHours:              pulumi.Int(10),\n\t\t\t\t\tStartMinutes:            pulumi.Int(59),\n\t\t\t\t\tTimeZone:                pulumi.String(\"(UTC) Coordinated Universal Time\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Build Definitions](https://docs.microsoft.com/en-us/rest/api/azure/devops/build/definitions?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps Build Definitions can be imported using the project name/definitions Id or by the project Guid/definitions Id, e.g.\n\n```sh\n $ pulumi import azuredevops:index/buildDefinition:BuildDefinition build \"Test Project\"/10\n```\n\n or\n\n```sh\n $ pulumi import azuredevops:index/buildDefinition:BuildDefinition build 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "agentPoolName": {
                    "type": "string",
                    "description": "The agent pool that should execute the build. Defaults to `Azure Pipelines`.\n"
                },
                "ciTrigger": {
                    "$ref": "#/types/azuredevops:index/BuildDefinitionCiTrigger:BuildDefinitionCiTrigger",
                    "description": "Continuous Integration trigger.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the build definition.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The folder path of the build definition.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "pullRequestTrigger": {
                    "$ref": "#/types/azuredevops:index/BuildDefinitionPullRequestTrigger:BuildDefinitionPullRequestTrigger",
                    "description": "Pull Request Integration Integration trigger.\n"
                },
                "repository": {
                    "$ref": "#/types/azuredevops:index/BuildDefinitionRepository:BuildDefinitionRepository",
                    "description": "A `repository` block as documented below.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "The revision of the build definition\n"
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/BuildDefinitionSchedule:BuildDefinitionSchedule"
                    }
                },
                "variableGroups": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of variable group IDs (integers) to link to the build definition.\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/BuildDefinitionVariable:BuildDefinitionVariable"
                    },
                    "description": "A list of `variable` blocks, as documented below.\n"
                }
            },
            "required": [
                "name",
                "projectId",
                "repository",
                "revision"
            ],
            "inputProperties": {
                "agentPoolName": {
                    "type": "string",
                    "description": "The agent pool that should execute the build. Defaults to `Azure Pipelines`.\n"
                },
                "ciTrigger": {
                    "$ref": "#/types/azuredevops:index/BuildDefinitionCiTrigger:BuildDefinitionCiTrigger",
                    "description": "Continuous Integration trigger.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the build definition.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The folder path of the build definition.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "pullRequestTrigger": {
                    "$ref": "#/types/azuredevops:index/BuildDefinitionPullRequestTrigger:BuildDefinitionPullRequestTrigger",
                    "description": "Pull Request Integration Integration trigger.\n"
                },
                "repository": {
                    "$ref": "#/types/azuredevops:index/BuildDefinitionRepository:BuildDefinitionRepository",
                    "description": "A `repository` block as documented below.\n"
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/BuildDefinitionSchedule:BuildDefinitionSchedule"
                    }
                },
                "variableGroups": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of variable group IDs (integers) to link to the build definition.\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/BuildDefinitionVariable:BuildDefinitionVariable"
                    },
                    "description": "A list of `variable` blocks, as documented below.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BuildDefinition resources.\n",
                "properties": {
                    "agentPoolName": {
                        "type": "string",
                        "description": "The agent pool that should execute the build. Defaults to `Azure Pipelines`.\n"
                    },
                    "ciTrigger": {
                        "$ref": "#/types/azuredevops:index/BuildDefinitionCiTrigger:BuildDefinitionCiTrigger",
                        "description": "Continuous Integration trigger.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the build definition.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The folder path of the build definition.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "pullRequestTrigger": {
                        "$ref": "#/types/azuredevops:index/BuildDefinitionPullRequestTrigger:BuildDefinitionPullRequestTrigger",
                        "description": "Pull Request Integration Integration trigger.\n"
                    },
                    "repository": {
                        "$ref": "#/types/azuredevops:index/BuildDefinitionRepository:BuildDefinitionRepository",
                        "description": "A `repository` block as documented below.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "The revision of the build definition\n"
                    },
                    "schedules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:index/BuildDefinitionSchedule:BuildDefinitionSchedule"
                        }
                    },
                    "variableGroups": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of variable group IDs (integers) to link to the build definition.\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:index/BuildDefinitionVariable:BuildDefinitionVariable"
                        },
                        "description": "A list of `variable` blocks, as documented below.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Build/buildDefinition:BuildDefinition"
                }
            ]
        },
        "azuredevops:index/buildDefinitionPermissions:BuildDefinitionPermissions": {
            "description": "Manages permissions for a Build Definition\n\n\u003e **Note** Permissions can be assigned to group principals and not to single user principals.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"Managed by Terraform\",\n});\nconst project-readers = azuredevops.getGroupOutput({\n    projectId: project.id,\n    name: \"Readers\",\n});\nconst repository = new azuredevops.Git(\"repository\", {\n    projectId: project.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst build = new azuredevops.BuildDefinition(\"build\", {\n    projectId: project.id,\n    path: \"\\\\ExampleFolder\",\n    ciTrigger: {\n        useYaml: true,\n    },\n    repository: {\n        repoType: \"TfsGit\",\n        repoId: repository.id,\n        branchName: repository.defaultBranch,\n        ymlPath: \"azure-pipelines.yml\",\n    },\n});\nconst permissions = new azuredevops.BuildDefinitionPermissions(\"permissions\", {\n    projectId: project.id,\n    principal: project_readers.apply(project_readers =\u003e project_readers.id),\n    buildDefinitionId: build.id,\n    permissions: {\n        ViewBuilds: \"Allow\",\n        EditBuildQuality: \"Deny\",\n        DeleteBuilds: \"Deny\",\n        StopBuilds: \"Allow\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"Managed by Terraform\")\nproject_readers = azuredevops.get_group_output(project_id=project.id,\n    name=\"Readers\")\nrepository = azuredevops.Git(\"repository\",\n    project_id=project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nbuild = azuredevops.BuildDefinition(\"build\",\n    project_id=project.id,\n    path=\"\\\\ExampleFolder\",\n    ci_trigger=azuredevops.BuildDefinitionCiTriggerArgs(\n        use_yaml=True,\n    ),\n    repository=azuredevops.BuildDefinitionRepositoryArgs(\n        repo_type=\"TfsGit\",\n        repo_id=repository.id,\n        branch_name=repository.default_branch,\n        yml_path=\"azure-pipelines.yml\",\n    ))\npermissions = azuredevops.BuildDefinitionPermissions(\"permissions\",\n    project_id=project.id,\n    principal=project_readers.id,\n    build_definition_id=build.id,\n    permissions={\n        \"ViewBuilds\": \"Allow\",\n        \"EditBuildQuality\": \"Deny\",\n        \"DeleteBuilds\": \"Deny\",\n        \"StopBuilds\": \"Allow\",\n    })\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            WorkItemTemplate = \"Agile\",\n            VersionControl = \"Git\",\n            Visibility = \"private\",\n            Description = \"Managed by Terraform\",\n        });\n        var project_readers = AzureDevOps.GetGroup.Invoke(new AzureDevOps.GetGroupInvokeArgs\n        {\n            ProjectId = project.Id,\n            Name = \"Readers\",\n        });\n        var repository = new AzureDevOps.Git(\"repository\", new AzureDevOps.GitArgs\n        {\n            ProjectId = project.Id,\n            Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n            {\n                InitType = \"Clean\",\n            },\n        });\n        var build = new AzureDevOps.BuildDefinition(\"build\", new AzureDevOps.BuildDefinitionArgs\n        {\n            ProjectId = project.Id,\n            Path = \"\\\\ExampleFolder\",\n            CiTrigger = new AzureDevOps.Inputs.BuildDefinitionCiTriggerArgs\n            {\n                UseYaml = true,\n            },\n            Repository = new AzureDevOps.Inputs.BuildDefinitionRepositoryArgs\n            {\n                RepoType = \"TfsGit\",\n                RepoId = repository.Id,\n                BranchName = repository.DefaultBranch,\n                YmlPath = \"azure-pipelines.yml\",\n            },\n        });\n        var permissions = new AzureDevOps.BuildDefinitionPermissions(\"permissions\", new AzureDevOps.BuildDefinitionPermissionsArgs\n        {\n            ProjectId = project.Id,\n            Principal = project_readers.Apply(project_readers =\u003e project_readers.Id),\n            BuildDefinitionId = build.Id,\n            Permissions = \n            {\n                { \"ViewBuilds\", \"Allow\" },\n                { \"EditBuildQuality\", \"Deny\" },\n                { \"DeleteBuilds\", \"Deny\" },\n                { \"StopBuilds\", \"Allow\" },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tproject_readers := azuredevops.LookupGroupOutput(ctx, GetGroupOutputArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tName:      pulumi.String(\"Readers\"),\n\t\t}, nil)\n\t\trepository, err := azuredevops.NewGit(ctx, \"repository\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tInitialization: \u0026GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbuild, err := azuredevops.NewBuildDefinition(ctx, \"build\", \u0026azuredevops.BuildDefinitionArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tPath:      pulumi.String(\"\\\\ExampleFolder\"),\n\t\t\tCiTrigger: \u0026BuildDefinitionCiTriggerArgs{\n\t\t\t\tUseYaml: pulumi.Bool(true),\n\t\t\t},\n\t\t\tRepository: \u0026BuildDefinitionRepositoryArgs{\n\t\t\t\tRepoType:   pulumi.String(\"TfsGit\"),\n\t\t\t\tRepoId:     repository.ID(),\n\t\t\t\tBranchName: repository.DefaultBranch,\n\t\t\t\tYmlPath:    pulumi.String(\"azure-pipelines.yml\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewBuildDefinitionPermissions(ctx, \"permissions\", \u0026azuredevops.BuildDefinitionPermissionsArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tPrincipal: project_readers.ApplyT(func(project_readers GetGroupResult) (string, error) {\n\t\t\t\treturn project_readers.Id, nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tBuildDefinitionId: build.ID(),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"ViewBuilds\":       pulumi.String(\"Allow\"),\n\t\t\t\t\"EditBuildQuality\": pulumi.String(\"Deny\"),\n\t\t\t\t\"DeleteBuilds\":     pulumi.String(\"Deny\"),\n\t\t\t\t\"StopBuilds\":       pulumi.String(\"Allow\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Security](https://docs.microsoft.com/en-us/rest/api/azure/devops/security/?view=azure-devops-rest-5.1)\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: vso.security_manage - Grants the ability to read, write, and manage security permissions.\n\n\n## Import\n\nThe resource does not support import. ",
            "properties": {
                "buildDefinitionId": {
                    "type": "string",
                    "description": "The id of the build definition to assign the permissions.\n"
                },
                "permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "the permissions to assign. The following permissions are available.\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The **group** principal to assign the permissions.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project to assign the permissions.\n"
                },
                "replace": {
                    "type": "boolean",
                    "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`.\n"
                }
            },
            "required": [
                "buildDefinitionId",
                "permissions",
                "principal",
                "projectId"
            ],
            "inputProperties": {
                "buildDefinitionId": {
                    "type": "string",
                    "description": "The id of the build definition to assign the permissions.\n"
                },
                "permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "the permissions to assign. The following permissions are available.\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The **group** principal to assign the permissions.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project to assign the permissions.\n"
                },
                "replace": {
                    "type": "boolean",
                    "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`.\n"
                }
            },
            "requiredInputs": [
                "buildDefinitionId",
                "permissions",
                "principal",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BuildDefinitionPermissions resources.\n",
                "properties": {
                    "buildDefinitionId": {
                        "type": "string",
                        "description": "The id of the build definition to assign the permissions.\n"
                    },
                    "permissions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "the permissions to assign. The following permissions are available.\n"
                    },
                    "principal": {
                        "type": "string",
                        "description": "The **group** principal to assign the permissions.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project to assign the permissions.\n"
                    },
                    "replace": {
                        "type": "boolean",
                        "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/git:Git": {
            "description": "\n\n\n## Import\n\nAzure DevOps Repositories can be imported using the repo name or by the repo Guid e.g.\n\n```sh\n $ pulumi import azuredevops:index/git:Git repository projectName/repoName\n```\n\n or\n\n```sh\n $ pulumi import azuredevops:index/git:Git repository projectName/00000000-0000-0000-0000-000000000000\n```\n\n hcl resource \"azuredevops_git_repository\" \"repo\" {\n\n project_id = azuredevops_project.project.id\n\n name\n\n\n\n\n\n = \"Existing Git Repository\"\n\n default_branch = \"refs/heads/main\"\n\n initialization {\n\n\n\n init_type = \"Clean\"\n\n }\n\n lifecycle {\n\n\n\n ignore_changes = [\n\n\n\n\n\n # Ignore changes to initialization to support importing existing repositories\n\n\n\n\n\n # Given that a repo now exists, either imported into terraform state or created by terraform,\n\n\n\n\n\n # we don't care for the configuration of initialization against the existing resource\n\n\n\n\n\n initialization,\n\n\n\n ]\n\n } } ",
            "properties": {
                "defaultBranch": {
                    "type": "string",
                    "description": "The ref of the default branch. Will be used as the branch name for initialized repositories.\n"
                },
                "initialization": {
                    "$ref": "#/types/azuredevops:index/GitInitialization:GitInitialization",
                    "description": "An `initialization` block as documented below.\n"
                },
                "isFork": {
                    "type": "boolean",
                    "description": "True if the repository was created as a fork.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the git repository.\n"
                },
                "parentRepositoryId": {
                    "type": "string",
                    "description": "The ID of a Git project from which a fork is to be created.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "remoteUrl": {
                    "type": "string",
                    "description": "Git HTTPS URL of the repository\n"
                },
                "size": {
                    "type": "integer",
                    "description": "Size in bytes.\n"
                },
                "sshUrl": {
                    "type": "string",
                    "description": "Git SSH URL of the repository.\n"
                },
                "url": {
                    "type": "string",
                    "description": "REST API URL of the repository.\n"
                },
                "webUrl": {
                    "type": "string",
                    "description": "Web link to the repository.\n"
                }
            },
            "required": [
                "defaultBranch",
                "initialization",
                "isFork",
                "name",
                "projectId",
                "remoteUrl",
                "size",
                "sshUrl",
                "url",
                "webUrl"
            ],
            "inputProperties": {
                "defaultBranch": {
                    "type": "string",
                    "description": "The ref of the default branch. Will be used as the branch name for initialized repositories.\n"
                },
                "initialization": {
                    "$ref": "#/types/azuredevops:index/GitInitialization:GitInitialization",
                    "description": "An `initialization` block as documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the git repository.\n"
                },
                "parentRepositoryId": {
                    "type": "string",
                    "description": "The ID of a Git project from which a fork is to be created.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                }
            },
            "requiredInputs": [
                "initialization",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Git resources.\n",
                "properties": {
                    "defaultBranch": {
                        "type": "string",
                        "description": "The ref of the default branch. Will be used as the branch name for initialized repositories.\n"
                    },
                    "initialization": {
                        "$ref": "#/types/azuredevops:index/GitInitialization:GitInitialization",
                        "description": "An `initialization` block as documented below.\n"
                    },
                    "isFork": {
                        "type": "boolean",
                        "description": "True if the repository was created as a fork.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the git repository.\n"
                    },
                    "parentRepositoryId": {
                        "type": "string",
                        "description": "The ID of a Git project from which a fork is to be created.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "remoteUrl": {
                        "type": "string",
                        "description": "Git HTTPS URL of the repository\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "Size in bytes.\n"
                    },
                    "sshUrl": {
                        "type": "string",
                        "description": "Git SSH URL of the repository.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "REST API URL of the repository.\n"
                    },
                    "webUrl": {
                        "type": "string",
                        "description": "Web link to the repository.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Repository/git:Git"
                }
            ]
        },
        "azuredevops:index/gitPermissions:GitPermissions": {
            "description": "Manages permissions for Git repositories. \n\n\u003e **Note** Permissions can be assigned to group principals and not to single user principals.\n\n## Permission levels\n\nPermission for Git Repositories within Azure DevOps can be applied on three different levels.\nThose levels are reflected by specifying (or omitting) values for the arguments `project_id`, `repository_id` and `branch_name`.\n\n### Project level\n\nPermissions for all Git Repositories inside a project (existing or newly created ones) are specified, if only the argument `project_id` has a value.\n\n#### Example usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project_git_root_permissions = new azuredevops.GitPermissions(\"project-git-root-permissions\", {\n    projectId: azuredevops_project.project.id,\n    principal: data.azuredevops_group[\"project-readers\"].id,\n    permissions: {\n        CreateRepository: \"Deny\",\n        DeleteRepository: \"Deny\",\n        RenameRepository: \"NotSet\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject_git_root_permissions = azuredevops.GitPermissions(\"project-git-root-permissions\",\n    project_id=azuredevops_project[\"project\"][\"id\"],\n    principal=data[\"azuredevops_group\"][\"project-readers\"][\"id\"],\n    permissions={\n        \"CreateRepository\": \"Deny\",\n        \"DeleteRepository\": \"Deny\",\n        \"RenameRepository\": \"NotSet\",\n    })\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project_git_root_permissions = new AzureDevOps.GitPermissions(\"project-git-root-permissions\", new AzureDevOps.GitPermissionsArgs\n        {\n            ProjectId = azuredevops_project.Project.Id,\n            Principal = data.Azuredevops_group.Project_readers.Id,\n            Permissions = \n            {\n                { \"CreateRepository\", \"Deny\" },\n                { \"DeleteRepository\", \"Deny\" },\n                { \"RenameRepository\", \"NotSet\" },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewGitPermissions(ctx, \"project-git-root-permissions\", \u0026azuredevops.GitPermissionsArgs{\n\t\t\tProjectId: pulumi.Any(azuredevops_project.Project.Id),\n\t\t\tPrincipal: pulumi.Any(data.Azuredevops_group.Project - readers.Id),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"CreateRepository\": pulumi.String(\"Deny\"),\n\t\t\t\t\"DeleteRepository\": pulumi.String(\"Deny\"),\n\t\t\t\t\"RenameRepository\": pulumi.String(\"NotSet\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n### Repository level\n\nPermissions for a specific Git Repository and all existing or newly created branches are specified if the arguments `project_id` and `repository_id` are set.\n\n#### Example usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project_git_repo_permissions = new azuredevops.GitPermissions(\"project-git-repo-permissions\", {\n    projectId: data.azuredevops_git_repository[\"git-repo\"].project_id,\n    repositoryId: data.azuredevops_git_repository[\"git-repo\"].id,\n    principal: data.azuredevops_group[\"project-administrators\"].id,\n    permissions: {\n        RemoveOthersLocks: \"Allow\",\n        ManagePermissions: \"Deny\",\n        CreateTag: \"Deny\",\n        CreateBranch: \"NotSet\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject_git_repo_permissions = azuredevops.GitPermissions(\"project-git-repo-permissions\",\n    project_id=data[\"azuredevops_git_repository\"][\"git-repo\"][\"project_id\"],\n    repository_id=data[\"azuredevops_git_repository\"][\"git-repo\"][\"id\"],\n    principal=data[\"azuredevops_group\"][\"project-administrators\"][\"id\"],\n    permissions={\n        \"RemoveOthersLocks\": \"Allow\",\n        \"ManagePermissions\": \"Deny\",\n        \"CreateTag\": \"Deny\",\n        \"CreateBranch\": \"NotSet\",\n    })\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project_git_repo_permissions = new AzureDevOps.GitPermissions(\"project-git-repo-permissions\", new AzureDevOps.GitPermissionsArgs\n        {\n            ProjectId = data.Azuredevops_git_repository.Git_repo.Project_id,\n            RepositoryId = data.Azuredevops_git_repository.Git_repo.Id,\n            Principal = data.Azuredevops_group.Project_administrators.Id,\n            Permissions = \n            {\n                { \"RemoveOthersLocks\", \"Allow\" },\n                { \"ManagePermissions\", \"Deny\" },\n                { \"CreateTag\", \"Deny\" },\n                { \"CreateBranch\", \"NotSet\" },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewGitPermissions(ctx, \"project-git-repo-permissions\", \u0026azuredevops.GitPermissionsArgs{\n\t\t\tProjectId:    pulumi.Any(data.Azuredevops_git_repository.Git - repo.Project_id),\n\t\t\tRepositoryId: pulumi.Any(data.Azuredevops_git_repository.Git - repo.Id),\n\t\t\tPrincipal:    pulumi.Any(data.Azuredevops_group.Project - administrators.Id),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"RemoveOthersLocks\": pulumi.String(\"Allow\"),\n\t\t\t\t\"ManagePermissions\": pulumi.String(\"Deny\"),\n\t\t\t\t\"CreateTag\":         pulumi.String(\"Deny\"),\n\t\t\t\t\"CreateBranch\":      pulumi.String(\"NotSet\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n### Branch level\n\nPermissions for a specific branch inside a Git Repository are specified if all above mentioned the arguments are set.\n\n#### Example usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project_git_branch_permissions = new azuredevops.GitPermissions(\"project-git-branch-permissions\", {\n    projectId: data.azuredevops_git_repository[\"git-repo\"].project_id,\n    repositoryId: data.azuredevops_git_repository[\"git-repo\"].id,\n    branchName: \"refs/heads/master\",\n    principal: data.azuredevops_group[\"project-contributors\"].id,\n    permissions: {\n        RemoveOthersLocks: \"Allow\",\n        ForcePush: \"Deny\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject_git_branch_permissions = azuredevops.GitPermissions(\"project-git-branch-permissions\",\n    project_id=data[\"azuredevops_git_repository\"][\"git-repo\"][\"project_id\"],\n    repository_id=data[\"azuredevops_git_repository\"][\"git-repo\"][\"id\"],\n    branch_name=\"refs/heads/master\",\n    principal=data[\"azuredevops_group\"][\"project-contributors\"][\"id\"],\n    permissions={\n        \"RemoveOthersLocks\": \"Allow\",\n        \"ForcePush\": \"Deny\",\n    })\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project_git_branch_permissions = new AzureDevOps.GitPermissions(\"project-git-branch-permissions\", new AzureDevOps.GitPermissionsArgs\n        {\n            ProjectId = data.Azuredevops_git_repository.Git_repo.Project_id,\n            RepositoryId = data.Azuredevops_git_repository.Git_repo.Id,\n            BranchName = \"refs/heads/master\",\n            Principal = data.Azuredevops_group.Project_contributors.Id,\n            Permissions = \n            {\n                { \"RemoveOthersLocks\", \"Allow\" },\n                { \"ForcePush\", \"Deny\" },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewGitPermissions(ctx, \"project-git-branch-permissions\", \u0026azuredevops.GitPermissionsArgs{\n\t\t\tProjectId:    pulumi.Any(data.Azuredevops_git_repository.Git - repo.Project_id),\n\t\t\tRepositoryId: pulumi.Any(data.Azuredevops_git_repository.Git - repo.Id),\n\t\t\tBranchName:   pulumi.String(\"refs/heads/master\"),\n\t\t\tPrincipal:    pulumi.Any(data.Azuredevops_group.Project - contributors.Id),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"RemoveOthersLocks\": pulumi.String(\"Allow\"),\n\t\t\t\t\"ForcePush\":         pulumi.String(\"Deny\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    description: \"Test Project Description\",\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst project-readers = azuredevops.getGroupOutput({\n    projectId: project.id,\n    name: \"Readers\",\n});\nconst project-contributors = azuredevops.getGroupOutput({\n    projectId: project.id,\n    name: \"Contributors\",\n});\nconst project-administrators = azuredevops.getGroupOutput({\n    projectId: project.id,\n    name: \"Project administrators\",\n});\nconst project_git_root_permissions = new azuredevops.GitPermissions(\"project-git-root-permissions\", {\n    projectId: project.id,\n    principal: project_readers.apply(project_readers =\u003e project_readers.id),\n    permissions: {\n        CreateRepository: \"Deny\",\n        DeleteRepository: \"Deny\",\n        RenameRepository: \"NotSet\",\n    },\n});\nconst git_repo = new azuredevops.Git(\"git-repo\", {\n    projectId: project.id,\n    defaultBranch: \"refs/heads/master\",\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst project_git_repo_permissions = new azuredevops.GitPermissions(\"project-git-repo-permissions\", {\n    projectId: git_repo.projectId,\n    repositoryId: git_repo.id,\n    principal: project_administrators.apply(project_administrators =\u003e project_administrators.id),\n    permissions: {\n        RemoveOthersLocks: \"Allow\",\n        ManagePermissions: \"Deny\",\n        CreateTag: \"Deny\",\n        CreateBranch: \"NotSet\",\n    },\n});\nconst project_git_branch_permissions = new azuredevops.GitPermissions(\"project-git-branch-permissions\", {\n    projectId: git_repo.projectId,\n    repositoryId: git_repo.id,\n    branchName: \"master\",\n    principal: project_contributors.apply(project_contributors =\u003e project_contributors.id),\n    permissions: {\n        RemoveOthersLocks: \"Allow\",\n        ForcePush: \"Deny\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    description=\"Test Project Description\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nproject_readers = azuredevops.get_group_output(project_id=project.id,\n    name=\"Readers\")\nproject_contributors = azuredevops.get_group_output(project_id=project.id,\n    name=\"Contributors\")\nproject_administrators = azuredevops.get_group_output(project_id=project.id,\n    name=\"Project administrators\")\nproject_git_root_permissions = azuredevops.GitPermissions(\"project-git-root-permissions\",\n    project_id=project.id,\n    principal=project_readers.id,\n    permissions={\n        \"CreateRepository\": \"Deny\",\n        \"DeleteRepository\": \"Deny\",\n        \"RenameRepository\": \"NotSet\",\n    })\ngit_repo = azuredevops.Git(\"git-repo\",\n    project_id=project.id,\n    default_branch=\"refs/heads/master\",\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nproject_git_repo_permissions = azuredevops.GitPermissions(\"project-git-repo-permissions\",\n    project_id=git_repo.project_id,\n    repository_id=git_repo.id,\n    principal=project_administrators.id,\n    permissions={\n        \"RemoveOthersLocks\": \"Allow\",\n        \"ManagePermissions\": \"Deny\",\n        \"CreateTag\": \"Deny\",\n        \"CreateBranch\": \"NotSet\",\n    })\nproject_git_branch_permissions = azuredevops.GitPermissions(\"project-git-branch-permissions\",\n    project_id=git_repo.project_id,\n    repository_id=git_repo.id,\n    branch_name=\"master\",\n    principal=project_contributors.id,\n    permissions={\n        \"RemoveOthersLocks\": \"Allow\",\n        \"ForcePush\": \"Deny\",\n    })\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Description = \"Test Project Description\",\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var project_readers = AzureDevOps.GetGroup.Invoke(new AzureDevOps.GetGroupInvokeArgs\n        {\n            ProjectId = project.Id,\n            Name = \"Readers\",\n        });\n        var project_contributors = AzureDevOps.GetGroup.Invoke(new AzureDevOps.GetGroupInvokeArgs\n        {\n            ProjectId = project.Id,\n            Name = \"Contributors\",\n        });\n        var project_administrators = AzureDevOps.GetGroup.Invoke(new AzureDevOps.GetGroupInvokeArgs\n        {\n            ProjectId = project.Id,\n            Name = \"Project administrators\",\n        });\n        var project_git_root_permissions = new AzureDevOps.GitPermissions(\"project-git-root-permissions\", new AzureDevOps.GitPermissionsArgs\n        {\n            ProjectId = project.Id,\n            Principal = project_readers.Apply(project_readers =\u003e project_readers.Id),\n            Permissions = \n            {\n                { \"CreateRepository\", \"Deny\" },\n                { \"DeleteRepository\", \"Deny\" },\n                { \"RenameRepository\", \"NotSet\" },\n            },\n        });\n        var git_repo = new AzureDevOps.Git(\"git-repo\", new AzureDevOps.GitArgs\n        {\n            ProjectId = project.Id,\n            DefaultBranch = \"refs/heads/master\",\n            Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n            {\n                InitType = \"Clean\",\n            },\n        });\n        var project_git_repo_permissions = new AzureDevOps.GitPermissions(\"project-git-repo-permissions\", new AzureDevOps.GitPermissionsArgs\n        {\n            ProjectId = git_repo.ProjectId,\n            RepositoryId = git_repo.Id,\n            Principal = project_administrators.Apply(project_administrators =\u003e project_administrators.Id),\n            Permissions = \n            {\n                { \"RemoveOthersLocks\", \"Allow\" },\n                { \"ManagePermissions\", \"Deny\" },\n                { \"CreateTag\", \"Deny\" },\n                { \"CreateBranch\", \"NotSet\" },\n            },\n        });\n        var project_git_branch_permissions = new AzureDevOps.GitPermissions(\"project-git-branch-permissions\", new AzureDevOps.GitPermissionsArgs\n        {\n            ProjectId = git_repo.ProjectId,\n            RepositoryId = git_repo.Id,\n            BranchName = \"master\",\n            Principal = project_contributors.Apply(project_contributors =\u003e project_contributors.Id),\n            Permissions = \n            {\n                { \"RemoveOthersLocks\", \"Allow\" },\n                { \"ForcePush\", \"Deny\" },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tDescription:      pulumi.String(\"Test Project Description\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tproject_readers := azuredevops.LookupGroupOutput(ctx, GetGroupOutputArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tName:      pulumi.String(\"Readers\"),\n\t\t}, nil)\n\t\tproject_contributors := azuredevops.LookupGroupOutput(ctx, GetGroupOutputArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tName:      pulumi.String(\"Contributors\"),\n\t\t}, nil)\n\t\tproject_administrators := azuredevops.LookupGroupOutput(ctx, GetGroupOutputArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tName:      pulumi.String(\"Project administrators\"),\n\t\t}, nil)\n\t\t_, err = azuredevops.NewGitPermissions(ctx, \"project-git-root-permissions\", \u0026azuredevops.GitPermissionsArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tPrincipal: project_readers.ApplyT(func(project_readers GetGroupResult) (string, error) {\n\t\t\t\treturn project_readers.Id, nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"CreateRepository\": pulumi.String(\"Deny\"),\n\t\t\t\t\"DeleteRepository\": pulumi.String(\"Deny\"),\n\t\t\t\t\"RenameRepository\": pulumi.String(\"NotSet\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewGit(ctx, \"git-repo\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId:     project.ID(),\n\t\t\tDefaultBranch: pulumi.String(\"refs/heads/master\"),\n\t\t\tInitialization: \u0026GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewGitPermissions(ctx, \"project-git-repo-permissions\", \u0026azuredevops.GitPermissionsArgs{\n\t\t\tProjectId:    git_repo.ProjectId,\n\t\t\tRepositoryId: git_repo.ID(),\n\t\t\tPrincipal: project_administrators.ApplyT(func(project_administrators GetGroupResult) (string, error) {\n\t\t\t\treturn project_administrators.Id, nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"RemoveOthersLocks\": pulumi.String(\"Allow\"),\n\t\t\t\t\"ManagePermissions\": pulumi.String(\"Deny\"),\n\t\t\t\t\"CreateTag\":         pulumi.String(\"Deny\"),\n\t\t\t\t\"CreateBranch\":      pulumi.String(\"NotSet\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewGitPermissions(ctx, \"project-git-branch-permissions\", \u0026azuredevops.GitPermissionsArgs{\n\t\t\tProjectId:    git_repo.ProjectId,\n\t\t\tRepositoryId: git_repo.ID(),\n\t\t\tBranchName:   pulumi.String(\"master\"),\n\t\t\tPrincipal: project_contributors.ApplyT(func(project_contributors GetGroupResult) (string, error) {\n\t\t\t\treturn project_contributors.Id, nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"RemoveOthersLocks\": pulumi.String(\"Allow\"),\n\t\t\t\t\"ForcePush\":         pulumi.String(\"Deny\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Security](https://docs.microsoft.com/en-us/rest/api/azure/devops/security/?view=azure-devops-rest-5.1)\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: vso.security_manage - Grants the ability to read, write, and manage security permissions.\n\n\n## Import\n\nThe resource does not support import. ",
            "properties": {
                "branchName": {
                    "type": "string",
                    "description": "The name of the branch to assign the permissions.\n"
                },
                "permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "the permissions to assign. The follwing permissions are available\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The **group** principal to assign the permissions.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project to assign the permissions.\n"
                },
                "replace": {
                    "type": "boolean",
                    "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`\n"
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The ID of the GIT repository to assign the permissions\n"
                }
            },
            "required": [
                "permissions",
                "principal",
                "projectId"
            ],
            "inputProperties": {
                "branchName": {
                    "type": "string",
                    "description": "The name of the branch to assign the permissions.\n"
                },
                "permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "the permissions to assign. The follwing permissions are available\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The **group** principal to assign the permissions.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project to assign the permissions.\n"
                },
                "replace": {
                    "type": "boolean",
                    "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`\n"
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The ID of the GIT repository to assign the permissions\n"
                }
            },
            "requiredInputs": [
                "permissions",
                "principal",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GitPermissions resources.\n",
                "properties": {
                    "branchName": {
                        "type": "string",
                        "description": "The name of the branch to assign the permissions.\n"
                    },
                    "permissions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "the permissions to assign. The follwing permissions are available\n"
                    },
                    "principal": {
                        "type": "string",
                        "description": "The **group** principal to assign the permissions.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project to assign the permissions.\n"
                    },
                    "replace": {
                        "type": "boolean",
                        "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`\n"
                    },
                    "repositoryId": {
                        "type": "string",
                        "description": "The ID of the GIT repository to assign the permissions\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/group:Group": {
            "description": "Manages a group within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {});\nconst tf-project-readers = azuredevops.getGroupOutput({\n    projectId: project.id,\n    name: \"Readers\",\n});\nconst tf-project-contributors = azuredevops.getGroupOutput({\n    projectId: project.id,\n    name: \"Contributors\",\n});\nconst group = new azuredevops.Group(\"group\", {\n    scope: project.id,\n    displayName: \"Test group\",\n    description: \"Test description\",\n    members: [\n        tf_project_readers.apply(tf_project_readers =\u003e tf_project_readers.descriptor),\n        tf_project_contributors.apply(tf_project_contributors =\u003e tf_project_contributors.descriptor),\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\")\ntf_project_readers = azuredevops.get_group_output(project_id=project.id,\n    name=\"Readers\")\ntf_project_contributors = azuredevops.get_group_output(project_id=project.id,\n    name=\"Contributors\")\ngroup = azuredevops.Group(\"group\",\n    scope=project.id,\n    display_name=\"Test group\",\n    description=\"Test description\",\n    members=[\n        tf_project_readers.descriptor,\n        tf_project_contributors.descriptor,\n    ])\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n        });\n        var tf_project_readers = AzureDevOps.GetGroup.Invoke(new AzureDevOps.GetGroupInvokeArgs\n        {\n            ProjectId = project.Id,\n            Name = \"Readers\",\n        });\n        var tf_project_contributors = AzureDevOps.GetGroup.Invoke(new AzureDevOps.GetGroupInvokeArgs\n        {\n            ProjectId = project.Id,\n            Name = \"Contributors\",\n        });\n        var @group = new AzureDevOps.Group(\"group\", new AzureDevOps.GroupArgs\n        {\n            Scope = project.Id,\n            DisplayName = \"Test group\",\n            Description = \"Test description\",\n            Members = \n            {\n                tf_project_readers.Apply(tf_project_readers =\u003e tf_project_readers.Descriptor),\n                tf_project_contributors.Apply(tf_project_contributors =\u003e tf_project_contributors.Descriptor),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttf_project_readers := azuredevops.LookupGroupOutput(ctx, GetGroupOutputArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tName:      pulumi.String(\"Readers\"),\n\t\t}, nil)\n\t\ttf_project_contributors := azuredevops.LookupGroupOutput(ctx, GetGroupOutputArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tName:      pulumi.String(\"Contributors\"),\n\t\t}, nil)\n\t\t_, err = azuredevops.NewGroup(ctx, \"group\", \u0026azuredevops.GroupArgs{\n\t\t\tScope:       project.ID(),\n\t\t\tDisplayName: pulumi.String(\"Test group\"),\n\t\t\tDescription: pulumi.String(\"Test description\"),\n\t\t\tMembers: pulumi.StringArray{\n\t\t\t\ttf_project_readers.ApplyT(func(tf_project_readers GetGroupResult) (string, error) {\n\t\t\t\t\treturn tf_project_readers.Descriptor, nil\n\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\ttf_project_contributors.ApplyT(func(tf_project_contributors GetGroupResult) (string, error) {\n\t\t\t\t\treturn tf_project_contributors.Descriptor, nil\n\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Groups](https://docs.microsoft.com/en-us/rest/api/azure/devops/graph/groups?view=azure-devops-rest-5.1)\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: Read, Write, \u0026 Manage\n\n\n## Import\n\nAzure DevOps groups can be imported using the group identity descriptor, e.g.\n\n```sh\n $ pulumi import azuredevops:index/group:Group id aadgp.Uy0xLTktMTU1MTM3NDI0NS0xMjA0NDAwOTY5LTI0MDI5ODY0MTMtMjE3OTQwODYxNi0zLTIxNjc2NjQyNTMtMzI1Nzg0NDI4OS0yMjU4MjcwOTc0LTI2MDYxODY2NDU\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The Description of the Project.\n"
                },
                "descriptor": {
                    "type": "string",
                    "description": "The identity (subject) descriptor of the Group.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of a new Azure DevOps group that is not backed by an external provider. The `origin_id` and `mail` arguments cannot be used simultaneously with `display_name`.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "This represents the name of the container of origin for a graph member.\n"
                },
                "mail": {
                    "type": "string",
                    "description": "The mail address as a reference to an existing group from an external AD or AAD backed provider. The `scope`, `origin_id` and `display_name` arguments cannot be used simultaneously with `mail`.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "\u003e NOTE: It's possible to define group members both within the `azuredevops.Group` resource via the members block and by using the `azuredevops.GroupMembership` resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.\n"
                },
                "origin": {
                    "type": "string",
                    "description": "The type of source provider for the origin identifier (ex:AD, AAD, MSA)\n"
                },
                "originId": {
                    "type": "string",
                    "description": "The OriginID as a reference to a group from an external AD or AAD backed provider. The `scope`, `mail` and `display_name` arguments cannot be used simultaneously with `origin_id`.\n"
                },
                "principalName": {
                    "type": "string",
                    "description": "This is the PrincipalName of this graph member from the source provider.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of the group. A descriptor referencing the scope (collection, project) in which the group should be created. If omitted, will be created in the scope of the enclosing account or organization.x\n"
                },
                "subjectKind": {
                    "type": "string",
                    "description": "This field identifies the type of the graph subject (ex: Group, Scope, User).\n"
                },
                "url": {
                    "type": "string",
                    "description": "This url is the full route to the source resource of this graph subject.\n"
                }
            },
            "required": [
                "descriptor",
                "displayName",
                "domain",
                "mail",
                "members",
                "origin",
                "originId",
                "principalName",
                "subjectKind",
                "url"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The Description of the Project.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of a new Azure DevOps group that is not backed by an external provider. The `origin_id` and `mail` arguments cannot be used simultaneously with `display_name`.\n"
                },
                "mail": {
                    "type": "string",
                    "description": "The mail address as a reference to an existing group from an external AD or AAD backed provider. The `scope`, `origin_id` and `display_name` arguments cannot be used simultaneously with `mail`.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "\u003e NOTE: It's possible to define group members both within the `azuredevops.Group` resource via the members block and by using the `azuredevops.GroupMembership` resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.\n"
                },
                "originId": {
                    "type": "string",
                    "description": "The OriginID as a reference to a group from an external AD or AAD backed provider. The `scope`, `mail` and `display_name` arguments cannot be used simultaneously with `origin_id`.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of the group. A descriptor referencing the scope (collection, project) in which the group should be created. If omitted, will be created in the scope of the enclosing account or organization.x\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The Description of the Project.\n"
                    },
                    "descriptor": {
                        "type": "string",
                        "description": "The identity (subject) descriptor of the Group.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name of a new Azure DevOps group that is not backed by an external provider. The `origin_id` and `mail` arguments cannot be used simultaneously with `display_name`.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "This represents the name of the container of origin for a graph member.\n"
                    },
                    "mail": {
                        "type": "string",
                        "description": "The mail address as a reference to an existing group from an external AD or AAD backed provider. The `scope`, `origin_id` and `display_name` arguments cannot be used simultaneously with `mail`.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "\u003e NOTE: It's possible to define group members both within the `azuredevops.Group` resource via the members block and by using the `azuredevops.GroupMembership` resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.\n"
                    },
                    "origin": {
                        "type": "string",
                        "description": "The type of source provider for the origin identifier (ex:AD, AAD, MSA)\n"
                    },
                    "originId": {
                        "type": "string",
                        "description": "The OriginID as a reference to a group from an external AD or AAD backed provider. The `scope`, `mail` and `display_name` arguments cannot be used simultaneously with `origin_id`.\n"
                    },
                    "principalName": {
                        "type": "string",
                        "description": "This is the PrincipalName of this graph member from the source provider.\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of the group. A descriptor referencing the scope (collection, project) in which the group should be created. If omitted, will be created in the scope of the enclosing account or organization.x\n"
                    },
                    "subjectKind": {
                        "type": "string",
                        "description": "This field identifies the type of the graph subject (ex: Group, Scope, User).\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "This url is the full route to the source resource of this graph subject.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Identities/group:Group"
                }
            ]
        },
        "azuredevops:index/groupMembership:GroupMembership": {
            "description": "Manages group membership within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {});\nconst user = new azuredevops.User(\"user\", {principalName: \"foo@contoso.com\"});\nconst group = azuredevops.getGroupOutput({\n    projectId: project.id,\n    name: \"Build Administrators\",\n});\nconst membership = new azuredevops.GroupMembership(\"membership\", {\n    group: group.apply(group =\u003e group.descriptor),\n    members: [user.descriptor],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\")\nuser = azuredevops.User(\"user\", principal_name=\"foo@contoso.com\")\ngroup = azuredevops.get_group_output(project_id=project.id,\n    name=\"Build Administrators\")\nmembership = azuredevops.GroupMembership(\"membership\",\n    group=group.descriptor,\n    members=[user.descriptor])\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n        });\n        var user = new AzureDevOps.User(\"user\", new AzureDevOps.UserArgs\n        {\n            PrincipalName = \"foo@contoso.com\",\n        });\n        var @group = AzureDevOps.GetGroup.Invoke(new AzureDevOps.GetGroupInvokeArgs\n        {\n            ProjectId = project.Id,\n            Name = \"Build Administrators\",\n        });\n        var membership = new AzureDevOps.GroupMembership(\"membership\", new AzureDevOps.GroupMembershipArgs\n        {\n            Group = @group.Apply(@group =\u003e @group.Descriptor),\n            Members = \n            {\n                user.Descriptor,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuser, err := azuredevops.NewUser(ctx, \"user\", \u0026azuredevops.UserArgs{\n\t\t\tPrincipalName: pulumi.String(\"foo@contoso.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgroup := azuredevops.LookupGroupOutput(ctx, GetGroupOutputArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tName:      pulumi.String(\"Build Administrators\"),\n\t\t}, nil)\n\t\t_, err = azuredevops.NewGroupMembership(ctx, \"membership\", \u0026azuredevops.GroupMembershipArgs{\n\t\t\tGroup: group.ApplyT(func(group GetGroupResult) (string, error) {\n\t\t\t\treturn group.Descriptor, nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tMembers: pulumi.StringArray{\n\t\t\t\tuser.Descriptor,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Memberships](https://docs.microsoft.com/en-us/rest/api/azure/devops/graph/memberships?view=azure-devops-rest-5.0)\n\n## PAT Permissions Required\n\n- **Deployment Groups**: Read \u0026 Manage\n\n\n## Import\n\nNot supported. ",
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The descriptor of the group being managed.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of user or group descriptors that will become members of the group.\n\u003e NOTE: It's possible to define group members both within the `azuredevops.GroupMembership resource` via the members block and by using the `azuredevops.Group` resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "The mode how the resource manages group members.\n- `mode == add`: the resource will ensure that all specified members will be part of the referenced group\n- `mode == overwrite`: the resource will replace all existing members with the members specified within the `members` block\n\u003e NOTE: To clear all members from a group, specify an empty list of descriptors in the `members` attribute and set the `mode` member to `overwrite`.\n"
                }
            },
            "required": [
                "group",
                "members"
            ],
            "inputProperties": {
                "group": {
                    "type": "string",
                    "description": "The descriptor of the group being managed.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of user or group descriptors that will become members of the group.\n\u003e NOTE: It's possible to define group members both within the `azuredevops.GroupMembership resource` via the members block and by using the `azuredevops.Group` resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "The mode how the resource manages group members.\n- `mode == add`: the resource will ensure that all specified members will be part of the referenced group\n- `mode == overwrite`: the resource will replace all existing members with the members specified within the `members` block\n\u003e NOTE: To clear all members from a group, specify an empty list of descriptors in the `members` attribute and set the `mode` member to `overwrite`.\n"
                }
            },
            "requiredInputs": [
                "group",
                "members"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupMembership resources.\n",
                "properties": {
                    "group": {
                        "type": "string",
                        "description": "The descriptor of the group being managed.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of user or group descriptors that will become members of the group.\n\u003e NOTE: It's possible to define group members both within the `azuredevops.GroupMembership resource` via the members block and by using the `azuredevops.Group` resource. However it's not possible to use both methods to manage group members, since there'll be conflicts.\n"
                    },
                    "mode": {
                        "type": "string",
                        "description": "The mode how the resource manages group members.\n- `mode == add`: the resource will ensure that all specified members will be part of the referenced group\n- `mode == overwrite`: the resource will replace all existing members with the members specified within the `members` block\n\u003e NOTE: To clear all members from a group, specify an empty list of descriptors in the `members` attribute and set the `mode` member to `overwrite`.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Identities/groupMembership:GroupMembership"
                }
            ]
        },
        "azuredevops:index/iterativePermissions:IterativePermissions": {
            "description": "Manages permissions for an Iteration (Sprint)\n\n\u003e **Note** Permissions can be assigned to group principals and not to single user principals.\n\n## Permission levels\n\nPermission for Iterations within Azure DevOps can be applied on two different levels.\nThose levels are reflected by specifying (or omitting) values for the arguments `project_id` and `path`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"Managed by Terraform\",\n});\nconst project-readers = azuredevops.getGroupOutput({\n    projectId: project.id,\n    name: \"Readers\",\n});\nconst root_permissions = new azuredevops.IterativePermissions(\"root-permissions\", {\n    projectId: project.id,\n    principal: azuredevops_group[\"project-readers\"].id,\n    permissions: {\n        CREATE_CHILDREN: \"Deny\",\n        GENERIC_READ: \"NotSet\",\n        DELETE: \"Deny\",\n    },\n});\nconst iteration_permissions = new azuredevops.IterativePermissions(\"iteration-permissions\", {\n    projectId: project.id,\n    principal: azuredevops_group[\"project-readers\"].id,\n    path: \"Iteration 1\",\n    permissions: {\n        CREATE_CHILDREN: \"Allow\",\n        GENERIC_READ: \"NotSet\",\n        DELETE: \"Allow\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"Managed by Terraform\")\nproject_readers = azuredevops.get_group_output(project_id=project.id,\n    name=\"Readers\")\nroot_permissions = azuredevops.IterativePermissions(\"root-permissions\",\n    project_id=project.id,\n    principal=azuredevops_group[\"project-readers\"][\"id\"],\n    permissions={\n        \"CREATE_CHILDREN\": \"Deny\",\n        \"GENERIC_READ\": \"NotSet\",\n        \"DELETE\": \"Deny\",\n    })\niteration_permissions = azuredevops.IterativePermissions(\"iteration-permissions\",\n    project_id=project.id,\n    principal=azuredevops_group[\"project-readers\"][\"id\"],\n    path=\"Iteration 1\",\n    permissions={\n        \"CREATE_CHILDREN\": \"Allow\",\n        \"GENERIC_READ\": \"NotSet\",\n        \"DELETE\": \"Allow\",\n    })\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            WorkItemTemplate = \"Agile\",\n            VersionControl = \"Git\",\n            Visibility = \"private\",\n            Description = \"Managed by Terraform\",\n        });\n        var project_readers = AzureDevOps.GetGroup.Invoke(new AzureDevOps.GetGroupInvokeArgs\n        {\n            ProjectId = project.Id,\n            Name = \"Readers\",\n        });\n        var root_permissions = new AzureDevOps.IterativePermissions(\"root-permissions\", new AzureDevOps.IterativePermissionsArgs\n        {\n            ProjectId = project.Id,\n            Principal = azuredevops_group.Project_readers.Id,\n            Permissions = \n            {\n                { \"CREATE_CHILDREN\", \"Deny\" },\n                { \"GENERIC_READ\", \"NotSet\" },\n                { \"DELETE\", \"Deny\" },\n            },\n        });\n        var iteration_permissions = new AzureDevOps.IterativePermissions(\"iteration-permissions\", new AzureDevOps.IterativePermissionsArgs\n        {\n            ProjectId = project.Id,\n            Principal = azuredevops_group.Project_readers.Id,\n            Path = \"Iteration 1\",\n            Permissions = \n            {\n                { \"CREATE_CHILDREN\", \"Allow\" },\n                { \"GENERIC_READ\", \"NotSet\" },\n                { \"DELETE\", \"Allow\" },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = azuredevops.LookupGroupOutput(ctx, GetGroupOutputArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tName:      pulumi.String(\"Readers\"),\n\t\t}, nil)\n\t\t_, err = azuredevops.NewIterativePermissions(ctx, \"root-permissions\", \u0026azuredevops.IterativePermissionsArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tPrincipal: pulumi.Any(azuredevops_group.Project - readers.Id),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"CREATE_CHILDREN\": pulumi.String(\"Deny\"),\n\t\t\t\t\"GENERIC_READ\":    pulumi.String(\"NotSet\"),\n\t\t\t\t\"DELETE\":          pulumi.String(\"Deny\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewIterativePermissions(ctx, \"iteration-permissions\", \u0026azuredevops.IterativePermissionsArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tPrincipal: pulumi.Any(azuredevops_group.Project - readers.Id),\n\t\t\tPath:      pulumi.String(\"Iteration 1\"),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"CREATE_CHILDREN\": pulumi.String(\"Allow\"),\n\t\t\t\t\"GENERIC_READ\":    pulumi.String(\"NotSet\"),\n\t\t\t\t\"DELETE\":          pulumi.String(\"Allow\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Security](https://docs.microsoft.com/en-us/rest/api/azure/devops/security/?view=azure-devops-rest-5.1)\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: vso.security_manage - Grants the ability to read, write, and manage security permissions.\n\n\n## Import\n\nThe resource does not support import. ",
            "properties": {
                "path": {
                    "type": "string",
                    "description": "The name of the branch to assign the permissions.\n"
                },
                "permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "the permissions to assign. The following permissions are available.\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The **group** principal to assign the permissions.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project to assign the permissions.\n"
                },
                "replace": {
                    "type": "boolean",
                    "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`\n"
                }
            },
            "required": [
                "permissions",
                "principal",
                "projectId"
            ],
            "inputProperties": {
                "path": {
                    "type": "string",
                    "description": "The name of the branch to assign the permissions.\n"
                },
                "permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "the permissions to assign. The following permissions are available.\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The **group** principal to assign the permissions.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project to assign the permissions.\n"
                },
                "replace": {
                    "type": "boolean",
                    "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`\n"
                }
            },
            "requiredInputs": [
                "permissions",
                "principal",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IterativePermissions resources.\n",
                "properties": {
                    "path": {
                        "type": "string",
                        "description": "The name of the branch to assign the permissions.\n"
                    },
                    "permissions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "the permissions to assign. The following permissions are available.\n"
                    },
                    "principal": {
                        "type": "string",
                        "description": "The **group** principal to assign the permissions.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project to assign the permissions.\n"
                    },
                    "replace": {
                        "type": "boolean",
                        "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/pool:Pool": {
            "description": "Manages an agent pool within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst pool = new azuredevops.Pool(\"pool\", {\n    autoProvision: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\npool = azuredevops.Pool(\"pool\", auto_provision=False)\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var pool = new AzureDevOps.Pool(\"pool\", new AzureDevOps.PoolArgs\n        {\n            AutoProvision = false,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewPool(ctx, \"pool\", \u0026azuredevops.PoolArgs{\n\t\t\tAutoProvision: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Agent Pools](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/pools?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps Agent Pools can be imported using the agent pool ID, e.g.\n\n```sh\n $ pulumi import azuredevops:index/pool:Pool pool 42\n```\n\n ",
            "properties": {
                "autoProvision": {
                    "type": "boolean",
                    "description": "Specifies whether or not a queue should be automatically provisioned for each project collection. Defaults to `false`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the agent pool.\n"
                },
                "poolType": {
                    "type": "string",
                    "description": "Specifies whether the agent pool type is Automation or Deployment. Defaults to `automation`.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "autoProvision": {
                    "type": "boolean",
                    "description": "Specifies whether or not a queue should be automatically provisioned for each project collection. Defaults to `false`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the agent pool.\n"
                },
                "poolType": {
                    "type": "string",
                    "description": "Specifies whether the agent pool type is Automation or Deployment. Defaults to `automation`.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Pool resources.\n",
                "properties": {
                    "autoProvision": {
                        "type": "boolean",
                        "description": "Specifies whether or not a queue should be automatically provisioned for each project collection. Defaults to `false`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the agent pool.\n"
                    },
                    "poolType": {
                        "type": "string",
                        "description": "Specifies whether the agent pool type is Automation or Deployment. Defaults to `automation`.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Agent/pool:Pool"
                }
            ]
        },
        "azuredevops:index/project:Project": {
            "description": "Manages a project within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    description: \"Test Project Description\",\n    features: {\n        artifacts: \"disabled\",\n        testplans: \"disabled\",\n    },\n    versionControl: \"Git\",\n    visibility: \"private\",\n    workItemTemplate: \"Agile\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    description=\"Test Project Description\",\n    features={\n        \"artifacts\": \"disabled\",\n        \"testplans\": \"disabled\",\n    },\n    version_control=\"Git\",\n    visibility=\"private\",\n    work_item_template=\"Agile\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Description = \"Test Project Description\",\n            Features = \n            {\n                { \"artifacts\", \"disabled\" },\n                { \"testplans\", \"disabled\" },\n            },\n            VersionControl = \"Git\",\n            Visibility = \"private\",\n            WorkItemTemplate = \"Agile\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tDescription: pulumi.String(\"Test Project Description\"),\n\t\t\tFeatures: pulumi.StringMap{\n\t\t\t\t\"artifacts\": pulumi.String(\"disabled\"),\n\t\t\t\t\"testplans\": pulumi.String(\"disabled\"),\n\t\t\t},\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Projects](https://docs.microsoft.com/en-us/rest/api/azure/devops/core/projects?view=azure-devops-rest-5.1)\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: Read, Write, \u0026 Manage\n\n\n## Import\n\nAzure DevOps Projects can be imported using the project name or by the project Guid, e.g.\n\n```sh\n $ pulumi import azuredevops:index/project:Project project \"Test Project\"\n```\n\n or\n\n```sh\n $ pulumi import azuredevops:index/project:Project project 00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The Description of the Project.\n"
                },
                "features": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Defines the status (`enabled`, `disabled`) of the project features.  \nValid features are `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Project Name.\n"
                },
                "processTemplateId": {
                    "type": "string",
                    "description": "The Process Template ID used by the Project.\n"
                },
                "versionControl": {
                    "type": "string",
                    "description": "Specifies the version control system. Valid values: `Git` or `Tfvc`. Defaults to `Git`.\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Specifies the visibility of the Project. Valid values: `private` or `public`. Defaults to `private`.\n"
                },
                "workItemTemplate": {
                    "type": "string",
                    "description": "Specifies the work item template. Valid values: `Agile`, `Basic`, `CMMI` or `Scrum`. Defaults to `Agile`.\n"
                }
            },
            "required": [
                "name",
                "processTemplateId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The Description of the Project.\n"
                },
                "features": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Defines the status (`enabled`, `disabled`) of the project features.  \nValid features are `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Project Name.\n"
                },
                "versionControl": {
                    "type": "string",
                    "description": "Specifies the version control system. Valid values: `Git` or `Tfvc`. Defaults to `Git`.\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Specifies the visibility of the Project. Valid values: `private` or `public`. Defaults to `private`.\n"
                },
                "workItemTemplate": {
                    "type": "string",
                    "description": "Specifies the work item template. Valid values: `Agile`, `Basic`, `CMMI` or `Scrum`. Defaults to `Agile`.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The Description of the Project.\n"
                    },
                    "features": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Defines the status (`enabled`, `disabled`) of the project features.  \nValid features are `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Project Name.\n"
                    },
                    "processTemplateId": {
                        "type": "string",
                        "description": "The Process Template ID used by the Project.\n"
                    },
                    "versionControl": {
                        "type": "string",
                        "description": "Specifies the version control system. Valid values: `Git` or `Tfvc`. Defaults to `Git`.\n"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "Specifies the visibility of the Project. Valid values: `private` or `public`. Defaults to `private`.\n"
                    },
                    "workItemTemplate": {
                        "type": "string",
                        "description": "Specifies the work item template. Valid values: `Agile`, `Basic`, `CMMI` or `Scrum`. Defaults to `Agile`.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Core/project:Project"
                }
            ]
        },
        "azuredevops:index/projectFeatures:ProjectFeatures": {
            "description": "Manages features for Azure DevOps projects\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst tf-project-test-001 = azuredevops.getProject({\n    name: \"Test Project\",\n});\nconst my_project_features = new azuredevops.ProjectFeatures(\"my-project-features\", {\n    projectId: tf_project_test_001.then(tf_project_test_001 =\u003e tf_project_test_001.id),\n    features: {\n        testplans: \"disabled\",\n        artifacts: \"enabled\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\ntf_project_test_001 = azuredevops.get_project(name=\"Test Project\")\nmy_project_features = azuredevops.ProjectFeatures(\"my-project-features\",\n    project_id=tf_project_test_001.id,\n    features={\n        \"testplans\": \"disabled\",\n        \"artifacts\": \"enabled\",\n    })\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var tf_project_test_001 = Output.Create(AzureDevOps.GetProject.InvokeAsync(new AzureDevOps.GetProjectArgs\n        {\n            Name = \"Test Project\",\n        }));\n        var my_project_features = new AzureDevOps.ProjectFeatures(\"my-project-features\", new AzureDevOps.ProjectFeaturesArgs\n        {\n            ProjectId = tf_project_test_001.Apply(tf_project_test_001 =\u003e tf_project_test_001.Id),\n            Features = \n            {\n                { \"testplans\", \"disabled\" },\n                { \"artifacts\", \"enabled\" },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttf_project_test_001, err := azuredevops.LookupProject(ctx, \u0026GetProjectArgs{\n\t\t\tName: pulumi.StringRef(\"Test Project\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewProjectFeatures(ctx, \"my-project-features\", \u0026azuredevops.ProjectFeaturesArgs{\n\t\t\tProjectId: pulumi.String(tf_project_test_001.Id),\n\t\t\tFeatures: pulumi.StringMap{\n\t\t\t\t\"testplans\": pulumi.String(\"disabled\"),\n\t\t\t\t\"artifacts\": pulumi.String(\"enabled\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\nNo official documentation available\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: Read, Write, \u0026 Manage\n\n\n## Import\n\nAzure DevOps feature settings can be imported using the project id, e.g.\n\n```sh\n $ pulumi import azuredevops:index/projectFeatures:ProjectFeatures project_id 00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "features": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Defines the status (`enabled`, `disabled`) of the project features.  \nValid features `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`\n"
                },
                "projectId": {
                    "type": "string"
                }
            },
            "required": [
                "features",
                "projectId"
            ],
            "inputProperties": {
                "features": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Defines the status (`enabled`, `disabled`) of the project features.  \nValid features `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`\n"
                },
                "projectId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "features",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectFeatures resources.\n",
                "properties": {
                    "features": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Defines the status (`enabled`, `disabled`) of the project features.  \nValid features `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`\n"
                    },
                    "projectId": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Core/projectFeatures:ProjectFeatures"
                }
            ]
        },
        "azuredevops:index/projectPermissions:ProjectPermissions": {
            "description": "Manages permissions for a AzureDevOps project\n\n\u003e **Note** Permissions can be assigned to group principals and not to single user principals.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    description: \"Test Project Description\",\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst project-readers = azuredevops.getGroupOutput({\n    projectId: project.id,\n    name: \"Readers\",\n});\nconst project_perm = new azuredevops.ProjectPermissions(\"project-perm\", {\n    projectId: project.id,\n    principal: project_readers.apply(project_readers =\u003e project_readers.id),\n    permissions: {\n        DELETE: \"Deny\",\n        EDIT_BUILD_STATUS: \"NotSet\",\n        WORK_ITEM_MOVE: \"Allow\",\n        DELETE_TEST_RESULTS: \"Deny\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    description=\"Test Project Description\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nproject_readers = azuredevops.get_group_output(project_id=project.id,\n    name=\"Readers\")\nproject_perm = azuredevops.ProjectPermissions(\"project-perm\",\n    project_id=project.id,\n    principal=project_readers.id,\n    permissions={\n        \"DELETE\": \"Deny\",\n        \"EDIT_BUILD_STATUS\": \"NotSet\",\n        \"WORK_ITEM_MOVE\": \"Allow\",\n        \"DELETE_TEST_RESULTS\": \"Deny\",\n    })\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Description = \"Test Project Description\",\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var project_readers = AzureDevOps.GetGroup.Invoke(new AzureDevOps.GetGroupInvokeArgs\n        {\n            ProjectId = project.Id,\n            Name = \"Readers\",\n        });\n        var project_perm = new AzureDevOps.ProjectPermissions(\"project-perm\", new AzureDevOps.ProjectPermissionsArgs\n        {\n            ProjectId = project.Id,\n            Principal = project_readers.Apply(project_readers =\u003e project_readers.Id),\n            Permissions = \n            {\n                { \"DELETE\", \"Deny\" },\n                { \"EDIT_BUILD_STATUS\", \"NotSet\" },\n                { \"WORK_ITEM_MOVE\", \"Allow\" },\n                { \"DELETE_TEST_RESULTS\", \"Deny\" },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tDescription:      pulumi.String(\"Test Project Description\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tproject_readers := azuredevops.LookupGroupOutput(ctx, GetGroupOutputArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tName:      pulumi.String(\"Readers\"),\n\t\t}, nil)\n\t\t_, err = azuredevops.NewProjectPermissions(ctx, \"project-perm\", \u0026azuredevops.ProjectPermissionsArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tPrincipal: project_readers.ApplyT(func(project_readers GetGroupResult) (string, error) {\n\t\t\t\treturn project_readers.Id, nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"DELETE\":              pulumi.String(\"Deny\"),\n\t\t\t\t\"EDIT_BUILD_STATUS\":   pulumi.String(\"NotSet\"),\n\t\t\t\t\"WORK_ITEM_MOVE\":      pulumi.String(\"Allow\"),\n\t\t\t\t\"DELETE_TEST_RESULTS\": pulumi.String(\"Deny\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Security](https://docs.microsoft.com/en-us/rest/api/azure/devops/security/?view=azure-devops-rest-5.1)\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: vso.security_manage - Grants the ability to read, write, and manage security permissions.\n\n\n## Import\n\nThe resource does not support import. ",
            "properties": {
                "permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "the permissions to assign. The following permissions are available\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The **group** principal to assign the permissions.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project to assign the permissions.\n"
                },
                "replace": {
                    "type": "boolean",
                    "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`\n"
                }
            },
            "required": [
                "permissions",
                "principal",
                "projectId"
            ],
            "inputProperties": {
                "permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "the permissions to assign. The following permissions are available\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The **group** principal to assign the permissions.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project to assign the permissions.\n"
                },
                "replace": {
                    "type": "boolean",
                    "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`\n"
                }
            },
            "requiredInputs": [
                "permissions",
                "principal",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectPermissions resources.\n",
                "properties": {
                    "permissions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "the permissions to assign. The following permissions are available\n"
                    },
                    "principal": {
                        "type": "string",
                        "description": "The **group** principal to assign the permissions.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project to assign the permissions.\n"
                    },
                    "replace": {
                        "type": "boolean",
                        "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/queue:Queue": {
            "description": "Manages an agent queue within Azure DevOps. In the UI, this is equivalent to adding an\nOrganization defined pool to a project.\n\nThe created queue is not authorized for use by all pipelines in the project. However,\nthe `azuredevops.ResourceAuthorization` resource can be used to grant authorization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {});\nconst pool = azuredevops.getPool({\n    name: \"contoso-pool\",\n});\nconst queue = new azuredevops.Queue(\"queue\", {\n    projectId: project.id,\n    agentPoolId: pool.then(pool =\u003e pool.id),\n});\n// Grant acccess to queue to all pipelines in the project\nconst auth = new azuredevops.ResourceAuthorization(\"auth\", {\n    projectId: project.id,\n    resourceId: queue.id,\n    type: \"queue\",\n    authorized: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\")\npool = azuredevops.get_pool(name=\"contoso-pool\")\nqueue = azuredevops.Queue(\"queue\",\n    project_id=project.id,\n    agent_pool_id=pool.id)\n# Grant acccess to queue to all pipelines in the project\nauth = azuredevops.ResourceAuthorization(\"auth\",\n    project_id=project.id,\n    resource_id=queue.id,\n    type=\"queue\",\n    authorized=True)\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n        });\n        var pool = Output.Create(AzureDevOps.GetPool.InvokeAsync(new AzureDevOps.GetPoolArgs\n        {\n            Name = \"contoso-pool\",\n        }));\n        var queue = new AzureDevOps.Queue(\"queue\", new AzureDevOps.QueueArgs\n        {\n            ProjectId = project.Id,\n            AgentPoolId = pool.Apply(pool =\u003e pool.Id),\n        });\n        // Grant acccess to queue to all pipelines in the project\n        var auth = new AzureDevOps.ResourceAuthorization(\"auth\", new AzureDevOps.ResourceAuthorizationArgs\n        {\n            ProjectId = project.Id,\n            ResourceId = queue.Id,\n            Type = \"queue\",\n            Authorized = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpool, err := azuredevops.LookupPool(ctx, \u0026GetPoolArgs{\n\t\t\tName: \"contoso-pool\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tqueue, err := azuredevops.NewQueue(ctx, \"queue\", \u0026azuredevops.QueueArgs{\n\t\t\tProjectId:   project.ID(),\n\t\t\tAgentPoolId: pulumi.String(pool.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewResourceAuthorization(ctx, \"auth\", \u0026azuredevops.ResourceAuthorizationArgs{\n\t\t\tProjectId:  project.ID(),\n\t\t\tResourceId: queue.ID(),\n\t\t\tType:       pulumi.String(\"queue\"),\n\t\t\tAuthorized: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Agent Queues](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/queues?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps Agent Pools can be imported using the project ID and agent queue ID, e.g.\n\n```sh\n $ pulumi import azuredevops:index/queue:Queue q 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "agentPoolId": {
                    "type": "integer",
                    "description": "The ID of the organization agent pool.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which to create the resource.\n"
                }
            },
            "required": [
                "agentPoolId",
                "projectId"
            ],
            "inputProperties": {
                "agentPoolId": {
                    "type": "integer",
                    "description": "The ID of the organization agent pool.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which to create the resource.\n"
                }
            },
            "requiredInputs": [
                "agentPoolId",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Queue resources.\n",
                "properties": {
                    "agentPoolId": {
                        "type": "integer",
                        "description": "The ID of the organization agent pool.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which to create the resource.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Agent/queue:Queue"
                }
            ]
        },
        "azuredevops:index/repositoryPolicyAuthorEmailPattern:RepositoryPolicyAuthorEmailPattern": {
            "description": "Manage author email pattern repository policy within Azure DevOps project.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    description: \"Managed by Terraform\",\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst git = new azuredevops.Git(\"git\", {\n    projectId: project.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst repositoryPolicyAuthorEmailPattern = new azuredevops.RepositoryPolicyAuthorEmailPattern(\"repositoryPolicyAuthorEmailPattern\", {\n    projectId: project.id,\n    enabled: true,\n    blocking: true,\n    authorEmailPatterns: [\n        \"user1@test.com\",\n        \"user2@test.com\",\n    ],\n    repositoryIds: [git.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    description=\"Managed by Terraform\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\ngit = azuredevops.Git(\"git\",\n    project_id=project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nrepository_policy_author_email_pattern = azuredevops.RepositoryPolicyAuthorEmailPattern(\"repositoryPolicyAuthorEmailPattern\",\n    project_id=project.id,\n    enabled=True,\n    blocking=True,\n    author_email_patterns=[\n        \"user1@test.com\",\n        \"user2@test.com\",\n    ],\n    repository_ids=[git.id])\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Description = \"Managed by Terraform\",\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var git = new AzureDevOps.Git(\"git\", new AzureDevOps.GitArgs\n        {\n            ProjectId = project.Id,\n            Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n            {\n                InitType = \"Clean\",\n            },\n        });\n        var repositoryPolicyAuthorEmailPattern = new AzureDevOps.RepositoryPolicyAuthorEmailPattern(\"repositoryPolicyAuthorEmailPattern\", new AzureDevOps.RepositoryPolicyAuthorEmailPatternArgs\n        {\n            ProjectId = project.Id,\n            Enabled = true,\n            Blocking = true,\n            AuthorEmailPatterns = \n            {\n                \"user1@test.com\",\n                \"user2@test.com\",\n            },\n            RepositoryIds = \n            {\n                git.Id,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgit, err := azuredevops.NewGit(ctx, \"git\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tInitialization: \u0026GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewRepositoryPolicyAuthorEmailPattern(ctx, \"repositoryPolicyAuthorEmailPattern\", \u0026azuredevops.RepositoryPolicyAuthorEmailPatternArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t\tAuthorEmailPatterns: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"user1@test.com\"),\n\t\t\t\tpulumi.String(\"user2@test.com\"),\n\t\t\t},\n\t\t\tRepositoryIds: pulumi.StringArray{\n\t\t\t\tgit.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Set project level repository policy\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst repositoryPolicyAuthorEmailPattern = new azuredevops.RepositoryPolicyAuthorEmailPattern(\"repositoryPolicyAuthorEmailPattern\", {\n    projectId: azuredevops_project.p.id,\n    enabled: true,\n    blocking: true,\n    authorEmailPatterns: [\n        \"user1@test.com\",\n        \"user2@test.com\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nrepository_policy_author_email_pattern = azuredevops.RepositoryPolicyAuthorEmailPattern(\"repositoryPolicyAuthorEmailPattern\",\n    project_id=azuredevops_project[\"p\"][\"id\"],\n    enabled=True,\n    blocking=True,\n    author_email_patterns=[\n        \"user1@test.com\",\n        \"user2@test.com\",\n    ])\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var repositoryPolicyAuthorEmailPattern = new AzureDevOps.RepositoryPolicyAuthorEmailPattern(\"repositoryPolicyAuthorEmailPattern\", new AzureDevOps.RepositoryPolicyAuthorEmailPatternArgs\n        {\n            ProjectId = azuredevops_project.P.Id,\n            Enabled = true,\n            Blocking = true,\n            AuthorEmailPatterns = \n            {\n                \"user1@test.com\",\n                \"user2@test.com\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewRepositoryPolicyAuthorEmailPattern(ctx, \"repositoryPolicyAuthorEmailPattern\", \u0026azuredevops.RepositoryPolicyAuthorEmailPatternArgs{\n\t\t\tProjectId: pulumi.Any(azuredevops_project.P.Id),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t\tAuthorEmailPatterns: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"user1@test.com\"),\n\t\t\t\tpulumi.String(\"user2@test.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Policy Configurations](https://docs.microsoft.com/en-us/rest/api/azure/devops/policy/configurations/create?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps Branch Policies can be imported using the project ID and policy configuration ID\n\n```sh\n $ pulumi import azuredevops:index/repositoryPolicyAuthorEmailPattern:RepositoryPolicyAuthorEmailPattern p 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "authorEmailPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Block pushes with a commit author email that does not match the patterns. You can specify exact emails or use wildcards. \nEmail patterns prefixed with \"!\" are excluded. Order is important.\n"
                },
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "repositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                }
            },
            "required": [
                "authorEmailPatterns",
                "projectId"
            ],
            "inputProperties": {
                "authorEmailPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Block pushes with a commit author email that does not match the patterns. You can specify exact emails or use wildcards. \nEmail patterns prefixed with \"!\" are excluded. Order is important.\n"
                },
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "repositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                }
            },
            "requiredInputs": [
                "authorEmailPatterns",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryPolicyAuthorEmailPattern resources.\n",
                "properties": {
                    "authorEmailPatterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Block pushes with a commit author email that does not match the patterns. You can specify exact emails or use wildcards. \nEmail patterns prefixed with \"!\" are excluded. Order is important.\n"
                    },
                    "blocking": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the policy will be created.\n"
                    },
                    "repositoryIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/repositoryPolicyCaseEnforcement:RepositoryPolicyCaseEnforcement": {
            "description": "Manages a case enforcement repository policy within Azure DevOps project.   \n\n\u003e If both project and project policy are enabled, the project policy has high priority.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    description: \"Managed by Terraform\",\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst git = new azuredevops.Git(\"git\", {\n    projectId: project.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst repositoryPolicyCaseEnforcement = new azuredevops.RepositoryPolicyCaseEnforcement(\"repositoryPolicyCaseEnforcement\", {\n    projectId: project.id,\n    enabled: true,\n    blocking: true,\n    enforceConsistentCase: true,\n    repositoryIds: [git.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    description=\"Managed by Terraform\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\ngit = azuredevops.Git(\"git\",\n    project_id=project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nrepository_policy_case_enforcement = azuredevops.RepositoryPolicyCaseEnforcement(\"repositoryPolicyCaseEnforcement\",\n    project_id=project.id,\n    enabled=True,\n    blocking=True,\n    enforce_consistent_case=True,\n    repository_ids=[git.id])\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Description = \"Managed by Terraform\",\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var git = new AzureDevOps.Git(\"git\", new AzureDevOps.GitArgs\n        {\n            ProjectId = project.Id,\n            Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n            {\n                InitType = \"Clean\",\n            },\n        });\n        var repositoryPolicyCaseEnforcement = new AzureDevOps.RepositoryPolicyCaseEnforcement(\"repositoryPolicyCaseEnforcement\", new AzureDevOps.RepositoryPolicyCaseEnforcementArgs\n        {\n            ProjectId = project.Id,\n            Enabled = true,\n            Blocking = true,\n            EnforceConsistentCase = true,\n            RepositoryIds = \n            {\n                git.Id,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgit, err := azuredevops.NewGit(ctx, \"git\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tInitialization: \u0026GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewRepositoryPolicyCaseEnforcement(ctx, \"repositoryPolicyCaseEnforcement\", \u0026azuredevops.RepositoryPolicyCaseEnforcementArgs{\n\t\t\tProjectId:             project.ID(),\n\t\t\tEnabled:               pulumi.Bool(true),\n\t\t\tBlocking:              pulumi.Bool(true),\n\t\t\tEnforceConsistentCase: pulumi.Bool(true),\n\t\t\tRepositoryIds: pulumi.StringArray{\n\t\t\t\tgit.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n# Set project level repository policy\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst repositoryPolicyCaseEnforcement = new azuredevops.RepositoryPolicyCaseEnforcement(\"repositoryPolicyCaseEnforcement\", {\n    projectId: azuredevops_project.p.id,\n    enabled: true,\n    blocking: true,\n    enforceConsistentCase: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nrepository_policy_case_enforcement = azuredevops.RepositoryPolicyCaseEnforcement(\"repositoryPolicyCaseEnforcement\",\n    project_id=azuredevops_project[\"p\"][\"id\"],\n    enabled=True,\n    blocking=True,\n    enforce_consistent_case=True)\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var repositoryPolicyCaseEnforcement = new AzureDevOps.RepositoryPolicyCaseEnforcement(\"repositoryPolicyCaseEnforcement\", new AzureDevOps.RepositoryPolicyCaseEnforcementArgs\n        {\n            ProjectId = azuredevops_project.P.Id,\n            Enabled = true,\n            Blocking = true,\n            EnforceConsistentCase = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewRepositoryPolicyCaseEnforcement(ctx, \"repositoryPolicyCaseEnforcement\", \u0026azuredevops.RepositoryPolicyCaseEnforcementArgs{\n\t\t\tProjectId:             pulumi.Any(azuredevops_project.P.Id),\n\t\t\tEnabled:               pulumi.Bool(true),\n\t\t\tBlocking:              pulumi.Bool(true),\n\t\t\tEnforceConsistentCase: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Policy Configurations](https://docs.microsoft.com/en-us/rest/api/azure/devops/policy/configurations/create?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps repository policies can be imported using the projectID/policyID or projectName/policyID\n\n```sh\n $ pulumi import azuredevops:index/repositoryPolicyCaseEnforcement:RepositoryPolicyCaseEnforcement p 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "enforceConsistentCase": {
                    "type": "boolean",
                    "description": "Avoid case-sensitivity conflicts by blocking pushes that change name casing on files, folders, branches, and tags.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "repositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                }
            },
            "required": [
                "enforceConsistentCase",
                "projectId"
            ],
            "inputProperties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "enforceConsistentCase": {
                    "type": "boolean",
                    "description": "Avoid case-sensitivity conflicts by blocking pushes that change name casing on files, folders, branches, and tags.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "repositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                }
            },
            "requiredInputs": [
                "enforceConsistentCase",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryPolicyCaseEnforcement resources.\n",
                "properties": {
                    "blocking": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                    },
                    "enforceConsistentCase": {
                        "type": "boolean",
                        "description": "Avoid case-sensitivity conflicts by blocking pushes that change name casing on files, folders, branches, and tags.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the policy will be created.\n"
                    },
                    "repositoryIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/repositoryPolicyCheckCredentials:RepositoryPolicyCheckCredentials": {
            "description": "Manage a credentials check repository policy within Azure DevOps project. Block pushes that introduce files, folders, or branch names that include platform reserved names or incompatible characters.\n\n\u003e If both project and project policy are enabled, the project policy has high priority.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    description: \"Managed by Terraform\",\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst git = new azuredevops.Git(\"git\", {\n    projectId: project.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst repositoryPolicyCheckCredentials = new azuredevops.RepositoryPolicyCheckCredentials(\"repositoryPolicyCheckCredentials\", {\n    projectId: project.id,\n    enabled: true,\n    blocking: true,\n    repositoryIds: [git.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    description=\"Managed by Terraform\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\ngit = azuredevops.Git(\"git\",\n    project_id=project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nrepository_policy_check_credentials = azuredevops.RepositoryPolicyCheckCredentials(\"repositoryPolicyCheckCredentials\",\n    project_id=project.id,\n    enabled=True,\n    blocking=True,\n    repository_ids=[git.id])\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Description = \"Managed by Terraform\",\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var git = new AzureDevOps.Git(\"git\", new AzureDevOps.GitArgs\n        {\n            ProjectId = project.Id,\n            Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n            {\n                InitType = \"Clean\",\n            },\n        });\n        var repositoryPolicyCheckCredentials = new AzureDevOps.RepositoryPolicyCheckCredentials(\"repositoryPolicyCheckCredentials\", new AzureDevOps.RepositoryPolicyCheckCredentialsArgs\n        {\n            ProjectId = project.Id,\n            Enabled = true,\n            Blocking = true,\n            RepositoryIds = \n            {\n                git.Id,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgit, err := azuredevops.NewGit(ctx, \"git\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tInitialization: \u0026GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewRepositoryPolicyCheckCredentials(ctx, \"repositoryPolicyCheckCredentials\", \u0026azuredevops.RepositoryPolicyCheckCredentialsArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t\tRepositoryIds: pulumi.StringArray{\n\t\t\t\tgit.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n# Set project level repository policy\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst repositoryPolicyCheckCredentials = new azuredevops.RepositoryPolicyCheckCredentials(\"repositoryPolicyCheckCredentials\", {\n    projectId: azuredevops_project.p.id,\n    enabled: true,\n    blocking: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nrepository_policy_check_credentials = azuredevops.RepositoryPolicyCheckCredentials(\"repositoryPolicyCheckCredentials\",\n    project_id=azuredevops_project[\"p\"][\"id\"],\n    enabled=True,\n    blocking=True)\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var repositoryPolicyCheckCredentials = new AzureDevOps.RepositoryPolicyCheckCredentials(\"repositoryPolicyCheckCredentials\", new AzureDevOps.RepositoryPolicyCheckCredentialsArgs\n        {\n            ProjectId = azuredevops_project.P.Id,\n            Enabled = true,\n            Blocking = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewRepositoryPolicyCheckCredentials(ctx, \"repositoryPolicyCheckCredentials\", \u0026azuredevops.RepositoryPolicyCheckCredentialsArgs{\n\t\t\tProjectId: pulumi.Any(azuredevops_project.P.Id),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Policy Configurations](https://docs.microsoft.com/en-us/rest/api/azure/devops/policy/configurations/create?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps repository policies can be imported using the projectID/policyID or projectName/policyID\n\n```sh\n $ pulumi import azuredevops:index/repositoryPolicyCheckCredentials:RepositoryPolicyCheckCredentials p 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "repositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                }
            },
            "required": [
                "projectId"
            ],
            "inputProperties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "repositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryPolicyCheckCredentials resources.\n",
                "properties": {
                    "blocking": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the policy will be created.\n"
                    },
                    "repositoryIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/repositoryPolicyFilePathPattern:RepositoryPolicyFilePathPattern": {
            "description": "Manage a file path pattern repository policy within Azure DevOps project.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    description: \"Managed by Terraform\",\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst git = new azuredevops.Git(\"git\", {\n    projectId: project.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst repositoryPolicyFilePathPattern = new azuredevops.RepositoryPolicyFilePathPattern(\"repositoryPolicyFilePathPattern\", {\n    projectId: project.id,\n    enabled: true,\n    blocking: true,\n    filepathPatterns: [\n        \"*.go\",\n        \"/home/test/*.ts\",\n    ],\n    repositoryIds: [git.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    description=\"Managed by Terraform\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\ngit = azuredevops.Git(\"git\",\n    project_id=project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nrepository_policy_file_path_pattern = azuredevops.RepositoryPolicyFilePathPattern(\"repositoryPolicyFilePathPattern\",\n    project_id=project.id,\n    enabled=True,\n    blocking=True,\n    filepath_patterns=[\n        \"*.go\",\n        \"/home/test/*.ts\",\n    ],\n    repository_ids=[git.id])\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Description = \"Managed by Terraform\",\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var git = new AzureDevOps.Git(\"git\", new AzureDevOps.GitArgs\n        {\n            ProjectId = project.Id,\n            Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n            {\n                InitType = \"Clean\",\n            },\n        });\n        var repositoryPolicyFilePathPattern = new AzureDevOps.RepositoryPolicyFilePathPattern(\"repositoryPolicyFilePathPattern\", new AzureDevOps.RepositoryPolicyFilePathPatternArgs\n        {\n            ProjectId = project.Id,\n            Enabled = true,\n            Blocking = true,\n            FilepathPatterns = \n            {\n                \"*.go\",\n                \"/home/test/*.ts\",\n            },\n            RepositoryIds = \n            {\n                git.Id,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgit, err := azuredevops.NewGit(ctx, \"git\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tInitialization: \u0026GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewRepositoryPolicyFilePathPattern(ctx, \"repositoryPolicyFilePathPattern\", \u0026azuredevops.RepositoryPolicyFilePathPatternArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t\tFilepathPatterns: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"*.go\"),\n\t\t\t\tpulumi.String(\"/home/test/*.ts\"),\n\t\t\t},\n\t\t\tRepositoryIds: pulumi.StringArray{\n\t\t\t\tgit.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n# Set project level repository policy\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst repositoryPolicyFilePathPattern = new azuredevops.RepositoryPolicyFilePathPattern(\"repositoryPolicyFilePathPattern\", {\n    projectId: azuredevops_project.p.id,\n    enabled: true,\n    blocking: true,\n    filepathPatterns: [\n        \"*.go\",\n        \"/home/test/*.ts\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nrepository_policy_file_path_pattern = azuredevops.RepositoryPolicyFilePathPattern(\"repositoryPolicyFilePathPattern\",\n    project_id=azuredevops_project[\"p\"][\"id\"],\n    enabled=True,\n    blocking=True,\n    filepath_patterns=[\n        \"*.go\",\n        \"/home/test/*.ts\",\n    ])\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var repositoryPolicyFilePathPattern = new AzureDevOps.RepositoryPolicyFilePathPattern(\"repositoryPolicyFilePathPattern\", new AzureDevOps.RepositoryPolicyFilePathPatternArgs\n        {\n            ProjectId = azuredevops_project.P.Id,\n            Enabled = true,\n            Blocking = true,\n            FilepathPatterns = \n            {\n                \"*.go\",\n                \"/home/test/*.ts\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewRepositoryPolicyFilePathPattern(ctx, \"repositoryPolicyFilePathPattern\", \u0026azuredevops.RepositoryPolicyFilePathPatternArgs{\n\t\t\tProjectId: pulumi.Any(azuredevops_project.P.Id),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t\tFilepathPatterns: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"*.go\"),\n\t\t\t\tpulumi.String(\"/home/test/*.ts\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Policy Configurations](https://docs.microsoft.com/en-us/rest/api/azure/devops/policy/configurations/create?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps repository policies can be imported using the projectID/policyID or projectName/policyID\n\n```sh\n $ pulumi import azuredevops:index/repositoryPolicyFilePathPattern:RepositoryPolicyFilePathPattern p 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "filepathPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Block pushes from introducing file paths that match the following patterns. Exact paths begin with \"/\". You can specify exact paths and wildcards. You can also specify multiple paths using \";\" as a separator. Paths prefixed with \"!\" are excluded. Order is important.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "repositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                }
            },
            "required": [
                "filepathPatterns",
                "projectId"
            ],
            "inputProperties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "filepathPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Block pushes from introducing file paths that match the following patterns. Exact paths begin with \"/\". You can specify exact paths and wildcards. You can also specify multiple paths using \";\" as a separator. Paths prefixed with \"!\" are excluded. Order is important.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "repositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                }
            },
            "requiredInputs": [
                "filepathPatterns",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryPolicyFilePathPattern resources.\n",
                "properties": {
                    "blocking": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                    },
                    "filepathPatterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Block pushes from introducing file paths that match the following patterns. Exact paths begin with \"/\". You can specify exact paths and wildcards. You can also specify multiple paths using \";\" as a separator. Paths prefixed with \"!\" are excluded. Order is important.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the policy will be created.\n"
                    },
                    "repositoryIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/repositoryPolicyMaxFileSize:RepositoryPolicyMaxFileSize": {
            "description": "Manage a max file size repository policy within Azure DevOps project.\n\n\u003e If both project and project policy are enabled, the repository policy has high priority.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    description: \"Managed by Terraform\",\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst git = new azuredevops.Git(\"git\", {\n    projectId: project.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst repositoryPolicyMaxFileSize = new azuredevops.RepositoryPolicyMaxFileSize(\"repositoryPolicyMaxFileSize\", {\n    projectId: project.id,\n    enabled: true,\n    blocking: true,\n    maxFileSize: 1,\n    repositoryIds: [git.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    description=\"Managed by Terraform\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\ngit = azuredevops.Git(\"git\",\n    project_id=project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nrepository_policy_max_file_size = azuredevops.RepositoryPolicyMaxFileSize(\"repositoryPolicyMaxFileSize\",\n    project_id=project.id,\n    enabled=True,\n    blocking=True,\n    max_file_size=1,\n    repository_ids=[git.id])\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Description = \"Managed by Terraform\",\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var git = new AzureDevOps.Git(\"git\", new AzureDevOps.GitArgs\n        {\n            ProjectId = project.Id,\n            Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n            {\n                InitType = \"Clean\",\n            },\n        });\n        var repositoryPolicyMaxFileSize = new AzureDevOps.RepositoryPolicyMaxFileSize(\"repositoryPolicyMaxFileSize\", new AzureDevOps.RepositoryPolicyMaxFileSizeArgs\n        {\n            ProjectId = project.Id,\n            Enabled = true,\n            Blocking = true,\n            MaxFileSize = 1,\n            RepositoryIds = \n            {\n                git.Id,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgit, err := azuredevops.NewGit(ctx, \"git\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tInitialization: \u0026GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewRepositoryPolicyMaxFileSize(ctx, \"repositoryPolicyMaxFileSize\", \u0026azuredevops.RepositoryPolicyMaxFileSizeArgs{\n\t\t\tProjectId:   project.ID(),\n\t\t\tEnabled:     pulumi.Bool(true),\n\t\t\tBlocking:    pulumi.Bool(true),\n\t\t\tMaxFileSize: pulumi.Int(1),\n\t\t\tRepositoryIds: pulumi.StringArray{\n\t\t\t\tgit.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n# Set project level repository policy\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst repositoryPolicyMaxFileSize = new azuredevops.RepositoryPolicyMaxFileSize(\"repositoryPolicyMaxFileSize\", {\n    projectId: azuredevops_project.p.id,\n    enabled: true,\n    blocking: true,\n    maxFileSize: 1,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nrepository_policy_max_file_size = azuredevops.RepositoryPolicyMaxFileSize(\"repositoryPolicyMaxFileSize\",\n    project_id=azuredevops_project[\"p\"][\"id\"],\n    enabled=True,\n    blocking=True,\n    max_file_size=1)\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var repositoryPolicyMaxFileSize = new AzureDevOps.RepositoryPolicyMaxFileSize(\"repositoryPolicyMaxFileSize\", new AzureDevOps.RepositoryPolicyMaxFileSizeArgs\n        {\n            ProjectId = azuredevops_project.P.Id,\n            Enabled = true,\n            Blocking = true,\n            MaxFileSize = 1,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewRepositoryPolicyMaxFileSize(ctx, \"repositoryPolicyMaxFileSize\", \u0026azuredevops.RepositoryPolicyMaxFileSizeArgs{\n\t\t\tProjectId:   pulumi.Any(azuredevops_project.P.Id),\n\t\t\tEnabled:     pulumi.Bool(true),\n\t\t\tBlocking:    pulumi.Bool(true),\n\t\t\tMaxFileSize: pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Policy Configurations](https://docs.microsoft.com/en-us/rest/api/azure/devops/policy/configurations/create?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps repository policies can be imported using the projectID/policyID or projectName/policyID\n\n```sh\n $ pulumi import azuredevops:index/repositoryPolicyMaxFileSize:RepositoryPolicyMaxFileSize p 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "maxFileSize": {
                    "type": "integer",
                    "description": "Block pushes that contain new or updated files larger than this limit. Available values is: `1, 2, 5, 10, 100, 200` (MB).\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "repositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                }
            },
            "required": [
                "maxFileSize",
                "projectId"
            ],
            "inputProperties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "maxFileSize": {
                    "type": "integer",
                    "description": "Block pushes that contain new or updated files larger than this limit. Available values is: `1, 2, 5, 10, 100, 200` (MB).\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "repositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                }
            },
            "requiredInputs": [
                "maxFileSize",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryPolicyMaxFileSize resources.\n",
                "properties": {
                    "blocking": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                    },
                    "maxFileSize": {
                        "type": "integer",
                        "description": "Block pushes that contain new or updated files larger than this limit. Available values is: `1, 2, 5, 10, 100, 200` (MB).\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the policy will be created.\n"
                    },
                    "repositoryIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/repositoryPolicyMaxPathLength:RepositoryPolicyMaxPathLength": {
            "description": "Manage a max path length repository policy within Azure DevOps project.\n\n\u003e If both project and project policy are enabled, the repository policy has high priority.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    description: \"Managed by Terraform\",\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst git = new azuredevops.Git(\"git\", {\n    projectId: project.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst repositoryPolicyMaxPathLength = new azuredevops.RepositoryPolicyMaxPathLength(\"repositoryPolicyMaxPathLength\", {\n    projectId: project.id,\n    enabled: true,\n    blocking: true,\n    maxPathLength: 500,\n    repositoryIds: [git.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    description=\"Managed by Terraform\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\ngit = azuredevops.Git(\"git\",\n    project_id=project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nrepository_policy_max_path_length = azuredevops.RepositoryPolicyMaxPathLength(\"repositoryPolicyMaxPathLength\",\n    project_id=project.id,\n    enabled=True,\n    blocking=True,\n    max_path_length=500,\n    repository_ids=[git.id])\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Description = \"Managed by Terraform\",\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var git = new AzureDevOps.Git(\"git\", new AzureDevOps.GitArgs\n        {\n            ProjectId = project.Id,\n            Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n            {\n                InitType = \"Clean\",\n            },\n        });\n        var repositoryPolicyMaxPathLength = new AzureDevOps.RepositoryPolicyMaxPathLength(\"repositoryPolicyMaxPathLength\", new AzureDevOps.RepositoryPolicyMaxPathLengthArgs\n        {\n            ProjectId = project.Id,\n            Enabled = true,\n            Blocking = true,\n            MaxPathLength = 500,\n            RepositoryIds = \n            {\n                git.Id,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgit, err := azuredevops.NewGit(ctx, \"git\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tInitialization: \u0026GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewRepositoryPolicyMaxPathLength(ctx, \"repositoryPolicyMaxPathLength\", \u0026azuredevops.RepositoryPolicyMaxPathLengthArgs{\n\t\t\tProjectId:     project.ID(),\n\t\t\tEnabled:       pulumi.Bool(true),\n\t\t\tBlocking:      pulumi.Bool(true),\n\t\t\tMaxPathLength: pulumi.Int(500),\n\t\t\tRepositoryIds: pulumi.StringArray{\n\t\t\t\tgit.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n# Set project level repository policy\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst repositoryPolicyMaxPathLength = new azuredevops.RepositoryPolicyMaxPathLength(\"repositoryPolicyMaxPathLength\", {\n    projectId: azuredevops_project.p.id,\n    enabled: true,\n    blocking: true,\n    maxPathLength: 1000,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nrepository_policy_max_path_length = azuredevops.RepositoryPolicyMaxPathLength(\"repositoryPolicyMaxPathLength\",\n    project_id=azuredevops_project[\"p\"][\"id\"],\n    enabled=True,\n    blocking=True,\n    max_path_length=1000)\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var repositoryPolicyMaxPathLength = new AzureDevOps.RepositoryPolicyMaxPathLength(\"repositoryPolicyMaxPathLength\", new AzureDevOps.RepositoryPolicyMaxPathLengthArgs\n        {\n            ProjectId = azuredevops_project.P.Id,\n            Enabled = true,\n            Blocking = true,\n            MaxPathLength = 1000,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewRepositoryPolicyMaxPathLength(ctx, \"repositoryPolicyMaxPathLength\", \u0026azuredevops.RepositoryPolicyMaxPathLengthArgs{\n\t\t\tProjectId:     pulumi.Any(azuredevops_project.P.Id),\n\t\t\tEnabled:       pulumi.Bool(true),\n\t\t\tBlocking:      pulumi.Bool(true),\n\t\t\tMaxPathLength: pulumi.Int(1000),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Policy Configurations](https://docs.microsoft.com/en-us/rest/api/azure/devops/policy/configurations/create?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps repository policies can be imported using the projectID/policyID or projectName/policyID\n\n```sh\n $ pulumi import azuredevops:index/repositoryPolicyMaxPathLength:RepositoryPolicyMaxPathLength p 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "maxPathLength": {
                    "type": "integer",
                    "description": "Block pushes that introduce paths that exceed the specified length.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "repositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                }
            },
            "required": [
                "maxPathLength",
                "projectId"
            ],
            "inputProperties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "maxPathLength": {
                    "type": "integer",
                    "description": "Block pushes that introduce paths that exceed the specified length.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "repositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                }
            },
            "requiredInputs": [
                "maxPathLength",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryPolicyMaxPathLength resources.\n",
                "properties": {
                    "blocking": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                    },
                    "maxPathLength": {
                        "type": "integer",
                        "description": "Block pushes that introduce paths that exceed the specified length.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the policy will be created.\n"
                    },
                    "repositoryIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/repositoryPolicyReservedNames:RepositoryPolicyReservedNames": {
            "description": "Manage a reserved names repository policy within Azure DevOps project. Block pushes that introduce files, folders, or branch names that include platform reserved names or incompatible characters.\n\n\u003e If both project and project policy are enabled, the project policy has high priority.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    description: \"Managed by Terraform\",\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst git = new azuredevops.Git(\"git\", {\n    projectId: project.id,\n    initialization: {\n        initType: \"Clean\",\n    },\n});\nconst repositoryPolicyReservedNames = new azuredevops.RepositoryPolicyReservedNames(\"repositoryPolicyReservedNames\", {\n    projectId: project.id,\n    enabled: true,\n    blocking: true,\n    repositoryIds: [git.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    description=\"Managed by Terraform\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\ngit = azuredevops.Git(\"git\",\n    project_id=project.id,\n    initialization=azuredevops.GitInitializationArgs(\n        init_type=\"Clean\",\n    ))\nrepository_policy_reserved_names = azuredevops.RepositoryPolicyReservedNames(\"repositoryPolicyReservedNames\",\n    project_id=project.id,\n    enabled=True,\n    blocking=True,\n    repository_ids=[git.id])\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Description = \"Managed by Terraform\",\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var git = new AzureDevOps.Git(\"git\", new AzureDevOps.GitArgs\n        {\n            ProjectId = project.Id,\n            Initialization = new AzureDevOps.Inputs.GitInitializationArgs\n            {\n                InitType = \"Clean\",\n            },\n        });\n        var repositoryPolicyReservedNames = new AzureDevOps.RepositoryPolicyReservedNames(\"repositoryPolicyReservedNames\", new AzureDevOps.RepositoryPolicyReservedNamesArgs\n        {\n            ProjectId = project.Id,\n            Enabled = true,\n            Blocking = true,\n            RepositoryIds = \n            {\n                git.Id,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgit, err := azuredevops.NewGit(ctx, \"git\", \u0026azuredevops.GitArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tInitialization: \u0026GitInitializationArgs{\n\t\t\t\tInitType: pulumi.String(\"Clean\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewRepositoryPolicyReservedNames(ctx, \"repositoryPolicyReservedNames\", \u0026azuredevops.RepositoryPolicyReservedNamesArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t\tRepositoryIds: pulumi.StringArray{\n\t\t\t\tgit.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n# Set project level repository policy\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst repositoryPolicyReservedNames = new azuredevops.RepositoryPolicyReservedNames(\"repositoryPolicyReservedNames\", {\n    projectId: azuredevops_project.p.id,\n    enabled: true,\n    blocking: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nrepository_policy_reserved_names = azuredevops.RepositoryPolicyReservedNames(\"repositoryPolicyReservedNames\",\n    project_id=azuredevops_project[\"p\"][\"id\"],\n    enabled=True,\n    blocking=True)\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var repositoryPolicyReservedNames = new AzureDevOps.RepositoryPolicyReservedNames(\"repositoryPolicyReservedNames\", new AzureDevOps.RepositoryPolicyReservedNamesArgs\n        {\n            ProjectId = azuredevops_project.P.Id,\n            Enabled = true,\n            Blocking = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewRepositoryPolicyReservedNames(ctx, \"repositoryPolicyReservedNames\", \u0026azuredevops.RepositoryPolicyReservedNamesArgs{\n\t\t\tProjectId: pulumi.Any(azuredevops_project.P.Id),\n\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\tBlocking:  pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Policy Configurations](https://docs.microsoft.com/en-us/rest/api/azure/devops/policy/configurations/create?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps repository policies can be imported using the projectID/policyID or projectName/policyID\n\n```sh\n $ pulumi import azuredevops:index/repositoryPolicyReservedNames:RepositoryPolicyReservedNames p 00000000-0000-0000-0000-000000000000/0\n```\n\n ",
            "properties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "repositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                }
            },
            "required": [
                "projectId"
            ],
            "inputProperties": {
                "blocking": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which the policy will be created.\n"
                },
                "repositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryPolicyReservedNames resources.\n",
                "properties": {
                    "blocking": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be blocking. Defaults to `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A flag indicating if the policy should be enabled. Defaults to `true`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which the policy will be created.\n"
                    },
                    "repositoryIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/resourceAuthorization:ResourceAuthorization": {
            "description": "Manages authorization of resources, e.g. for access in build pipelines.\n\nCurrently supported resources: service endpoint (aka service connection, endpoint).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {});\nconst bitbucketAccount = new azuredevops.ServiceEndpointBitBucket(\"bitbucketAccount\", {\n    projectId: project.id,\n    username: \"xxxx\",\n    password: \"xxxx\",\n    serviceEndpointName: \"test-bitbucket\",\n    description: \"test\",\n});\nconst auth = new azuredevops.ResourceAuthorization(\"auth\", {\n    projectId: project.id,\n    resourceId: bitbucketAccount.id,\n    authorized: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\")\nbitbucket_account = azuredevops.ServiceEndpointBitBucket(\"bitbucketAccount\",\n    project_id=project.id,\n    username=\"xxxx\",\n    password=\"xxxx\",\n    service_endpoint_name=\"test-bitbucket\",\n    description=\"test\")\nauth = azuredevops.ResourceAuthorization(\"auth\",\n    project_id=project.id,\n    resource_id=bitbucket_account.id,\n    authorized=True)\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n        });\n        var bitbucketAccount = new AzureDevOps.ServiceEndpointBitBucket(\"bitbucketAccount\", new AzureDevOps.ServiceEndpointBitBucketArgs\n        {\n            ProjectId = project.Id,\n            Username = \"xxxx\",\n            Password = \"xxxx\",\n            ServiceEndpointName = \"test-bitbucket\",\n            Description = \"test\",\n        });\n        var auth = new AzureDevOps.ResourceAuthorization(\"auth\", new AzureDevOps.ResourceAuthorizationArgs\n        {\n            ProjectId = project.Id,\n            ResourceId = bitbucketAccount.Id,\n            Authorized = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbitbucketAccount, err := azuredevops.NewServiceEndpointBitBucket(ctx, \"bitbucketAccount\", \u0026azuredevops.ServiceEndpointBitBucketArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tUsername:            pulumi.String(\"xxxx\"),\n\t\t\tPassword:            pulumi.String(\"xxxx\"),\n\t\t\tServiceEndpointName: pulumi.String(\"test-bitbucket\"),\n\t\t\tDescription:         pulumi.String(\"test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewResourceAuthorization(ctx, \"auth\", \u0026azuredevops.ResourceAuthorizationArgs{\n\t\t\tProjectId:  project.ID(),\n\t\t\tResourceId: bitbucketAccount.ID(),\n\t\t\tAuthorized: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Authorize Definition Resource](https://docs.microsoft.com/en-us/rest/api/azure/devops/build/resources/authorize%20definition%20resources?view=azure-devops-rest-5.1)\n",
            "properties": {
                "authorized": {
                    "type": "boolean",
                    "description": "Set to true to allow public access in the project. Type: boolean.\n"
                },
                "definitionId": {
                    "type": "integer",
                    "description": "The ID of the build definition to authorize. Type: string.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name. Type: string.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The ID of the resource to authorize. Type: string.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the resource to authorize. Type: string. Valid values: `endpoint`, `queue`, `variablegroup`. Default value: `endpoint`.\n"
                }
            },
            "required": [
                "authorized",
                "projectId",
                "resourceId"
            ],
            "inputProperties": {
                "authorized": {
                    "type": "boolean",
                    "description": "Set to true to allow public access in the project. Type: boolean.\n"
                },
                "definitionId": {
                    "type": "integer",
                    "description": "The ID of the build definition to authorize. Type: string.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name. Type: string.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The ID of the resource to authorize. Type: string.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the resource to authorize. Type: string. Valid values: `endpoint`, `queue`, `variablegroup`. Default value: `endpoint`.\n"
                }
            },
            "requiredInputs": [
                "authorized",
                "projectId",
                "resourceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ResourceAuthorization resources.\n",
                "properties": {
                    "authorized": {
                        "type": "boolean",
                        "description": "Set to true to allow public access in the project. Type: boolean.\n"
                    },
                    "definitionId": {
                        "type": "integer",
                        "description": "The ID of the build definition to authorize. Type: string.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name. Type: string.\n"
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "The ID of the resource to authorize. Type: string.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the resource to authorize. Type: string. Valid values: `endpoint`, `queue`, `variablegroup`. Default value: `endpoint`.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Security/resourceAuthorization:ResourceAuthorization"
                }
            ]
        },
        "azuredevops:index/serviceEndpointArtifactory:ServiceEndpointArtifactory": {
            "description": "Manages an Artifactory server endpoint within an Azure DevOps organization. \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst serviceendpoint = new azuredevops.ServiceEndpointArtifactory(\"serviceendpoint\", {\n    projectId: project.id,\n    serviceEndpointName: \"Sample Artifactory\",\n    description: \"Managed by Terraform\",\n    url: \"https://artifactory.my.com\",\n    authenticationToken: {\n        token: \"0000000000000000000000000000000000000000\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nserviceendpoint = azuredevops.ServiceEndpointArtifactory(\"serviceendpoint\",\n    project_id=project.id,\n    service_endpoint_name=\"Sample Artifactory\",\n    description=\"Managed by Terraform\",\n    url=\"https://artifactory.my.com\",\n    authentication_token=azuredevops.ServiceEndpointArtifactoryAuthenticationTokenArgs(\n        token=\"0000000000000000000000000000000000000000\",\n    ))\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var serviceendpoint = new AzureDevOps.ServiceEndpointArtifactory(\"serviceendpoint\", new AzureDevOps.ServiceEndpointArtifactoryArgs\n        {\n            ProjectId = project.Id,\n            ServiceEndpointName = \"Sample Artifactory\",\n            Description = \"Managed by Terraform\",\n            Url = \"https://artifactory.my.com\",\n            AuthenticationToken = new AzureDevOps.Inputs.ServiceEndpointArtifactoryAuthenticationTokenArgs\n            {\n                Token = \"0000000000000000000000000000000000000000\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointArtifactory(ctx, \"serviceendpoint\", \u0026azuredevops.ServiceEndpointArtifactoryArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample Artifactory\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t\tUrl:                 pulumi.String(\"https://artifactory.my.com\"),\n\t\t\tAuthenticationToken: \u0026ServiceEndpointArtifactoryAuthenticationTokenArgs{\n\t\t\t\tToken: pulumi.String(\"0000000000000000000000000000000000000000\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\nAlternatively a username and password may be used.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst serviceendpoint = new azuredevops.ServiceEndpointArtifactory(\"serviceendpoint\", {\n    projectId: azuredevops_project.project.id,\n    serviceEndpointName: \"Sample Artifactory\",\n    description: \"Managed by Terraform\",\n    url: \"https://artifactory.my.com\",\n    authenticationBasic: {\n        username: \"sampleuser\",\n        password: \"0000000000000000000000000000000000000000\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nserviceendpoint = azuredevops.ServiceEndpointArtifactory(\"serviceendpoint\",\n    project_id=azuredevops_project[\"project\"][\"id\"],\n    service_endpoint_name=\"Sample Artifactory\",\n    description=\"Managed by Terraform\",\n    url=\"https://artifactory.my.com\",\n    authentication_basic=azuredevops.ServiceEndpointArtifactoryAuthenticationBasicArgs(\n        username=\"sampleuser\",\n        password=\"0000000000000000000000000000000000000000\",\n    ))\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var serviceendpoint = new AzureDevOps.ServiceEndpointArtifactory(\"serviceendpoint\", new AzureDevOps.ServiceEndpointArtifactoryArgs\n        {\n            ProjectId = azuredevops_project.Project.Id,\n            ServiceEndpointName = \"Sample Artifactory\",\n            Description = \"Managed by Terraform\",\n            Url = \"https://artifactory.my.com\",\n            AuthenticationBasic = new AzureDevOps.Inputs.ServiceEndpointArtifactoryAuthenticationBasicArgs\n            {\n                Username = \"sampleuser\",\n                Password = \"0000000000000000000000000000000000000000\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewServiceEndpointArtifactory(ctx, \"serviceendpoint\", \u0026azuredevops.ServiceEndpointArtifactoryArgs{\n\t\t\tProjectId:           pulumi.Any(azuredevops_project.Project.Id),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample Artifactory\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t\tUrl:                 pulumi.String(\"https://artifactory.my.com\"),\n\t\t\tAuthenticationBasic: \u0026ServiceEndpointArtifactoryAuthenticationBasicArgs{\n\t\t\t\tUsername: pulumi.String(\"sampleuser\"),\n\t\t\t\tPassword: pulumi.String(\"0000000000000000000000000000000000000000\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service Connections](https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops\u0026tabs=yaml)\n* [Artifactory User Token](https://docs.artifactory.org/latest/user-guide/user-token/)\n\n\n## Import\n\nAzure DevOps Service Endpoint Artifactory can be imported using the **projectID/serviceEndpointID**, e.g.\n\n```sh\n $ pulumi import azuredevops:index/serviceEndpointArtifactory:ServiceEndpointArtifactory serviceendpoint 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authenticationBasic": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointArtifactoryAuthenticationBasic:ServiceEndpointArtifactoryAuthenticationBasic"
                },
                "authenticationToken": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointArtifactoryAuthenticationToken:ServiceEndpointArtifactoryAuthenticationToken"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The Service Endpoint description.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Artifactory server to connect with.\n"
                }
            },
            "required": [
                "authorization",
                "projectId",
                "serviceEndpointName",
                "url"
            ],
            "inputProperties": {
                "authenticationBasic": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointArtifactoryAuthenticationBasic:ServiceEndpointArtifactoryAuthenticationBasic"
                },
                "authenticationToken": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointArtifactoryAuthenticationToken:ServiceEndpointArtifactoryAuthenticationToken"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The Service Endpoint description.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Artifactory server to connect with.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "serviceEndpointName",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEndpointArtifactory resources.\n",
                "properties": {
                    "authenticationBasic": {
                        "$ref": "#/types/azuredevops:index/ServiceEndpointArtifactoryAuthenticationBasic:ServiceEndpointArtifactoryAuthenticationBasic"
                    },
                    "authenticationToken": {
                        "$ref": "#/types/azuredevops:index/ServiceEndpointArtifactoryAuthenticationToken:ServiceEndpointArtifactoryAuthenticationToken"
                    },
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string",
                        "description": "The Service Endpoint description.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the Artifactory server to connect with.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceEndpointAws:ServiceEndpointAws": {
            "description": "Manages a AWS service endpoint within Azure DevOps. Using this service endpoint requires you to first install [AWS Toolkit for Azure DevOps](https://marketplace.visualstudio.com/items?itemName=AmazonWebServices.aws-vsts-tools).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst serviceendpoint = new azuredevops.ServiceEndpointAws(\"serviceendpoint\", {\n    projectId: project.id,\n    serviceEndpointName: \"Sample AWS\",\n    description: \"Managed by AzureDevOps\",\n    accessKeyId: \"00000000-0000-0000-0000-000000000000\",\n    secretAccessKey: \"accesskey\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nserviceendpoint = azuredevops.ServiceEndpointAws(\"serviceendpoint\",\n    project_id=project.id,\n    service_endpoint_name=\"Sample AWS\",\n    description=\"Managed by AzureDevOps\",\n    access_key_id=\"00000000-0000-0000-0000-000000000000\",\n    secret_access_key=\"accesskey\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var serviceendpoint = new AzureDevOps.ServiceEndpointAws(\"serviceendpoint\", new AzureDevOps.ServiceEndpointAwsArgs\n        {\n            ProjectId = project.Id,\n            ServiceEndpointName = \"Sample AWS\",\n            Description = \"Managed by AzureDevOps\",\n            AccessKeyId = \"00000000-0000-0000-0000-000000000000\",\n            SecretAccessKey = \"accesskey\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointAws(ctx, \"serviceendpoint\", \u0026azuredevops.ServiceEndpointAwsArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample AWS\"),\n\t\t\tDescription:         pulumi.String(\"Managed by AzureDevOps\"),\n\t\t\tAccessKeyId:         pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tSecretAccessKey:     pulumi.String(\"accesskey\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [aws-toolkit-azure-devops](https://github.com/aws/aws-toolkit-azure-devops)\n* [Azure DevOps Service REST API 5.1 - Agent Pools](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps Service Endpoint AWS can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:index/serviceEndpointAws:ServiceEndpointAws azuredevops_serviceendpoint_aws.serviceendpoint 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "The AWS access key ID for signing programmatic requests.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "externalId": {
                    "type": "string",
                    "description": "A unique identifier that is used by third parties when assuming roles in their customers' accounts, aka cross-account role access.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "roleSessionName": {
                    "type": "string",
                    "description": "Optional identifier for the assumed role session.\n"
                },
                "roleToAssume": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) of the role to assume.\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The AWS secret access key for signing programmatic requests.\n"
                },
                "secretAccessKeyHash": {
                    "type": "string",
                    "description": "A bcrypted hash of the attribute 'secret_access_key'\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "sessionToken": {
                    "type": "string",
                    "description": "The AWS session token for signing programmatic requests.\n"
                },
                "sessionTokenHash": {
                    "type": "string",
                    "description": "A bcrypted hash of the attribute 'session_token'\n"
                }
            },
            "required": [
                "accessKeyId",
                "authorization",
                "projectId",
                "secretAccessKey",
                "secretAccessKeyHash",
                "serviceEndpointName",
                "sessionTokenHash"
            ],
            "inputProperties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "The AWS access key ID for signing programmatic requests.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "externalId": {
                    "type": "string",
                    "description": "A unique identifier that is used by third parties when assuming roles in their customers' accounts, aka cross-account role access.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "roleSessionName": {
                    "type": "string",
                    "description": "Optional identifier for the assumed role session.\n"
                },
                "roleToAssume": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) of the role to assume.\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The AWS secret access key for signing programmatic requests.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "sessionToken": {
                    "type": "string",
                    "description": "The AWS session token for signing programmatic requests.\n"
                }
            },
            "requiredInputs": [
                "accessKeyId",
                "projectId",
                "secretAccessKey",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEndpointAws resources.\n",
                "properties": {
                    "accessKeyId": {
                        "type": "string",
                        "description": "The AWS access key ID for signing programmatic requests.\n"
                    },
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "A unique identifier that is used by third parties when assuming roles in their customers' accounts, aka cross-account role access.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "roleSessionName": {
                        "type": "string",
                        "description": "Optional identifier for the assumed role session.\n"
                    },
                    "roleToAssume": {
                        "type": "string",
                        "description": "The Amazon Resource Name (ARN) of the role to assume.\n"
                    },
                    "secretAccessKey": {
                        "type": "string",
                        "description": "The AWS secret access key for signing programmatic requests.\n"
                    },
                    "secretAccessKeyHash": {
                        "type": "string",
                        "description": "A bcrypted hash of the attribute 'secret_access_key'\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n"
                    },
                    "sessionToken": {
                        "type": "string",
                        "description": "The AWS session token for signing programmatic requests.\n"
                    },
                    "sessionTokenHash": {
                        "type": "string",
                        "description": "A bcrypted hash of the attribute 'session_token'\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceEndpointAzureDevOps:ServiceEndpointAzureDevOps": {
            "description": "Manages an Azure DevOps service endpoint within Azure DevOps.\n\n\u003e **Note** Prerequisite: Extension [Configurable Pipeline Runner](https://marketplace.visualstudio.com/items?itemName=CSE-DevOps.RunPipelines) has been installed for the organization. \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst test = new azuredevops.ServiceEndpointAzureDevOps(\"test\", {\n    projectId: project.id,\n    serviceEndpointName: \"Sample Azure DevOps\",\n    orgUrl: \"https://dev.azure.com/testorganization\",\n    releaseApiUrl: \"https://vsrm.dev.azure.com/testorganization\",\n    personalAccessToken: \"0000000000000000000000000000000000000000000000000000\",\n    description: \"Managed by Terraform\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\ntest = azuredevops.ServiceEndpointAzureDevOps(\"test\",\n    project_id=project.id,\n    service_endpoint_name=\"Sample Azure DevOps\",\n    org_url=\"https://dev.azure.com/testorganization\",\n    release_api_url=\"https://vsrm.dev.azure.com/testorganization\",\n    personal_access_token=\"0000000000000000000000000000000000000000000000000000\",\n    description=\"Managed by Terraform\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var test = new AzureDevOps.ServiceEndpointAzureDevOps(\"test\", new AzureDevOps.ServiceEndpointAzureDevOpsArgs\n        {\n            ProjectId = project.Id,\n            ServiceEndpointName = \"Sample Azure DevOps\",\n            OrgUrl = \"https://dev.azure.com/testorganization\",\n            ReleaseApiUrl = \"https://vsrm.dev.azure.com/testorganization\",\n            PersonalAccessToken = \"0000000000000000000000000000000000000000000000000000\",\n            Description = \"Managed by Terraform\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointAzureDevOps(ctx, \"test\", \u0026azuredevops.ServiceEndpointAzureDevOpsArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample Azure DevOps\"),\n\t\t\tOrgUrl:              pulumi.String(\"https://dev.azure.com/testorganization\"),\n\t\t\tReleaseApiUrl:       pulumi.String(\"https://vsrm.dev.azure.com/testorganization\"),\n\t\t\tPersonalAccessToken: pulumi.String(\"0000000000000000000000000000000000000000000000000000\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Service Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps Service Endpoint Azure DevOps can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:index/serviceEndpointAzureDevOps:ServiceEndpointAzureDevOps serviceendpoint 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "orgUrl": {
                    "type": "string",
                    "description": "The organization URL.\n"
                },
                "personalAccessToken": {
                    "type": "string",
                    "description": "The Azure DevOps personal access token.\n"
                },
                "personalAccessTokenHash": {
                    "type": "string",
                    "description": "A bcrypted hash of the attribute 'personal_access_token'\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "releaseApiUrl": {
                    "type": "string",
                    "description": "The URL of the release API.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "required": [
                "authorization",
                "orgUrl",
                "personalAccessToken",
                "personalAccessTokenHash",
                "projectId",
                "releaseApiUrl",
                "serviceEndpointName"
            ],
            "inputProperties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "orgUrl": {
                    "type": "string",
                    "description": "The organization URL.\n"
                },
                "personalAccessToken": {
                    "type": "string",
                    "description": "The Azure DevOps personal access token.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "releaseApiUrl": {
                    "type": "string",
                    "description": "The URL of the release API.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "requiredInputs": [
                "orgUrl",
                "personalAccessToken",
                "projectId",
                "releaseApiUrl",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEndpointAzureDevOps resources.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "orgUrl": {
                        "type": "string",
                        "description": "The organization URL.\n"
                    },
                    "personalAccessToken": {
                        "type": "string",
                        "description": "The Azure DevOps personal access token.\n"
                    },
                    "personalAccessTokenHash": {
                        "type": "string",
                        "description": "A bcrypted hash of the attribute 'personal_access_token'\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "releaseApiUrl": {
                        "type": "string",
                        "description": "The URL of the release API.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceEndpointAzureEcr:ServiceEndpointAzureEcr": {
            "description": "Manages a Azure Container Registry service endpoint within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\n// azure container registry service connection\nconst azurecr = new azuredevops.ServiceEndpointAzureEcr(\"azurecr\", {\n    projectId: project.id,\n    serviceEndpointName: \"Sample AzureCR\",\n    resourceGroup: \"sample-rg\",\n    azurecrSpnTenantid: \"00000000-0000-0000-0000-000000000000\",\n    azurecrName: \"sampleAcr\",\n    azurecrSubscriptionId: \"00000000-0000-0000-0000-000000000000\",\n    azurecrSubscriptionName: \"sampleSub\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\n# azure container registry service connection\nazurecr = azuredevops.ServiceEndpointAzureEcr(\"azurecr\",\n    project_id=project.id,\n    service_endpoint_name=\"Sample AzureCR\",\n    resource_group=\"sample-rg\",\n    azurecr_spn_tenantid=\"00000000-0000-0000-0000-000000000000\",\n    azurecr_name=\"sampleAcr\",\n    azurecr_subscription_id=\"00000000-0000-0000-0000-000000000000\",\n    azurecr_subscription_name=\"sampleSub\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        // azure container registry service connection\n        var azurecr = new AzureDevOps.ServiceEndpointAzureEcr(\"azurecr\", new AzureDevOps.ServiceEndpointAzureEcrArgs\n        {\n            ProjectId = project.Id,\n            ServiceEndpointName = \"Sample AzureCR\",\n            ResourceGroup = \"sample-rg\",\n            AzurecrSpnTenantid = \"00000000-0000-0000-0000-000000000000\",\n            AzurecrName = \"sampleAcr\",\n            AzurecrSubscriptionId = \"00000000-0000-0000-0000-000000000000\",\n            AzurecrSubscriptionName = \"sampleSub\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointAzureEcr(ctx, \"azurecr\", \u0026azuredevops.ServiceEndpointAzureEcrArgs{\n\t\t\tProjectId:               project.ID(),\n\t\t\tServiceEndpointName:     pulumi.String(\"Sample AzureCR\"),\n\t\t\tResourceGroup:           pulumi.String(\"sample-rg\"),\n\t\t\tAzurecrSpnTenantid:      pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurecrName:             pulumi.String(\"sampleAcr\"),\n\t\t\tAzurecrSubscriptionId:   pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurecrSubscriptionName: pulumi.String(\"sampleSub\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Service Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-5.1)\n- [Azure Container Registry REST API](https://docs.microsoft.com/en-us/rest/api/containerregistry/)\n\n\n## Import\n\nAzure DevOps Service Endpoint Azure Container Registry can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:index/serviceEndpointAzureEcr:ServiceEndpointAzureEcr serviceendpoint 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "appObjectId": {
                    "type": "string"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "azSpnRoleAssignmentId": {
                    "type": "string"
                },
                "azSpnRolePermissions": {
                    "type": "string"
                },
                "azurecrName": {
                    "type": "string",
                    "description": "The Azure container registry name.\n"
                },
                "azurecrSpnTenantid": {
                    "type": "string",
                    "description": "The tenant id of the service principal.\n"
                },
                "azurecrSubscriptionId": {
                    "type": "string",
                    "description": "The subscription id of the Azure targets.\n"
                },
                "azurecrSubscriptionName": {
                    "type": "string",
                    "description": "The subscription name of the Azure targets.\n"
                },
                "description": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "resourceGroup": {
                    "type": "string",
                    "description": "The resource group to which the container registry belongs.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The name you will use to refer to this service connection in task inputs.\n"
                },
                "servicePrincipalId": {
                    "type": "string",
                    "description": "The service principal ID.\n"
                },
                "spnObjectId": {
                    "type": "string"
                }
            },
            "required": [
                "appObjectId",
                "authorization",
                "azSpnRoleAssignmentId",
                "azSpnRolePermissions",
                "azurecrName",
                "azurecrSpnTenantid",
                "azurecrSubscriptionId",
                "azurecrSubscriptionName",
                "projectId",
                "resourceGroup",
                "serviceEndpointName",
                "servicePrincipalId",
                "spnObjectId"
            ],
            "inputProperties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "azurecrName": {
                    "type": "string",
                    "description": "The Azure container registry name.\n"
                },
                "azurecrSpnTenantid": {
                    "type": "string",
                    "description": "The tenant id of the service principal.\n"
                },
                "azurecrSubscriptionId": {
                    "type": "string",
                    "description": "The subscription id of the Azure targets.\n"
                },
                "azurecrSubscriptionName": {
                    "type": "string",
                    "description": "The subscription name of the Azure targets.\n"
                },
                "description": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "resourceGroup": {
                    "type": "string",
                    "description": "The resource group to which the container registry belongs.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The name you will use to refer to this service connection in task inputs.\n"
                }
            },
            "requiredInputs": [
                "azurecrName",
                "azurecrSpnTenantid",
                "azurecrSubscriptionId",
                "azurecrSubscriptionName",
                "projectId",
                "resourceGroup",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEndpointAzureEcr resources.\n",
                "properties": {
                    "appObjectId": {
                        "type": "string"
                    },
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "azSpnRoleAssignmentId": {
                        "type": "string"
                    },
                    "azSpnRolePermissions": {
                        "type": "string"
                    },
                    "azurecrName": {
                        "type": "string",
                        "description": "The Azure container registry name.\n"
                    },
                    "azurecrSpnTenantid": {
                        "type": "string",
                        "description": "The tenant id of the service principal.\n"
                    },
                    "azurecrSubscriptionId": {
                        "type": "string",
                        "description": "The subscription id of the Azure targets.\n"
                    },
                    "azurecrSubscriptionName": {
                        "type": "string",
                        "description": "The subscription name of the Azure targets.\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "resourceGroup": {
                        "type": "string",
                        "description": "The resource group to which the container registry belongs.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The name you will use to refer to this service connection in task inputs.\n"
                    },
                    "servicePrincipalId": {
                        "type": "string",
                        "description": "The service principal ID.\n"
                    },
                    "spnObjectId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceEndpointAzureRM:ServiceEndpointAzureRM": {
            "description": "Manages Manual or Automatic AzureRM service endpoint within Azure DevOps.\n\n## Requirements (Manual AzureRM Service Endpoint)\n\nBefore to create a service end point in Azure DevOps, you need to create a Service Principal in your Azure subscription.\n\nFor detailed steps to create a service principal with Azure cli see the [documentation](https://docs.microsoft.com/en-us/cli/azure/create-an-azure-service-principal-azure-cli?view=azure-cli-latest)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Manual AzureRM Service Endpoint\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst endpointazure = new azuredevops.ServiceEndpointAzureRM(\"endpointazure\", {\n    projectId: project.id,\n    serviceEndpointName: \"Sample AzureRM\",\n    description: \"Managed by Terraform\",\n    credentials: {\n        serviceprincipalid: \"00000000-0000-0000-0000-000000000000\",\n        serviceprincipalkey: \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    },\n    azurermSpnTenantid: \"00000000-0000-0000-0000-000000000000\",\n    azurermSubscriptionId: \"00000000-0000-0000-0000-000000000000\",\n    azurermSubscriptionName: \"Sample Subscription\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nendpointazure = azuredevops.ServiceEndpointAzureRM(\"endpointazure\",\n    project_id=project.id,\n    service_endpoint_name=\"Sample AzureRM\",\n    description=\"Managed by Terraform\",\n    credentials=azuredevops.ServiceEndpointAzureRMCredentialsArgs(\n        serviceprincipalid=\"00000000-0000-0000-0000-000000000000\",\n        serviceprincipalkey=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    ),\n    azurerm_spn_tenantid=\"00000000-0000-0000-0000-000000000000\",\n    azurerm_subscription_id=\"00000000-0000-0000-0000-000000000000\",\n    azurerm_subscription_name=\"Sample Subscription\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var endpointazure = new AzureDevOps.ServiceEndpointAzureRM(\"endpointazure\", new AzureDevOps.ServiceEndpointAzureRMArgs\n        {\n            ProjectId = project.Id,\n            ServiceEndpointName = \"Sample AzureRM\",\n            Description = \"Managed by Terraform\",\n            Credentials = new AzureDevOps.Inputs.ServiceEndpointAzureRMCredentialsArgs\n            {\n                Serviceprincipalid = \"00000000-0000-0000-0000-000000000000\",\n                Serviceprincipalkey = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n            },\n            AzurermSpnTenantid = \"00000000-0000-0000-0000-000000000000\",\n            AzurermSubscriptionId = \"00000000-0000-0000-0000-000000000000\",\n            AzurermSubscriptionName = \"Sample Subscription\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointAzureRM(ctx, \"endpointazure\", \u0026azuredevops.ServiceEndpointAzureRMArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample AzureRM\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t\tCredentials: \u0026ServiceEndpointAzureRMCredentialsArgs{\n\t\t\t\tServiceprincipalid:  pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\t\tServiceprincipalkey: pulumi.String(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"),\n\t\t\t},\n\t\t\tAzurermSpnTenantid:      pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurermSubscriptionId:   pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurermSubscriptionName: pulumi.String(\"Sample Subscription\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% example %}}\n### Automatic AzureRM Service Endpoint\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst endpointazure = new azuredevops.ServiceEndpointAzureRM(\"endpointazure\", {\n    projectId: project.id,\n    serviceEndpointName: \"Sample AzureRM\",\n    description: \"Managed by Terraform\",\n    azurermSpnTenantid: \"00000000-0000-0000-0000-000000000000\",\n    azurermSubscriptionId: \"00000000-0000-0000-0000-000000000000\",\n    azurermSubscriptionName: \"Microsoft Azure DEMO\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nendpointazure = azuredevops.ServiceEndpointAzureRM(\"endpointazure\",\n    project_id=project.id,\n    service_endpoint_name=\"Sample AzureRM\",\n    description=\"Managed by Terraform\",\n    azurerm_spn_tenantid=\"00000000-0000-0000-0000-000000000000\",\n    azurerm_subscription_id=\"00000000-0000-0000-0000-000000000000\",\n    azurerm_subscription_name=\"Microsoft Azure DEMO\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var endpointazure = new AzureDevOps.ServiceEndpointAzureRM(\"endpointazure\", new AzureDevOps.ServiceEndpointAzureRMArgs\n        {\n            ProjectId = project.Id,\n            ServiceEndpointName = \"Sample AzureRM\",\n            Description = \"Managed by Terraform\",\n            AzurermSpnTenantid = \"00000000-0000-0000-0000-000000000000\",\n            AzurermSubscriptionId = \"00000000-0000-0000-0000-000000000000\",\n            AzurermSubscriptionName = \"Microsoft Azure DEMO\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointAzureRM(ctx, \"endpointazure\", \u0026azuredevops.ServiceEndpointAzureRMArgs{\n\t\t\tProjectId:               project.ID(),\n\t\t\tServiceEndpointName:     pulumi.String(\"Sample AzureRM\"),\n\t\t\tDescription:             pulumi.String(\"Managed by Terraform\"),\n\t\t\tAzurermSpnTenantid:      pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurermSubscriptionId:   pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tAzurermSubscriptionName: pulumi.String(\"Microsoft Azure DEMO\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Service End points](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps Service Endpoint Azure Resource Manage can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:index/serviceEndpointAzureRM:ServiceEndpointAzureRM serviceendpoint 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "azurermSpnTenantid": {
                    "type": "string",
                    "description": "The tenant id if the service principal.\n"
                },
                "azurermSubscriptionId": {
                    "type": "string",
                    "description": "The subscription Id of the Azure targets.\n"
                },
                "azurermSubscriptionName": {
                    "type": "string",
                    "description": "The subscription Name of the targets.\n"
                },
                "credentials": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointAzureRMCredentials:ServiceEndpointAzureRMCredentials",
                    "description": "A `credentials` block.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Service connection description.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "resourceGroup": {
                    "type": "string",
                    "description": "The resource group used for scope of automatic service endpoint.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "required": [
                "authorization",
                "azurermSpnTenantid",
                "azurermSubscriptionId",
                "azurermSubscriptionName",
                "projectId",
                "serviceEndpointName"
            ],
            "inputProperties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "azurermSpnTenantid": {
                    "type": "string",
                    "description": "The tenant id if the service principal.\n"
                },
                "azurermSubscriptionId": {
                    "type": "string",
                    "description": "The subscription Id of the Azure targets.\n"
                },
                "azurermSubscriptionName": {
                    "type": "string",
                    "description": "The subscription Name of the targets.\n"
                },
                "credentials": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointAzureRMCredentials:ServiceEndpointAzureRMCredentials",
                    "description": "A `credentials` block.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Service connection description.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "resourceGroup": {
                    "type": "string",
                    "description": "The resource group used for scope of automatic service endpoint.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "requiredInputs": [
                "azurermSpnTenantid",
                "azurermSubscriptionId",
                "azurermSubscriptionName",
                "projectId",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEndpointAzureRM resources.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "azurermSpnTenantid": {
                        "type": "string",
                        "description": "The tenant id if the service principal.\n"
                    },
                    "azurermSubscriptionId": {
                        "type": "string",
                        "description": "The subscription Id of the Azure targets.\n"
                    },
                    "azurermSubscriptionName": {
                        "type": "string",
                        "description": "The subscription Name of the targets.\n"
                    },
                    "credentials": {
                        "$ref": "#/types/azuredevops:index/ServiceEndpointAzureRMCredentials:ServiceEndpointAzureRMCredentials",
                        "description": "A `credentials` block.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Service connection description.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "resourceGroup": {
                        "type": "string",
                        "description": "The resource group used for scope of automatic service endpoint.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:ServiceEndpoint/azureRM:AzureRM"
                }
            ]
        },
        "azuredevops:index/serviceEndpointBitBucket:ServiceEndpointBitBucket": {
            "description": "Manages a Bitbucket service endpoint within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst serviceendpoint = new azuredevops.ServiceEndpointBitBucket(\"serviceendpoint\", {\n    projectId: project.id,\n    username: \"username\",\n    password: \"password\",\n    serviceEndpointName: \"Sample Bitbucket\",\n    description: \"Managed by Terraform\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nserviceendpoint = azuredevops.ServiceEndpointBitBucket(\"serviceendpoint\",\n    project_id=project.id,\n    username=\"username\",\n    password=\"password\",\n    service_endpoint_name=\"Sample Bitbucket\",\n    description=\"Managed by Terraform\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var serviceendpoint = new AzureDevOps.ServiceEndpointBitBucket(\"serviceendpoint\", new AzureDevOps.ServiceEndpointBitBucketArgs\n        {\n            ProjectId = project.Id,\n            Username = \"username\",\n            Password = \"password\",\n            ServiceEndpointName = \"Sample Bitbucket\",\n            Description = \"Managed by Terraform\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointBitBucket(ctx, \"serviceendpoint\", \u0026azuredevops.ServiceEndpointBitBucketArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tUsername:            pulumi.String(\"username\"),\n\t\t\tPassword:            pulumi.String(\"password\"),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample Bitbucket\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Agent Pools](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps Service Endpoint Bitbucket can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:index/serviceEndpointBitBucket:ServiceEndpointBitBucket serviceendpoint 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "description": "Bitbucket account password.\n"
                },
                "passwordHash": {
                    "type": "string",
                    "description": "A bcrypted hash of the attribute 'password'\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Bitbucket account username.\n"
                }
            },
            "required": [
                "authorization",
                "password",
                "passwordHash",
                "projectId",
                "serviceEndpointName",
                "username"
            ],
            "inputProperties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "description": "Bitbucket account password.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Bitbucket account username.\n"
                }
            },
            "requiredInputs": [
                "password",
                "projectId",
                "serviceEndpointName",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEndpointBitBucket resources.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string",
                        "description": "Bitbucket account password.\n"
                    },
                    "passwordHash": {
                        "type": "string",
                        "description": "A bcrypted hash of the attribute 'password'\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Bitbucket account username.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:ServiceEndpoint/bitBucket:BitBucket"
                }
            ]
        },
        "azuredevops:index/serviceEndpointDockerRegistry:ServiceEndpointDockerRegistry": {
            "description": "Manages a Docker Registry service endpoint within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\n// dockerhub registry service connection\nconst dockerhubregistry = new azuredevops.ServiceEndpointDockerRegistry(\"dockerhubregistry\", {\n    projectId: project.id,\n    serviceEndpointName: \"Sample Docker Hub\",\n    dockerUsername: \"sample\",\n    dockerEmail: \"email@example.com\",\n    dockerPassword: \"12345\",\n    registryType: \"DockerHub\",\n});\n// other docker registry service connection\nconst otherregistry = new azuredevops.ServiceEndpointDockerRegistry(\"otherregistry\", {\n    projectId: project.id,\n    serviceEndpointName: \"Sample Docker Registry\",\n    dockerRegistry: \"https://sample.azurecr.io/v1\",\n    dockerUsername: \"sample\",\n    dockerPassword: \"12345\",\n    registryType: \"Others\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\n# dockerhub registry service connection\ndockerhubregistry = azuredevops.ServiceEndpointDockerRegistry(\"dockerhubregistry\",\n    project_id=project.id,\n    service_endpoint_name=\"Sample Docker Hub\",\n    docker_username=\"sample\",\n    docker_email=\"email@example.com\",\n    docker_password=\"12345\",\n    registry_type=\"DockerHub\")\n# other docker registry service connection\notherregistry = azuredevops.ServiceEndpointDockerRegistry(\"otherregistry\",\n    project_id=project.id,\n    service_endpoint_name=\"Sample Docker Registry\",\n    docker_registry=\"https://sample.azurecr.io/v1\",\n    docker_username=\"sample\",\n    docker_password=\"12345\",\n    registry_type=\"Others\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        // dockerhub registry service connection\n        var dockerhubregistry = new AzureDevOps.ServiceEndpointDockerRegistry(\"dockerhubregistry\", new AzureDevOps.ServiceEndpointDockerRegistryArgs\n        {\n            ProjectId = project.Id,\n            ServiceEndpointName = \"Sample Docker Hub\",\n            DockerUsername = \"sample\",\n            DockerEmail = \"email@example.com\",\n            DockerPassword = \"12345\",\n            RegistryType = \"DockerHub\",\n        });\n        // other docker registry service connection\n        var otherregistry = new AzureDevOps.ServiceEndpointDockerRegistry(\"otherregistry\", new AzureDevOps.ServiceEndpointDockerRegistryArgs\n        {\n            ProjectId = project.Id,\n            ServiceEndpointName = \"Sample Docker Registry\",\n            DockerRegistry = \"https://sample.azurecr.io/v1\",\n            DockerUsername = \"sample\",\n            DockerPassword = \"12345\",\n            RegistryType = \"Others\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointDockerRegistry(ctx, \"dockerhubregistry\", \u0026azuredevops.ServiceEndpointDockerRegistryArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample Docker Hub\"),\n\t\t\tDockerUsername:      pulumi.String(\"sample\"),\n\t\t\tDockerEmail:         pulumi.String(\"email@example.com\"),\n\t\t\tDockerPassword:      pulumi.String(\"12345\"),\n\t\t\tRegistryType:        pulumi.String(\"DockerHub\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointDockerRegistry(ctx, \"otherregistry\", \u0026azuredevops.ServiceEndpointDockerRegistryArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample Docker Registry\"),\n\t\t\tDockerRegistry:      pulumi.String(\"https://sample.azurecr.io/v1\"),\n\t\t\tDockerUsername:      pulumi.String(\"sample\"),\n\t\t\tDockerPassword:      pulumi.String(\"12345\"),\n\t\t\tRegistryType:        pulumi.String(\"Others\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Service Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-5.1)\n- [Docker Registry Service Connection](https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops\u0026tabs=yaml#sep-docreg)\n\n\n## Import\n\nAzure DevOps Service Endpoint Docker Registry can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:index/serviceEndpointDockerRegistry:ServiceEndpointDockerRegistry serviceendpoint 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "dockerEmail": {
                    "type": "string",
                    "description": "The email for Docker account user.\n"
                },
                "dockerPassword": {
                    "type": "string",
                    "description": "The password for the account user identified above.\n"
                },
                "dockerPasswordHash": {
                    "type": "string",
                    "description": "A bcrypted hash of the attribute 'docker_password'\n"
                },
                "dockerRegistry": {
                    "type": "string",
                    "description": "The URL of the Docker registry. (Default: \"https://index.docker.io/v1/\")\n",
                    "language": {
                        "csharp": {
                            "name": "DockerRegistryUrl"
                        }
                    }
                },
                "dockerUsername": {
                    "type": "string",
                    "description": "The identifier of the Docker account user.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "registryType": {
                    "type": "string",
                    "description": "Can be \"DockerHub\" or \"Others\" (Default \"DockerHub\")\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The name you will use to refer to this service connection in task inputs.\n"
                }
            },
            "required": [
                "authorization",
                "dockerPasswordHash",
                "dockerRegistry",
                "projectId",
                "registryType",
                "serviceEndpointName"
            ],
            "inputProperties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "dockerEmail": {
                    "type": "string",
                    "description": "The email for Docker account user.\n"
                },
                "dockerPassword": {
                    "type": "string",
                    "description": "The password for the account user identified above.\n"
                },
                "dockerRegistry": {
                    "type": "string",
                    "description": "The URL of the Docker registry. (Default: \"https://index.docker.io/v1/\")\n",
                    "language": {
                        "csharp": {
                            "name": "DockerRegistryUrl"
                        }
                    }
                },
                "dockerUsername": {
                    "type": "string",
                    "description": "The identifier of the Docker account user.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "registryType": {
                    "type": "string",
                    "description": "Can be \"DockerHub\" or \"Others\" (Default \"DockerHub\")\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The name you will use to refer to this service connection in task inputs.\n"
                }
            },
            "requiredInputs": [
                "dockerRegistry",
                "projectId",
                "registryType",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEndpointDockerRegistry resources.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "dockerEmail": {
                        "type": "string",
                        "description": "The email for Docker account user.\n"
                    },
                    "dockerPassword": {
                        "type": "string",
                        "description": "The password for the account user identified above.\n"
                    },
                    "dockerPasswordHash": {
                        "type": "string",
                        "description": "A bcrypted hash of the attribute 'docker_password'\n"
                    },
                    "dockerRegistry": {
                        "type": "string",
                        "description": "The URL of the Docker registry. (Default: \"https://index.docker.io/v1/\")\n",
                        "language": {
                            "csharp": {
                                "name": "DockerRegistryUrl"
                            }
                        }
                    },
                    "dockerUsername": {
                        "type": "string",
                        "description": "The identifier of the Docker account user.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "registryType": {
                        "type": "string",
                        "description": "Can be \"DockerHub\" or \"Others\" (Default \"DockerHub\")\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The name you will use to refer to this service connection in task inputs.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:ServiceEndpoint/dockerRegistry:DockerRegistry"
                }
            ]
        },
        "azuredevops:index/serviceEndpointGeneric:ServiceEndpointGeneric": {
            "description": "Manages a generic service endpoint within Azure DevOps, which can be used to authenticate to any external server using\nbasic authentication via a username and password.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst serviceendpoint = new azuredevops.ServiceEndpointGeneric(\"serviceendpoint\", {\n    projectId: project.id,\n    serverUrl: \"https://some-server.example.com\",\n    username: \"username\",\n    password: \"password\",\n    serviceEndpointName: \"Sample Generic\",\n    description: \"Managed by Terraform\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nserviceendpoint = azuredevops.ServiceEndpointGeneric(\"serviceendpoint\",\n    project_id=project.id,\n    server_url=\"https://some-server.example.com\",\n    username=\"username\",\n    password=\"password\",\n    service_endpoint_name=\"Sample Generic\",\n    description=\"Managed by Terraform\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var serviceendpoint = new AzureDevOps.ServiceEndpointGeneric(\"serviceendpoint\", new AzureDevOps.ServiceEndpointGenericArgs\n        {\n            ProjectId = project.Id,\n            ServerUrl = \"https://some-server.example.com\",\n            Username = \"username\",\n            Password = \"password\",\n            ServiceEndpointName = \"Sample Generic\",\n            Description = \"Managed by Terraform\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointGeneric(ctx, \"serviceendpoint\", \u0026azuredevops.ServiceEndpointGenericArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tServerUrl:           pulumi.String(\"https://some-server.example.com\"),\n\t\t\tUsername:            pulumi.String(\"username\"),\n\t\t\tPassword:            pulumi.String(\"password\"),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample Generic\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Agent Pools](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps Service Endpoint Generic can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:index/serviceEndpointGeneric:ServiceEndpointGeneric serviceendpoint 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "description": "The password or token key used to authenticate to the server url using basic authentication.\n"
                },
                "passwordHash": {
                    "type": "string",
                    "description": "A bcrypted hash of the attribute 'password'\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serverUrl": {
                    "type": "string",
                    "description": "The URL of the server associated with the service endpoint.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The service endpoint name.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username used to authenticate to the server url using basic authentication.\n"
                }
            },
            "required": [
                "authorization",
                "passwordHash",
                "projectId",
                "serverUrl",
                "serviceEndpointName"
            ],
            "inputProperties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "description": "The password or token key used to authenticate to the server url using basic authentication.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serverUrl": {
                    "type": "string",
                    "description": "The URL of the server associated with the service endpoint.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The service endpoint name.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username used to authenticate to the server url using basic authentication.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "serverUrl",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEndpointGeneric resources.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password or token key used to authenticate to the server url using basic authentication.\n"
                    },
                    "passwordHash": {
                        "type": "string",
                        "description": "A bcrypted hash of the attribute 'password'\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "serverUrl": {
                        "type": "string",
                        "description": "The URL of the server associated with the service endpoint.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The service endpoint name.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username used to authenticate to the server url using basic authentication.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceEndpointGenericGit:ServiceEndpointGenericGit": {
            "description": "Manages a generic service endpoint within Azure DevOps, which can be used to authenticate to any external git service\nusing basic authentication via a username and password. This is mostly useful for importing private git repositories.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst serviceendpoint = new azuredevops.ServiceEndpointGenericGit(\"serviceendpoint\", {\n    projectId: project.id,\n    repositoryUrl: \"https://dev.azure.com/org/project/_git/repository\",\n    username: \"username\",\n    password: \"password\",\n    serviceEndpointName: \"Sample Generic Git\",\n    description: \"Managed by Terraform\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nserviceendpoint = azuredevops.ServiceEndpointGenericGit(\"serviceendpoint\",\n    project_id=project.id,\n    repository_url=\"https://dev.azure.com/org/project/_git/repository\",\n    username=\"username\",\n    password=\"password\",\n    service_endpoint_name=\"Sample Generic Git\",\n    description=\"Managed by Terraform\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var serviceendpoint = new AzureDevOps.ServiceEndpointGenericGit(\"serviceendpoint\", new AzureDevOps.ServiceEndpointGenericGitArgs\n        {\n            ProjectId = project.Id,\n            RepositoryUrl = \"https://dev.azure.com/org/project/_git/repository\",\n            Username = \"username\",\n            Password = \"password\",\n            ServiceEndpointName = \"Sample Generic Git\",\n            Description = \"Managed by Terraform\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointGenericGit(ctx, \"serviceendpoint\", \u0026azuredevops.ServiceEndpointGenericGitArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tRepositoryUrl:       pulumi.String(\"https://dev.azure.com/org/project/_git/repository\"),\n\t\t\tUsername:            pulumi.String(\"username\"),\n\t\t\tPassword:            pulumi.String(\"password\"),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample Generic Git\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Agent Pools](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps Service Endpoint Generic Git can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:index/serviceEndpointGenericGit:ServiceEndpointGenericGit serviceendpoint 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "enablePipelinesAccess": {
                    "type": "boolean",
                    "description": "A value indicating whether or not to attempt accessing this git server from Azure Pipelines.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The PAT or password used to authenticate to the git repository.\n"
                },
                "passwordHash": {
                    "type": "string",
                    "description": "A bcrypted hash of the attribute 'password'\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name to associate with the service endpoint.\n"
                },
                "repositoryUrl": {
                    "type": "string",
                    "description": "The URL of the repository associated with the service endpoint.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The name of the service endpoint.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username used to authenticate to the git repository.\n"
                }
            },
            "required": [
                "authorization",
                "passwordHash",
                "projectId",
                "repositoryUrl",
                "serviceEndpointName"
            ],
            "inputProperties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "enablePipelinesAccess": {
                    "type": "boolean",
                    "description": "A value indicating whether or not to attempt accessing this git server from Azure Pipelines.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The PAT or password used to authenticate to the git repository.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name to associate with the service endpoint.\n"
                },
                "repositoryUrl": {
                    "type": "string",
                    "description": "The URL of the repository associated with the service endpoint.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The name of the service endpoint.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username used to authenticate to the git repository.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "repositoryUrl",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEndpointGenericGit resources.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "enablePipelinesAccess": {
                        "type": "boolean",
                        "description": "A value indicating whether or not to attempt accessing this git server from Azure Pipelines.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The PAT or password used to authenticate to the git repository.\n"
                    },
                    "passwordHash": {
                        "type": "string",
                        "description": "A bcrypted hash of the attribute 'password'\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name to associate with the service endpoint.\n"
                    },
                    "repositoryUrl": {
                        "type": "string",
                        "description": "The URL of the repository associated with the service endpoint.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The name of the service endpoint.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username used to authenticate to the git repository.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceEndpointGitHub:ServiceEndpointGitHub": {
            "description": "Manages a GitHub service endpoint within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst serviceendpointGh1 = new azuredevops.ServiceEndpointGitHub(\"serviceendpointGh1\", {\n    projectId: project.id,\n    serviceEndpointName: \"Sample GithHub Personal Access Token\",\n    authPersonal: {\n        personalAccessToken: \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nserviceendpoint_gh1 = azuredevops.ServiceEndpointGitHub(\"serviceendpointGh1\",\n    project_id=project.id,\n    service_endpoint_name=\"Sample GithHub Personal Access Token\",\n    auth_personal=azuredevops.ServiceEndpointGitHubAuthPersonalArgs(\n        personal_access_token=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    ))\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var serviceendpointGh1 = new AzureDevOps.ServiceEndpointGitHub(\"serviceendpointGh1\", new AzureDevOps.ServiceEndpointGitHubArgs\n        {\n            ProjectId = project.Id,\n            ServiceEndpointName = \"Sample GithHub Personal Access Token\",\n            AuthPersonal = new AzureDevOps.Inputs.ServiceEndpointGitHubAuthPersonalArgs\n            {\n                PersonalAccessToken = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointGitHub(ctx, \"serviceendpointGh1\", \u0026azuredevops.ServiceEndpointGitHubArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample GithHub Personal Access Token\"),\n\t\t\tAuthPersonal: \u0026ServiceEndpointGitHubAuthPersonalArgs{\n\t\t\t\tPersonalAccessToken: pulumi.String(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst serviceendpointGh2 = new azuredevops.ServiceEndpointGitHub(\"serviceendpointGh2\", {\n    projectId: azuredevops_project.project.id,\n    serviceEndpointName: \"Sample GithHub Grant\",\n    authOauth: {\n        oauthConfigurationId: \"00000000-0000-0000-0000-000000000000\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nserviceendpoint_gh2 = azuredevops.ServiceEndpointGitHub(\"serviceendpointGh2\",\n    project_id=azuredevops_project[\"project\"][\"id\"],\n    service_endpoint_name=\"Sample GithHub Grant\",\n    auth_oauth=azuredevops.ServiceEndpointGitHubAuthOauthArgs(\n        oauth_configuration_id=\"00000000-0000-0000-0000-000000000000\",\n    ))\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var serviceendpointGh2 = new AzureDevOps.ServiceEndpointGitHub(\"serviceendpointGh2\", new AzureDevOps.ServiceEndpointGitHubArgs\n        {\n            ProjectId = azuredevops_project.Project.Id,\n            ServiceEndpointName = \"Sample GithHub Grant\",\n            AuthOauth = new AzureDevOps.Inputs.ServiceEndpointGitHubAuthOauthArgs\n            {\n                OauthConfigurationId = \"00000000-0000-0000-0000-000000000000\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewServiceEndpointGitHub(ctx, \"serviceendpointGh2\", \u0026azuredevops.ServiceEndpointGitHubArgs{\n\t\t\tProjectId:           pulumi.Any(azuredevops_project.Project.Id),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample GithHub Grant\"),\n\t\t\tAuthOauth: \u0026ServiceEndpointGitHubAuthOauthArgs{\n\t\t\t\tOauthConfigurationId: pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst serviceendpointGh3 = new azuredevops.ServiceEndpointGitHub(\"serviceendpointGh3\", {\n    projectId: azuredevops_project.project.id,\n    serviceEndpointName: \"Sample GithHub Apps: Azure Pipelines\",\n    description: \"Managed by Terraform\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nserviceendpoint_gh3 = azuredevops.ServiceEndpointGitHub(\"serviceendpointGh3\",\n    project_id=azuredevops_project[\"project\"][\"id\"],\n    service_endpoint_name=\"Sample GithHub Apps: Azure Pipelines\",\n    description=\"Managed by Terraform\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var serviceendpointGh3 = new AzureDevOps.ServiceEndpointGitHub(\"serviceendpointGh3\", new AzureDevOps.ServiceEndpointGitHubArgs\n        {\n            ProjectId = azuredevops_project.Project.Id,\n            ServiceEndpointName = \"Sample GithHub Apps: Azure Pipelines\",\n            Description = \"Managed by Terraform\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewServiceEndpointGitHub(ctx, \"serviceendpointGh3\", \u0026azuredevops.ServiceEndpointGitHubArgs{\n\t\t\tProjectId:           pulumi.Any(azuredevops_project.Project.Id),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample GithHub Apps: Azure Pipelines\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Service Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps Service Endpoint GitHub can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:index/serviceEndpointGitHub:ServiceEndpointGitHub serviceendpoint 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authOauth": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointGitHubAuthOauth:ServiceEndpointGitHubAuthOauth",
                    "description": "An `auth_oauth` block as documented below. Allows connecting using an Oauth token.\n"
                },
                "authPersonal": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointGitHubAuthPersonal:ServiceEndpointGitHubAuthPersonal",
                    "description": "An `auth_personal` block as documented below. Allows connecting using a personal access token.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "required": [
                "authorization",
                "projectId",
                "serviceEndpointName"
            ],
            "inputProperties": {
                "authOauth": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointGitHubAuthOauth:ServiceEndpointGitHubAuthOauth",
                    "description": "An `auth_oauth` block as documented below. Allows connecting using an Oauth token.\n"
                },
                "authPersonal": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointGitHubAuthPersonal:ServiceEndpointGitHubAuthPersonal",
                    "description": "An `auth_personal` block as documented below. Allows connecting using a personal access token.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEndpointGitHub resources.\n",
                "properties": {
                    "authOauth": {
                        "$ref": "#/types/azuredevops:index/ServiceEndpointGitHubAuthOauth:ServiceEndpointGitHubAuthOauth",
                        "description": "An `auth_oauth` block as documented below. Allows connecting using an Oauth token.\n"
                    },
                    "authPersonal": {
                        "$ref": "#/types/azuredevops:index/ServiceEndpointGitHubAuthPersonal:ServiceEndpointGitHubAuthPersonal",
                        "description": "An `auth_personal` block as documented below. Allows connecting using a personal access token.\n"
                    },
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:ServiceEndpoint/gitHub:GitHub"
                }
            ]
        },
        "azuredevops:index/serviceEndpointGitHubEnterprise:ServiceEndpointGitHubEnterprise": {
            "description": "Manages a GitHub Enterprise Server service endpoint within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst serviceendpointGhes1 = new azuredevops.ServiceEndpointGitHubEnterprise(\"serviceendpointGhes1\", {\n    projectId: project.id,\n    serviceEndpointName: \"Sample GitHub Enterprise\",\n    url: \"https://github.contoso.com\",\n    description: \"Managed by Terraform\",\n    authPersonal: {\n        personalAccessToken: \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nserviceendpoint_ghes1 = azuredevops.ServiceEndpointGitHubEnterprise(\"serviceendpointGhes1\",\n    project_id=project.id,\n    service_endpoint_name=\"Sample GitHub Enterprise\",\n    url=\"https://github.contoso.com\",\n    description=\"Managed by Terraform\",\n    auth_personal=azuredevops.ServiceEndpointGitHubEnterpriseAuthPersonalArgs(\n        personal_access_token=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    ))\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var serviceendpointGhes1 = new AzureDevOps.ServiceEndpointGitHubEnterprise(\"serviceendpointGhes1\", new AzureDevOps.ServiceEndpointGitHubEnterpriseArgs\n        {\n            ProjectId = project.Id,\n            ServiceEndpointName = \"Sample GitHub Enterprise\",\n            Url = \"https://github.contoso.com\",\n            Description = \"Managed by Terraform\",\n            AuthPersonal = new AzureDevOps.Inputs.ServiceEndpointGitHubEnterpriseAuthPersonalArgs\n            {\n                PersonalAccessToken = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointGitHubEnterprise(ctx, \"serviceendpointGhes1\", \u0026azuredevops.ServiceEndpointGitHubEnterpriseArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample GitHub Enterprise\"),\n\t\t\tUrl:                 pulumi.String(\"https://github.contoso.com\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t\tAuthPersonal: \u0026ServiceEndpointGitHubEnterpriseAuthPersonalArgs{\n\t\t\t\tPersonalAccessToken: pulumi.String(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Service Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps Service Endpoint GitHub Enterprise Server can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:index/serviceEndpointGitHubEnterprise:ServiceEndpointGitHubEnterprise serviceendpoint 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authPersonal": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointGitHubEnterpriseAuthPersonal:ServiceEndpointGitHubEnterpriseAuthPersonal",
                    "description": "An `auth_personal` block as documented below. Allows connecting using a personal access token.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Github Enterprise Server Url.\n"
                }
            },
            "required": [
                "authPersonal",
                "authorization",
                "projectId",
                "serviceEndpointName",
                "url"
            ],
            "inputProperties": {
                "authPersonal": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointGitHubEnterpriseAuthPersonal:ServiceEndpointGitHubEnterpriseAuthPersonal",
                    "description": "An `auth_personal` block as documented below. Allows connecting using a personal access token.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Github Enterprise Server Url.\n"
                }
            },
            "requiredInputs": [
                "authPersonal",
                "projectId",
                "serviceEndpointName",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEndpointGitHubEnterprise resources.\n",
                "properties": {
                    "authPersonal": {
                        "$ref": "#/types/azuredevops:index/ServiceEndpointGitHubEnterpriseAuthPersonal:ServiceEndpointGitHubEnterpriseAuthPersonal",
                        "description": "An `auth_personal` block as documented below. Allows connecting using a personal access token.\n"
                    },
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Github Enterprise Server Url.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceEndpointKubernetes:ServiceEndpointKubernetes": {
            "description": "Manages a Kubernetes service endpoint within Azure DevOps.\n\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps Service Endpoint Kubernetes can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:index/serviceEndpointKubernetes:ServiceEndpointKubernetes serviceendpoint 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "apiserverUrl": {
                    "type": "string",
                    "description": "The hostname (in form of URI) of the Kubernetes API.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "authorizationType": {
                    "type": "string",
                    "description": "The authentication method used to authenticate on the Kubernetes cluster. The value should be one of AzureSubscription, Kubeconfig, ServiceAccount.\n"
                },
                "azureSubscriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/ServiceEndpointKubernetesAzureSubscription:ServiceEndpointKubernetesAzureSubscription"
                    },
                    "description": "The configuration for authorization_type=\"AzureSubscription\".\n"
                },
                "description": {
                    "type": "string"
                },
                "kubeconfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/ServiceEndpointKubernetesKubeconfig:ServiceEndpointKubernetesKubeconfig"
                    },
                    "description": "The configuration for authorization_type=\"Kubeconfig\".\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceAccounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/ServiceEndpointKubernetesServiceAccount:ServiceEndpointKubernetesServiceAccount"
                    },
                    "description": "The configuration for authorization_type=\"ServiceAccount\". This type uses the credentials of a service account currently deployed to the cluster.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "required": [
                "apiserverUrl",
                "authorization",
                "authorizationType",
                "projectId",
                "serviceEndpointName"
            ],
            "inputProperties": {
                "apiserverUrl": {
                    "type": "string",
                    "description": "The hostname (in form of URI) of the Kubernetes API.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "authorizationType": {
                    "type": "string",
                    "description": "The authentication method used to authenticate on the Kubernetes cluster. The value should be one of AzureSubscription, Kubeconfig, ServiceAccount.\n"
                },
                "azureSubscriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/ServiceEndpointKubernetesAzureSubscription:ServiceEndpointKubernetesAzureSubscription"
                    },
                    "description": "The configuration for authorization_type=\"AzureSubscription\".\n"
                },
                "description": {
                    "type": "string"
                },
                "kubeconfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/ServiceEndpointKubernetesKubeconfig:ServiceEndpointKubernetesKubeconfig"
                    },
                    "description": "The configuration for authorization_type=\"Kubeconfig\".\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceAccounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/ServiceEndpointKubernetesServiceAccount:ServiceEndpointKubernetesServiceAccount"
                    },
                    "description": "The configuration for authorization_type=\"ServiceAccount\". This type uses the credentials of a service account currently deployed to the cluster.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "requiredInputs": [
                "apiserverUrl",
                "authorizationType",
                "projectId",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEndpointKubernetes resources.\n",
                "properties": {
                    "apiserverUrl": {
                        "type": "string",
                        "description": "The hostname (in form of URI) of the Kubernetes API.\n"
                    },
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "authorizationType": {
                        "type": "string",
                        "description": "The authentication method used to authenticate on the Kubernetes cluster. The value should be one of AzureSubscription, Kubeconfig, ServiceAccount.\n"
                    },
                    "azureSubscriptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:index/ServiceEndpointKubernetesAzureSubscription:ServiceEndpointKubernetesAzureSubscription"
                        },
                        "description": "The configuration for authorization_type=\"AzureSubscription\".\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "kubeconfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:index/ServiceEndpointKubernetesKubeconfig:ServiceEndpointKubernetesKubeconfig"
                        },
                        "description": "The configuration for authorization_type=\"Kubeconfig\".\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "serviceAccounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:index/ServiceEndpointKubernetesServiceAccount:ServiceEndpointKubernetesServiceAccount"
                        },
                        "description": "The configuration for authorization_type=\"ServiceAccount\". This type uses the credentials of a service account currently deployed to the cluster.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:ServiceEndpoint/kubernetes:Kubernetes"
                }
            ]
        },
        "azuredevops:index/serviceEndpointNpm:ServiceEndpointNpm": {
            "description": "Manages a npm service endpoint within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst serviceendpoint = new azuredevops.ServiceEndpointNpm(\"serviceendpoint\", {\n    projectId: project.id,\n    serviceEndpointName: \"Sample npm\",\n    url: \"https://registry.npmjs.org\",\n    accessToken: \"00000000-0000-0000-0000-000000000000\",\n    description: \"Managed by Terraform\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nserviceendpoint = azuredevops.ServiceEndpointNpm(\"serviceendpoint\",\n    project_id=project.id,\n    service_endpoint_name=\"Sample npm\",\n    url=\"https://registry.npmjs.org\",\n    access_token=\"00000000-0000-0000-0000-000000000000\",\n    description=\"Managed by Terraform\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var serviceendpoint = new AzureDevOps.ServiceEndpointNpm(\"serviceendpoint\", new AzureDevOps.ServiceEndpointNpmArgs\n        {\n            ProjectId = project.Id,\n            ServiceEndpointName = \"Sample npm\",\n            Url = \"https://registry.npmjs.org\",\n            AccessToken = \"00000000-0000-0000-0000-000000000000\",\n            Description = \"Managed by Terraform\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointNpm(ctx, \"serviceendpoint\", \u0026azuredevops.ServiceEndpointNpmArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample npm\"),\n\t\t\tUrl:                 pulumi.String(\"https://registry.npmjs.org\"),\n\t\t\tAccessToken:         pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service Connections](https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops\u0026tabs=yaml)\n- [npm User Token](https://docs.npmjs.com/about-access-tokens)\n\n\n## Import\n\nAzure DevOps Service Endpoint npm can be imported using the **projectID/serviceEndpointID**, e.g.\n\n```sh\n $ pulumi import azuredevops:index/serviceEndpointNpm:ServiceEndpointNpm serviceendpoint 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "The access token for npm registry.\n"
                },
                "accessTokenHash": {
                    "type": "string",
                    "description": "A bcrypted hash of the attribute 'access_token'\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The Service Endpoint description.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the npm registry to connect with.\n"
                }
            },
            "required": [
                "accessToken",
                "accessTokenHash",
                "authorization",
                "projectId",
                "serviceEndpointName",
                "url"
            ],
            "inputProperties": {
                "accessToken": {
                    "type": "string",
                    "description": "The access token for npm registry.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The Service Endpoint description.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the npm registry to connect with.\n"
                }
            },
            "requiredInputs": [
                "accessToken",
                "projectId",
                "serviceEndpointName",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEndpointNpm resources.\n",
                "properties": {
                    "accessToken": {
                        "type": "string",
                        "description": "The access token for npm registry.\n"
                    },
                    "accessTokenHash": {
                        "type": "string",
                        "description": "A bcrypted hash of the attribute 'access_token'\n"
                    },
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string",
                        "description": "The Service Endpoint description.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the npm registry to connect with.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceEndpointPipeline:ServiceEndpointPipeline": {
            "description": "Manages a Azure DevOps Service Connection service endpoint within Azure DevOps. Allows to run downstream pipelines, monitoring their execution, collecting and consolidating artefacts produced in the delegate pipelines (yaml block `task: RunPipelines@1`). More details on Marketplace page: [RunPipelines](https://marketplace.visualstudio.com/items?itemName=CSE-DevOps.RunPipelines)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst serviceendpoint = new azuredevops.ServiceEndpointPipeline(\"serviceendpoint\", {\n    projectId: project.id,\n    serviceEndpointName: \"Sample Pipeline Runner\",\n    organizationName: \"MyOrganization\",\n    authPersonal: {\n        personalAccessToken: \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    },\n    description: \"Managed by Terraform\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nserviceendpoint = azuredevops.ServiceEndpointPipeline(\"serviceendpoint\",\n    project_id=project.id,\n    service_endpoint_name=\"Sample Pipeline Runner\",\n    organization_name=\"MyOrganization\",\n    auth_personal=azuredevops.ServiceEndpointPipelineAuthPersonalArgs(\n        personal_access_token=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    ),\n    description=\"Managed by Terraform\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var serviceendpoint = new AzureDevOps.ServiceEndpointPipeline(\"serviceendpoint\", new AzureDevOps.ServiceEndpointPipelineArgs\n        {\n            ProjectId = project.Id,\n            ServiceEndpointName = \"Sample Pipeline Runner\",\n            OrganizationName = \"MyOrganization\",\n            AuthPersonal = new AzureDevOps.Inputs.ServiceEndpointPipelineAuthPersonalArgs\n            {\n                PersonalAccessToken = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n            },\n            Description = \"Managed by Terraform\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointPipeline(ctx, \"serviceendpoint\", \u0026azuredevops.ServiceEndpointPipelineArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample Pipeline Runner\"),\n\t\t\tOrganizationName:    pulumi.String(\"MyOrganization\"),\n\t\t\tAuthPersonal: \u0026ServiceEndpointPipelineAuthPersonalArgs{\n\t\t\t\tPersonalAccessToken: pulumi.String(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Agent Pools](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps Service Endpoint can be imported using the `project id`, `service connection id`, e.g.\n\n```sh\n $ pulumi import azuredevops:index/serviceEndpointPipeline:ServiceEndpointPipeline serviceendpoint projectID/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authPersonal": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointPipelineAuthPersonal:ServiceEndpointPipelineAuthPersonal",
                    "description": "An `auth_personal` block as documented below. Allows connecting using a personal access token.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "organizationName": {
                    "type": "string",
                    "description": "The organization name used for `Organization Url` and `Release API Url` fields.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "required": [
                "authPersonal",
                "authorization",
                "organizationName",
                "projectId",
                "serviceEndpointName"
            ],
            "inputProperties": {
                "authPersonal": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointPipelineAuthPersonal:ServiceEndpointPipelineAuthPersonal",
                    "description": "An `auth_personal` block as documented below. Allows connecting using a personal access token.\n"
                },
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "organizationName": {
                    "type": "string",
                    "description": "The organization name used for `Organization Url` and `Release API Url` fields.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "requiredInputs": [
                "authPersonal",
                "organizationName",
                "projectId",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEndpointPipeline resources.\n",
                "properties": {
                    "authPersonal": {
                        "$ref": "#/types/azuredevops:index/ServiceEndpointPipelineAuthPersonal:ServiceEndpointPipelineAuthPersonal",
                        "description": "An `auth_personal` block as documented below. Allows connecting using a personal access token.\n"
                    },
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "organizationName": {
                        "type": "string",
                        "description": "The organization name used for `Organization Url` and `Release API Url` fields.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceEndpointServiceFabric:ServiceEndpointServiceFabric": {
            "description": "Manages a Service Fabric service endpoint within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Client Certificate Authentication\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\nimport * from \"fs\";\n\nconst project = new azuredevops.Project(\"project\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst test = new azuredevops.ServiceEndpointServiceFabric(\"test\", {\n    projectId: project.id,\n    serviceEndpointName: \"Sample Service Fabric\",\n    description: \"Managed by Terraform\",\n    clusterEndpoint: \"tcp://test\",\n    certificate: {\n        serverCertificateLookup: \"Thumbprint\",\n        serverCertificateThumbprint: \"0000000000000000000000000000000000000000\",\n        clientCertificate: Buffer.from(fs.readFileSync(\"certificate.pfx\"), 'binary').toString('base64'),\n        clientCertificatePassword: \"password\",\n    },\n});\n```\n```python\nimport pulumi\nimport base64\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\ntest = azuredevops.ServiceEndpointServiceFabric(\"test\",\n    project_id=project.id,\n    service_endpoint_name=\"Sample Service Fabric\",\n    description=\"Managed by Terraform\",\n    cluster_endpoint=\"tcp://test\",\n    certificate=azuredevops.ServiceEndpointServiceFabricCertificateArgs(\n        server_certificate_lookup=\"Thumbprint\",\n        server_certificate_thumbprint=\"0000000000000000000000000000000000000000\",\n        client_certificate=(lambda path: base64.b64encode(open(path).read().encode()).decode())(\"certificate.pfx\"),\n        client_certificate_password=\"password\",\n    ))\n```\n```csharp\nusing System;\nusing System.IO;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n\tprivate static string ReadFileBase64(string path) {\n\t\treturn Convert.ToBase64String(Encoding.UTF8.GetBytes(File.ReadAllText(path)))\n\t}\n\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var test = new AzureDevOps.ServiceEndpointServiceFabric(\"test\", new AzureDevOps.ServiceEndpointServiceFabricArgs\n        {\n            ProjectId = project.Id,\n            ServiceEndpointName = \"Sample Service Fabric\",\n            Description = \"Managed by Terraform\",\n            ClusterEndpoint = \"tcp://test\",\n            Certificate = new AzureDevOps.Inputs.ServiceEndpointServiceFabricCertificateArgs\n            {\n                ServerCertificateLookup = \"Thumbprint\",\n                ServerCertificateThumbprint = \"0000000000000000000000000000000000000000\",\n                ClientCertificate = ReadFileBase64(\"certificate.pfx\"),\n                ClientCertificatePassword = \"password\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"encoding/base64\"\n\t\"io/ioutil\"\n\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc filebase64OrPanic(path string) pulumi.StringPtrInput {\n\tif fileData, err := ioutil.ReadFile(path); err == nil {\n\t\treturn pulumi.String(base64.StdEncoding.EncodeToString(fileData[:]))\n\t} else {\n\t\tpanic(err.Error())\n\t}\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointServiceFabric(ctx, \"test\", \u0026azuredevops.ServiceEndpointServiceFabricArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample Service Fabric\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t\tClusterEndpoint:     pulumi.String(\"tcp://test\"),\n\t\t\tCertificate: \u0026ServiceEndpointServiceFabricCertificateArgs{\n\t\t\t\tServerCertificateLookup:     pulumi.String(\"Thumbprint\"),\n\t\t\t\tServerCertificateThumbprint: pulumi.String(\"0000000000000000000000000000000000000000\"),\n\t\t\t\tClientCertificate:           filebase64OrPanic(\"certificate.pfx\"),\n\t\t\t\tClientCertificatePassword:   pulumi.String(\"password\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% example %}}\n### Azure Active Directory Authentication\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst test = new azuredevops.ServiceEndpointServiceFabric(\"test\", {\n    projectId: project.id,\n    serviceEndpointName: \"Sample Service Fabric\",\n    description: \"Managed by Terraform\",\n    clusterEndpoint: \"tcp://test\",\n    azureActiveDirectory: {\n        serverCertificateLookup: \"Thumbprint\",\n        serverCertificateThumbprint: \"0000000000000000000000000000000000000000\",\n        username: \"username\",\n        password: \"password\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\ntest = azuredevops.ServiceEndpointServiceFabric(\"test\",\n    project_id=project.id,\n    service_endpoint_name=\"Sample Service Fabric\",\n    description=\"Managed by Terraform\",\n    cluster_endpoint=\"tcp://test\",\n    azure_active_directory=azuredevops.ServiceEndpointServiceFabricAzureActiveDirectoryArgs(\n        server_certificate_lookup=\"Thumbprint\",\n        server_certificate_thumbprint=\"0000000000000000000000000000000000000000\",\n        username=\"username\",\n        password=\"password\",\n    ))\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var test = new AzureDevOps.ServiceEndpointServiceFabric(\"test\", new AzureDevOps.ServiceEndpointServiceFabricArgs\n        {\n            ProjectId = project.Id,\n            ServiceEndpointName = \"Sample Service Fabric\",\n            Description = \"Managed by Terraform\",\n            ClusterEndpoint = \"tcp://test\",\n            AzureActiveDirectory = new AzureDevOps.Inputs.ServiceEndpointServiceFabricAzureActiveDirectoryArgs\n            {\n                ServerCertificateLookup = \"Thumbprint\",\n                ServerCertificateThumbprint = \"0000000000000000000000000000000000000000\",\n                Username = \"username\",\n                Password = \"password\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointServiceFabric(ctx, \"test\", \u0026azuredevops.ServiceEndpointServiceFabricArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample Service Fabric\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t\tClusterEndpoint:     pulumi.String(\"tcp://test\"),\n\t\t\tAzureActiveDirectory: \u0026ServiceEndpointServiceFabricAzureActiveDirectoryArgs{\n\t\t\t\tServerCertificateLookup:     pulumi.String(\"Thumbprint\"),\n\t\t\t\tServerCertificateThumbprint: pulumi.String(\"0000000000000000000000000000000000000000\"),\n\t\t\t\tUsername:                    pulumi.String(\"username\"),\n\t\t\t\tPassword:                    pulumi.String(\"password\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% example %}}\n### Windows Authentication\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst test = new azuredevops.ServiceEndpointServiceFabric(\"test\", {\n    projectId: project.id,\n    serviceEndpointName: \"Sample Service Fabric\",\n    description: \"Managed by Terraform\",\n    clusterEndpoint: \"tcp://test\",\n    none: {\n        unsecured: false,\n        clusterSpn: \"HTTP/www.contoso.com\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\ntest = azuredevops.ServiceEndpointServiceFabric(\"test\",\n    project_id=project.id,\n    service_endpoint_name=\"Sample Service Fabric\",\n    description=\"Managed by Terraform\",\n    cluster_endpoint=\"tcp://test\",\n    none=azuredevops.ServiceEndpointServiceFabricNoneArgs(\n        unsecured=False,\n        cluster_spn=\"HTTP/www.contoso.com\",\n    ))\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var test = new AzureDevOps.ServiceEndpointServiceFabric(\"test\", new AzureDevOps.ServiceEndpointServiceFabricArgs\n        {\n            ProjectId = project.Id,\n            ServiceEndpointName = \"Sample Service Fabric\",\n            Description = \"Managed by Terraform\",\n            ClusterEndpoint = \"tcp://test\",\n            None = new AzureDevOps.Inputs.ServiceEndpointServiceFabricNoneArgs\n            {\n                Unsecured = false,\n                ClusterSpn = \"HTTP/www.contoso.com\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointServiceFabric(ctx, \"test\", \u0026azuredevops.ServiceEndpointServiceFabricArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample Service Fabric\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t\tClusterEndpoint:     pulumi.String(\"tcp://test\"),\n\t\t\tNone: \u0026ServiceEndpointServiceFabricNoneArgs{\n\t\t\t\tUnsecured:  pulumi.Bool(false),\n\t\t\t\tClusterSpn: pulumi.String(\"HTTP/www.contoso.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps Service Endpoint Service Fabric can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:index/serviceEndpointServiceFabric:ServiceEndpointServiceFabric serviceendpoint 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "azureActiveDirectory": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointServiceFabricAzureActiveDirectory:ServiceEndpointServiceFabricAzureActiveDirectory"
                },
                "certificate": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointServiceFabricCertificate:ServiceEndpointServiceFabricCertificate"
                },
                "clusterEndpoint": {
                    "type": "string",
                    "description": "Client connection endpoint for the cluster. Prefix the value with 'tcp://';. This value overrides the publish profile.\n"
                },
                "description": {
                    "type": "string"
                },
                "none": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointServiceFabricNone:ServiceEndpointServiceFabricNone"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "required": [
                "authorization",
                "clusterEndpoint",
                "projectId",
                "serviceEndpointName"
            ],
            "inputProperties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "azureActiveDirectory": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointServiceFabricAzureActiveDirectory:ServiceEndpointServiceFabricAzureActiveDirectory"
                },
                "certificate": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointServiceFabricCertificate:ServiceEndpointServiceFabricCertificate"
                },
                "clusterEndpoint": {
                    "type": "string",
                    "description": "Client connection endpoint for the cluster. Prefix the value with 'tcp://';. This value overrides the publish profile.\n"
                },
                "description": {
                    "type": "string"
                },
                "none": {
                    "$ref": "#/types/azuredevops:index/ServiceEndpointServiceFabricNone:ServiceEndpointServiceFabricNone"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                }
            },
            "requiredInputs": [
                "clusterEndpoint",
                "projectId",
                "serviceEndpointName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEndpointServiceFabric resources.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "azureActiveDirectory": {
                        "$ref": "#/types/azuredevops:index/ServiceEndpointServiceFabricAzureActiveDirectory:ServiceEndpointServiceFabricAzureActiveDirectory"
                    },
                    "certificate": {
                        "$ref": "#/types/azuredevops:index/ServiceEndpointServiceFabricCertificate:ServiceEndpointServiceFabricCertificate"
                    },
                    "clusterEndpoint": {
                        "type": "string",
                        "description": "Client connection endpoint for the cluster. Prefix the value with 'tcp://';. This value overrides the publish profile.\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "none": {
                        "$ref": "#/types/azuredevops:index/ServiceEndpointServiceFabricNone:ServiceEndpointServiceFabricNone"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceEndpointSonarQube:ServiceEndpointSonarQube": {
            "description": "Manages a SonarQube service endpoint within Azure DevOps. \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst serviceendpoint = new azuredevops.ServiceEndpointSonarQube(\"serviceendpoint\", {\n    projectId: project.id,\n    serviceEndpointName: \"Sample SonarQube\",\n    url: \"https://sonarqube.my.com\",\n    token: \"0000000000000000000000000000000000000000\",\n    description: \"Managed by Terraform\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nserviceendpoint = azuredevops.ServiceEndpointSonarQube(\"serviceendpoint\",\n    project_id=project.id,\n    service_endpoint_name=\"Sample SonarQube\",\n    url=\"https://sonarqube.my.com\",\n    token=\"0000000000000000000000000000000000000000\",\n    description=\"Managed by Terraform\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var serviceendpoint = new AzureDevOps.ServiceEndpointSonarQube(\"serviceendpoint\", new AzureDevOps.ServiceEndpointSonarQubeArgs\n        {\n            ProjectId = project.Id,\n            ServiceEndpointName = \"Sample SonarQube\",\n            Url = \"https://sonarqube.my.com\",\n            Token = \"0000000000000000000000000000000000000000\",\n            Description = \"Managed by Terraform\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointSonarQube(ctx, \"serviceendpoint\", \u0026azuredevops.ServiceEndpointSonarQubeArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample SonarQube\"),\n\t\t\tUrl:                 pulumi.String(\"https://sonarqube.my.com\"),\n\t\t\tToken:               pulumi.String(\"0000000000000000000000000000000000000000\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service Connections](https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops\u0026tabs=yaml)\n* [SonarQube User Token](https://docs.sonarqube.org/latest/user-guide/user-token/)\n\n\n## Import\n\nAzure DevOps Service Endpoint SonarQube can be imported using the **projectID/serviceEndpointID**, e.g.\n\n```sh\n $ pulumi import azuredevops:index/serviceEndpointSonarQube:ServiceEndpointSonarQube serviceendpoint 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The Service Endpoint description.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Authentication Token generated through SonarQube (go to My Account \u003e Security \u003e Generate Tokens).\n"
                },
                "tokenHash": {
                    "type": "string",
                    "description": "A bcrypted hash of the attribute 'token'\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the SonarQube server to connect with.\n"
                }
            },
            "required": [
                "authorization",
                "projectId",
                "serviceEndpointName",
                "token",
                "tokenHash",
                "url"
            ],
            "inputProperties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The Service Endpoint description.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Authentication Token generated through SonarQube (go to My Account \u003e Security \u003e Generate Tokens).\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the SonarQube server to connect with.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "serviceEndpointName",
                "token",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEndpointSonarQube resources.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string",
                        "description": "The Service Endpoint description.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "Authentication Token generated through SonarQube (go to My Account \u003e Security \u003e Generate Tokens).\n"
                    },
                    "tokenHash": {
                        "type": "string",
                        "description": "A bcrypted hash of the attribute 'token'\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the SonarQube server to connect with.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/serviceEndpointSsh:ServiceEndpointSsh": {
            "description": "Manages a SSH service endpoint within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst test = new azuredevops.ServiceEndpointSsh(\"test\", {\n    projectId: project.id,\n    serviceEndpointName: \"Sample SSH\",\n    host: \"1.2.3.4\",\n    username: \"username\",\n    description: \"Managed by Terraform\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\ntest = azuredevops.ServiceEndpointSsh(\"test\",\n    project_id=project.id,\n    service_endpoint_name=\"Sample SSH\",\n    host=\"1.2.3.4\",\n    username=\"username\",\n    description=\"Managed by Terraform\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var test = new AzureDevOps.ServiceEndpointSsh(\"test\", new AzureDevOps.ServiceEndpointSshArgs\n        {\n            ProjectId = project.Id,\n            ServiceEndpointName = \"Sample SSH\",\n            Host = \"1.2.3.4\",\n            Username = \"username\",\n            Description = \"Managed by Terraform\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewServiceEndpointSsh(ctx, \"test\", \u0026azuredevops.ServiceEndpointSshArgs{\n\t\t\tProjectId:           project.ID(),\n\t\t\tServiceEndpointName: pulumi.String(\"Sample SSH\"),\n\t\t\tHost:                pulumi.String(\"1.2.3.4\"),\n\t\t\tUsername:            pulumi.String(\"username\"),\n\t\t\tDescription:         pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Service Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-5.1)\n\n\n## Import\n\nAzure DevOps Service Endpoint SSH can be imported using **projectID/serviceEndpointID** or ** projectName/serviceEndpointID**\n\n```sh\n $ pulumi import azuredevops:index/serviceEndpointSsh:ServiceEndpointSsh serviceendpoint 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "host": {
                    "type": "string",
                    "description": "The Host name or IP address of the remote machine.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for connecting to the endpoint.\n"
                },
                "passwordHash": {
                    "type": "string",
                    "description": "A bcrypted hash of the attribute 'password'\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port number on the remote machine to use for connecting. Defaults to `22`.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "Private Key for connecting to the endpoint.\n"
                },
                "privateKeyHash": {
                    "type": "string",
                    "description": "A bcrypted hash of the attribute 'private_key'\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for connecting to the endpoint.\n"
                }
            },
            "required": [
                "authorization",
                "host",
                "passwordHash",
                "privateKeyHash",
                "projectId",
                "serviceEndpointName",
                "username"
            ],
            "inputProperties": {
                "authorization": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "host": {
                    "type": "string",
                    "description": "The Host name or IP address of the remote machine.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for connecting to the endpoint.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port number on the remote machine to use for connecting. Defaults to `22`.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "Private Key for connecting to the endpoint.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "serviceEndpointName": {
                    "type": "string",
                    "description": "The Service Endpoint name.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for connecting to the endpoint.\n"
                }
            },
            "requiredInputs": [
                "host",
                "projectId",
                "serviceEndpointName",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEndpointSsh resources.\n",
                "properties": {
                    "authorization": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "host": {
                        "type": "string",
                        "description": "The Host name or IP address of the remote machine.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password for connecting to the endpoint.\n"
                    },
                    "passwordHash": {
                        "type": "string",
                        "description": "A bcrypted hash of the attribute 'password'\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port number on the remote machine to use for connecting. Defaults to `22`.\n"
                    },
                    "privateKey": {
                        "type": "string",
                        "description": "Private Key for connecting to the endpoint.\n"
                    },
                    "privateKeyHash": {
                        "type": "string",
                        "description": "A bcrypted hash of the attribute 'private_key'\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "serviceEndpointName": {
                        "type": "string",
                        "description": "The Service Endpoint name.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username for connecting to the endpoint.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/team:Team": {
            "description": "Manages a team within a project in a Azure DevOps organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"My first project\",\n});\nconst builtinProjectContributors = azuredevops.getGroupOutput({\n    projectId: project.id,\n    name: \"Contributors\",\n});\nconst builtinProjectReaders = azuredevops.getGroupOutput({\n    projectId: project.id,\n    name: \"Readers\",\n});\nconst team = new azuredevops.Team(\"team\", {\n    projectId: project.id,\n    administrators: [builtinProjectContributors.apply(builtinProjectContributors =\u003e builtinProjectContributors.descriptor)],\n    members: [builtinProjectReaders.apply(builtinProjectReaders =\u003e builtinProjectReaders.descriptor)],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"My first project\")\nbuiltin_project_contributors = azuredevops.get_group_output(project_id=project.id,\n    name=\"Contributors\")\nbuiltin_project_readers = azuredevops.get_group_output(project_id=project.id,\n    name=\"Readers\")\nteam = azuredevops.Team(\"team\",\n    project_id=project.id,\n    administrators=[builtin_project_contributors.descriptor],\n    members=[builtin_project_readers.descriptor])\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            WorkItemTemplate = \"Agile\",\n            VersionControl = \"Git\",\n            Visibility = \"private\",\n            Description = \"My first project\",\n        });\n        var builtinProjectContributors = AzureDevOps.GetGroup.Invoke(new AzureDevOps.GetGroupInvokeArgs\n        {\n            ProjectId = project.Id,\n            Name = \"Contributors\",\n        });\n        var builtinProjectReaders = AzureDevOps.GetGroup.Invoke(new AzureDevOps.GetGroupInvokeArgs\n        {\n            ProjectId = project.Id,\n            Name = \"Readers\",\n        });\n        var team = new AzureDevOps.Team(\"team\", new AzureDevOps.TeamArgs\n        {\n            ProjectId = project.Id,\n            Administrators = \n            {\n                builtinProjectContributors.Apply(builtinProjectContributors =\u003e builtinProjectContributors.Descriptor),\n            },\n            Members = \n            {\n                builtinProjectReaders.Apply(builtinProjectReaders =\u003e builtinProjectReaders.Descriptor),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"My first project\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbuiltinProjectContributors := azuredevops.LookupGroupOutput(ctx, GetGroupOutputArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tName:      pulumi.String(\"Contributors\"),\n\t\t}, nil)\n\t\tbuiltinProjectReaders := azuredevops.LookupGroupOutput(ctx, GetGroupOutputArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tName:      pulumi.String(\"Readers\"),\n\t\t}, nil)\n\t\t_, err = azuredevops.NewTeam(ctx, \"team\", \u0026azuredevops.TeamArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tAdministrators: pulumi.StringArray{\n\t\t\t\tbuiltinProjectContributors.ApplyT(func(builtinProjectContributors GetGroupResult) (string, error) {\n\t\t\t\t\treturn builtinProjectContributors.Descriptor, nil\n\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t},\n\t\t\tMembers: pulumi.StringArray{\n\t\t\t\tbuiltinProjectReaders.ApplyT(func(builtinProjectReaders GetGroupResult) (string, error) {\n\t\t\t\t\treturn builtinProjectReaders.Descriptor, nil\n\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Teams - Create](https://docs.microsoft.com/en-us/rest/api/azure/devops/core/teams/create?view=azure-devops-rest-5.1)\n\n## PAT Permissions Required\n\n- **vso.project_manage**:\tGrants the ability to create, read, update, and delete projects and teams.\n\n\n## Import\n\nAzure DevOps teams can be imported using the complete resource id `\u003cproject_id\u003e/\u003cteam_id\u003e` e.g.\n\n```sh\n $ pulumi import azuredevops:index/team:Team team 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "administrators": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of subject descriptors to define administrators of the team.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Team.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of subject descriptors to define members of the team.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Team.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The Project ID.\n"
                }
            },
            "required": [
                "administrators",
                "members",
                "name",
                "projectId"
            ],
            "inputProperties": {
                "administrators": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of subject descriptors to define administrators of the team.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Team.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of subject descriptors to define members of the team.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Team.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The Project ID.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Team resources.\n",
                "properties": {
                    "administrators": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of subject descriptors to define administrators of the team.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Team.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of subject descriptors to define members of the team.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Team.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The Project ID.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/teamAdministrators:TeamAdministrators": {
            "description": "Manages administrators of a team within a project in a Azure DevOps organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"My first project\",\n});\nconst builtinProjectContributors = azuredevops.getGroupOutput({\n    projectId: project.id,\n    name: \"Contributors\",\n});\nconst team = new azuredevops.Team(\"team\", {projectId: project.id});\nconst teamAdministrators = new azuredevops.TeamAdministrators(\"teamAdministrators\", {\n    projectId: team.projectId,\n    teamId: team.id,\n    mode: \"overwrite\",\n    administrators: [builtinProjectContributors.apply(builtinProjectContributors =\u003e builtinProjectContributors.descriptor)],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"My first project\")\nbuiltin_project_contributors = azuredevops.get_group_output(project_id=project.id,\n    name=\"Contributors\")\nteam = azuredevops.Team(\"team\", project_id=project.id)\nteam_administrators = azuredevops.TeamAdministrators(\"teamAdministrators\",\n    project_id=team.project_id,\n    team_id=team.id,\n    mode=\"overwrite\",\n    administrators=[builtin_project_contributors.descriptor])\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            WorkItemTemplate = \"Agile\",\n            VersionControl = \"Git\",\n            Visibility = \"private\",\n            Description = \"My first project\",\n        });\n        var builtinProjectContributors = AzureDevOps.GetGroup.Invoke(new AzureDevOps.GetGroupInvokeArgs\n        {\n            ProjectId = project.Id,\n            Name = \"Contributors\",\n        });\n        var team = new AzureDevOps.Team(\"team\", new AzureDevOps.TeamArgs\n        {\n            ProjectId = project.Id,\n        });\n        var teamAdministrators = new AzureDevOps.TeamAdministrators(\"teamAdministrators\", new AzureDevOps.TeamAdministratorsArgs\n        {\n            ProjectId = team.ProjectId,\n            TeamId = team.Id,\n            Mode = \"overwrite\",\n            Administrators = \n            {\n                builtinProjectContributors.Apply(builtinProjectContributors =\u003e builtinProjectContributors.Descriptor),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"My first project\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbuiltinProjectContributors := azuredevops.LookupGroupOutput(ctx, GetGroupOutputArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tName:      pulumi.String(\"Contributors\"),\n\t\t}, nil)\n\t\tteam, err := azuredevops.NewTeam(ctx, \"team\", \u0026azuredevops.TeamArgs{\n\t\t\tProjectId: project.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewTeamAdministrators(ctx, \"teamAdministrators\", \u0026azuredevops.TeamAdministratorsArgs{\n\t\t\tProjectId: team.ProjectId,\n\t\t\tTeamId:    team.ID(),\n\t\t\tMode:      pulumi.String(\"overwrite\"),\n\t\t\tAdministrators: pulumi.StringArray{\n\t\t\t\tbuiltinProjectContributors.ApplyT(func(builtinProjectContributors GetGroupResult) (string, error) {\n\t\t\t\t\treturn builtinProjectContributors.Descriptor, nil\n\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Teams - Update](https://docs.microsoft.com/en-us/rest/api/azure/devops/core/teams/update?view=azure-devops-rest-5.1)\n\n## PAT Permissions Required\n\n- **vso.project_write**:\tGrants the ability to read and update projects and teams.\n\n\n## Import\n\nThe resource does not support import. ",
            "properties": {
                "administrators": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of subject descriptors to define adminitrators of the team.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "The mode how the resource manages team administrators.\n- `mode == add`: the resource will ensure that all specified administrators will be part of the referenced team\n- `mode == overwrite`: the resource will replace all existing administrators with the administrators specified within the `administrators` block\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The Project ID.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the Team.\n"
                }
            },
            "required": [
                "administrators",
                "projectId",
                "teamId"
            ],
            "inputProperties": {
                "administrators": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of subject descriptors to define adminitrators of the team.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "The mode how the resource manages team administrators.\n- `mode == add`: the resource will ensure that all specified administrators will be part of the referenced team\n- `mode == overwrite`: the resource will replace all existing administrators with the administrators specified within the `administrators` block\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The Project ID.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the Team.\n"
                }
            },
            "requiredInputs": [
                "administrators",
                "projectId",
                "teamId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TeamAdministrators resources.\n",
                "properties": {
                    "administrators": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of subject descriptors to define adminitrators of the team.\n"
                    },
                    "mode": {
                        "type": "string",
                        "description": "The mode how the resource manages team administrators.\n- `mode == add`: the resource will ensure that all specified administrators will be part of the referenced team\n- `mode == overwrite`: the resource will replace all existing administrators with the administrators specified within the `administrators` block\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The Project ID.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the Team.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/teamMembers:TeamMembers": {
            "description": "Manages members of a team within a project in a Azure DevOps organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"My first project\",\n});\nconst builtinProjectReaders = azuredevops.getGroupOutput({\n    projectId: project.id,\n    name: \"Readers\",\n});\nconst team = new azuredevops.Team(\"team\", {projectId: project.id});\nconst teamMembers = new azuredevops.TeamMembers(\"teamMembers\", {\n    projectId: team.projectId,\n    teamId: team.id,\n    mode: \"overwrite\",\n    members: [builtinProjectReaders.apply(builtinProjectReaders =\u003e builtinProjectReaders.descriptor)],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"My first project\")\nbuiltin_project_readers = azuredevops.get_group_output(project_id=project.id,\n    name=\"Readers\")\nteam = azuredevops.Team(\"team\", project_id=project.id)\nteam_members = azuredevops.TeamMembers(\"teamMembers\",\n    project_id=team.project_id,\n    team_id=team.id,\n    mode=\"overwrite\",\n    members=[builtin_project_readers.descriptor])\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            WorkItemTemplate = \"Agile\",\n            VersionControl = \"Git\",\n            Visibility = \"private\",\n            Description = \"My first project\",\n        });\n        var builtinProjectReaders = AzureDevOps.GetGroup.Invoke(new AzureDevOps.GetGroupInvokeArgs\n        {\n            ProjectId = project.Id,\n            Name = \"Readers\",\n        });\n        var team = new AzureDevOps.Team(\"team\", new AzureDevOps.TeamArgs\n        {\n            ProjectId = project.Id,\n        });\n        var teamMembers = new AzureDevOps.TeamMembers(\"teamMembers\", new AzureDevOps.TeamMembersArgs\n        {\n            ProjectId = team.ProjectId,\n            TeamId = team.Id,\n            Mode = \"overwrite\",\n            Members = \n            {\n                builtinProjectReaders.Apply(builtinProjectReaders =\u003e builtinProjectReaders.Descriptor),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"My first project\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbuiltinProjectReaders := azuredevops.LookupGroupOutput(ctx, GetGroupOutputArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tName:      pulumi.String(\"Readers\"),\n\t\t}, nil)\n\t\tteam, err := azuredevops.NewTeam(ctx, \"team\", \u0026azuredevops.TeamArgs{\n\t\t\tProjectId: project.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewTeamMembers(ctx, \"teamMembers\", \u0026azuredevops.TeamMembersArgs{\n\t\t\tProjectId: team.ProjectId,\n\t\t\tTeamId:    team.ID(),\n\t\t\tMode:      pulumi.String(\"overwrite\"),\n\t\t\tMembers: pulumi.StringArray{\n\t\t\t\tbuiltinProjectReaders.ApplyT(func(builtinProjectReaders GetGroupResult) (string, error) {\n\t\t\t\t\treturn builtinProjectReaders.Descriptor, nil\n\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Teams - Update](https://docs.microsoft.com/en-us/rest/api/azure/devops/core/teams/update?view=azure-devops-rest-5.1)\n\n## PAT Permissions Required\n\n- **vso.project_write**:\tGrants the ability to read and update projects and teams.\n\n\n## Import\n\nThe resource does not support import. ",
            "properties": {
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of subject descriptors to define members of the team.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "The mode how the resource manages team members.\n- `mode == add`: the resource will ensure that all specified members will be part of the referenced team\n- `mode == overwrite`: the resource will replace all existing members with the members specified within the `members` block\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The Project ID.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the Team.\n"
                }
            },
            "required": [
                "members",
                "projectId",
                "teamId"
            ],
            "inputProperties": {
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of subject descriptors to define members of the team.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "The mode how the resource manages team members.\n- `mode == add`: the resource will ensure that all specified members will be part of the referenced team\n- `mode == overwrite`: the resource will replace all existing members with the members specified within the `members` block\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The Project ID.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the Team.\n"
                }
            },
            "requiredInputs": [
                "members",
                "projectId",
                "teamId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TeamMembers resources.\n",
                "properties": {
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of subject descriptors to define members of the team.\n"
                    },
                    "mode": {
                        "type": "string",
                        "description": "The mode how the resource manages team members.\n- `mode == add`: the resource will ensure that all specified members will be part of the referenced team\n- `mode == overwrite`: the resource will replace all existing members with the members specified within the `members` block\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The Project ID.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the Team.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops:index/user:User": {
            "description": "Manages a user entitlement within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst user = new azuredevops.User(\"user\", {\n    principalName: \"foo@contoso.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nuser = azuredevops.User(\"user\", principal_name=\"foo@contoso.com\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var user = new AzureDevOps.User(\"user\", new AzureDevOps.UserArgs\n        {\n            PrincipalName = \"foo@contoso.com\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewUser(ctx, \"user\", \u0026azuredevops.UserArgs{\n\t\t\tPrincipalName: pulumi.String(\"foo@contoso.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - User Entitlements - Add](https://docs.microsoft.com/en-us/rest/api/azure/devops/memberentitlementmanagement/user%20entitlements/add?view=azure-devops-rest-5.1)\n\n## PAT Permissions Required\n\n- **Member Entitlement Management**: Read \u0026 Write\n\n\n## Import\n\nThe resources allows the import via the UUID of a user entitlement or by using the principal name of a user owning an entitlement. ",
            "properties": {
                "accountLicenseType": {
                    "type": "string",
                    "description": "Type of Account License. Valid values: `advanced`, `earlyAdopter`, `express`, `none`, `professional`, or `stakeholder`. Defaults to `express`. In addition the value `basic` is allowed which is an alias for `express` and reflects the name of the `express` license used in the Azure DevOps web interface.\n"
                },
                "descriptor": {
                    "type": "string",
                    "description": "The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the user graph subject.\n"
                },
                "licensingSource": {
                    "type": "string",
                    "description": "The source of the licensing (e.g. Account. MSDN etc.) Valid values: `account` (Default), `auto`, `msdn`, `none`, `profile`, `trail`\n"
                },
                "origin": {
                    "type": "string",
                    "description": "The type of source provider for the origin identifier.\n"
                },
                "originId": {
                    "type": "string",
                    "description": "The unique identifier from the system of origin. Typically a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.\n"
                },
                "principalName": {
                    "type": "string",
                    "description": "The principal name is the PrincipalName of a graph member from the source provider. Usually, e-mail address.\n"
                }
            },
            "required": [
                "descriptor",
                "origin",
                "originId",
                "principalName"
            ],
            "inputProperties": {
                "accountLicenseType": {
                    "type": "string",
                    "description": "Type of Account License. Valid values: `advanced`, `earlyAdopter`, `express`, `none`, `professional`, or `stakeholder`. Defaults to `express`. In addition the value `basic` is allowed which is an alias for `express` and reflects the name of the `express` license used in the Azure DevOps web interface.\n"
                },
                "licensingSource": {
                    "type": "string",
                    "description": "The source of the licensing (e.g. Account. MSDN etc.) Valid values: `account` (Default), `auto`, `msdn`, `none`, `profile`, `trail`\n"
                },
                "origin": {
                    "type": "string",
                    "description": "The type of source provider for the origin identifier.\n"
                },
                "originId": {
                    "type": "string",
                    "description": "The unique identifier from the system of origin. Typically a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.\n"
                },
                "principalName": {
                    "type": "string",
                    "description": "The principal name is the PrincipalName of a graph member from the source provider. Usually, e-mail address.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "accountLicenseType": {
                        "type": "string",
                        "description": "Type of Account License. Valid values: `advanced`, `earlyAdopter`, `express`, `none`, `professional`, or `stakeholder`. Defaults to `express`. In addition the value `basic` is allowed which is an alias for `express` and reflects the name of the `express` license used in the Azure DevOps web interface.\n"
                    },
                    "descriptor": {
                        "type": "string",
                        "description": "The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the user graph subject.\n"
                    },
                    "licensingSource": {
                        "type": "string",
                        "description": "The source of the licensing (e.g. Account. MSDN etc.) Valid values: `account` (Default), `auto`, `msdn`, `none`, `profile`, `trail`\n"
                    },
                    "origin": {
                        "type": "string",
                        "description": "The type of source provider for the origin identifier.\n"
                    },
                    "originId": {
                        "type": "string",
                        "description": "The unique identifier from the system of origin. Typically a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.\n"
                    },
                    "principalName": {
                        "type": "string",
                        "description": "The principal name is the PrincipalName of a graph member from the source provider. Usually, e-mail address.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Entitlement/user:User"
                }
            ]
        },
        "azuredevops:index/variableGroup:VariableGroup": {
            "description": "Manages variable groups within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {});\nconst variablegroup = new azuredevops.VariableGroup(\"variablegroup\", {\n    projectId: project.id,\n    description: \"Test Variable Group Description\",\n    allowAccess: true,\n    variables: [\n        {\n            name: \"key\",\n            value: \"value\",\n        },\n        {\n            name: \"Account Password\",\n            secretValue: \"p@ssword123\",\n            isSecret: true,\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\")\nvariablegroup = azuredevops.VariableGroup(\"variablegroup\",\n    project_id=project.id,\n    description=\"Test Variable Group Description\",\n    allow_access=True,\n    variables=[\n        azuredevops.VariableGroupVariableArgs(\n            name=\"key\",\n            value=\"value\",\n        ),\n        azuredevops.VariableGroupVariableArgs(\n            name=\"Account Password\",\n            secret_value=\"p@ssword123\",\n            is_secret=True,\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n        });\n        var variablegroup = new AzureDevOps.VariableGroup(\"variablegroup\", new AzureDevOps.VariableGroupArgs\n        {\n            ProjectId = project.Id,\n            Description = \"Test Variable Group Description\",\n            AllowAccess = true,\n            Variables = \n            {\n                new AzureDevOps.Inputs.VariableGroupVariableArgs\n                {\n                    Name = \"key\",\n                    Value = \"value\",\n                },\n                new AzureDevOps.Inputs.VariableGroupVariableArgs\n                {\n                    Name = \"Account Password\",\n                    SecretValue = \"p@ssword123\",\n                    IsSecret = true,\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewVariableGroup(ctx, \"variablegroup\", \u0026azuredevops.VariableGroupArgs{\n\t\t\tProjectId:   project.ID(),\n\t\t\tDescription: pulumi.String(\"Test Variable Group Description\"),\n\t\t\tAllowAccess: pulumi.Bool(true),\n\t\t\tVariables: VariableGroupVariableArray{\n\t\t\t\t\u0026VariableGroupVariableArgs{\n\t\t\t\t\tName:  pulumi.String(\"key\"),\n\t\t\t\t\tValue: pulumi.String(\"value\"),\n\t\t\t\t},\n\t\t\t\t\u0026VariableGroupVariableArgs{\n\t\t\t\t\tName:        pulumi.String(\"Account Password\"),\n\t\t\t\t\tSecretValue: pulumi.String(\"p@ssword123\"),\n\t\t\t\t\tIsSecret:    pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Variable Groups](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/variablegroups?view=azure-devops-rest-5.1)\n- [Azure DevOps Service REST API 5.1 - Authorized Resources](https://docs.microsoft.com/en-us/rest/api/azure/devops/build/authorizedresources?view=azure-devops-rest-5.1)\n\n## PAT Permissions Required\n\n- **Variable Groups**: Read, Create, \u0026 Manage\n- **Build**: Read \u0026 execute\n- **Project and Team**: Read\n- **Token Administration**: Read \u0026 manage\n- **Tokens**: Read \u0026 manage\n- **Work Items**: Read\n\n\n## Import\n\n**Variable groups containing secret values cannot be imported.** Azure DevOps Variable groups can be imported using the project name/variable group ID or by the project Guid/variable group ID, e.g.\n\n```sh\n $ pulumi import azuredevops:index/variableGroup:VariableGroup variablegroup \"Test Project/10\"\n```\n\n or\n\n```sh\n $ pulumi import azuredevops:index/variableGroup:VariableGroup variablegroup 00000000-0000-0000-0000-000000000000/0\n```\n\n _Note that for secret variables, the import command retrieve blank value in the tfstate._ ",
            "properties": {
                "allowAccess": {
                    "type": "boolean",
                    "description": "Boolean that indicate if this variable group is shared by all pipelines of this project.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Variable Group.\n"
                },
                "keyVault": {
                    "$ref": "#/types/azuredevops:index/VariableGroupKeyVault:VariableGroupKeyVault"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Variable Group.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/VariableGroupVariable:VariableGroupVariable"
                    },
                    "description": "One or more `variable` blocks as documented below.\n"
                }
            },
            "required": [
                "name",
                "projectId",
                "variables"
            ],
            "inputProperties": {
                "allowAccess": {
                    "type": "boolean",
                    "description": "Boolean that indicate if this variable group is shared by all pipelines of this project.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Variable Group.\n"
                },
                "keyVault": {
                    "$ref": "#/types/azuredevops:index/VariableGroupKeyVault:VariableGroupKeyVault"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Variable Group.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops:index/VariableGroupVariable:VariableGroupVariable"
                    },
                    "description": "One or more `variable` blocks as documented below.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "variables"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VariableGroup resources.\n",
                "properties": {
                    "allowAccess": {
                        "type": "boolean",
                        "description": "Boolean that indicate if this variable group is shared by all pipelines of this project.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Variable Group.\n"
                    },
                    "keyVault": {
                        "$ref": "#/types/azuredevops:index/VariableGroupKeyVault:VariableGroupKeyVault"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Variable Group.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID or project name.\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:index/VariableGroupVariable:VariableGroupVariable"
                        },
                        "description": "One or more `variable` blocks as documented below.\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "azuredevops:Pipeline/variableGroup:VariableGroup"
                }
            ]
        },
        "azuredevops:index/workItemQueryPermissions:WorkItemQueryPermissions": {
            "description": "Manages permissions for Work Item Queries. \n\n\u003e **Note** Permissions can be assigned to group principals and not to single user principals.\n\n## Permission levels\n\nPermission for Work Item Queries within Azure DevOps can be applied on two different levels.\nThose levels are reflected by specifying (or omitting) values for the arguments `project_id` and `path`.\n\n### Project level\n\nPermissions for all Work Item Queries inside a project (existing or newly created ones) are specified, if only the argument `project_id` has a value.\n\n#### Example usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project_wiq_root_permissions = new azuredevops.WorkItemQueryPermissions(\"project-wiq-root-permissions\", {\n    projectId: azuredevops_project.project.id,\n    principal: data.azuredevops_group[\"project-readers\"].id,\n    permissions: {\n        CreateRepository: \"Deny\",\n        DeleteRepository: \"Deny\",\n        RenameRepository: \"NotSet\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject_wiq_root_permissions = azuredevops.WorkItemQueryPermissions(\"project-wiq-root-permissions\",\n    project_id=azuredevops_project[\"project\"][\"id\"],\n    principal=data[\"azuredevops_group\"][\"project-readers\"][\"id\"],\n    permissions={\n        \"CreateRepository\": \"Deny\",\n        \"DeleteRepository\": \"Deny\",\n        \"RenameRepository\": \"NotSet\",\n    })\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project_wiq_root_permissions = new AzureDevOps.WorkItemQueryPermissions(\"project-wiq-root-permissions\", new AzureDevOps.WorkItemQueryPermissionsArgs\n        {\n            ProjectId = azuredevops_project.Project.Id,\n            Principal = data.Azuredevops_group.Project_readers.Id,\n            Permissions = \n            {\n                { \"CreateRepository\", \"Deny\" },\n                { \"DeleteRepository\", \"Deny\" },\n                { \"RenameRepository\", \"NotSet\" },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewWorkItemQueryPermissions(ctx, \"project-wiq-root-permissions\", \u0026azuredevops.WorkItemQueryPermissionsArgs{\n\t\t\tProjectId: pulumi.Any(azuredevops_project.Project.Id),\n\t\t\tPrincipal: pulumi.Any(data.Azuredevops_group.Project - readers.Id),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"CreateRepository\": pulumi.String(\"Deny\"),\n\t\t\t\t\"DeleteRepository\": pulumi.String(\"Deny\"),\n\t\t\t\t\"RenameRepository\": pulumi.String(\"NotSet\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n### Shared Queries folder level\n\nPermissions for a specific folder inside Shared Queries are specified if the arguments `project_id` and `path` are set.\n\n\u003e **Note** To set permissions for the Shared Queries folder itself use `/` as path value\n\n#### Example usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst wiq_folder_permissions = new azuredevops.WorkItemQueryPermissions(\"wiq-folder-permissions\", {\n    projectId: azuredevops_project.project.id,\n    path: \"/Team\",\n    principal: data.azuredevops_group[\"project-readers\"].id,\n    permissions: {\n        Contribute: \"Allow\",\n        Delete: \"Deny\",\n        Read: \"NotSet\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nwiq_folder_permissions = azuredevops.WorkItemQueryPermissions(\"wiq-folder-permissions\",\n    project_id=azuredevops_project[\"project\"][\"id\"],\n    path=\"/Team\",\n    principal=data[\"azuredevops_group\"][\"project-readers\"][\"id\"],\n    permissions={\n        \"Contribute\": \"Allow\",\n        \"Delete\": \"Deny\",\n        \"Read\": \"NotSet\",\n    })\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var wiq_folder_permissions = new AzureDevOps.WorkItemQueryPermissions(\"wiq-folder-permissions\", new AzureDevOps.WorkItemQueryPermissionsArgs\n        {\n            ProjectId = azuredevops_project.Project.Id,\n            Path = \"/Team\",\n            Principal = data.Azuredevops_group.Project_readers.Id,\n            Permissions = \n            {\n                { \"Contribute\", \"Allow\" },\n                { \"Delete\", \"Deny\" },\n                { \"Read\", \"NotSet\" },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.NewWorkItemQueryPermissions(ctx, \"wiq-folder-permissions\", \u0026azuredevops.WorkItemQueryPermissionsArgs{\n\t\t\tProjectId: pulumi.Any(azuredevops_project.Project.Id),\n\t\t\tPath:      pulumi.String(\"/Team\"),\n\t\t\tPrincipal: pulumi.Any(data.Azuredevops_group.Project - readers.Id),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"Contribute\": pulumi.String(\"Allow\"),\n\t\t\t\t\"Delete\":     pulumi.String(\"Deny\"),\n\t\t\t\t\"Read\":       pulumi.String(\"NotSet\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    description: \"Test Project Description\",\n    visibility: \"private\",\n    versionControl: \"Git\",\n    workItemTemplate: \"Agile\",\n});\nconst project-readers = azuredevops.getGroupOutput({\n    projectId: project.id,\n    name: \"Readers\",\n});\nconst project-contributors = azuredevops.getGroupOutput({\n    projectId: project.id,\n    name: \"Contributors\",\n});\nconst wiq_project_permissions = new azuredevops.WorkItemQueryPermissions(\"wiq-project-permissions\", {\n    projectId: project.id,\n    principal: project_readers.apply(project_readers =\u003e project_readers.id),\n    permissions: {\n        Read: \"Allow\",\n        Delete: \"Deny\",\n        Contribute: \"Deny\",\n        ManagePermissions: \"Deny\",\n    },\n});\nconst wiq_sharedqueries_permissions = new azuredevops.WorkItemQueryPermissions(\"wiq-sharedqueries-permissions\", {\n    projectId: project.id,\n    path: \"/\",\n    principal: project_contributors.apply(project_contributors =\u003e project_contributors.id),\n    permissions: {\n        Read: \"Allow\",\n        Delete: \"Deny\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    description=\"Test Project Description\",\n    visibility=\"private\",\n    version_control=\"Git\",\n    work_item_template=\"Agile\")\nproject_readers = azuredevops.get_group_output(project_id=project.id,\n    name=\"Readers\")\nproject_contributors = azuredevops.get_group_output(project_id=project.id,\n    name=\"Contributors\")\nwiq_project_permissions = azuredevops.WorkItemQueryPermissions(\"wiq-project-permissions\",\n    project_id=project.id,\n    principal=project_readers.id,\n    permissions={\n        \"Read\": \"Allow\",\n        \"Delete\": \"Deny\",\n        \"Contribute\": \"Deny\",\n        \"ManagePermissions\": \"Deny\",\n    })\nwiq_sharedqueries_permissions = azuredevops.WorkItemQueryPermissions(\"wiq-sharedqueries-permissions\",\n    project_id=project.id,\n    path=\"/\",\n    principal=project_contributors.id,\n    permissions={\n        \"Read\": \"Allow\",\n        \"Delete\": \"Deny\",\n    })\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            Description = \"Test Project Description\",\n            Visibility = \"private\",\n            VersionControl = \"Git\",\n            WorkItemTemplate = \"Agile\",\n        });\n        var project_readers = AzureDevOps.GetGroup.Invoke(new AzureDevOps.GetGroupInvokeArgs\n        {\n            ProjectId = project.Id,\n            Name = \"Readers\",\n        });\n        var project_contributors = AzureDevOps.GetGroup.Invoke(new AzureDevOps.GetGroupInvokeArgs\n        {\n            ProjectId = project.Id,\n            Name = \"Contributors\",\n        });\n        var wiq_project_permissions = new AzureDevOps.WorkItemQueryPermissions(\"wiq-project-permissions\", new AzureDevOps.WorkItemQueryPermissionsArgs\n        {\n            ProjectId = project.Id,\n            Principal = project_readers.Apply(project_readers =\u003e project_readers.Id),\n            Permissions = \n            {\n                { \"Read\", \"Allow\" },\n                { \"Delete\", \"Deny\" },\n                { \"Contribute\", \"Deny\" },\n                { \"ManagePermissions\", \"Deny\" },\n            },\n        });\n        var wiq_sharedqueries_permissions = new AzureDevOps.WorkItemQueryPermissions(\"wiq-sharedqueries-permissions\", new AzureDevOps.WorkItemQueryPermissionsArgs\n        {\n            ProjectId = project.Id,\n            Path = \"/\",\n            Principal = project_contributors.Apply(project_contributors =\u003e project_contributors.Id),\n            Permissions = \n            {\n                { \"Read\", \"Allow\" },\n                { \"Delete\", \"Deny\" },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tDescription:      pulumi.String(\"Test Project Description\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tproject_readers := azuredevops.LookupGroupOutput(ctx, GetGroupOutputArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tName:      pulumi.String(\"Readers\"),\n\t\t}, nil)\n\t\tproject_contributors := azuredevops.LookupGroupOutput(ctx, GetGroupOutputArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tName:      pulumi.String(\"Contributors\"),\n\t\t}, nil)\n\t\t_, err = azuredevops.NewWorkItemQueryPermissions(ctx, \"wiq-project-permissions\", \u0026azuredevops.WorkItemQueryPermissionsArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tPrincipal: project_readers.ApplyT(func(project_readers GetGroupResult) (string, error) {\n\t\t\t\treturn project_readers.Id, nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"Read\":              pulumi.String(\"Allow\"),\n\t\t\t\t\"Delete\":            pulumi.String(\"Deny\"),\n\t\t\t\t\"Contribute\":        pulumi.String(\"Deny\"),\n\t\t\t\t\"ManagePermissions\": pulumi.String(\"Deny\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewWorkItemQueryPermissions(ctx, \"wiq-sharedqueries-permissions\", \u0026azuredevops.WorkItemQueryPermissionsArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tPath:      pulumi.String(\"/\"),\n\t\t\tPrincipal: project_contributors.ApplyT(func(project_contributors GetGroupResult) (string, error) {\n\t\t\t\treturn project_contributors.Id, nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"Read\":   pulumi.String(\"Allow\"),\n\t\t\t\t\"Delete\": pulumi.String(\"Deny\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Security](https://docs.microsoft.com/en-us/rest/api/azure/devops/security/?view=azure-devops-rest-5.1)\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: vso.security_manage - Grants the ability to read, write, and manage security permissions.\n\n\n## Import\n\nThe resource does not support import. ",
            "properties": {
                "path": {
                    "type": "string",
                    "description": "Path to a query or folder beneath `Shared Queries`\n"
                },
                "permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "the permissions to assign. The following permissions are available\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The **group** principal to assign the permissions.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project to assign the permissions.\n"
                },
                "replace": {
                    "type": "boolean",
                    "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`\n"
                }
            },
            "required": [
                "permissions",
                "principal",
                "projectId"
            ],
            "inputProperties": {
                "path": {
                    "type": "string",
                    "description": "Path to a query or folder beneath `Shared Queries`\n"
                },
                "permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "the permissions to assign. The following permissions are available\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The **group** principal to assign the permissions.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project to assign the permissions.\n"
                },
                "replace": {
                    "type": "boolean",
                    "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`\n"
                }
            },
            "requiredInputs": [
                "permissions",
                "principal",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkItemQueryPermissions resources.\n",
                "properties": {
                    "path": {
                        "type": "string",
                        "description": "Path to a query or folder beneath `Shared Queries`\n"
                    },
                    "permissions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "the permissions to assign. The following permissions are available\n"
                    },
                    "principal": {
                        "type": "string",
                        "description": "The **group** principal to assign the permissions.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project to assign the permissions.\n"
                    },
                    "replace": {
                        "type": "boolean",
                        "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "azuredevops:Agent/getPool:getPool": {
            "description": "Use this data source to access information about an existing Agent Pool within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst pool = azuredevops.getPool({\n    name: \"Sample Agent Pool\",\n});\nexport const name = pool.then(pool =\u003e pool.name);\nexport const poolType = pool.then(pool =\u003e pool.poolType);\nexport const autoProvision = pool.then(pool =\u003e pool.autoProvision);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\npool = azuredevops.get_pool(name=\"Sample Agent Pool\")\npulumi.export(\"name\", pool.name)\npulumi.export(\"poolType\", pool.pool_type)\npulumi.export(\"autoProvision\", pool.auto_provision)\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var pool = Output.Create(AzureDevOps.GetPool.InvokeAsync(new AzureDevOps.GetPoolArgs\n        {\n            Name = \"Sample Agent Pool\",\n        }));\n        this.Name = pool.Apply(pool =\u003e pool.Name);\n        this.PoolType = pool.Apply(pool =\u003e pool.PoolType);\n        this.AutoProvision = pool.Apply(pool =\u003e pool.AutoProvision);\n    }\n\n    [Output(\"name\")]\n    public Output\u003cstring\u003e Name { get; set; }\n    [Output(\"poolType\")]\n    public Output\u003cstring\u003e PoolType { get; set; }\n    [Output(\"autoProvision\")]\n    public Output\u003cstring\u003e AutoProvision { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpool, err := azuredevops.LookupPool(ctx, \u0026GetPoolArgs{\n\t\t\tName: \"Sample Agent Pool\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"name\", pool.Name)\n\t\tctx.Export(\"poolType\", pool.PoolType)\n\t\tctx.Export(\"autoProvision\", pool.AutoProvision)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Agent Pools - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/pools/get?view=azure-devops-rest-5.1)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPool.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Agent Pool.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPool.\n",
                "properties": {
                    "autoProvision": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "poolType": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "autoProvision",
                    "name",
                    "poolType",
                    "id"
                ]
            },
            "deprecationMessage": "azuredevops.agent.getPool has been deprecated in favor of azuredevops.getPool"
        },
        "azuredevops:Agent/getPools:getPools": {
            "description": "Use this data source to access information about existing Agent Pools within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst pools = azuredevops.getPools({});\nexport const agentPoolName = [pools.then(pools =\u003e pools.agentPools)].map(__item =\u003e __item?.name);\nexport const autoProvision = [pools.then(pools =\u003e pools.agentPools)].map(__item =\u003e __item?.autoProvision);\nexport const poolType = [pools.then(pools =\u003e pools.agentPools)].map(__item =\u003e __item?.poolType);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\npools = azuredevops.get_pools()\npulumi.export(\"agentPoolName\", [__item.name for __item in [pools.agent_pools]])\npulumi.export(\"autoProvision\", [__item.auto_provision for __item in [pools.agent_pools]])\npulumi.export(\"poolType\", [__item.pool_type for __item in [pools.agent_pools]])\n```\n```csharp\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var pools = Output.Create(AzureDevOps.GetPools.InvokeAsync());\n        this.AgentPoolName = \n        {\n            pools.Apply(pools =\u003e pools.AgentPools),\n        }.Select(__item =\u003e __item?.Name).ToList();\n        this.AutoProvision = \n        {\n            pools.Apply(pools =\u003e pools.AgentPools),\n        }.Select(__item =\u003e __item?.AutoProvision).ToList();\n        this.PoolType = \n        {\n            pools.Apply(pools =\u003e pools.AgentPools),\n        }.Select(__item =\u003e __item?.PoolType).ToList();\n    }\n\n    [Output(\"agentPoolName\")]\n    public Output\u003cstring\u003e AgentPoolName { get; set; }\n    [Output(\"autoProvision\")]\n    public Output\u003cstring\u003e AutoProvision { get; set; }\n    [Output(\"poolType\")]\n    public Output\u003cstring\u003e PoolType { get; set; }\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Agent Pools - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/pools/get?view=azure-devops-rest-5.1)\n",
            "outputs": {
                "description": "A collection of values returned by getPools.\n",
                "properties": {
                    "agentPools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:Agent/getPoolsAgentPool:getPoolsAgentPool"
                        },
                        "description": "A list of existing agent pools in your Azure DevOps Organization with the following details about every agent pool:\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "agentPools",
                    "id"
                ]
            },
            "deprecationMessage": "azuredevops.agent.getPools has been deprecated in favor of azuredevops.getPools"
        },
        "azuredevops:Core/getClientConfig:getClientConfig": {
            "description": "Use this data source to access information about the Azure DevOps organization configured for the provider.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst clientConfig = azuredevops.getClientConfig({});\nexport const orgUrl = clientConfig.then(clientConfig =\u003e clientConfig.organizationUrl);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nclient_config = azuredevops.get_client_config()\npulumi.export(\"orgUrl\", client_config.organization_url)\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var clientConfig = Output.Create(AzureDevOps.GetClientConfig.InvokeAsync());\n        this.OrgUrl = clientConfig.Apply(clientConfig =\u003e clientConfig.OrganizationUrl);\n    }\n\n    [Output(\"orgUrl\")]\n    public Output\u003cstring\u003e OrgUrl { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tclientConfig, err := azuredevops.GetClientConfig(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"orgUrl\", clientConfig.OrganizationUrl)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getClientConfig.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "organizationUrl": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "organizationUrl",
                    "id"
                ]
            },
            "deprecationMessage": "azuredevops.core.getClientConfig has been deprecated in favor of azuredevops.getClientConfig"
        },
        "azuredevops:Core/getProject:getProject": {
            "description": "Use this data source to access information about an existing Project within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = azuredevops.getProject({\n    name: \"Sample Project\",\n});\nexport const id = project.then(project =\u003e project.id);\nexport const name = project.then(project =\u003e project.name);\nexport const visibility = project.then(project =\u003e project.visibility);\nexport const versionControl = project.then(project =\u003e project.versionControl);\nexport const workItemTemplate = project.then(project =\u003e project.workItemTemplate);\nexport const processTemplateId = project.then(project =\u003e project.processTemplateId);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.get_project(name=\"Sample Project\")\npulumi.export(\"id\", project.id)\npulumi.export(\"name\", project.name)\npulumi.export(\"visibility\", project.visibility)\npulumi.export(\"versionControl\", project.version_control)\npulumi.export(\"workItemTemplate\", project.work_item_template)\npulumi.export(\"processTemplateId\", project.process_template_id)\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = Output.Create(AzureDevOps.GetProject.InvokeAsync(new AzureDevOps.GetProjectArgs\n        {\n            Name = \"Sample Project\",\n        }));\n        this.Id = project.Apply(project =\u003e project.Id);\n        this.Name = project.Apply(project =\u003e project.Name);\n        this.Visibility = project.Apply(project =\u003e project.Visibility);\n        this.VersionControl = project.Apply(project =\u003e project.VersionControl);\n        this.WorkItemTemplate = project.Apply(project =\u003e project.WorkItemTemplate);\n        this.ProcessTemplateId = project.Apply(project =\u003e project.ProcessTemplateId);\n    }\n\n    [Output(\"id\")]\n    public Output\u003cstring\u003e Id { get; set; }\n    [Output(\"name\")]\n    public Output\u003cstring\u003e Name { get; set; }\n    [Output(\"visibility\")]\n    public Output\u003cstring\u003e Visibility { get; set; }\n    [Output(\"versionControl\")]\n    public Output\u003cstring\u003e VersionControl { get; set; }\n    [Output(\"workItemTemplate\")]\n    public Output\u003cstring\u003e WorkItemTemplate { get; set; }\n    [Output(\"processTemplateId\")]\n    public Output\u003cstring\u003e ProcessTemplateId { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.LookupProject(ctx, \u0026GetProjectArgs{\n\t\t\tName: pulumi.StringRef(\"Sample Project\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"id\", project.Id)\n\t\tctx.Export(\"name\", project.Name)\n\t\tctx.Export(\"visibility\", project.Visibility)\n\t\tctx.Export(\"versionControl\", project.VersionControl)\n\t\tctx.Export(\"workItemTemplate\", project.WorkItemTemplate)\n\t\tctx.Export(\"processTemplateId\", project.ProcessTemplateId)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Projects - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/core/projects/get?view=azure-devops-rest-5.1)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProject.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Project.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of the Project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProject.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "features": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "processTemplateId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "versionControl": {
                        "type": "string"
                    },
                    "visibility": {
                        "type": "string"
                    },
                    "workItemTemplate": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "features",
                    "processTemplateId",
                    "versionControl",
                    "visibility",
                    "workItemTemplate",
                    "id"
                ]
            },
            "deprecationMessage": "azuredevops.core.getProject has been deprecated in favor of azuredevops.getProject"
        },
        "azuredevops:Core/getProjects:getProjects": {
            "description": "Use this data source to access information about existing Projects within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst test = azuredevops.getProjects({\n    name: \"contoso\",\n    state: \"wellFormed\",\n});\nexport const projectId = [test.then(test =\u003e test.projects)].map(__item =\u003e __item?.projectId);\nexport const name = [test.then(test =\u003e test.projects)].map(__item =\u003e __item?.name);\nexport const projectUrl = [test.then(test =\u003e test.projects)].map(__item =\u003e __item?.projectUrl);\nexport const state = [test.then(test =\u003e test.projects)].map(__item =\u003e __item?.state);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\ntest = azuredevops.get_projects(name=\"contoso\",\n    state=\"wellFormed\")\npulumi.export(\"projectId\", [__item.project_id for __item in [test.projects]])\npulumi.export(\"name\", [__item.name for __item in [test.projects]])\npulumi.export(\"projectUrl\", [__item.project_url for __item in [test.projects]])\npulumi.export(\"state\", [__item.state for __item in [test.projects]])\n```\n```csharp\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = Output.Create(AzureDevOps.GetProjects.InvokeAsync(new AzureDevOps.GetProjectsArgs\n        {\n            Name = \"contoso\",\n            State = \"wellFormed\",\n        }));\n        this.ProjectId = \n        {\n            test.Apply(test =\u003e test.Projects),\n        }.Select(__item =\u003e __item?.ProjectId).ToList();\n        this.Name = \n        {\n            test.Apply(test =\u003e test.Projects),\n        }.Select(__item =\u003e __item?.Name).ToList();\n        this.ProjectUrl = \n        {\n            test.Apply(test =\u003e test.Projects),\n        }.Select(__item =\u003e __item?.ProjectUrl).ToList();\n        this.State = \n        {\n            test.Apply(test =\u003e test.Projects),\n        }.Select(__item =\u003e __item?.State).ToList();\n    }\n\n    [Output(\"projectId\")]\n    public Output\u003cstring\u003e ProjectId { get; set; }\n    [Output(\"name\")]\n    public Output\u003cstring\u003e Name { get; set; }\n    [Output(\"projectUrl\")]\n    public Output\u003cstring\u003e ProjectUrl { get; set; }\n    [Output(\"state\")]\n    public Output\u003cstring\u003e State { get; set; }\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Projects - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/core/projects/get?view=azure-devops-rest-5.1)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProjects.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Project, if not specified all projects will be returned.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the Project, if not specified all projects will be returned. Valid values are `all`, `deleting`, `new`, `wellFormed`, `createPending`, `unchanged`,`deleted`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProjects.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Project name.\n"
                    },
                    "projects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:Core/getProjectsProject:getProjectsProject"
                        },
                        "description": "A list of existing projects in your Azure DevOps Organization with details about every project which includes:\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Project state.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projects",
                    "id"
                ]
            },
            "deprecationMessage": "azuredevops.core.getProjects has been deprecated in favor of azuredevops.getProjects"
        },
        "azuredevops:Identities/getGroup:getGroup": {
            "description": "Use this data source to access information about an existing Group within Azure DevOps\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = azuredevops.getProject({\n    name: \"contoso-project\",\n});\nconst test = project.then(project =\u003e azuredevops.getGroup({\n    projectId: project.id,\n    name: \"Test Group\",\n}));\nexport const groupId = test.then(test =\u003e test.id);\nexport const groupDescriptor = test.then(test =\u003e test.descriptor);\nconst test-collection-group = azuredevops.getGroup({\n    name: \"Project Collection Administrators\",\n});\nexport const collectionGroupId = test_collection_group.then(test_collection_group =\u003e test_collection_group.id);\nexport const collectionGroupDescriptor = test_collection_group.then(test_collection_group =\u003e test_collection_group.descriptor);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.get_project(name=\"contoso-project\")\ntest = azuredevops.get_group(project_id=project.id,\n    name=\"Test Group\")\npulumi.export(\"groupId\", test.id)\npulumi.export(\"groupDescriptor\", test.descriptor)\ntest_collection_group = azuredevops.get_group(name=\"Project Collection Administrators\")\npulumi.export(\"collectionGroupId\", test_collection_group.id)\npulumi.export(\"collectionGroupDescriptor\", test_collection_group.descriptor)\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = Output.Create(AzureDevOps.GetProject.InvokeAsync(new AzureDevOps.GetProjectArgs\n        {\n            Name = \"contoso-project\",\n        }));\n        var test = project.Apply(project =\u003e Output.Create(AzureDevOps.GetGroup.InvokeAsync(new AzureDevOps.GetGroupArgs\n        {\n            ProjectId = project.Id,\n            Name = \"Test Group\",\n        })));\n        this.GroupId = test.Apply(test =\u003e test.Id);\n        this.GroupDescriptor = test.Apply(test =\u003e test.Descriptor);\n        var test_collection_group = Output.Create(AzureDevOps.GetGroup.InvokeAsync(new AzureDevOps.GetGroupArgs\n        {\n            Name = \"Project Collection Administrators\",\n        }));\n        this.CollectionGroupId = test_collection_group.Apply(test_collection_group =\u003e test_collection_group.Id);\n        this.CollectionGroupDescriptor = test_collection_group.Apply(test_collection_group =\u003e test_collection_group.Descriptor);\n    }\n\n    [Output(\"groupId\")]\n    public Output\u003cstring\u003e GroupId { get; set; }\n    [Output(\"groupDescriptor\")]\n    public Output\u003cstring\u003e GroupDescriptor { get; set; }\n    [Output(\"collectionGroupId\")]\n    public Output\u003cstring\u003e CollectionGroupId { get; set; }\n    [Output(\"collectionGroupDescriptor\")]\n    public Output\u003cstring\u003e CollectionGroupDescriptor { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.LookupProject(ctx, \u0026GetProjectArgs{\n\t\t\tName: pulumi.StringRef(\"contoso-project\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttest, err := azuredevops.LookupGroup(ctx, \u0026GetGroupArgs{\n\t\t\tProjectId: pulumi.StringRef(project.Id),\n\t\t\tName:      \"Test Group\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"groupId\", test.Id)\n\t\tctx.Export(\"groupDescriptor\", test.Descriptor)\n\t\ttest_collection_group, err := azuredevops.LookupGroup(ctx, \u0026GetGroupArgs{\n\t\t\tName: \"Project Collection Administrators\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"collectionGroupId\", test_collection_group.Id)\n\t\tctx.Export(\"collectionGroupDescriptor\", test_collection_group.Descriptor)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Groups - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/graph/groups/get?view=azure-devops-rest-5.1)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGroup.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The Group Name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The Project ID. If no project ID is specified the project collection groups will be searched.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGroup.\n",
                "properties": {
                    "descriptor": {
                        "type": "string",
                        "description": "The Descriptor is the primary way to reference the graph subject. This field will uniquely identify the same graph subject across both Accounts and Organizations.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "origin": {
                        "type": "string",
                        "description": "The type of source provider for the origin identifier (ex:AD, AAD, MSA)\n"
                    },
                    "originId": {
                        "type": "string",
                        "description": "The unique identifier from the system of origin. Typically a sid, object id or Guid. Linking and unlinking operations can cause this value to change for a user because the user is not backed by a different provider and has a different unique id in the new provider.\n"
                    },
                    "projectId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "descriptor",
                    "name",
                    "origin",
                    "originId",
                    "id"
                ]
            },
            "deprecationMessage": "azuredevops.identities.getGroup has been deprecated in favor of azuredevops.getGroup"
        },
        "azuredevops:Identities/getUsers:getUsers": {
            "description": "Use this data source to access information about an existing users within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\n// Load single user by using it's principal name\nconst user = pulumi.output(azuredevops.getUsers({\n    principalName: \"contoso-user@contoso.onmicrosoft.com\",\n}));\n// Load all users know inside an organization\nconst all_users = pulumi.output(azuredevops.getUsers());\n// Load all users know inside an organization originating from a specific source (origin)\nconst all_from_origin = pulumi.output(azuredevops.getUsers({\n    origin: \"aad\",\n}));\n// Load all users know inside an organization filtered by their subject types\nconst all_from_subject_types = pulumi.output(azuredevops.getUsers({\n    subjectTypes: [\n        \"aad\",\n        \"msa\",\n    ],\n}));\n// Load a single user by origin and origin ID\nconst all_from_origin_id = pulumi.output(azuredevops.getUsers({\n    origin: \"aad\",\n    originId: \"a7ead982-8438-4cd2-b9e3-c3aa51a7b675\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nuser = azuredevops.get_users(principal_name=\"contoso-user@contoso.onmicrosoft.com\")\nall_users = azuredevops.get_users()\nall_from_origin = azuredevops.get_users(origin=\"aad\")\nall_from_subject_types = azuredevops.get_users(subject_types=[\n    \"aad\",\n    \"msa\",\n])\nall_from_origin_id = azuredevops.get_users(origin=\"aad\",\n    origin_id=\"a7ead982-8438-4cd2-b9e3-c3aa51a7b675\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var user = Output.Create(AzureDevOps.GetUsers.InvokeAsync(new AzureDevOps.GetUsersArgs\n        {\n            PrincipalName = \"contoso-user@contoso.onmicrosoft.com\",\n        }));\n        var all_users = Output.Create(AzureDevOps.GetUsers.InvokeAsync());\n        var all_from_origin = Output.Create(AzureDevOps.GetUsers.InvokeAsync(new AzureDevOps.GetUsersArgs\n        {\n            Origin = \"aad\",\n        }));\n        var all_from_subjectTypes = Output.Create(AzureDevOps.GetUsers.InvokeAsync(new AzureDevOps.GetUsersArgs\n        {\n            SubjectTypes = \n            {\n                \"aad\",\n                \"msa\",\n            },\n        }));\n        var all_from_origin_id = Output.Create(AzureDevOps.GetUsers.InvokeAsync(new AzureDevOps.GetUsersArgs\n        {\n            Origin = \"aad\",\n            OriginId = \"a7ead982-8438-4cd2-b9e3-c3aa51a7b675\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.GetUsers(ctx, \u0026GetUsersArgs{\n\t\t\tPrincipalName: pulumi.StringRef(\"contoso-user@contoso.onmicrosoft.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.GetUsers(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.GetUsers(ctx, \u0026GetUsersArgs{\n\t\t\tOrigin: pulumi.StringRef(\"aad\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.GetUsers(ctx, \u0026GetUsersArgs{\n\t\t\tSubjectTypes: []string{\n\t\t\t\t\"aad\",\n\t\t\t\t\"msa\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.GetUsers(ctx, \u0026GetUsersArgs{\n\t\t\tOrigin:   pulumi.StringRef(\"aad\"),\n\t\t\tOriginId: pulumi.StringRef(\"a7ead982-8438-4cd2-b9e3-c3aa51a7b675\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Graph Users API](https://docs.microsoft.com/en-us/rest/api/azure/devops/graph/users?view=azure-devops-rest-5.1)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUsers.\n",
                "properties": {
                    "origin": {
                        "type": "string",
                        "description": "The type of source provider for the `origin_id` parameter (ex:AD, AAD, MSA) The supported origins are listed below.\n"
                    },
                    "originId": {
                        "type": "string",
                        "description": "The unique identifier from the system of origin.\n"
                    },
                    "principalName": {
                        "type": "string",
                        "description": "The PrincipalName of this graph member from the source provider.\n"
                    },
                    "subjectTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of user subject subtypes to reduce the retrieved results, e.g. `msa`, `aad`, `svc` (service identity), `imp` (imported identity), etc. The supported subject types are listed below.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUsers.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "origin": {
                        "type": "string",
                        "description": "The type of source provider for the origin identifier (ex:AD, AAD, MSA)\n"
                    },
                    "originId": {
                        "type": "string",
                        "description": "The unique identifier from the system of origin. Typically a sid, object id or Guid. Linking and unlinking operations can cause this value to change for a user because the user is not backed by a different provider and has a different unique id in the new provider.\n"
                    },
                    "principalName": {
                        "type": "string",
                        "description": "This is the PrincipalName of this graph member from the source provider. The source provider may change this field over time and it is not guaranteed to be immutable for the life of the graph member by VSTS.\n"
                    },
                    "subjectTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:Identities/getUsersUser:getUsersUser"
                        },
                        "description": "A set of existing users in your Azure DevOps Organization with details about every single user which includes:\n"
                    }
                },
                "type": "object",
                "required": [
                    "users",
                    "id"
                ]
            },
            "deprecationMessage": "azuredevops.identities.getUsers has been deprecated in favor of azuredevops.getUsers"
        },
        "azuredevops:Repository/getRepositories:getRepositories": {
            "description": "Use this data source to access information about **multiple** existing Git Repositories within Azure DevOps.\nTo read informations about a **single** Git Repository use the data source `azuredevops.Git`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = azuredevops.getProject({\n    name: \"contoso-project\",\n});\nconst allRepos = project.then(project =\u003e azuredevops.getRepositories({\n    projectId: project.id,\n    includeHidden: true,\n}));\nconst singleRepo = project.then(project =\u003e azuredevops.getRepositories({\n    projectId: project.id,\n    name: \"contoso-repo\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.get_project(name=\"contoso-project\")\nall_repos = azuredevops.get_repositories(project_id=project.id,\n    include_hidden=True)\nsingle_repo = azuredevops.get_repositories(project_id=project.id,\n    name=\"contoso-repo\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = Output.Create(AzureDevOps.GetProject.InvokeAsync(new AzureDevOps.GetProjectArgs\n        {\n            Name = \"contoso-project\",\n        }));\n        var allRepos = project.Apply(project =\u003e Output.Create(AzureDevOps.GetRepositories.InvokeAsync(new AzureDevOps.GetRepositoriesArgs\n        {\n            ProjectId = project.Id,\n            IncludeHidden = true,\n        })));\n        var singleRepo = project.Apply(project =\u003e Output.Create(AzureDevOps.GetRepositories.InvokeAsync(new AzureDevOps.GetRepositoriesArgs\n        {\n            ProjectId = project.Id,\n            Name = \"contoso-repo\",\n        })));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.LookupProject(ctx, \u0026GetProjectArgs{\n\t\t\tName: pulumi.StringRef(\"contoso-project\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.GetRepositories(ctx, \u0026GetRepositoriesArgs{\n\t\t\tProjectId:     pulumi.StringRef(project.Id),\n\t\t\tIncludeHidden: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.GetRepositories(ctx, \u0026GetRepositoriesArgs{\n\t\t\tProjectId: pulumi.StringRef(project.Id),\n\t\t\tName:      pulumi.StringRef(\"contoso-repo\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Git API](https://docs.microsoft.com/en-us/rest/api/azure/devops/git/?view=azure-devops-rest-5.1)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRepositories.\n",
                "properties": {
                    "includeHidden": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Git repository to retrieve; requires `project_id` to be specified as well\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of project to list Git repositories\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRepositories.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "includeHidden": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "Git repository name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier to which the Git repository belongs.\n"
                    },
                    "repositories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:Repository/getRepositoriesRepository:getRepositoriesRepository"
                        },
                        "description": "A list of existing projects in your Azure DevOps Organization with details about every project which includes:\n"
                    }
                },
                "type": "object",
                "required": [
                    "repositories",
                    "id"
                ]
            },
            "deprecationMessage": "azuredevops.repository.getRepositories has been deprecated in favor of azuredevops.getRepositories"
        },
        "azuredevops:index/getAgentQueue:getAgentQueue": {
            "description": "Use this data source to access information about an existing Agent Queue within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\n// Azure DevOps project\nconst project = new azuredevops.Project(\"project\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"Managed by Terraform\",\n});\nconst queue = azuredevops.getAgentQueueOutput({\n    projectId: project.id,\n    name: \"Sample Agent Queue\",\n});\nexport const name = queue.apply(queue =\u003e queue.name);\nexport const poolId = queue.apply(queue =\u003e queue.agentPoolId);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\n# Azure DevOps project\nproject = azuredevops.Project(\"project\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"Managed by Terraform\")\nqueue = azuredevops.get_agent_queue_output(project_id=project.id,\n    name=\"Sample Agent Queue\")\npulumi.export(\"name\", queue.name)\npulumi.export(\"poolId\", queue.agent_pool_id)\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Azure DevOps project\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            WorkItemTemplate = \"Agile\",\n            VersionControl = \"Git\",\n            Visibility = \"private\",\n            Description = \"Managed by Terraform\",\n        });\n        var queue = AzureDevOps.GetAgentQueue.Invoke(new AzureDevOps.GetAgentQueueInvokeArgs\n        {\n            ProjectId = project.Id,\n            Name = \"Sample Agent Queue\",\n        });\n        this.Name = queue.Apply(queue =\u003e queue.Name);\n        this.PoolId = queue.Apply(queue =\u003e queue.AgentPoolId);\n    }\n\n    [Output(\"name\")]\n    public Output\u003cstring\u003e Name { get; set; }\n    [Output(\"poolId\")]\n    public Output\u003cstring\u003e PoolId { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tqueue := azuredevops.GetAgentQueueOutput(ctx, GetAgentQueueOutputArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tName:      pulumi.String(\"Sample Agent Queue\"),\n\t\t}, nil)\n\t\tctx.Export(\"name\", queue.ApplyT(func(queue GetAgentQueueResult) (string, error) {\n\t\t\treturn queue.Name, nil\n\t\t}).(pulumi.StringOutput))\n\t\tctx.Export(\"poolId\", queue.ApplyT(func(queue GetAgentQueueResult) (int, error) {\n\t\t\treturn queue.AgentPoolId, nil\n\t\t}).(pulumi.IntOutput))\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Agent Queues - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/queues/get?view=azure-devops-rest-5.1)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAgentQueue.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Agent Queue.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The Project Id.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAgentQueue.\n",
                "properties": {
                    "agentPoolId": {
                        "type": "integer",
                        "description": "Agent pool identifier to which the agent queue belongs.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the agent queue.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier to which the agent queue belongs.\n"
                    }
                },
                "type": "object",
                "required": [
                    "agentPoolId",
                    "name",
                    "projectId",
                    "id"
                ]
            }
        },
        "azuredevops:index/getArea:getArea": {
            "description": "Use this data source to access information about an existing Area (Component) within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\n//---------------------------------------------------------------------------\n// Azure DevOps project\nconst project = new azuredevops.Project(\"project\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"Managed by Terraform\",\n});\nconst area = project.id.apply(id =\u003e azuredevops.getAreaOutput({\n    projectId: id,\n    path: \"/\",\n    fetchChildren: \"false\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\n#---------------------------------------------------------------------------\n# Azure DevOps project\nproject = azuredevops.Project(\"project\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"Managed by Terraform\")\narea = project.id.apply(lambda id: azuredevops.get_area_output(project_id=id,\n    path=\"/\",\n    fetch_children=False))\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        //---------------------------------------------------------------------------\n        // Azure DevOps project\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            WorkItemTemplate = \"Agile\",\n            VersionControl = \"Git\",\n            Visibility = \"private\",\n            Description = \"Managed by Terraform\",\n        });\n        var area = project.Id.Apply(id =\u003e AzureDevOps.GetArea.Invoke(new AzureDevOps.GetAreaInvokeArgs\n        {\n            ProjectId = id,\n            Path = \"/\",\n            FetchChildren = false,\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Classification Nodes - Get Classification Nodes](https://docs.microsoft.com/en-us/rest/api/azure/devops/wit/classification%20nodes/get%20classification%20nodes?view=azure-devops-rest-5.1)\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: vso.work - Grants the ability to read work items, queries, boards, area and iterations paths, and other work item tracking related metadata. Also grants the ability to execute queries, search work items and to receive notifications about work item events via service hooks.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getArea.\n",
                "properties": {
                    "fetchChildren": {
                        "type": "boolean",
                        "description": "Read children nodes, _Depth_: 1, _Default_: `true`\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The path to the Area; _Format_: URL relative; if omitted, or value `\"/\"` is used, the root Area will be returned\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getArea.\n",
                "properties": {
                    "childrens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:index/getAreaChildren:getAreaChildren"
                        },
                        "description": "A list of `children` blocks as defined below, empty if `has_children == false`\n"
                    },
                    "fetchChildren": {
                        "type": "boolean"
                    },
                    "hasChildren": {
                        "type": "boolean",
                        "description": "Indicator if the child Area node has child nodes\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the child Area node\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The complete path (in relative URL format) of the child Area\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID of the child Area node\n"
                    }
                },
                "type": "object",
                "required": [
                    "childrens",
                    "hasChildren",
                    "name",
                    "path",
                    "projectId",
                    "id"
                ]
            }
        },
        "azuredevops:index/getClientConfig:getClientConfig": {
            "description": "Use this data source to access information about the Azure DevOps organization configured for the provider.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst clientConfig = azuredevops.getClientConfig({});\nexport const orgUrl = clientConfig.then(clientConfig =\u003e clientConfig.organizationUrl);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nclient_config = azuredevops.get_client_config()\npulumi.export(\"orgUrl\", client_config.organization_url)\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var clientConfig = Output.Create(AzureDevOps.GetClientConfig.InvokeAsync());\n        this.OrgUrl = clientConfig.Apply(clientConfig =\u003e clientConfig.OrganizationUrl);\n    }\n\n    [Output(\"orgUrl\")]\n    public Output\u003cstring\u003e OrgUrl { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tclientConfig, err := azuredevops.GetClientConfig(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"orgUrl\", clientConfig.OrganizationUrl)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getClientConfig.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "organizationUrl": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "organizationUrl",
                    "id"
                ]
            }
        },
        "azuredevops:index/getGitRepository:getGitRepository": {
            "description": "Use this data source to access information about a **single** (existing) Git Repository within Azure DevOps.\nTo read information about **multiple** Git Repositories use the data source `azuredevops.getRepositories`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = azuredevops.getProject({\n    name: \"contoso-project\",\n});\nconst singleRepo = project.then(project =\u003e azuredevops.getGitRepository({\n    projectId: project.id,\n    name: \"contoso-repo\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.get_project(name=\"contoso-project\")\nsingle_repo = azuredevops.get_git_repository(project_id=project.id,\n    name=\"contoso-repo\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = Output.Create(AzureDevOps.GetProject.InvokeAsync(new AzureDevOps.GetProjectArgs\n        {\n            Name = \"contoso-project\",\n        }));\n        var singleRepo = project.Apply(project =\u003e Output.Create(AzureDevOps.GetGitRepository.InvokeAsync(new AzureDevOps.GetGitRepositoryArgs\n        {\n            ProjectId = project.Id,\n            Name = \"contoso-repo\",\n        })));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.LookupProject(ctx, \u0026GetProjectArgs{\n\t\t\tName: pulumi.StringRef(\"contoso-project\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.GetGitRepository(ctx, \u0026GetGitRepositoryArgs{\n\t\t\tProjectId: project.Id,\n\t\t\tName:      \"contoso-repo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Git API](https://docs.microsoft.com/en-us/rest/api/azure/devops/git/?view=azure-devops-rest-5.1)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGitRepository.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Git repository to retrieve\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of project to list Git repositories\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGitRepository.\n",
                "properties": {
                    "defaultBranch": {
                        "type": "string",
                        "description": "The ref of the default branch.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isFork": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "Git repository name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier to which the Git repository belongs.\n"
                    },
                    "remoteUrl": {
                        "type": "string",
                        "description": "HTTPS Url to clone the Git repository\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "Compressed size (bytes) of the repository.\n"
                    },
                    "sshUrl": {
                        "type": "string",
                        "description": "SSH Url to clone the Git repository\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Details REST API endpoint for the Git Repository.\n"
                    },
                    "webUrl": {
                        "type": "string",
                        "description": "Url of the Git repository web view\n"
                    }
                },
                "type": "object",
                "required": [
                    "defaultBranch",
                    "isFork",
                    "name",
                    "projectId",
                    "remoteUrl",
                    "size",
                    "sshUrl",
                    "url",
                    "webUrl",
                    "id"
                ]
            }
        },
        "azuredevops:index/getGroup:getGroup": {
            "description": "Use this data source to access information about an existing Group within Azure DevOps\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = azuredevops.getProject({\n    name: \"contoso-project\",\n});\nconst test = project.then(project =\u003e azuredevops.getGroup({\n    projectId: project.id,\n    name: \"Test Group\",\n}));\nexport const groupId = test.then(test =\u003e test.id);\nexport const groupDescriptor = test.then(test =\u003e test.descriptor);\nconst test-collection-group = azuredevops.getGroup({\n    name: \"Project Collection Administrators\",\n});\nexport const collectionGroupId = test_collection_group.then(test_collection_group =\u003e test_collection_group.id);\nexport const collectionGroupDescriptor = test_collection_group.then(test_collection_group =\u003e test_collection_group.descriptor);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.get_project(name=\"contoso-project\")\ntest = azuredevops.get_group(project_id=project.id,\n    name=\"Test Group\")\npulumi.export(\"groupId\", test.id)\npulumi.export(\"groupDescriptor\", test.descriptor)\ntest_collection_group = azuredevops.get_group(name=\"Project Collection Administrators\")\npulumi.export(\"collectionGroupId\", test_collection_group.id)\npulumi.export(\"collectionGroupDescriptor\", test_collection_group.descriptor)\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = Output.Create(AzureDevOps.GetProject.InvokeAsync(new AzureDevOps.GetProjectArgs\n        {\n            Name = \"contoso-project\",\n        }));\n        var test = project.Apply(project =\u003e Output.Create(AzureDevOps.GetGroup.InvokeAsync(new AzureDevOps.GetGroupArgs\n        {\n            ProjectId = project.Id,\n            Name = \"Test Group\",\n        })));\n        this.GroupId = test.Apply(test =\u003e test.Id);\n        this.GroupDescriptor = test.Apply(test =\u003e test.Descriptor);\n        var test_collection_group = Output.Create(AzureDevOps.GetGroup.InvokeAsync(new AzureDevOps.GetGroupArgs\n        {\n            Name = \"Project Collection Administrators\",\n        }));\n        this.CollectionGroupId = test_collection_group.Apply(test_collection_group =\u003e test_collection_group.Id);\n        this.CollectionGroupDescriptor = test_collection_group.Apply(test_collection_group =\u003e test_collection_group.Descriptor);\n    }\n\n    [Output(\"groupId\")]\n    public Output\u003cstring\u003e GroupId { get; set; }\n    [Output(\"groupDescriptor\")]\n    public Output\u003cstring\u003e GroupDescriptor { get; set; }\n    [Output(\"collectionGroupId\")]\n    public Output\u003cstring\u003e CollectionGroupId { get; set; }\n    [Output(\"collectionGroupDescriptor\")]\n    public Output\u003cstring\u003e CollectionGroupDescriptor { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.LookupProject(ctx, \u0026GetProjectArgs{\n\t\t\tName: pulumi.StringRef(\"contoso-project\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttest, err := azuredevops.LookupGroup(ctx, \u0026GetGroupArgs{\n\t\t\tProjectId: pulumi.StringRef(project.Id),\n\t\t\tName:      \"Test Group\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"groupId\", test.Id)\n\t\tctx.Export(\"groupDescriptor\", test.Descriptor)\n\t\ttest_collection_group, err := azuredevops.LookupGroup(ctx, \u0026GetGroupArgs{\n\t\t\tName: \"Project Collection Administrators\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"collectionGroupId\", test_collection_group.Id)\n\t\tctx.Export(\"collectionGroupDescriptor\", test_collection_group.Descriptor)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Groups - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/graph/groups/get?view=azure-devops-rest-5.1)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGroup.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The Group Name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The Project ID. If no project ID is specified the project collection groups will be searched.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGroup.\n",
                "properties": {
                    "descriptor": {
                        "type": "string",
                        "description": "The Descriptor is the primary way to reference the graph subject. This field will uniquely identify the same graph subject across both Accounts and Organizations.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "origin": {
                        "type": "string",
                        "description": "The type of source provider for the origin identifier (ex:AD, AAD, MSA)\n"
                    },
                    "originId": {
                        "type": "string",
                        "description": "The unique identifier from the system of origin. Typically a sid, object id or Guid. Linking and unlinking operations can cause this value to change for a user because the user is not backed by a different provider and has a different unique id in the new provider.\n"
                    },
                    "projectId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "descriptor",
                    "name",
                    "origin",
                    "originId",
                    "id"
                ]
            }
        },
        "azuredevops:index/getIteration:getIteration": {
            "description": "Use this data source to access information about an existing Iteration (Sprint) within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"Managed by Terraform\",\n});\nconst root-iteration = azuredevops.getIterationOutput({\n    projectId: project.id,\n    path: \"/\",\n    fetchChildren: true,\n});\nconst child-iteration = azuredevops.getIterationOutput({\n    projectId: project.id,\n    path: \"/Iteration 1\",\n    fetchChildren: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"Managed by Terraform\")\nroot_iteration = azuredevops.get_iteration_output(project_id=project.id,\n    path=\"/\",\n    fetch_children=True)\nchild_iteration = azuredevops.get_iteration_output(project_id=project.id,\n    path=\"/Iteration 1\",\n    fetch_children=True)\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            WorkItemTemplate = \"Agile\",\n            VersionControl = \"Git\",\n            Visibility = \"private\",\n            Description = \"Managed by Terraform\",\n        });\n        var root_iteration = AzureDevOps.GetIteration.Invoke(new AzureDevOps.GetIterationInvokeArgs\n        {\n            ProjectId = project.Id,\n            Path = \"/\",\n            FetchChildren = true,\n        });\n        var child_iteration = AzureDevOps.GetIteration.Invoke(new AzureDevOps.GetIterationInvokeArgs\n        {\n            ProjectId = project.Id,\n            Path = \"/Iteration 1\",\n            FetchChildren = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = azuredevops.GetIterationOutput(ctx, GetIterationOutputArgs{\n\t\t\tProjectId:     project.ID(),\n\t\t\tPath:          pulumi.String(\"/\"),\n\t\t\tFetchChildren: pulumi.Bool(true),\n\t\t}, nil)\n\t\t_ = azuredevops.GetIterationOutput(ctx, GetIterationOutputArgs{\n\t\t\tProjectId:     project.ID(),\n\t\t\tPath:          pulumi.String(\"/Iteration 1\"),\n\t\t\tFetchChildren: pulumi.Bool(true),\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Classification Nodes - Get Classification Nodes](https://docs.microsoft.com/en-us/rest/api/azure/devops/wit/classification%20nodes/get%20classification%20nodes?view=azure-devops-rest-5.1)\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: vso.work - Grants the ability to read work items, queries, boards, area and iterations paths, and other work item tracking related metadata. Also grants the ability to execute queries, search work items and to receive notifications about work item events via service hooks.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getIteration.\n",
                "properties": {
                    "fetchChildren": {
                        "type": "boolean",
                        "description": "Read children nodes, _Depth_: 1, _Default_: `true`\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The path to the Iteration, _Format_: URL relative; if omitted, or value `\"/\"` is used, the root Iteration will be returned\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIteration.\n",
                "properties": {
                    "childrens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:index/getIterationChildren:getIterationChildren"
                        },
                        "description": "A list of `children` blocks as defined below, empty if `has_children == false`\n"
                    },
                    "fetchChildren": {
                        "type": "boolean"
                    },
                    "hasChildren": {
                        "type": "boolean",
                        "description": "Indicator if the child Iteration node has child nodes\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the child Iteration node\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The complete path (in relative URL format) of the child Iteration\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project ID of the child Iteration node\n"
                    }
                },
                "type": "object",
                "required": [
                    "childrens",
                    "hasChildren",
                    "name",
                    "path",
                    "projectId",
                    "id"
                ]
            }
        },
        "azuredevops:index/getPool:getPool": {
            "description": "Use this data source to access information about an existing Agent Pool within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst pool = azuredevops.getPool({\n    name: \"Sample Agent Pool\",\n});\nexport const name = pool.then(pool =\u003e pool.name);\nexport const poolType = pool.then(pool =\u003e pool.poolType);\nexport const autoProvision = pool.then(pool =\u003e pool.autoProvision);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\npool = azuredevops.get_pool(name=\"Sample Agent Pool\")\npulumi.export(\"name\", pool.name)\npulumi.export(\"poolType\", pool.pool_type)\npulumi.export(\"autoProvision\", pool.auto_provision)\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var pool = Output.Create(AzureDevOps.GetPool.InvokeAsync(new AzureDevOps.GetPoolArgs\n        {\n            Name = \"Sample Agent Pool\",\n        }));\n        this.Name = pool.Apply(pool =\u003e pool.Name);\n        this.PoolType = pool.Apply(pool =\u003e pool.PoolType);\n        this.AutoProvision = pool.Apply(pool =\u003e pool.AutoProvision);\n    }\n\n    [Output(\"name\")]\n    public Output\u003cstring\u003e Name { get; set; }\n    [Output(\"poolType\")]\n    public Output\u003cstring\u003e PoolType { get; set; }\n    [Output(\"autoProvision\")]\n    public Output\u003cstring\u003e AutoProvision { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpool, err := azuredevops.LookupPool(ctx, \u0026GetPoolArgs{\n\t\t\tName: \"Sample Agent Pool\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"name\", pool.Name)\n\t\tctx.Export(\"poolType\", pool.PoolType)\n\t\tctx.Export(\"autoProvision\", pool.AutoProvision)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Agent Pools - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/pools/get?view=azure-devops-rest-5.1)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPool.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Agent Pool.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPool.\n",
                "properties": {
                    "autoProvision": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "poolType": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "autoProvision",
                    "name",
                    "poolType",
                    "id"
                ]
            }
        },
        "azuredevops:index/getPools:getPools": {
            "description": "Use this data source to access information about existing Agent Pools within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst pools = azuredevops.getPools({});\nexport const agentPoolName = [pools.then(pools =\u003e pools.agentPools)].map(__item =\u003e __item?.name);\nexport const autoProvision = [pools.then(pools =\u003e pools.agentPools)].map(__item =\u003e __item?.autoProvision);\nexport const poolType = [pools.then(pools =\u003e pools.agentPools)].map(__item =\u003e __item?.poolType);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\npools = azuredevops.get_pools()\npulumi.export(\"agentPoolName\", [__item.name for __item in [pools.agent_pools]])\npulumi.export(\"autoProvision\", [__item.auto_provision for __item in [pools.agent_pools]])\npulumi.export(\"poolType\", [__item.pool_type for __item in [pools.agent_pools]])\n```\n```csharp\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var pools = Output.Create(AzureDevOps.GetPools.InvokeAsync());\n        this.AgentPoolName = \n        {\n            pools.Apply(pools =\u003e pools.AgentPools),\n        }.Select(__item =\u003e __item?.Name).ToList();\n        this.AutoProvision = \n        {\n            pools.Apply(pools =\u003e pools.AgentPools),\n        }.Select(__item =\u003e __item?.AutoProvision).ToList();\n        this.PoolType = \n        {\n            pools.Apply(pools =\u003e pools.AgentPools),\n        }.Select(__item =\u003e __item?.PoolType).ToList();\n    }\n\n    [Output(\"agentPoolName\")]\n    public Output\u003cstring\u003e AgentPoolName { get; set; }\n    [Output(\"autoProvision\")]\n    public Output\u003cstring\u003e AutoProvision { get; set; }\n    [Output(\"poolType\")]\n    public Output\u003cstring\u003e PoolType { get; set; }\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Agent Pools - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/pools/get?view=azure-devops-rest-5.1)\n",
            "outputs": {
                "description": "A collection of values returned by getPools.\n",
                "properties": {
                    "agentPools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:index/getPoolsAgentPool:getPoolsAgentPool"
                        },
                        "description": "A list of existing agent pools in your Azure DevOps Organization with the following details about every agent pool:\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "agentPools",
                    "id"
                ]
            }
        },
        "azuredevops:index/getProject:getProject": {
            "description": "Use this data source to access information about an existing Project within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = azuredevops.getProject({\n    name: \"Sample Project\",\n});\nexport const id = project.then(project =\u003e project.id);\nexport const name = project.then(project =\u003e project.name);\nexport const visibility = project.then(project =\u003e project.visibility);\nexport const versionControl = project.then(project =\u003e project.versionControl);\nexport const workItemTemplate = project.then(project =\u003e project.workItemTemplate);\nexport const processTemplateId = project.then(project =\u003e project.processTemplateId);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.get_project(name=\"Sample Project\")\npulumi.export(\"id\", project.id)\npulumi.export(\"name\", project.name)\npulumi.export(\"visibility\", project.visibility)\npulumi.export(\"versionControl\", project.version_control)\npulumi.export(\"workItemTemplate\", project.work_item_template)\npulumi.export(\"processTemplateId\", project.process_template_id)\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = Output.Create(AzureDevOps.GetProject.InvokeAsync(new AzureDevOps.GetProjectArgs\n        {\n            Name = \"Sample Project\",\n        }));\n        this.Id = project.Apply(project =\u003e project.Id);\n        this.Name = project.Apply(project =\u003e project.Name);\n        this.Visibility = project.Apply(project =\u003e project.Visibility);\n        this.VersionControl = project.Apply(project =\u003e project.VersionControl);\n        this.WorkItemTemplate = project.Apply(project =\u003e project.WorkItemTemplate);\n        this.ProcessTemplateId = project.Apply(project =\u003e project.ProcessTemplateId);\n    }\n\n    [Output(\"id\")]\n    public Output\u003cstring\u003e Id { get; set; }\n    [Output(\"name\")]\n    public Output\u003cstring\u003e Name { get; set; }\n    [Output(\"visibility\")]\n    public Output\u003cstring\u003e Visibility { get; set; }\n    [Output(\"versionControl\")]\n    public Output\u003cstring\u003e VersionControl { get; set; }\n    [Output(\"workItemTemplate\")]\n    public Output\u003cstring\u003e WorkItemTemplate { get; set; }\n    [Output(\"processTemplateId\")]\n    public Output\u003cstring\u003e ProcessTemplateId { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.LookupProject(ctx, \u0026GetProjectArgs{\n\t\t\tName: pulumi.StringRef(\"Sample Project\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"id\", project.Id)\n\t\tctx.Export(\"name\", project.Name)\n\t\tctx.Export(\"visibility\", project.Visibility)\n\t\tctx.Export(\"versionControl\", project.VersionControl)\n\t\tctx.Export(\"workItemTemplate\", project.WorkItemTemplate)\n\t\tctx.Export(\"processTemplateId\", project.ProcessTemplateId)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Projects - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/core/projects/get?view=azure-devops-rest-5.1)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProject.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Project.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of the Project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProject.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "features": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "processTemplateId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "versionControl": {
                        "type": "string"
                    },
                    "visibility": {
                        "type": "string"
                    },
                    "workItemTemplate": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "features",
                    "processTemplateId",
                    "versionControl",
                    "visibility",
                    "workItemTemplate",
                    "id"
                ]
            }
        },
        "azuredevops:index/getProjects:getProjects": {
            "description": "Use this data source to access information about existing Projects within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst test = azuredevops.getProjects({\n    name: \"contoso\",\n    state: \"wellFormed\",\n});\nexport const projectId = [test.then(test =\u003e test.projects)].map(__item =\u003e __item?.projectId);\nexport const name = [test.then(test =\u003e test.projects)].map(__item =\u003e __item?.name);\nexport const projectUrl = [test.then(test =\u003e test.projects)].map(__item =\u003e __item?.projectUrl);\nexport const state = [test.then(test =\u003e test.projects)].map(__item =\u003e __item?.state);\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\ntest = azuredevops.get_projects(name=\"contoso\",\n    state=\"wellFormed\")\npulumi.export(\"projectId\", [__item.project_id for __item in [test.projects]])\npulumi.export(\"name\", [__item.name for __item in [test.projects]])\npulumi.export(\"projectUrl\", [__item.project_url for __item in [test.projects]])\npulumi.export(\"state\", [__item.state for __item in [test.projects]])\n```\n```csharp\nusing System.Linq;\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = Output.Create(AzureDevOps.GetProjects.InvokeAsync(new AzureDevOps.GetProjectsArgs\n        {\n            Name = \"contoso\",\n            State = \"wellFormed\",\n        }));\n        this.ProjectId = \n        {\n            test.Apply(test =\u003e test.Projects),\n        }.Select(__item =\u003e __item?.ProjectId).ToList();\n        this.Name = \n        {\n            test.Apply(test =\u003e test.Projects),\n        }.Select(__item =\u003e __item?.Name).ToList();\n        this.ProjectUrl = \n        {\n            test.Apply(test =\u003e test.Projects),\n        }.Select(__item =\u003e __item?.ProjectUrl).ToList();\n        this.State = \n        {\n            test.Apply(test =\u003e test.Projects),\n        }.Select(__item =\u003e __item?.State).ToList();\n    }\n\n    [Output(\"projectId\")]\n    public Output\u003cstring\u003e ProjectId { get; set; }\n    [Output(\"name\")]\n    public Output\u003cstring\u003e Name { get; set; }\n    [Output(\"projectUrl\")]\n    public Output\u003cstring\u003e ProjectUrl { get; set; }\n    [Output(\"state\")]\n    public Output\u003cstring\u003e State { get; set; }\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Projects - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/core/projects/get?view=azure-devops-rest-5.1)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProjects.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Project, if not specified all projects will be returned.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the Project, if not specified all projects will be returned. Valid values are `all`, `deleting`, `new`, `wellFormed`, `createPending`, `unchanged`,`deleted`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProjects.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Project name.\n"
                    },
                    "projects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:index/getProjectsProject:getProjectsProject"
                        },
                        "description": "A list of existing projects in your Azure DevOps Organization with details about every project which includes:\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Project state.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projects",
                    "id"
                ]
            }
        },
        "azuredevops:index/getRepositories:getRepositories": {
            "description": "Use this data source to access information about **multiple** existing Git Repositories within Azure DevOps.\nTo read informations about a **single** Git Repository use the data source `azuredevops.Git`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = azuredevops.getProject({\n    name: \"contoso-project\",\n});\nconst allRepos = project.then(project =\u003e azuredevops.getRepositories({\n    projectId: project.id,\n    includeHidden: true,\n}));\nconst singleRepo = project.then(project =\u003e azuredevops.getRepositories({\n    projectId: project.id,\n    name: \"contoso-repo\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.get_project(name=\"contoso-project\")\nall_repos = azuredevops.get_repositories(project_id=project.id,\n    include_hidden=True)\nsingle_repo = azuredevops.get_repositories(project_id=project.id,\n    name=\"contoso-repo\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = Output.Create(AzureDevOps.GetProject.InvokeAsync(new AzureDevOps.GetProjectArgs\n        {\n            Name = \"contoso-project\",\n        }));\n        var allRepos = project.Apply(project =\u003e Output.Create(AzureDevOps.GetRepositories.InvokeAsync(new AzureDevOps.GetRepositoriesArgs\n        {\n            ProjectId = project.Id,\n            IncludeHidden = true,\n        })));\n        var singleRepo = project.Apply(project =\u003e Output.Create(AzureDevOps.GetRepositories.InvokeAsync(new AzureDevOps.GetRepositoriesArgs\n        {\n            ProjectId = project.Id,\n            Name = \"contoso-repo\",\n        })));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.LookupProject(ctx, \u0026GetProjectArgs{\n\t\t\tName: pulumi.StringRef(\"contoso-project\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.GetRepositories(ctx, \u0026GetRepositoriesArgs{\n\t\t\tProjectId:     pulumi.StringRef(project.Id),\n\t\t\tIncludeHidden: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.GetRepositories(ctx, \u0026GetRepositoriesArgs{\n\t\t\tProjectId: pulumi.StringRef(project.Id),\n\t\t\tName:      pulumi.StringRef(\"contoso-repo\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Git API](https://docs.microsoft.com/en-us/rest/api/azure/devops/git/?view=azure-devops-rest-5.1)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRepositories.\n",
                "properties": {
                    "includeHidden": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Git repository to retrieve; requires `project_id` to be specified as well\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of project to list Git repositories\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRepositories.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "includeHidden": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "Git repository name.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier to which the Git repository belongs.\n"
                    },
                    "repositories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:index/getRepositoriesRepository:getRepositoriesRepository"
                        },
                        "description": "A list of existing projects in your Azure DevOps Organization with details about every project which includes:\n"
                    }
                },
                "type": "object",
                "required": [
                    "repositories",
                    "id"
                ]
            }
        },
        "azuredevops:index/getTeam:getTeam": {
            "inputs": {
                "description": "A collection of arguments for invoking getTeam.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTeam.\n",
                "properties": {
                    "administrators": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "administrators",
                    "description",
                    "members",
                    "name",
                    "projectId",
                    "id"
                ]
            }
        },
        "azuredevops:index/getTeams:getTeams": {
            "inputs": {
                "description": "A collection of arguments for invoking getTeams.\n",
                "properties": {
                    "projectId": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTeams.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:index/getTeamsTeam:getTeamsTeam"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "teams",
                    "id"
                ]
            }
        },
        "azuredevops:index/getUsers:getUsers": {
            "description": "Use this data source to access information about an existing users within Azure DevOps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\n// Load single user by using it's principal name\nconst user = pulumi.output(azuredevops.getUsers({\n    principalName: \"contoso-user@contoso.onmicrosoft.com\",\n}));\n// Load all users know inside an organization\nconst all_users = pulumi.output(azuredevops.getUsers());\n// Load all users know inside an organization originating from a specific source (origin)\nconst all_from_origin = pulumi.output(azuredevops.getUsers({\n    origin: \"aad\",\n}));\n// Load all users know inside an organization filtered by their subject types\nconst all_from_subject_types = pulumi.output(azuredevops.getUsers({\n    subjectTypes: [\n        \"aad\",\n        \"msa\",\n    ],\n}));\n// Load a single user by origin and origin ID\nconst all_from_origin_id = pulumi.output(azuredevops.getUsers({\n    origin: \"aad\",\n    originId: \"a7ead982-8438-4cd2-b9e3-c3aa51a7b675\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nuser = azuredevops.get_users(principal_name=\"contoso-user@contoso.onmicrosoft.com\")\nall_users = azuredevops.get_users()\nall_from_origin = azuredevops.get_users(origin=\"aad\")\nall_from_subject_types = azuredevops.get_users(subject_types=[\n    \"aad\",\n    \"msa\",\n])\nall_from_origin_id = azuredevops.get_users(origin=\"aad\",\n    origin_id=\"a7ead982-8438-4cd2-b9e3-c3aa51a7b675\")\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var user = Output.Create(AzureDevOps.GetUsers.InvokeAsync(new AzureDevOps.GetUsersArgs\n        {\n            PrincipalName = \"contoso-user@contoso.onmicrosoft.com\",\n        }));\n        var all_users = Output.Create(AzureDevOps.GetUsers.InvokeAsync());\n        var all_from_origin = Output.Create(AzureDevOps.GetUsers.InvokeAsync(new AzureDevOps.GetUsersArgs\n        {\n            Origin = \"aad\",\n        }));\n        var all_from_subjectTypes = Output.Create(AzureDevOps.GetUsers.InvokeAsync(new AzureDevOps.GetUsersArgs\n        {\n            SubjectTypes = \n            {\n                \"aad\",\n                \"msa\",\n            },\n        }));\n        var all_from_origin_id = Output.Create(AzureDevOps.GetUsers.InvokeAsync(new AzureDevOps.GetUsersArgs\n        {\n            Origin = \"aad\",\n            OriginId = \"a7ead982-8438-4cd2-b9e3-c3aa51a7b675\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuredevops.GetUsers(ctx, \u0026GetUsersArgs{\n\t\t\tPrincipalName: pulumi.StringRef(\"contoso-user@contoso.onmicrosoft.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.GetUsers(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.GetUsers(ctx, \u0026GetUsersArgs{\n\t\t\tOrigin: pulumi.StringRef(\"aad\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.GetUsers(ctx, \u0026GetUsersArgs{\n\t\t\tSubjectTypes: []string{\n\t\t\t\t\"aad\",\n\t\t\t\t\"msa\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.GetUsers(ctx, \u0026GetUsersArgs{\n\t\t\tOrigin:   pulumi.StringRef(\"aad\"),\n\t\t\tOriginId: pulumi.StringRef(\"a7ead982-8438-4cd2-b9e3-c3aa51a7b675\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n- [Azure DevOps Service REST API 5.1 - Graph Users API](https://docs.microsoft.com/en-us/rest/api/azure/devops/graph/users?view=azure-devops-rest-5.1)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUsers.\n",
                "properties": {
                    "origin": {
                        "type": "string",
                        "description": "The type of source provider for the `origin_id` parameter (ex:AD, AAD, MSA) The supported origins are listed below.\n"
                    },
                    "originId": {
                        "type": "string",
                        "description": "The unique identifier from the system of origin.\n"
                    },
                    "principalName": {
                        "type": "string",
                        "description": "The PrincipalName of this graph member from the source provider.\n"
                    },
                    "subjectTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of user subject subtypes to reduce the retrieved results, e.g. `msa`, `aad`, `svc` (service identity), `imp` (imported identity), etc. The supported subject types are listed below.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUsers.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "origin": {
                        "type": "string",
                        "description": "The type of source provider for the origin identifier (ex:AD, AAD, MSA)\n"
                    },
                    "originId": {
                        "type": "string",
                        "description": "The unique identifier from the system of origin. Typically a sid, object id or Guid. Linking and unlinking operations can cause this value to change for a user because the user is not backed by a different provider and has a different unique id in the new provider.\n"
                    },
                    "principalName": {
                        "type": "string",
                        "description": "This is the PrincipalName of this graph member from the source provider. The source provider may change this field over time and it is not guaranteed to be immutable for the life of the graph member by VSTS.\n"
                    },
                    "subjectTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuredevops:index/getUsersUser:getUsersUser"
                        },
                        "description": "A set of existing users in your Azure DevOps Organization with details about every single user which includes:\n"
                    }
                },
                "type": "object",
                "required": [
                    "users",
                    "id"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": {
                "azuredevops": "AzureDevOps"
            },
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing Azure DevOps.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/microsoft/terraform-provider-azuredevops)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-azuredevops` repo](https://github.com/pulumi/pulumi-azuredevops/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`microsoft/terraform-provider-azuredevops` repo](https://github.com/microsoft/terraform-provider-azuredevops/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/microsoft/terraform-provider-azuredevops)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-azuredevops` repo](https://github.com/pulumi/pulumi-azuredevops/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`microsoft/terraform-provider-azuredevops` repo](https://github.com/microsoft/terraform-provider-azuredevops/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    }
}