// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TeamAdministratorsState extends com.pulumi.resources.ResourceArgs {

    public static final TeamAdministratorsState Empty = new TeamAdministratorsState();

    /**
     * List of subject descriptors to define administrators of the team.
     * 
     * &gt; **NOTE** It&#39;s possible to define team administrators both within the
     * `azuredevops.Team` resource via the `administrators` block and by using the
     * `azuredevops.TeamAdministrators` resource. However it&#39;s not possible to use
     * both methods to manage team administrators, since there&#39;ll be conflicts.
     * 
     */
    @Import(name="administrators")
    private @Nullable Output<List<String>> administrators;

    /**
     * @return List of subject descriptors to define administrators of the team.
     * 
     * &gt; **NOTE** It&#39;s possible to define team administrators both within the
     * `azuredevops.Team` resource via the `administrators` block and by using the
     * `azuredevops.TeamAdministrators` resource. However it&#39;s not possible to use
     * both methods to manage team administrators, since there&#39;ll be conflicts.
     * 
     */
    public Optional<Output<List<String>>> administrators() {
        return Optional.ofNullable(this.administrators);
    }

    /**
     * The mode how the resource manages team administrators. Possible values: `add`, `overwrite`. Defaults to `add`.
     * 
     * &gt; **NOTE:** 1. `mode = add`: the resource will ensure that all specified administrators will be part of the referenced team
     * &lt;br&gt; 2. `mode = overwrite`: the resource will replace all existing administrators with the administrators specified within the `administrators` block
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return The mode how the resource manages team administrators. Possible values: `add`, `overwrite`. Defaults to `add`.
     * 
     * &gt; **NOTE:** 1. `mode = add`: the resource will ensure that all specified administrators will be part of the referenced team
     * &lt;br&gt; 2. `mode = overwrite`: the resource will replace all existing administrators with the administrators specified within the `administrators` block
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * The Project ID.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The Project ID.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The ID of the Team.
     * 
     */
    @Import(name="teamId")
    private @Nullable Output<String> teamId;

    /**
     * @return The ID of the Team.
     * 
     */
    public Optional<Output<String>> teamId() {
        return Optional.ofNullable(this.teamId);
    }

    private TeamAdministratorsState() {}

    private TeamAdministratorsState(TeamAdministratorsState $) {
        this.administrators = $.administrators;
        this.mode = $.mode;
        this.projectId = $.projectId;
        this.teamId = $.teamId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TeamAdministratorsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TeamAdministratorsState $;

        public Builder() {
            $ = new TeamAdministratorsState();
        }

        public Builder(TeamAdministratorsState defaults) {
            $ = new TeamAdministratorsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param administrators List of subject descriptors to define administrators of the team.
         * 
         * &gt; **NOTE** It&#39;s possible to define team administrators both within the
         * `azuredevops.Team` resource via the `administrators` block and by using the
         * `azuredevops.TeamAdministrators` resource. However it&#39;s not possible to use
         * both methods to manage team administrators, since there&#39;ll be conflicts.
         * 
         * @return builder
         * 
         */
        public Builder administrators(@Nullable Output<List<String>> administrators) {
            $.administrators = administrators;
            return this;
        }

        /**
         * @param administrators List of subject descriptors to define administrators of the team.
         * 
         * &gt; **NOTE** It&#39;s possible to define team administrators both within the
         * `azuredevops.Team` resource via the `administrators` block and by using the
         * `azuredevops.TeamAdministrators` resource. However it&#39;s not possible to use
         * both methods to manage team administrators, since there&#39;ll be conflicts.
         * 
         * @return builder
         * 
         */
        public Builder administrators(List<String> administrators) {
            return administrators(Output.of(administrators));
        }

        /**
         * @param administrators List of subject descriptors to define administrators of the team.
         * 
         * &gt; **NOTE** It&#39;s possible to define team administrators both within the
         * `azuredevops.Team` resource via the `administrators` block and by using the
         * `azuredevops.TeamAdministrators` resource. However it&#39;s not possible to use
         * both methods to manage team administrators, since there&#39;ll be conflicts.
         * 
         * @return builder
         * 
         */
        public Builder administrators(String... administrators) {
            return administrators(List.of(administrators));
        }

        /**
         * @param mode The mode how the resource manages team administrators. Possible values: `add`, `overwrite`. Defaults to `add`.
         * 
         * &gt; **NOTE:** 1. `mode = add`: the resource will ensure that all specified administrators will be part of the referenced team
         * &lt;br&gt; 2. `mode = overwrite`: the resource will replace all existing administrators with the administrators specified within the `administrators` block
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The mode how the resource manages team administrators. Possible values: `add`, `overwrite`. Defaults to `add`.
         * 
         * &gt; **NOTE:** 1. `mode = add`: the resource will ensure that all specified administrators will be part of the referenced team
         * &lt;br&gt; 2. `mode = overwrite`: the resource will replace all existing administrators with the administrators specified within the `administrators` block
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param projectId The Project ID.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The Project ID.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param teamId The ID of the Team.
         * 
         * @return builder
         * 
         */
        public Builder teamId(@Nullable Output<String> teamId) {
            $.teamId = teamId;
            return this;
        }

        /**
         * @param teamId The ID of the Team.
         * 
         * @return builder
         * 
         */
        public Builder teamId(String teamId) {
            return teamId(Output.of(teamId));
        }

        public TeamAdministratorsState build() {
            return $;
        }
    }

}
