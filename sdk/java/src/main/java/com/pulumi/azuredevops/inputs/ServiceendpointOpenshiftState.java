// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.inputs;

import com.pulumi.azuredevops.inputs.ServiceendpointOpenshiftAuthBasicArgs;
import com.pulumi.azuredevops.inputs.ServiceendpointOpenshiftAuthNoneArgs;
import com.pulumi.azuredevops.inputs.ServiceendpointOpenshiftAuthTokenArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceendpointOpenshiftState extends com.pulumi.resources.ResourceArgs {

    public static final ServiceendpointOpenshiftState Empty = new ServiceendpointOpenshiftState();

    /**
     * Set this option to allow clients to accept a self-signed certificate. Available when using `authBasic` or `authToken` authorization.
     * 
     */
    @Import(name="acceptUntrustedCerts")
    private @Nullable Output<Boolean> acceptUntrustedCerts;

    /**
     * @return Set this option to allow clients to accept a self-signed certificate. Available when using `authBasic` or `authToken` authorization.
     * 
     */
    public Optional<Output<Boolean>> acceptUntrustedCerts() {
        return Optional.ofNullable(this.acceptUntrustedCerts);
    }

    /**
     * An `authBasic` block as documented below.
     * 
     */
    @Import(name="authBasic")
    private @Nullable Output<ServiceendpointOpenshiftAuthBasicArgs> authBasic;

    /**
     * @return An `authBasic` block as documented below.
     * 
     */
    public Optional<Output<ServiceendpointOpenshiftAuthBasicArgs>> authBasic() {
        return Optional.ofNullable(this.authBasic);
    }

    /**
     * An `authNone` block as documented below.
     * 
     */
    @Import(name="authNone")
    private @Nullable Output<ServiceendpointOpenshiftAuthNoneArgs> authNone;

    /**
     * @return An `authNone` block as documented below.
     * 
     */
    public Optional<Output<ServiceendpointOpenshiftAuthNoneArgs>> authNone() {
        return Optional.ofNullable(this.authNone);
    }

    /**
     * An `authToken` block as documented below.
     * 
     */
    @Import(name="authToken")
    private @Nullable Output<ServiceendpointOpenshiftAuthTokenArgs> authToken;

    /**
     * @return An `authToken` block as documented below.
     * 
     */
    public Optional<Output<ServiceendpointOpenshiftAuthTokenArgs>> authToken() {
        return Optional.ofNullable(this.authToken);
    }

    @Import(name="authorization")
    private @Nullable Output<Map<String,String>> authorization;

    public Optional<Output<Map<String,String>>> authorization() {
        return Optional.ofNullable(this.authorization);
    }

    /**
     * The path to a certificate authority file to correctly and securely authenticates with an OpenShift server that uses HTTPS. Available when using `authBasic` or `authToken` authorization.
     * 
     */
    @Import(name="certificateAuthorityFile")
    private @Nullable Output<String> certificateAuthorityFile;

    /**
     * @return The path to a certificate authority file to correctly and securely authenticates with an OpenShift server that uses HTTPS. Available when using `authBasic` or `authToken` authorization.
     * 
     */
    public Optional<Output<String>> certificateAuthorityFile() {
        return Optional.ofNullable(this.certificateAuthorityFile);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The ID of the project.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The ID of the project.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The URL for the OpenShift cluster to connect to.
     * 
     */
    @Import(name="serverUrl")
    private @Nullable Output<String> serverUrl;

    /**
     * @return The URL for the OpenShift cluster to connect to.
     * 
     */
    public Optional<Output<String>> serverUrl() {
        return Optional.ofNullable(this.serverUrl);
    }

    /**
     * The Service Endpoint name.
     * 
     */
    @Import(name="serviceEndpointName")
    private @Nullable Output<String> serviceEndpointName;

    /**
     * @return The Service Endpoint name.
     * 
     */
    public Optional<Output<String>> serviceEndpointName() {
        return Optional.ofNullable(this.serviceEndpointName);
    }

    private ServiceendpointOpenshiftState() {}

    private ServiceendpointOpenshiftState(ServiceendpointOpenshiftState $) {
        this.acceptUntrustedCerts = $.acceptUntrustedCerts;
        this.authBasic = $.authBasic;
        this.authNone = $.authNone;
        this.authToken = $.authToken;
        this.authorization = $.authorization;
        this.certificateAuthorityFile = $.certificateAuthorityFile;
        this.description = $.description;
        this.projectId = $.projectId;
        this.serverUrl = $.serverUrl;
        this.serviceEndpointName = $.serviceEndpointName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceendpointOpenshiftState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceendpointOpenshiftState $;

        public Builder() {
            $ = new ServiceendpointOpenshiftState();
        }

        public Builder(ServiceendpointOpenshiftState defaults) {
            $ = new ServiceendpointOpenshiftState(Objects.requireNonNull(defaults));
        }

        /**
         * @param acceptUntrustedCerts Set this option to allow clients to accept a self-signed certificate. Available when using `authBasic` or `authToken` authorization.
         * 
         * @return builder
         * 
         */
        public Builder acceptUntrustedCerts(@Nullable Output<Boolean> acceptUntrustedCerts) {
            $.acceptUntrustedCerts = acceptUntrustedCerts;
            return this;
        }

        /**
         * @param acceptUntrustedCerts Set this option to allow clients to accept a self-signed certificate. Available when using `authBasic` or `authToken` authorization.
         * 
         * @return builder
         * 
         */
        public Builder acceptUntrustedCerts(Boolean acceptUntrustedCerts) {
            return acceptUntrustedCerts(Output.of(acceptUntrustedCerts));
        }

        /**
         * @param authBasic An `authBasic` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder authBasic(@Nullable Output<ServiceendpointOpenshiftAuthBasicArgs> authBasic) {
            $.authBasic = authBasic;
            return this;
        }

        /**
         * @param authBasic An `authBasic` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder authBasic(ServiceendpointOpenshiftAuthBasicArgs authBasic) {
            return authBasic(Output.of(authBasic));
        }

        /**
         * @param authNone An `authNone` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder authNone(@Nullable Output<ServiceendpointOpenshiftAuthNoneArgs> authNone) {
            $.authNone = authNone;
            return this;
        }

        /**
         * @param authNone An `authNone` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder authNone(ServiceendpointOpenshiftAuthNoneArgs authNone) {
            return authNone(Output.of(authNone));
        }

        /**
         * @param authToken An `authToken` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder authToken(@Nullable Output<ServiceendpointOpenshiftAuthTokenArgs> authToken) {
            $.authToken = authToken;
            return this;
        }

        /**
         * @param authToken An `authToken` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder authToken(ServiceendpointOpenshiftAuthTokenArgs authToken) {
            return authToken(Output.of(authToken));
        }

        public Builder authorization(@Nullable Output<Map<String,String>> authorization) {
            $.authorization = authorization;
            return this;
        }

        public Builder authorization(Map<String,String> authorization) {
            return authorization(Output.of(authorization));
        }

        /**
         * @param certificateAuthorityFile The path to a certificate authority file to correctly and securely authenticates with an OpenShift server that uses HTTPS. Available when using `authBasic` or `authToken` authorization.
         * 
         * @return builder
         * 
         */
        public Builder certificateAuthorityFile(@Nullable Output<String> certificateAuthorityFile) {
            $.certificateAuthorityFile = certificateAuthorityFile;
            return this;
        }

        /**
         * @param certificateAuthorityFile The path to a certificate authority file to correctly and securely authenticates with an OpenShift server that uses HTTPS. Available when using `authBasic` or `authToken` authorization.
         * 
         * @return builder
         * 
         */
        public Builder certificateAuthorityFile(String certificateAuthorityFile) {
            return certificateAuthorityFile(Output.of(certificateAuthorityFile));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param projectId The ID of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The ID of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param serverUrl The URL for the OpenShift cluster to connect to.
         * 
         * @return builder
         * 
         */
        public Builder serverUrl(@Nullable Output<String> serverUrl) {
            $.serverUrl = serverUrl;
            return this;
        }

        /**
         * @param serverUrl The URL for the OpenShift cluster to connect to.
         * 
         * @return builder
         * 
         */
        public Builder serverUrl(String serverUrl) {
            return serverUrl(Output.of(serverUrl));
        }

        /**
         * @param serviceEndpointName The Service Endpoint name.
         * 
         * @return builder
         * 
         */
        public Builder serviceEndpointName(@Nullable Output<String> serviceEndpointName) {
            $.serviceEndpointName = serviceEndpointName;
            return this;
        }

        /**
         * @param serviceEndpointName The Service Endpoint name.
         * 
         * @return builder
         * 
         */
        public Builder serviceEndpointName(String serviceEndpointName) {
            return serviceEndpointName(Output.of(serviceEndpointName));
        }

        public ServiceendpointOpenshiftState build() {
            return $;
        }
    }

}
