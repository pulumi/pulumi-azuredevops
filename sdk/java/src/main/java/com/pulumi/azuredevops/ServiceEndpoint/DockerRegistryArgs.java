// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.ServiceEndpoint;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DockerRegistryArgs extends com.pulumi.resources.ResourceArgs {

    public static final DockerRegistryArgs Empty = new DockerRegistryArgs();

    @Import(name="authorization")
    private @Nullable Output<Map<String,String>> authorization;

    public Optional<Output<Map<String,String>>> authorization() {
        return Optional.ofNullable(this.authorization);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The email for Docker account user.
     * 
     */
    @Import(name="dockerEmail")
    private @Nullable Output<String> dockerEmail;

    /**
     * @return The email for Docker account user.
     * 
     */
    public Optional<Output<String>> dockerEmail() {
        return Optional.ofNullable(this.dockerEmail);
    }

    /**
     * The password for the account user identified above.
     * 
     */
    @Import(name="dockerPassword")
    private @Nullable Output<String> dockerPassword;

    /**
     * @return The password for the account user identified above.
     * 
     */
    public Optional<Output<String>> dockerPassword() {
        return Optional.ofNullable(this.dockerPassword);
    }

    /**
     * The URL of the Docker registry. (Default: &#34;https://index.docker.io/v1/&#34;)
     * 
     */
    @Import(name="dockerRegistry", required=true)
    private Output<String> dockerRegistry;

    /**
     * @return The URL of the Docker registry. (Default: &#34;https://index.docker.io/v1/&#34;)
     * 
     */
    public Output<String> dockerRegistry() {
        return this.dockerRegistry;
    }

    /**
     * The identifier of the Docker account user.
     * 
     */
    @Import(name="dockerUsername")
    private @Nullable Output<String> dockerUsername;

    /**
     * @return The identifier of the Docker account user.
     * 
     */
    public Optional<Output<String>> dockerUsername() {
        return Optional.ofNullable(this.dockerUsername);
    }

    /**
     * The ID of the project.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return The ID of the project.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * Can be &#34;DockerHub&#34; or &#34;Others&#34; (Default &#34;DockerHub&#34;)
     * 
     */
    @Import(name="registryType", required=true)
    private Output<String> registryType;

    /**
     * @return Can be &#34;DockerHub&#34; or &#34;Others&#34; (Default &#34;DockerHub&#34;)
     * 
     */
    public Output<String> registryType() {
        return this.registryType;
    }

    /**
     * The name you will use to refer to this service connection in task inputs.
     * 
     */
    @Import(name="serviceEndpointName", required=true)
    private Output<String> serviceEndpointName;

    /**
     * @return The name you will use to refer to this service connection in task inputs.
     * 
     */
    public Output<String> serviceEndpointName() {
        return this.serviceEndpointName;
    }

    private DockerRegistryArgs() {}

    private DockerRegistryArgs(DockerRegistryArgs $) {
        this.authorization = $.authorization;
        this.description = $.description;
        this.dockerEmail = $.dockerEmail;
        this.dockerPassword = $.dockerPassword;
        this.dockerRegistry = $.dockerRegistry;
        this.dockerUsername = $.dockerUsername;
        this.projectId = $.projectId;
        this.registryType = $.registryType;
        this.serviceEndpointName = $.serviceEndpointName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DockerRegistryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DockerRegistryArgs $;

        public Builder() {
            $ = new DockerRegistryArgs();
        }

        public Builder(DockerRegistryArgs defaults) {
            $ = new DockerRegistryArgs(Objects.requireNonNull(defaults));
        }

        public Builder authorization(@Nullable Output<Map<String,String>> authorization) {
            $.authorization = authorization;
            return this;
        }

        public Builder authorization(Map<String,String> authorization) {
            return authorization(Output.of(authorization));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param dockerEmail The email for Docker account user.
         * 
         * @return builder
         * 
         */
        public Builder dockerEmail(@Nullable Output<String> dockerEmail) {
            $.dockerEmail = dockerEmail;
            return this;
        }

        /**
         * @param dockerEmail The email for Docker account user.
         * 
         * @return builder
         * 
         */
        public Builder dockerEmail(String dockerEmail) {
            return dockerEmail(Output.of(dockerEmail));
        }

        /**
         * @param dockerPassword The password for the account user identified above.
         * 
         * @return builder
         * 
         */
        public Builder dockerPassword(@Nullable Output<String> dockerPassword) {
            $.dockerPassword = dockerPassword;
            return this;
        }

        /**
         * @param dockerPassword The password for the account user identified above.
         * 
         * @return builder
         * 
         */
        public Builder dockerPassword(String dockerPassword) {
            return dockerPassword(Output.of(dockerPassword));
        }

        /**
         * @param dockerRegistry The URL of the Docker registry. (Default: &#34;https://index.docker.io/v1/&#34;)
         * 
         * @return builder
         * 
         */
        public Builder dockerRegistry(Output<String> dockerRegistry) {
            $.dockerRegistry = dockerRegistry;
            return this;
        }

        /**
         * @param dockerRegistry The URL of the Docker registry. (Default: &#34;https://index.docker.io/v1/&#34;)
         * 
         * @return builder
         * 
         */
        public Builder dockerRegistry(String dockerRegistry) {
            return dockerRegistry(Output.of(dockerRegistry));
        }

        /**
         * @param dockerUsername The identifier of the Docker account user.
         * 
         * @return builder
         * 
         */
        public Builder dockerUsername(@Nullable Output<String> dockerUsername) {
            $.dockerUsername = dockerUsername;
            return this;
        }

        /**
         * @param dockerUsername The identifier of the Docker account user.
         * 
         * @return builder
         * 
         */
        public Builder dockerUsername(String dockerUsername) {
            return dockerUsername(Output.of(dockerUsername));
        }

        /**
         * @param projectId The ID of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The ID of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param registryType Can be &#34;DockerHub&#34; or &#34;Others&#34; (Default &#34;DockerHub&#34;)
         * 
         * @return builder
         * 
         */
        public Builder registryType(Output<String> registryType) {
            $.registryType = registryType;
            return this;
        }

        /**
         * @param registryType Can be &#34;DockerHub&#34; or &#34;Others&#34; (Default &#34;DockerHub&#34;)
         * 
         * @return builder
         * 
         */
        public Builder registryType(String registryType) {
            return registryType(Output.of(registryType));
        }

        /**
         * @param serviceEndpointName The name you will use to refer to this service connection in task inputs.
         * 
         * @return builder
         * 
         */
        public Builder serviceEndpointName(Output<String> serviceEndpointName) {
            $.serviceEndpointName = serviceEndpointName;
            return this;
        }

        /**
         * @param serviceEndpointName The name you will use to refer to this service connection in task inputs.
         * 
         * @return builder
         * 
         */
        public Builder serviceEndpointName(String serviceEndpointName) {
            return serviceEndpointName(Output.of(serviceEndpointName));
        }

        public DockerRegistryArgs build() {
            if ($.dockerRegistry == null) {
                throw new MissingRequiredPropertyException("DockerRegistryArgs", "dockerRegistry");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("DockerRegistryArgs", "projectId");
            }
            if ($.registryType == null) {
                throw new MissingRequiredPropertyException("DockerRegistryArgs", "registryType");
            }
            if ($.serviceEndpointName == null) {
                throw new MissingRequiredPropertyException("DockerRegistryArgs", "serviceEndpointName");
            }
            return $;
        }
    }

}
