// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.inputs;

import com.pulumi.azuredevops.inputs.BranchPolicyMinReviewersSettingsScopeArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BranchPolicyMinReviewersSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final BranchPolicyMinReviewersSettingsArgs Empty = new BranchPolicyMinReviewersSettingsArgs();

    /**
     * Allow completion even if some reviewers vote to wait or reject. Defaults to `false`.
     * 
     */
    @Import(name="allowCompletionWithRejectsOrWaits")
    private @Nullable Output<Boolean> allowCompletionWithRejectsOrWaits;

    /**
     * @return Allow completion even if some reviewers vote to wait or reject. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> allowCompletionWithRejectsOrWaits() {
        return Optional.ofNullable(this.allowCompletionWithRejectsOrWaits);
    }

    /**
     * Prohibit the most recent pusher from approving their own changes. Defaults to `false`.
     * 
     */
    @Import(name="lastPusherCannotApprove")
    private @Nullable Output<Boolean> lastPusherCannotApprove;

    /**
     * @return Prohibit the most recent pusher from approving their own changes. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> lastPusherCannotApprove() {
        return Optional.ofNullable(this.lastPusherCannotApprove);
    }

    /**
     * On last iteration require vote. Defaults to `false`.
     * 
     */
    @Import(name="onLastIterationRequireVote")
    private @Nullable Output<Boolean> onLastIterationRequireVote;

    /**
     * @return On last iteration require vote. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> onLastIterationRequireVote() {
        return Optional.ofNullable(this.onLastIterationRequireVote);
    }

    /**
     * When new changes are pushed reset all code reviewer votes. Defaults to `false`.
     * 
     * &gt; **Note:** If `on_push_reset_all_votes` is `true` then `on_push_reset_approved_votes` will be set to `true`. To enable `on_push_reset_approved_votes`, you need explicitly set `on_push_reset_all_votes` `false` or not configure.
     * 
     */
    @Import(name="onPushResetAllVotes")
    private @Nullable Output<Boolean> onPushResetAllVotes;

    /**
     * @return When new changes are pushed reset all code reviewer votes. Defaults to `false`.
     * 
     * &gt; **Note:** If `on_push_reset_all_votes` is `true` then `on_push_reset_approved_votes` will be set to `true`. To enable `on_push_reset_approved_votes`, you need explicitly set `on_push_reset_all_votes` `false` or not configure.
     * 
     */
    public Optional<Output<Boolean>> onPushResetAllVotes() {
        return Optional.ofNullable(this.onPushResetAllVotes);
    }

    /**
     * When new changes are pushed reset all approval votes (does not reset votes to reject or wait). Defaults to `false`.
     * 
     */
    @Import(name="onPushResetApprovedVotes")
    private @Nullable Output<Boolean> onPushResetApprovedVotes;

    /**
     * @return When new changes are pushed reset all approval votes (does not reset votes to reject or wait). Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> onPushResetApprovedVotes() {
        return Optional.ofNullable(this.onPushResetApprovedVotes);
    }

    /**
     * The number of reviewers needed to approve.
     * 
     */
    @Import(name="reviewerCount")
    private @Nullable Output<Integer> reviewerCount;

    /**
     * @return The number of reviewers needed to approve.
     * 
     */
    public Optional<Output<Integer>> reviewerCount() {
        return Optional.ofNullable(this.reviewerCount);
    }

    /**
     * A `scope` block as defined below. Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
     * 
     */
    @Import(name="scopes", required=true)
    private Output<List<BranchPolicyMinReviewersSettingsScopeArgs>> scopes;

    /**
     * @return A `scope` block as defined below. Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
     * 
     */
    public Output<List<BranchPolicyMinReviewersSettingsScopeArgs>> scopes() {
        return this.scopes;
    }

    /**
     * Allow requesters to approve their own changes. Defaults to `false`.
     * 
     */
    @Import(name="submitterCanVote")
    private @Nullable Output<Boolean> submitterCanVote;

    /**
     * @return Allow requesters to approve their own changes. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> submitterCanVote() {
        return Optional.ofNullable(this.submitterCanVote);
    }

    private BranchPolicyMinReviewersSettingsArgs() {}

    private BranchPolicyMinReviewersSettingsArgs(BranchPolicyMinReviewersSettingsArgs $) {
        this.allowCompletionWithRejectsOrWaits = $.allowCompletionWithRejectsOrWaits;
        this.lastPusherCannotApprove = $.lastPusherCannotApprove;
        this.onLastIterationRequireVote = $.onLastIterationRequireVote;
        this.onPushResetAllVotes = $.onPushResetAllVotes;
        this.onPushResetApprovedVotes = $.onPushResetApprovedVotes;
        this.reviewerCount = $.reviewerCount;
        this.scopes = $.scopes;
        this.submitterCanVote = $.submitterCanVote;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BranchPolicyMinReviewersSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BranchPolicyMinReviewersSettingsArgs $;

        public Builder() {
            $ = new BranchPolicyMinReviewersSettingsArgs();
        }

        public Builder(BranchPolicyMinReviewersSettingsArgs defaults) {
            $ = new BranchPolicyMinReviewersSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowCompletionWithRejectsOrWaits Allow completion even if some reviewers vote to wait or reject. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder allowCompletionWithRejectsOrWaits(@Nullable Output<Boolean> allowCompletionWithRejectsOrWaits) {
            $.allowCompletionWithRejectsOrWaits = allowCompletionWithRejectsOrWaits;
            return this;
        }

        /**
         * @param allowCompletionWithRejectsOrWaits Allow completion even if some reviewers vote to wait or reject. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder allowCompletionWithRejectsOrWaits(Boolean allowCompletionWithRejectsOrWaits) {
            return allowCompletionWithRejectsOrWaits(Output.of(allowCompletionWithRejectsOrWaits));
        }

        /**
         * @param lastPusherCannotApprove Prohibit the most recent pusher from approving their own changes. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder lastPusherCannotApprove(@Nullable Output<Boolean> lastPusherCannotApprove) {
            $.lastPusherCannotApprove = lastPusherCannotApprove;
            return this;
        }

        /**
         * @param lastPusherCannotApprove Prohibit the most recent pusher from approving their own changes. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder lastPusherCannotApprove(Boolean lastPusherCannotApprove) {
            return lastPusherCannotApprove(Output.of(lastPusherCannotApprove));
        }

        /**
         * @param onLastIterationRequireVote On last iteration require vote. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder onLastIterationRequireVote(@Nullable Output<Boolean> onLastIterationRequireVote) {
            $.onLastIterationRequireVote = onLastIterationRequireVote;
            return this;
        }

        /**
         * @param onLastIterationRequireVote On last iteration require vote. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder onLastIterationRequireVote(Boolean onLastIterationRequireVote) {
            return onLastIterationRequireVote(Output.of(onLastIterationRequireVote));
        }

        /**
         * @param onPushResetAllVotes When new changes are pushed reset all code reviewer votes. Defaults to `false`.
         * 
         * &gt; **Note:** If `on_push_reset_all_votes` is `true` then `on_push_reset_approved_votes` will be set to `true`. To enable `on_push_reset_approved_votes`, you need explicitly set `on_push_reset_all_votes` `false` or not configure.
         * 
         * @return builder
         * 
         */
        public Builder onPushResetAllVotes(@Nullable Output<Boolean> onPushResetAllVotes) {
            $.onPushResetAllVotes = onPushResetAllVotes;
            return this;
        }

        /**
         * @param onPushResetAllVotes When new changes are pushed reset all code reviewer votes. Defaults to `false`.
         * 
         * &gt; **Note:** If `on_push_reset_all_votes` is `true` then `on_push_reset_approved_votes` will be set to `true`. To enable `on_push_reset_approved_votes`, you need explicitly set `on_push_reset_all_votes` `false` or not configure.
         * 
         * @return builder
         * 
         */
        public Builder onPushResetAllVotes(Boolean onPushResetAllVotes) {
            return onPushResetAllVotes(Output.of(onPushResetAllVotes));
        }

        /**
         * @param onPushResetApprovedVotes When new changes are pushed reset all approval votes (does not reset votes to reject or wait). Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder onPushResetApprovedVotes(@Nullable Output<Boolean> onPushResetApprovedVotes) {
            $.onPushResetApprovedVotes = onPushResetApprovedVotes;
            return this;
        }

        /**
         * @param onPushResetApprovedVotes When new changes are pushed reset all approval votes (does not reset votes to reject or wait). Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder onPushResetApprovedVotes(Boolean onPushResetApprovedVotes) {
            return onPushResetApprovedVotes(Output.of(onPushResetApprovedVotes));
        }

        /**
         * @param reviewerCount The number of reviewers needed to approve.
         * 
         * @return builder
         * 
         */
        public Builder reviewerCount(@Nullable Output<Integer> reviewerCount) {
            $.reviewerCount = reviewerCount;
            return this;
        }

        /**
         * @param reviewerCount The number of reviewers needed to approve.
         * 
         * @return builder
         * 
         */
        public Builder reviewerCount(Integer reviewerCount) {
            return reviewerCount(Output.of(reviewerCount));
        }

        /**
         * @param scopes A `scope` block as defined below. Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
         * 
         * @return builder
         * 
         */
        public Builder scopes(Output<List<BranchPolicyMinReviewersSettingsScopeArgs>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes A `scope` block as defined below. Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
         * 
         * @return builder
         * 
         */
        public Builder scopes(List<BranchPolicyMinReviewersSettingsScopeArgs> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param scopes A `scope` block as defined below. Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
         * 
         * @return builder
         * 
         */
        public Builder scopes(BranchPolicyMinReviewersSettingsScopeArgs... scopes) {
            return scopes(List.of(scopes));
        }

        /**
         * @param submitterCanVote Allow requesters to approve their own changes. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder submitterCanVote(@Nullable Output<Boolean> submitterCanVote) {
            $.submitterCanVote = submitterCanVote;
            return this;
        }

        /**
         * @param submitterCanVote Allow requesters to approve their own changes. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder submitterCanVote(Boolean submitterCanVote) {
            return submitterCanVote(Output.of(submitterCanVote));
        }

        public BranchPolicyMinReviewersSettingsArgs build() {
            if ($.scopes == null) {
                throw new MissingRequiredPropertyException("BranchPolicyMinReviewersSettingsArgs", "scopes");
            }
            return $;
        }
    }

}
