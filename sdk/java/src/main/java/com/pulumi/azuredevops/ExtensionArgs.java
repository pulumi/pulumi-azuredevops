// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExtensionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExtensionArgs Empty = new ExtensionArgs();

    /**
     * Whether to disable the extension.
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return Whether to disable the extension.
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * The publisher ID of the extension.
     * 
     */
    @Import(name="extensionId", required=true)
    private Output<String> extensionId;

    /**
     * @return The publisher ID of the extension.
     * 
     */
    public Output<String> extensionId() {
        return this.extensionId;
    }

    /**
     * The extension ID of the extension.
     * 
     */
    @Import(name="publisherId", required=true)
    private Output<String> publisherId;

    /**
     * @return The extension ID of the extension.
     * 
     */
    public Output<String> publisherId() {
        return this.publisherId;
    }

    /**
     * The version of the extension.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return The version of the extension.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private ExtensionArgs() {}

    private ExtensionArgs(ExtensionArgs $) {
        this.disabled = $.disabled;
        this.extensionId = $.extensionId;
        this.publisherId = $.publisherId;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExtensionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExtensionArgs $;

        public Builder() {
            $ = new ExtensionArgs();
        }

        public Builder(ExtensionArgs defaults) {
            $ = new ExtensionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param disabled Whether to disable the extension.
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled Whether to disable the extension.
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param extensionId The publisher ID of the extension.
         * 
         * @return builder
         * 
         */
        public Builder extensionId(Output<String> extensionId) {
            $.extensionId = extensionId;
            return this;
        }

        /**
         * @param extensionId The publisher ID of the extension.
         * 
         * @return builder
         * 
         */
        public Builder extensionId(String extensionId) {
            return extensionId(Output.of(extensionId));
        }

        /**
         * @param publisherId The extension ID of the extension.
         * 
         * @return builder
         * 
         */
        public Builder publisherId(Output<String> publisherId) {
            $.publisherId = publisherId;
            return this;
        }

        /**
         * @param publisherId The extension ID of the extension.
         * 
         * @return builder
         * 
         */
        public Builder publisherId(String publisherId) {
            return publisherId(Output.of(publisherId));
        }

        /**
         * @param version The version of the extension.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version of the extension.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public ExtensionArgs build() {
            if ($.extensionId == null) {
                throw new MissingRequiredPropertyException("ExtensionArgs", "extensionId");
            }
            if ($.publisherId == null) {
                throw new MissingRequiredPropertyException("ExtensionArgs", "publisherId");
            }
            return $;
        }
    }

}
