// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops;

import com.pulumi.azuredevops.ProviderArgs;
import com.pulumi.azuredevops.Utilities;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The provider type for the azuredevops package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 * 
 */
@ResourceType(type="pulumi:providers:azuredevops")
public class Provider extends com.pulumi.resources.ProviderResource {
    /**
     * Base64 encoded certificate to use to authenticate to the service principal.
     * 
     */
    @Export(name="clientCertificate", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> clientCertificate;

    /**
     * @return Base64 encoded certificate to use to authenticate to the service principal.
     * 
     */
    public Output<Optional<String>> clientCertificate() {
        return Codegen.optional(this.clientCertificate);
    }
    /**
     * Password for a client certificate password.
     * 
     */
    @Export(name="clientCertificatePassword", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> clientCertificatePassword;

    /**
     * @return Password for a client certificate password.
     * 
     */
    public Output<Optional<String>> clientCertificatePassword() {
        return Codegen.optional(this.clientCertificatePassword);
    }
    /**
     * Path to a certificate to use to authenticate to the service principal.
     * 
     */
    @Export(name="clientCertificatePath", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> clientCertificatePath;

    /**
     * @return Path to a certificate to use to authenticate to the service principal.
     * 
     */
    public Output<Optional<String>> clientCertificatePath() {
        return Codegen.optional(this.clientCertificatePath);
    }
    /**
     * The service principal client or managed service principal id which should be used.
     * 
     */
    @Export(name="clientId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> clientId;

    /**
     * @return The service principal client or managed service principal id which should be used.
     * 
     */
    public Output<Optional<String>> clientId() {
        return Codegen.optional(this.clientId);
    }
    @Export(name="clientIdApply", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> clientIdApply;

    public Output<Optional<String>> clientIdApply() {
        return Codegen.optional(this.clientIdApply);
    }
    @Export(name="clientIdPlan", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> clientIdPlan;

    public Output<Optional<String>> clientIdPlan() {
        return Codegen.optional(this.clientIdPlan);
    }
    /**
     * Client secret for authenticating to a service principal.
     * 
     */
    @Export(name="clientSecret", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> clientSecret;

    /**
     * @return Client secret for authenticating to a service principal.
     * 
     */
    public Output<Optional<String>> clientSecret() {
        return Codegen.optional(this.clientSecret);
    }
    /**
     * Path to a file containing a client secret for authenticating to a service principal.
     * 
     */
    @Export(name="clientSecretPath", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> clientSecretPath;

    /**
     * @return Path to a file containing a client secret for authenticating to a service principal.
     * 
     */
    public Output<Optional<String>> clientSecretPath() {
        return Codegen.optional(this.clientSecretPath);
    }
    /**
     * Set the audience when requesting OIDC tokens.
     * 
     */
    @Export(name="oidcAudience", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> oidcAudience;

    /**
     * @return Set the audience when requesting OIDC tokens.
     * 
     */
    public Output<Optional<String>> oidcAudience() {
        return Codegen.optional(this.oidcAudience);
    }
    /**
     * The bearer token for the request to the OIDC provider. For use when authenticating as a Service Principal using OpenID
     * Connect.
     * 
     */
    @Export(name="oidcRequestToken", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> oidcRequestToken;

    /**
     * @return The bearer token for the request to the OIDC provider. For use when authenticating as a Service Principal using OpenID
     * Connect.
     * 
     */
    public Output<Optional<String>> oidcRequestToken() {
        return Codegen.optional(this.oidcRequestToken);
    }
    /**
     * The URL for the OIDC provider from which to request an ID token. For use when authenticating as a Service Principal
     * using OpenID Connect.
     * 
     */
    @Export(name="oidcRequestUrl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> oidcRequestUrl;

    /**
     * @return The URL for the OIDC provider from which to request an ID token. For use when authenticating as a Service Principal
     * using OpenID Connect.
     * 
     */
    public Output<Optional<String>> oidcRequestUrl() {
        return Codegen.optional(this.oidcRequestUrl);
    }
    @Export(name="oidcTfcTag", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> oidcTfcTag;

    public Output<Optional<String>> oidcTfcTag() {
        return Codegen.optional(this.oidcTfcTag);
    }
    /**
     * OIDC token to authenticate as a service principal.
     * 
     */
    @Export(name="oidcToken", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> oidcToken;

    /**
     * @return OIDC token to authenticate as a service principal.
     * 
     */
    public Output<Optional<String>> oidcToken() {
        return Codegen.optional(this.oidcToken);
    }
    /**
     * OIDC token from file to authenticate as a service principal.
     * 
     */
    @Export(name="oidcTokenFilePath", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> oidcTokenFilePath;

    /**
     * @return OIDC token from file to authenticate as a service principal.
     * 
     */
    public Output<Optional<String>> oidcTokenFilePath() {
        return Codegen.optional(this.oidcTokenFilePath);
    }
    /**
     * The url of the Azure DevOps instance which should be used.
     * 
     */
    @Export(name="orgServiceUrl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> orgServiceUrl;

    /**
     * @return The url of the Azure DevOps instance which should be used.
     * 
     */
    public Output<Optional<String>> orgServiceUrl() {
        return Codegen.optional(this.orgServiceUrl);
    }
    /**
     * The personal access token which should be used.
     * 
     */
    @Export(name="personalAccessToken", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> personalAccessToken;

    /**
     * @return The personal access token which should be used.
     * 
     */
    public Output<Optional<String>> personalAccessToken() {
        return Codegen.optional(this.personalAccessToken);
    }
    /**
     * The service principal tenant id which should be used.
     * 
     */
    @Export(name="tenantId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tenantId;

    /**
     * @return The service principal tenant id which should be used.
     * 
     */
    public Output<Optional<String>> tenantId() {
        return Codegen.optional(this.tenantId);
    }
    @Export(name="tenantIdApply", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tenantIdApply;

    public Output<Optional<String>> tenantIdApply() {
        return Codegen.optional(this.tenantIdApply);
    }
    @Export(name="tenantIdPlan", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tenantIdPlan;

    public Output<Optional<String>> tenantIdPlan() {
        return Codegen.optional(this.tenantIdPlan);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Provider(String name) {
        this(name, ProviderArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Provider(String name, @Nullable ProviderArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Provider(String name, @Nullable ProviderArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azuredevops", name, args == null ? ProviderArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "clientCertificate",
                "clientCertificatePassword",
                "clientSecret",
                "oidcToken",
                "personalAccessToken"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

}
