// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryPolicyCaseEnforcementArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryPolicyCaseEnforcementArgs Empty = new RepositoryPolicyCaseEnforcementArgs();

    /**
     * A flag indicating if the policy should be blocking. Defaults to `true`.
     * 
     */
    @Import(name="blocking")
    private @Nullable Output<Boolean> blocking;

    /**
     * @return A flag indicating if the policy should be blocking. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> blocking() {
        return Optional.ofNullable(this.blocking);
    }

    /**
     * A flag indicating if the policy should be enabled. Defaults to `true`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return A flag indicating if the policy should be enabled. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Avoid case-sensitivity conflicts by blocking pushes that change name casing on files, folders, branches, and tags.
     * 
     */
    @Import(name="enforceConsistentCase", required=true)
    private Output<Boolean> enforceConsistentCase;

    /**
     * @return Avoid case-sensitivity conflicts by blocking pushes that change name casing on files, folders, branches, and tags.
     * 
     */
    public Output<Boolean> enforceConsistentCase() {
        return this.enforceConsistentCase;
    }

    /**
     * The ID of the project in which the policy will be created.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return The ID of the project in which the policy will be created.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.
     * 
     */
    @Import(name="repositoryIds")
    private @Nullable Output<List<String>> repositoryIds;

    /**
     * @return Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.
     * 
     */
    public Optional<Output<List<String>>> repositoryIds() {
        return Optional.ofNullable(this.repositoryIds);
    }

    private RepositoryPolicyCaseEnforcementArgs() {}

    private RepositoryPolicyCaseEnforcementArgs(RepositoryPolicyCaseEnforcementArgs $) {
        this.blocking = $.blocking;
        this.enabled = $.enabled;
        this.enforceConsistentCase = $.enforceConsistentCase;
        this.projectId = $.projectId;
        this.repositoryIds = $.repositoryIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryPolicyCaseEnforcementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryPolicyCaseEnforcementArgs $;

        public Builder() {
            $ = new RepositoryPolicyCaseEnforcementArgs();
        }

        public Builder(RepositoryPolicyCaseEnforcementArgs defaults) {
            $ = new RepositoryPolicyCaseEnforcementArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param blocking A flag indicating if the policy should be blocking. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder blocking(@Nullable Output<Boolean> blocking) {
            $.blocking = blocking;
            return this;
        }

        /**
         * @param blocking A flag indicating if the policy should be blocking. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder blocking(Boolean blocking) {
            return blocking(Output.of(blocking));
        }

        /**
         * @param enabled A flag indicating if the policy should be enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled A flag indicating if the policy should be enabled. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param enforceConsistentCase Avoid case-sensitivity conflicts by blocking pushes that change name casing on files, folders, branches, and tags.
         * 
         * @return builder
         * 
         */
        public Builder enforceConsistentCase(Output<Boolean> enforceConsistentCase) {
            $.enforceConsistentCase = enforceConsistentCase;
            return this;
        }

        /**
         * @param enforceConsistentCase Avoid case-sensitivity conflicts by blocking pushes that change name casing on files, folders, branches, and tags.
         * 
         * @return builder
         * 
         */
        public Builder enforceConsistentCase(Boolean enforceConsistentCase) {
            return enforceConsistentCase(Output.of(enforceConsistentCase));
        }

        /**
         * @param projectId The ID of the project in which the policy will be created.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The ID of the project in which the policy will be created.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param repositoryIds Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.
         * 
         * @return builder
         * 
         */
        public Builder repositoryIds(@Nullable Output<List<String>> repositoryIds) {
            $.repositoryIds = repositoryIds;
            return this;
        }

        /**
         * @param repositoryIds Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.
         * 
         * @return builder
         * 
         */
        public Builder repositoryIds(List<String> repositoryIds) {
            return repositoryIds(Output.of(repositoryIds));
        }

        /**
         * @param repositoryIds Control whether the policy is enabled for the repository or the project. If `repository_ids` not configured, the policy will be set to the project.
         * 
         * @return builder
         * 
         */
        public Builder repositoryIds(String... repositoryIds) {
            return repositoryIds(List.of(repositoryIds));
        }

        public RepositoryPolicyCaseEnforcementArgs build() {
            if ($.enforceConsistentCase == null) {
                throw new MissingRequiredPropertyException("RepositoryPolicyCaseEnforcementArgs", "enforceConsistentCase");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("RepositoryPolicyCaseEnforcementArgs", "projectId");
            }
            return $;
        }
    }

}
