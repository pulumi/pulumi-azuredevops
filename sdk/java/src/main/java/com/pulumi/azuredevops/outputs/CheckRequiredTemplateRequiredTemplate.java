// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CheckRequiredTemplateRequiredTemplate {
    /**
     * @return The name of the repository storing the template.
     * 
     */
    private String repositoryName;
    /**
     * @return The branch in which the template will be referenced.
     * 
     */
    private String repositoryRef;
    /**
     * @return The type of the repository storing the template. Valid values: `azuregit`, `github`, `bitbucket`. Defaults to `azuregit`.
     * 
     */
    private @Nullable String repositoryType;
    /**
     * @return The path to the template yaml.
     * 
     */
    private String templatePath;

    private CheckRequiredTemplateRequiredTemplate() {}
    /**
     * @return The name of the repository storing the template.
     * 
     */
    public String repositoryName() {
        return this.repositoryName;
    }
    /**
     * @return The branch in which the template will be referenced.
     * 
     */
    public String repositoryRef() {
        return this.repositoryRef;
    }
    /**
     * @return The type of the repository storing the template. Valid values: `azuregit`, `github`, `bitbucket`. Defaults to `azuregit`.
     * 
     */
    public Optional<String> repositoryType() {
        return Optional.ofNullable(this.repositoryType);
    }
    /**
     * @return The path to the template yaml.
     * 
     */
    public String templatePath() {
        return this.templatePath;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CheckRequiredTemplateRequiredTemplate defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String repositoryName;
        private String repositoryRef;
        private @Nullable String repositoryType;
        private String templatePath;
        public Builder() {}
        public Builder(CheckRequiredTemplateRequiredTemplate defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.repositoryName = defaults.repositoryName;
    	      this.repositoryRef = defaults.repositoryRef;
    	      this.repositoryType = defaults.repositoryType;
    	      this.templatePath = defaults.templatePath;
        }

        @CustomType.Setter
        public Builder repositoryName(String repositoryName) {
            this.repositoryName = Objects.requireNonNull(repositoryName);
            return this;
        }
        @CustomType.Setter
        public Builder repositoryRef(String repositoryRef) {
            this.repositoryRef = Objects.requireNonNull(repositoryRef);
            return this;
        }
        @CustomType.Setter
        public Builder repositoryType(@Nullable String repositoryType) {
            this.repositoryType = repositoryType;
            return this;
        }
        @CustomType.Setter
        public Builder templatePath(String templatePath) {
            this.templatePath = Objects.requireNonNull(templatePath);
            return this;
        }
        public CheckRequiredTemplateRequiredTemplate build() {
            final var o = new CheckRequiredTemplateRequiredTemplate();
            o.repositoryName = repositoryName;
            o.repositoryRef = repositoryRef;
            o.repositoryType = repositoryType;
            o.templatePath = templatePath;
            return o;
        }
    }
}
