// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GitInitialization {
    /**
     * @return The type of repository to create. Valid values: `Uninitialized`, `Clean` or `Import`.
     * 
     */
    private String initType;
    /**
     * @return The password used to authenticate to a private repository for import initialization. Conflicts with `service_connection_id`.
     * 
     * ~&gt;**Note** At least `service_connection_id` or `username/password` needs to be set to import private repository.
     * 
     */
    private @Nullable String password;
    /**
     * @return The ID of service connection used to authenticate to a private repository for import initialization. Conflicts with `username` and `password`.
     * 
     */
    private @Nullable String serviceConnectionId;
    /**
     * @return Type of the source repository. Used if the `init_type` is `Import`. Valid values: `Git`.
     * 
     */
    private @Nullable String sourceType;
    /**
     * @return The URL of the source repository. Used if the `init_type` is `Import`.
     * 
     */
    private @Nullable String sourceUrl;
    /**
     * @return The username used to authenticate to a private repository for import initialization. Conflicts with `service_connection_id`.
     * 
     */
    private @Nullable String username;

    private GitInitialization() {}
    /**
     * @return The type of repository to create. Valid values: `Uninitialized`, `Clean` or `Import`.
     * 
     */
    public String initType() {
        return this.initType;
    }
    /**
     * @return The password used to authenticate to a private repository for import initialization. Conflicts with `service_connection_id`.
     * 
     * ~&gt;**Note** At least `service_connection_id` or `username/password` needs to be set to import private repository.
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return The ID of service connection used to authenticate to a private repository for import initialization. Conflicts with `username` and `password`.
     * 
     */
    public Optional<String> serviceConnectionId() {
        return Optional.ofNullable(this.serviceConnectionId);
    }
    /**
     * @return Type of the source repository. Used if the `init_type` is `Import`. Valid values: `Git`.
     * 
     */
    public Optional<String> sourceType() {
        return Optional.ofNullable(this.sourceType);
    }
    /**
     * @return The URL of the source repository. Used if the `init_type` is `Import`.
     * 
     */
    public Optional<String> sourceUrl() {
        return Optional.ofNullable(this.sourceUrl);
    }
    /**
     * @return The username used to authenticate to a private repository for import initialization. Conflicts with `service_connection_id`.
     * 
     */
    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GitInitialization defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String initType;
        private @Nullable String password;
        private @Nullable String serviceConnectionId;
        private @Nullable String sourceType;
        private @Nullable String sourceUrl;
        private @Nullable String username;
        public Builder() {}
        public Builder(GitInitialization defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.initType = defaults.initType;
    	      this.password = defaults.password;
    	      this.serviceConnectionId = defaults.serviceConnectionId;
    	      this.sourceType = defaults.sourceType;
    	      this.sourceUrl = defaults.sourceUrl;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder initType(String initType) {
            if (initType == null) {
              throw new MissingRequiredPropertyException("GitInitialization", "initType");
            }
            this.initType = initType;
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {

            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder serviceConnectionId(@Nullable String serviceConnectionId) {

            this.serviceConnectionId = serviceConnectionId;
            return this;
        }
        @CustomType.Setter
        public Builder sourceType(@Nullable String sourceType) {

            this.sourceType = sourceType;
            return this;
        }
        @CustomType.Setter
        public Builder sourceUrl(@Nullable String sourceUrl) {

            this.sourceUrl = sourceUrl;
            return this;
        }
        @CustomType.Setter
        public Builder username(@Nullable String username) {

            this.username = username;
            return this;
        }
        public GitInitialization build() {
            final var _resultValue = new GitInitialization();
            _resultValue.initType = initType;
            _resultValue.password = password;
            _resultValue.serviceConnectionId = serviceConnectionId;
            _resultValue.sourceType = sourceType;
            _resultValue.sourceUrl = sourceUrl;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
