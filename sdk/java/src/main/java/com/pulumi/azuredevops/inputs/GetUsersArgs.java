// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.inputs;

import com.pulumi.azuredevops.inputs.GetUsersFeaturesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetUsersArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetUsersArgs Empty = new GetUsersArgs();

    /**
     * A `features` block as defined below.
     * 
     */
    @Import(name="features")
    private @Nullable Output<GetUsersFeaturesArgs> features;

    /**
     * @return A `features` block as defined below.
     * 
     */
    public Optional<Output<GetUsersFeaturesArgs>> features() {
        return Optional.ofNullable(this.features);
    }

    /**
     * The type of source provider for the `origin_id` parameter (ex:AD, AAD, MSA) The supported origins are listed below.
     * &lt;pre&gt;List of possible origins
     * ```hcl
     * ActiveDirectory          = &#34;ad&#34;   # Windows Active Directory
     * AzureActiveDirectory     = &#34;aad&#34;  # Azure Active Directory
     * MicrosoftAccount         = &#34;msa&#34;  # Windows Live Account
     * VisualStudioTeamServices = &#34;vsts&#34; # DevOps
     * GitHubDirectory          = &#34;ghb&#34;  # GitHub
     * ```
     * &lt;/pre&gt;
     * 
     */
    @Import(name="origin")
    private @Nullable Output<String> origin;

    /**
     * @return The type of source provider for the `origin_id` parameter (ex:AD, AAD, MSA) The supported origins are listed below.
     * &lt;pre&gt;List of possible origins
     * ```hcl
     * ActiveDirectory          = &#34;ad&#34;   # Windows Active Directory
     * AzureActiveDirectory     = &#34;aad&#34;  # Azure Active Directory
     * MicrosoftAccount         = &#34;msa&#34;  # Windows Live Account
     * VisualStudioTeamServices = &#34;vsts&#34; # DevOps
     * GitHubDirectory          = &#34;ghb&#34;  # GitHub
     * ```
     * &lt;/pre&gt;
     * 
     */
    public Optional<Output<String>> origin() {
        return Optional.ofNullable(this.origin);
    }

    /**
     * The unique identifier from the system of origin.
     * 
     */
    @Import(name="originId")
    private @Nullable Output<String> originId;

    /**
     * @return The unique identifier from the system of origin.
     * 
     */
    public Optional<Output<String>> originId() {
        return Optional.ofNullable(this.originId);
    }

    /**
     * The PrincipalName of this graph member from the source provider.
     * 
     */
    @Import(name="principalName")
    private @Nullable Output<String> principalName;

    /**
     * @return The PrincipalName of this graph member from the source provider.
     * 
     */
    public Optional<Output<String>> principalName() {
        return Optional.ofNullable(this.principalName);
    }

    /**
     * A list of user subject subtypes to reduce the retrieved results, e.g. `msa`, `aad`, `svc` (service identity), `imp` (imported identity), etc. The supported subject types are listed below.
     * &lt;pre&gt;List of possible subject types
     * ```hcl
     * AadUser                 = &#34;aad&#34; # Azure Active Directory Tenant
     * MsaUser                 = &#34;msa&#34; # Windows Live
     * UnknownUser             = &#34;unusr&#34;
     * BindPendingUser         = &#34;bnd&#34; # Invited user with pending redeem status
     * WindowsIdentity         = &#34;win&#34; # Windows Active Directory user
     * UnauthenticatedIdentity = &#34;uauth&#34;
     * ServiceIdentity         = &#34;svc&#34;
     * AggregateIdentity       = &#34;agg&#34;
     * ImportedIdentity        = &#34;imp&#34;
     * ServerTestIdentity      = &#34;tst&#34;
     * GroupScopeType          = &#34;scp&#34;
     * CspPartnerIdentity      = &#34;csp&#34;
     * SystemServicePrincipal  = &#34;s2s&#34;
     * SystemLicense           = &#34;slic&#34;
     * SystemScope             = &#34;sscp&#34;
     * SystemCspPartner        = &#34;scsp&#34;
     * SystemPublicAccess      = &#34;spa&#34;
     * SystemAccessControl     = &#34;sace&#34;
     * AcsServiceIdentity      = &#34;acs&#34;
     * Unknown                 = &#34;ukn&#34;
     * ```
     * &lt;/pre&gt;
     * 
     */
    @Import(name="subjectTypes")
    private @Nullable Output<List<String>> subjectTypes;

    /**
     * @return A list of user subject subtypes to reduce the retrieved results, e.g. `msa`, `aad`, `svc` (service identity), `imp` (imported identity), etc. The supported subject types are listed below.
     * &lt;pre&gt;List of possible subject types
     * ```hcl
     * AadUser                 = &#34;aad&#34; # Azure Active Directory Tenant
     * MsaUser                 = &#34;msa&#34; # Windows Live
     * UnknownUser             = &#34;unusr&#34;
     * BindPendingUser         = &#34;bnd&#34; # Invited user with pending redeem status
     * WindowsIdentity         = &#34;win&#34; # Windows Active Directory user
     * UnauthenticatedIdentity = &#34;uauth&#34;
     * ServiceIdentity         = &#34;svc&#34;
     * AggregateIdentity       = &#34;agg&#34;
     * ImportedIdentity        = &#34;imp&#34;
     * ServerTestIdentity      = &#34;tst&#34;
     * GroupScopeType          = &#34;scp&#34;
     * CspPartnerIdentity      = &#34;csp&#34;
     * SystemServicePrincipal  = &#34;s2s&#34;
     * SystemLicense           = &#34;slic&#34;
     * SystemScope             = &#34;sscp&#34;
     * SystemCspPartner        = &#34;scsp&#34;
     * SystemPublicAccess      = &#34;spa&#34;
     * SystemAccessControl     = &#34;sace&#34;
     * AcsServiceIdentity      = &#34;acs&#34;
     * Unknown                 = &#34;ukn&#34;
     * ```
     * &lt;/pre&gt;
     * 
     */
    public Optional<Output<List<String>>> subjectTypes() {
        return Optional.ofNullable(this.subjectTypes);
    }

    private GetUsersArgs() {}

    private GetUsersArgs(GetUsersArgs $) {
        this.features = $.features;
        this.origin = $.origin;
        this.originId = $.originId;
        this.principalName = $.principalName;
        this.subjectTypes = $.subjectTypes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetUsersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetUsersArgs $;

        public Builder() {
            $ = new GetUsersArgs();
        }

        public Builder(GetUsersArgs defaults) {
            $ = new GetUsersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param features A `features` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder features(@Nullable Output<GetUsersFeaturesArgs> features) {
            $.features = features;
            return this;
        }

        /**
         * @param features A `features` block as defined below.
         * 
         * @return builder
         * 
         */
        public Builder features(GetUsersFeaturesArgs features) {
            return features(Output.of(features));
        }

        /**
         * @param origin The type of source provider for the `origin_id` parameter (ex:AD, AAD, MSA) The supported origins are listed below.
         * &lt;pre&gt;List of possible origins
         * ```hcl
         * ActiveDirectory          = &#34;ad&#34;   # Windows Active Directory
         * AzureActiveDirectory     = &#34;aad&#34;  # Azure Active Directory
         * MicrosoftAccount         = &#34;msa&#34;  # Windows Live Account
         * VisualStudioTeamServices = &#34;vsts&#34; # DevOps
         * GitHubDirectory          = &#34;ghb&#34;  # GitHub
         * ```
         * &lt;/pre&gt;
         * 
         * @return builder
         * 
         */
        public Builder origin(@Nullable Output<String> origin) {
            $.origin = origin;
            return this;
        }

        /**
         * @param origin The type of source provider for the `origin_id` parameter (ex:AD, AAD, MSA) The supported origins are listed below.
         * &lt;pre&gt;List of possible origins
         * ```hcl
         * ActiveDirectory          = &#34;ad&#34;   # Windows Active Directory
         * AzureActiveDirectory     = &#34;aad&#34;  # Azure Active Directory
         * MicrosoftAccount         = &#34;msa&#34;  # Windows Live Account
         * VisualStudioTeamServices = &#34;vsts&#34; # DevOps
         * GitHubDirectory          = &#34;ghb&#34;  # GitHub
         * ```
         * &lt;/pre&gt;
         * 
         * @return builder
         * 
         */
        public Builder origin(String origin) {
            return origin(Output.of(origin));
        }

        /**
         * @param originId The unique identifier from the system of origin.
         * 
         * @return builder
         * 
         */
        public Builder originId(@Nullable Output<String> originId) {
            $.originId = originId;
            return this;
        }

        /**
         * @param originId The unique identifier from the system of origin.
         * 
         * @return builder
         * 
         */
        public Builder originId(String originId) {
            return originId(Output.of(originId));
        }

        /**
         * @param principalName The PrincipalName of this graph member from the source provider.
         * 
         * @return builder
         * 
         */
        public Builder principalName(@Nullable Output<String> principalName) {
            $.principalName = principalName;
            return this;
        }

        /**
         * @param principalName The PrincipalName of this graph member from the source provider.
         * 
         * @return builder
         * 
         */
        public Builder principalName(String principalName) {
            return principalName(Output.of(principalName));
        }

        /**
         * @param subjectTypes A list of user subject subtypes to reduce the retrieved results, e.g. `msa`, `aad`, `svc` (service identity), `imp` (imported identity), etc. The supported subject types are listed below.
         * &lt;pre&gt;List of possible subject types
         * ```hcl
         * AadUser                 = &#34;aad&#34; # Azure Active Directory Tenant
         * MsaUser                 = &#34;msa&#34; # Windows Live
         * UnknownUser             = &#34;unusr&#34;
         * BindPendingUser         = &#34;bnd&#34; # Invited user with pending redeem status
         * WindowsIdentity         = &#34;win&#34; # Windows Active Directory user
         * UnauthenticatedIdentity = &#34;uauth&#34;
         * ServiceIdentity         = &#34;svc&#34;
         * AggregateIdentity       = &#34;agg&#34;
         * ImportedIdentity        = &#34;imp&#34;
         * ServerTestIdentity      = &#34;tst&#34;
         * GroupScopeType          = &#34;scp&#34;
         * CspPartnerIdentity      = &#34;csp&#34;
         * SystemServicePrincipal  = &#34;s2s&#34;
         * SystemLicense           = &#34;slic&#34;
         * SystemScope             = &#34;sscp&#34;
         * SystemCspPartner        = &#34;scsp&#34;
         * SystemPublicAccess      = &#34;spa&#34;
         * SystemAccessControl     = &#34;sace&#34;
         * AcsServiceIdentity      = &#34;acs&#34;
         * Unknown                 = &#34;ukn&#34;
         * ```
         * &lt;/pre&gt;
         * 
         * @return builder
         * 
         */
        public Builder subjectTypes(@Nullable Output<List<String>> subjectTypes) {
            $.subjectTypes = subjectTypes;
            return this;
        }

        /**
         * @param subjectTypes A list of user subject subtypes to reduce the retrieved results, e.g. `msa`, `aad`, `svc` (service identity), `imp` (imported identity), etc. The supported subject types are listed below.
         * &lt;pre&gt;List of possible subject types
         * ```hcl
         * AadUser                 = &#34;aad&#34; # Azure Active Directory Tenant
         * MsaUser                 = &#34;msa&#34; # Windows Live
         * UnknownUser             = &#34;unusr&#34;
         * BindPendingUser         = &#34;bnd&#34; # Invited user with pending redeem status
         * WindowsIdentity         = &#34;win&#34; # Windows Active Directory user
         * UnauthenticatedIdentity = &#34;uauth&#34;
         * ServiceIdentity         = &#34;svc&#34;
         * AggregateIdentity       = &#34;agg&#34;
         * ImportedIdentity        = &#34;imp&#34;
         * ServerTestIdentity      = &#34;tst&#34;
         * GroupScopeType          = &#34;scp&#34;
         * CspPartnerIdentity      = &#34;csp&#34;
         * SystemServicePrincipal  = &#34;s2s&#34;
         * SystemLicense           = &#34;slic&#34;
         * SystemScope             = &#34;sscp&#34;
         * SystemCspPartner        = &#34;scsp&#34;
         * SystemPublicAccess      = &#34;spa&#34;
         * SystemAccessControl     = &#34;sace&#34;
         * AcsServiceIdentity      = &#34;acs&#34;
         * Unknown                 = &#34;ukn&#34;
         * ```
         * &lt;/pre&gt;
         * 
         * @return builder
         * 
         */
        public Builder subjectTypes(List<String> subjectTypes) {
            return subjectTypes(Output.of(subjectTypes));
        }

        /**
         * @param subjectTypes A list of user subject subtypes to reduce the retrieved results, e.g. `msa`, `aad`, `svc` (service identity), `imp` (imported identity), etc. The supported subject types are listed below.
         * &lt;pre&gt;List of possible subject types
         * ```hcl
         * AadUser                 = &#34;aad&#34; # Azure Active Directory Tenant
         * MsaUser                 = &#34;msa&#34; # Windows Live
         * UnknownUser             = &#34;unusr&#34;
         * BindPendingUser         = &#34;bnd&#34; # Invited user with pending redeem status
         * WindowsIdentity         = &#34;win&#34; # Windows Active Directory user
         * UnauthenticatedIdentity = &#34;uauth&#34;
         * ServiceIdentity         = &#34;svc&#34;
         * AggregateIdentity       = &#34;agg&#34;
         * ImportedIdentity        = &#34;imp&#34;
         * ServerTestIdentity      = &#34;tst&#34;
         * GroupScopeType          = &#34;scp&#34;
         * CspPartnerIdentity      = &#34;csp&#34;
         * SystemServicePrincipal  = &#34;s2s&#34;
         * SystemLicense           = &#34;slic&#34;
         * SystemScope             = &#34;sscp&#34;
         * SystemCspPartner        = &#34;scsp&#34;
         * SystemPublicAccess      = &#34;spa&#34;
         * SystemAccessControl     = &#34;sace&#34;
         * AcsServiceIdentity      = &#34;acs&#34;
         * Unknown                 = &#34;ukn&#34;
         * ```
         * &lt;/pre&gt;
         * 
         * @return builder
         * 
         */
        public Builder subjectTypes(String... subjectTypes) {
            return subjectTypes(List.of(subjectTypes));
        }

        public GetUsersArgs build() {
            return $;
        }
    }

}
