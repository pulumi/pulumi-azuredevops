// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetAreaChildren {
    /**
     * @return Indicator if the child Area node has child nodes
     * 
     */
    private Boolean hasChildren;
    /**
     * @return The id of the child Area node
     * 
     */
    private String id;
    /**
     * @return The name of the child Area node
     * 
     */
    private String name;
    /**
     * @return The path to the Area; *Format*: URL relative; if omitted, or value `&#34;/&#34;` is used, the root Area will be returned
     * 
     */
    private String path;
    /**
     * @return The project ID.
     * 
     */
    private String projectId;

    private GetAreaChildren() {}
    /**
     * @return Indicator if the child Area node has child nodes
     * 
     */
    public Boolean hasChildren() {
        return this.hasChildren;
    }
    /**
     * @return The id of the child Area node
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the child Area node
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The path to the Area; *Format*: URL relative; if omitted, or value `&#34;/&#34;` is used, the root Area will be returned
     * 
     */
    public String path() {
        return this.path;
    }
    /**
     * @return The project ID.
     * 
     */
    public String projectId() {
        return this.projectId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAreaChildren defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean hasChildren;
        private String id;
        private String name;
        private String path;
        private String projectId;
        public Builder() {}
        public Builder(GetAreaChildren defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hasChildren = defaults.hasChildren;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.path = defaults.path;
    	      this.projectId = defaults.projectId;
        }

        @CustomType.Setter
        public Builder hasChildren(Boolean hasChildren) {
            if (hasChildren == null) {
              throw new MissingRequiredPropertyException("GetAreaChildren", "hasChildren");
            }
            this.hasChildren = hasChildren;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAreaChildren", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetAreaChildren", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            if (path == null) {
              throw new MissingRequiredPropertyException("GetAreaChildren", "path");
            }
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetAreaChildren", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        public GetAreaChildren build() {
            final var _resultValue = new GetAreaChildren();
            _resultValue.hasChildren = hasChildren;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.path = path;
            _resultValue.projectId = projectId;
            return _resultValue;
        }
    }
}
