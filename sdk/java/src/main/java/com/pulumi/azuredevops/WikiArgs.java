// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WikiArgs extends com.pulumi.resources.ResourceArgs {

    public static final WikiArgs Empty = new WikiArgs();

    /**
     * Folder path inside repository which is shown as Wiki.
     * 
     */
    @Import(name="mappedPath")
    private @Nullable Output<String> mappedPath;

    /**
     * @return Folder path inside repository which is shown as Wiki.
     * 
     */
    public Optional<Output<String>> mappedPath() {
        return Optional.ofNullable(this.mappedPath);
    }

    /**
     * The name of the Wiki.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Wiki.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the Project.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The ID of the Project.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The ID of the repository.
     * 
     */
    @Import(name="repositoryId")
    private @Nullable Output<String> repositoryId;

    /**
     * @return The ID of the repository.
     * 
     */
    public Optional<Output<String>> repositoryId() {
        return Optional.ofNullable(this.repositoryId);
    }

    /**
     * The type of the wiki. Possible values are `codeWiki`, `projectWiki`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of the wiki. Possible values are `codeWiki`, `projectWiki`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * Version of the wiki.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return Version of the wiki.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private WikiArgs() {}

    private WikiArgs(WikiArgs $) {
        this.mappedPath = $.mappedPath;
        this.name = $.name;
        this.projectId = $.projectId;
        this.repositoryId = $.repositoryId;
        this.type = $.type;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WikiArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WikiArgs $;

        public Builder() {
            $ = new WikiArgs();
        }

        public Builder(WikiArgs defaults) {
            $ = new WikiArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param mappedPath Folder path inside repository which is shown as Wiki.
         * 
         * @return builder
         * 
         */
        public Builder mappedPath(@Nullable Output<String> mappedPath) {
            $.mappedPath = mappedPath;
            return this;
        }

        /**
         * @param mappedPath Folder path inside repository which is shown as Wiki.
         * 
         * @return builder
         * 
         */
        public Builder mappedPath(String mappedPath) {
            return mappedPath(Output.of(mappedPath));
        }

        /**
         * @param name The name of the Wiki.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Wiki.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectId The ID of the Project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The ID of the Project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param repositoryId The ID of the repository.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(@Nullable Output<String> repositoryId) {
            $.repositoryId = repositoryId;
            return this;
        }

        /**
         * @param repositoryId The ID of the repository.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(String repositoryId) {
            return repositoryId(Output.of(repositoryId));
        }

        /**
         * @param type The type of the wiki. Possible values are `codeWiki`, `projectWiki`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the wiki. Possible values are `codeWiki`, `projectWiki`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param version Version of the wiki.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Version of the wiki.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public WikiArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("WikiArgs", "type");
            }
            return $;
        }
    }

}
