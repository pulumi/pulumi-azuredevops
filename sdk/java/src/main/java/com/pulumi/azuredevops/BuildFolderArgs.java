// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BuildFolderArgs extends com.pulumi.resources.ResourceArgs {

    public static final BuildFolderArgs Empty = new BuildFolderArgs();

    /**
     * Folder Description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Folder Description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The folder path.
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return The folder path.
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    /**
     * The ID of the project in which the folder will be created.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return The ID of the project in which the folder will be created.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    private BuildFolderArgs() {}

    private BuildFolderArgs(BuildFolderArgs $) {
        this.description = $.description;
        this.path = $.path;
        this.projectId = $.projectId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BuildFolderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BuildFolderArgs $;

        public Builder() {
            $ = new BuildFolderArgs();
        }

        public Builder(BuildFolderArgs defaults) {
            $ = new BuildFolderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Folder Description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Folder Description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param path The folder path.
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The folder path.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param projectId The ID of the project in which the folder will be created.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The ID of the project in which the folder will be created.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        public BuildFolderArgs build() {
            if ($.path == null) {
                throw new MissingRequiredPropertyException("BuildFolderArgs", "path");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("BuildFolderArgs", "projectId");
            }
            return $;
        }
    }

}
