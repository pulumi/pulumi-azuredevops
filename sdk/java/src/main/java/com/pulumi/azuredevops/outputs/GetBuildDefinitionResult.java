// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.outputs;

import com.pulumi.azuredevops.outputs.GetBuildDefinitionCiTrigger;
import com.pulumi.azuredevops.outputs.GetBuildDefinitionJob;
import com.pulumi.azuredevops.outputs.GetBuildDefinitionPullRequestTrigger;
import com.pulumi.azuredevops.outputs.GetBuildDefinitionRepository;
import com.pulumi.azuredevops.outputs.GetBuildDefinitionSchedule;
import com.pulumi.azuredevops.outputs.GetBuildDefinitionVariable;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetBuildDefinitionResult {
    /**
     * @return The agent pool that should execute the build.
     * 
     */
    private String agentPoolName;
    /**
     * @return The Agent Specification to run the pipelines. Example: `windows-2019`, `windows-latest`, `macos-13` etc.
     * 
     */
    private String agentSpecification;
    /**
     * @return A `ci_trigger` block as defined below.
     * 
     */
    private List<GetBuildDefinitionCiTrigger> ciTriggers;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The job authorization scope for builds queued against this definition.
     * 
     */
    private String jobAuthorizationScope;
    /**
     * @return A `jobs` blocks as documented below.
     * 
     */
    private List<GetBuildDefinitionJob> jobs;
    /**
     * @return The name of the variable.
     * 
     */
    private String name;
    private @Nullable String path;
    private String projectId;
    /**
     * @return A `pull_request_trigger` block as defined below.
     * 
     */
    private List<GetBuildDefinitionPullRequestTrigger> pullRequestTriggers;
    /**
     * @return The queue status of the build definition.
     * 
     */
    private String queueStatus;
    /**
     * @return A `repository` block as defined below.
     * 
     */
    private List<GetBuildDefinitionRepository> repositories;
    /**
     * @return The revision of the build definition.
     * 
     */
    private Integer revision;
    /**
     * @return A `schedules` block as defined below.
     * 
     */
    private List<GetBuildDefinitionSchedule> schedules;
    /**
     * @return A list of variable group IDs.
     * 
     */
    private List<Integer> variableGroups;
    /**
     * @return A `variable` block as defined below.
     * 
     */
    private List<GetBuildDefinitionVariable> variables;

    private GetBuildDefinitionResult() {}
    /**
     * @return The agent pool that should execute the build.
     * 
     */
    public String agentPoolName() {
        return this.agentPoolName;
    }
    /**
     * @return The Agent Specification to run the pipelines. Example: `windows-2019`, `windows-latest`, `macos-13` etc.
     * 
     */
    public String agentSpecification() {
        return this.agentSpecification;
    }
    /**
     * @return A `ci_trigger` block as defined below.
     * 
     */
    public List<GetBuildDefinitionCiTrigger> ciTriggers() {
        return this.ciTriggers;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The job authorization scope for builds queued against this definition.
     * 
     */
    public String jobAuthorizationScope() {
        return this.jobAuthorizationScope;
    }
    /**
     * @return A `jobs` blocks as documented below.
     * 
     */
    public List<GetBuildDefinitionJob> jobs() {
        return this.jobs;
    }
    /**
     * @return The name of the variable.
     * 
     */
    public String name() {
        return this.name;
    }
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return A `pull_request_trigger` block as defined below.
     * 
     */
    public List<GetBuildDefinitionPullRequestTrigger> pullRequestTriggers() {
        return this.pullRequestTriggers;
    }
    /**
     * @return The queue status of the build definition.
     * 
     */
    public String queueStatus() {
        return this.queueStatus;
    }
    /**
     * @return A `repository` block as defined below.
     * 
     */
    public List<GetBuildDefinitionRepository> repositories() {
        return this.repositories;
    }
    /**
     * @return The revision of the build definition.
     * 
     */
    public Integer revision() {
        return this.revision;
    }
    /**
     * @return A `schedules` block as defined below.
     * 
     */
    public List<GetBuildDefinitionSchedule> schedules() {
        return this.schedules;
    }
    /**
     * @return A list of variable group IDs.
     * 
     */
    public List<Integer> variableGroups() {
        return this.variableGroups;
    }
    /**
     * @return A `variable` block as defined below.
     * 
     */
    public List<GetBuildDefinitionVariable> variables() {
        return this.variables;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBuildDefinitionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String agentPoolName;
        private String agentSpecification;
        private List<GetBuildDefinitionCiTrigger> ciTriggers;
        private String id;
        private String jobAuthorizationScope;
        private List<GetBuildDefinitionJob> jobs;
        private String name;
        private @Nullable String path;
        private String projectId;
        private List<GetBuildDefinitionPullRequestTrigger> pullRequestTriggers;
        private String queueStatus;
        private List<GetBuildDefinitionRepository> repositories;
        private Integer revision;
        private List<GetBuildDefinitionSchedule> schedules;
        private List<Integer> variableGroups;
        private List<GetBuildDefinitionVariable> variables;
        public Builder() {}
        public Builder(GetBuildDefinitionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.agentPoolName = defaults.agentPoolName;
    	      this.agentSpecification = defaults.agentSpecification;
    	      this.ciTriggers = defaults.ciTriggers;
    	      this.id = defaults.id;
    	      this.jobAuthorizationScope = defaults.jobAuthorizationScope;
    	      this.jobs = defaults.jobs;
    	      this.name = defaults.name;
    	      this.path = defaults.path;
    	      this.projectId = defaults.projectId;
    	      this.pullRequestTriggers = defaults.pullRequestTriggers;
    	      this.queueStatus = defaults.queueStatus;
    	      this.repositories = defaults.repositories;
    	      this.revision = defaults.revision;
    	      this.schedules = defaults.schedules;
    	      this.variableGroups = defaults.variableGroups;
    	      this.variables = defaults.variables;
        }

        @CustomType.Setter
        public Builder agentPoolName(String agentPoolName) {
            if (agentPoolName == null) {
              throw new MissingRequiredPropertyException("GetBuildDefinitionResult", "agentPoolName");
            }
            this.agentPoolName = agentPoolName;
            return this;
        }
        @CustomType.Setter
        public Builder agentSpecification(String agentSpecification) {
            if (agentSpecification == null) {
              throw new MissingRequiredPropertyException("GetBuildDefinitionResult", "agentSpecification");
            }
            this.agentSpecification = agentSpecification;
            return this;
        }
        @CustomType.Setter
        public Builder ciTriggers(List<GetBuildDefinitionCiTrigger> ciTriggers) {
            if (ciTriggers == null) {
              throw new MissingRequiredPropertyException("GetBuildDefinitionResult", "ciTriggers");
            }
            this.ciTriggers = ciTriggers;
            return this;
        }
        public Builder ciTriggers(GetBuildDefinitionCiTrigger... ciTriggers) {
            return ciTriggers(List.of(ciTriggers));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetBuildDefinitionResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder jobAuthorizationScope(String jobAuthorizationScope) {
            if (jobAuthorizationScope == null) {
              throw new MissingRequiredPropertyException("GetBuildDefinitionResult", "jobAuthorizationScope");
            }
            this.jobAuthorizationScope = jobAuthorizationScope;
            return this;
        }
        @CustomType.Setter
        public Builder jobs(List<GetBuildDefinitionJob> jobs) {
            if (jobs == null) {
              throw new MissingRequiredPropertyException("GetBuildDefinitionResult", "jobs");
            }
            this.jobs = jobs;
            return this;
        }
        public Builder jobs(GetBuildDefinitionJob... jobs) {
            return jobs(List.of(jobs));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetBuildDefinitionResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder path(@Nullable String path) {

            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetBuildDefinitionResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder pullRequestTriggers(List<GetBuildDefinitionPullRequestTrigger> pullRequestTriggers) {
            if (pullRequestTriggers == null) {
              throw new MissingRequiredPropertyException("GetBuildDefinitionResult", "pullRequestTriggers");
            }
            this.pullRequestTriggers = pullRequestTriggers;
            return this;
        }
        public Builder pullRequestTriggers(GetBuildDefinitionPullRequestTrigger... pullRequestTriggers) {
            return pullRequestTriggers(List.of(pullRequestTriggers));
        }
        @CustomType.Setter
        public Builder queueStatus(String queueStatus) {
            if (queueStatus == null) {
              throw new MissingRequiredPropertyException("GetBuildDefinitionResult", "queueStatus");
            }
            this.queueStatus = queueStatus;
            return this;
        }
        @CustomType.Setter
        public Builder repositories(List<GetBuildDefinitionRepository> repositories) {
            if (repositories == null) {
              throw new MissingRequiredPropertyException("GetBuildDefinitionResult", "repositories");
            }
            this.repositories = repositories;
            return this;
        }
        public Builder repositories(GetBuildDefinitionRepository... repositories) {
            return repositories(List.of(repositories));
        }
        @CustomType.Setter
        public Builder revision(Integer revision) {
            if (revision == null) {
              throw new MissingRequiredPropertyException("GetBuildDefinitionResult", "revision");
            }
            this.revision = revision;
            return this;
        }
        @CustomType.Setter
        public Builder schedules(List<GetBuildDefinitionSchedule> schedules) {
            if (schedules == null) {
              throw new MissingRequiredPropertyException("GetBuildDefinitionResult", "schedules");
            }
            this.schedules = schedules;
            return this;
        }
        public Builder schedules(GetBuildDefinitionSchedule... schedules) {
            return schedules(List.of(schedules));
        }
        @CustomType.Setter
        public Builder variableGroups(List<Integer> variableGroups) {
            if (variableGroups == null) {
              throw new MissingRequiredPropertyException("GetBuildDefinitionResult", "variableGroups");
            }
            this.variableGroups = variableGroups;
            return this;
        }
        public Builder variableGroups(Integer... variableGroups) {
            return variableGroups(List.of(variableGroups));
        }
        @CustomType.Setter
        public Builder variables(List<GetBuildDefinitionVariable> variables) {
            if (variables == null) {
              throw new MissingRequiredPropertyException("GetBuildDefinitionResult", "variables");
            }
            this.variables = variables;
            return this;
        }
        public Builder variables(GetBuildDefinitionVariable... variables) {
            return variables(List.of(variables));
        }
        public GetBuildDefinitionResult build() {
            final var _resultValue = new GetBuildDefinitionResult();
            _resultValue.agentPoolName = agentPoolName;
            _resultValue.agentSpecification = agentSpecification;
            _resultValue.ciTriggers = ciTriggers;
            _resultValue.id = id;
            _resultValue.jobAuthorizationScope = jobAuthorizationScope;
            _resultValue.jobs = jobs;
            _resultValue.name = name;
            _resultValue.path = path;
            _resultValue.projectId = projectId;
            _resultValue.pullRequestTriggers = pullRequestTriggers;
            _resultValue.queueStatus = queueStatus;
            _resultValue.repositories = repositories;
            _resultValue.revision = revision;
            _resultValue.schedules = schedules;
            _resultValue.variableGroups = variableGroups;
            _resultValue.variables = variables;
            return _resultValue;
        }
    }
}
