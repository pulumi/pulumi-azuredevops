// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ElasticPoolState extends com.pulumi.resources.ResourceArgs {

    public static final ElasticPoolState Empty = new ElasticPoolState();

    /**
     * Set whether agents should be configured to run with interactive UI. Defaults to `false`.
     * 
     */
    @Import(name="agentInteractiveUi")
    private @Nullable Output<Boolean> agentInteractiveUi;

    /**
     * @return Set whether agents should be configured to run with interactive UI. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> agentInteractiveUi() {
        return Optional.ofNullable(this.agentInteractiveUi);
    }

    /**
     * Specifies whether a queue should be automatically provisioned for each project collection. Defaults to `false`.
     * 
     */
    @Import(name="autoProvision")
    private @Nullable Output<Boolean> autoProvision;

    /**
     * @return Specifies whether a queue should be automatically provisioned for each project collection. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> autoProvision() {
        return Optional.ofNullable(this.autoProvision);
    }

    /**
     * Specifies whether or not agents within the pool should be automatically updated. Defaults to `true`.
     * 
     */
    @Import(name="autoUpdate")
    private @Nullable Output<Boolean> autoUpdate;

    /**
     * @return Specifies whether or not agents within the pool should be automatically updated. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> autoUpdate() {
        return Optional.ofNullable(this.autoUpdate);
    }

    /**
     * The ID of the Azure resource.
     * 
     */
    @Import(name="azureResourceId")
    private @Nullable Output<String> azureResourceId;

    /**
     * @return The ID of the Azure resource.
     * 
     */
    public Optional<Output<String>> azureResourceId() {
        return Optional.ofNullable(this.azureResourceId);
    }

    /**
     * Number of agents to keep on standby.
     * 
     */
    @Import(name="desiredIdle")
    private @Nullable Output<Integer> desiredIdle;

    /**
     * @return Number of agents to keep on standby.
     * 
     */
    public Optional<Output<Integer>> desiredIdle() {
        return Optional.ofNullable(this.desiredIdle);
    }

    /**
     * Maximum number of virtual machines in the scale set.
     * 
     */
    @Import(name="maxCapacity")
    private @Nullable Output<Integer> maxCapacity;

    /**
     * @return Maximum number of virtual machines in the scale set.
     * 
     */
    public Optional<Output<Integer>> maxCapacity() {
        return Optional.ofNullable(this.maxCapacity);
    }

    /**
     * The name of the Elastic pool.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Elastic pool.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project where a new Elastic Pool will be created.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The ID of the project where a new Elastic Pool will be created.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Tear down virtual machines after every use. Defaults to `false`.
     * 
     */
    @Import(name="recycleAfterEachUse")
    private @Nullable Output<Boolean> recycleAfterEachUse;

    /**
     * @return Tear down virtual machines after every use. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> recycleAfterEachUse() {
        return Optional.ofNullable(this.recycleAfterEachUse);
    }

    /**
     * The ID of Service Endpoint used to connect to Azure.
     * 
     */
    @Import(name="serviceEndpointId")
    private @Nullable Output<String> serviceEndpointId;

    /**
     * @return The ID of Service Endpoint used to connect to Azure.
     * 
     */
    public Optional<Output<String>> serviceEndpointId() {
        return Optional.ofNullable(this.serviceEndpointId);
    }

    /**
     * The Project ID of Service Endpoint belongs to.
     * 
     */
    @Import(name="serviceEndpointScope")
    private @Nullable Output<String> serviceEndpointScope;

    /**
     * @return The Project ID of Service Endpoint belongs to.
     * 
     */
    public Optional<Output<String>> serviceEndpointScope() {
        return Optional.ofNullable(this.serviceEndpointScope);
    }

    /**
     * Delay in minutes before deleting excess idle agents. Defaults to `30`.
     * 
     */
    @Import(name="timeToLiveMinutes")
    private @Nullable Output<Integer> timeToLiveMinutes;

    /**
     * @return Delay in minutes before deleting excess idle agents. Defaults to `30`.
     * 
     */
    public Optional<Output<Integer>> timeToLiveMinutes() {
        return Optional.ofNullable(this.timeToLiveMinutes);
    }

    private ElasticPoolState() {}

    private ElasticPoolState(ElasticPoolState $) {
        this.agentInteractiveUi = $.agentInteractiveUi;
        this.autoProvision = $.autoProvision;
        this.autoUpdate = $.autoUpdate;
        this.azureResourceId = $.azureResourceId;
        this.desiredIdle = $.desiredIdle;
        this.maxCapacity = $.maxCapacity;
        this.name = $.name;
        this.projectId = $.projectId;
        this.recycleAfterEachUse = $.recycleAfterEachUse;
        this.serviceEndpointId = $.serviceEndpointId;
        this.serviceEndpointScope = $.serviceEndpointScope;
        this.timeToLiveMinutes = $.timeToLiveMinutes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ElasticPoolState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ElasticPoolState $;

        public Builder() {
            $ = new ElasticPoolState();
        }

        public Builder(ElasticPoolState defaults) {
            $ = new ElasticPoolState(Objects.requireNonNull(defaults));
        }

        /**
         * @param agentInteractiveUi Set whether agents should be configured to run with interactive UI. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder agentInteractiveUi(@Nullable Output<Boolean> agentInteractiveUi) {
            $.agentInteractiveUi = agentInteractiveUi;
            return this;
        }

        /**
         * @param agentInteractiveUi Set whether agents should be configured to run with interactive UI. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder agentInteractiveUi(Boolean agentInteractiveUi) {
            return agentInteractiveUi(Output.of(agentInteractiveUi));
        }

        /**
         * @param autoProvision Specifies whether a queue should be automatically provisioned for each project collection. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder autoProvision(@Nullable Output<Boolean> autoProvision) {
            $.autoProvision = autoProvision;
            return this;
        }

        /**
         * @param autoProvision Specifies whether a queue should be automatically provisioned for each project collection. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder autoProvision(Boolean autoProvision) {
            return autoProvision(Output.of(autoProvision));
        }

        /**
         * @param autoUpdate Specifies whether or not agents within the pool should be automatically updated. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder autoUpdate(@Nullable Output<Boolean> autoUpdate) {
            $.autoUpdate = autoUpdate;
            return this;
        }

        /**
         * @param autoUpdate Specifies whether or not agents within the pool should be automatically updated. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder autoUpdate(Boolean autoUpdate) {
            return autoUpdate(Output.of(autoUpdate));
        }

        /**
         * @param azureResourceId The ID of the Azure resource.
         * 
         * @return builder
         * 
         */
        public Builder azureResourceId(@Nullable Output<String> azureResourceId) {
            $.azureResourceId = azureResourceId;
            return this;
        }

        /**
         * @param azureResourceId The ID of the Azure resource.
         * 
         * @return builder
         * 
         */
        public Builder azureResourceId(String azureResourceId) {
            return azureResourceId(Output.of(azureResourceId));
        }

        /**
         * @param desiredIdle Number of agents to keep on standby.
         * 
         * @return builder
         * 
         */
        public Builder desiredIdle(@Nullable Output<Integer> desiredIdle) {
            $.desiredIdle = desiredIdle;
            return this;
        }

        /**
         * @param desiredIdle Number of agents to keep on standby.
         * 
         * @return builder
         * 
         */
        public Builder desiredIdle(Integer desiredIdle) {
            return desiredIdle(Output.of(desiredIdle));
        }

        /**
         * @param maxCapacity Maximum number of virtual machines in the scale set.
         * 
         * @return builder
         * 
         */
        public Builder maxCapacity(@Nullable Output<Integer> maxCapacity) {
            $.maxCapacity = maxCapacity;
            return this;
        }

        /**
         * @param maxCapacity Maximum number of virtual machines in the scale set.
         * 
         * @return builder
         * 
         */
        public Builder maxCapacity(Integer maxCapacity) {
            return maxCapacity(Output.of(maxCapacity));
        }

        /**
         * @param name The name of the Elastic pool.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Elastic pool.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectId The ID of the project where a new Elastic Pool will be created.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The ID of the project where a new Elastic Pool will be created.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param recycleAfterEachUse Tear down virtual machines after every use. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder recycleAfterEachUse(@Nullable Output<Boolean> recycleAfterEachUse) {
            $.recycleAfterEachUse = recycleAfterEachUse;
            return this;
        }

        /**
         * @param recycleAfterEachUse Tear down virtual machines after every use. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder recycleAfterEachUse(Boolean recycleAfterEachUse) {
            return recycleAfterEachUse(Output.of(recycleAfterEachUse));
        }

        /**
         * @param serviceEndpointId The ID of Service Endpoint used to connect to Azure.
         * 
         * @return builder
         * 
         */
        public Builder serviceEndpointId(@Nullable Output<String> serviceEndpointId) {
            $.serviceEndpointId = serviceEndpointId;
            return this;
        }

        /**
         * @param serviceEndpointId The ID of Service Endpoint used to connect to Azure.
         * 
         * @return builder
         * 
         */
        public Builder serviceEndpointId(String serviceEndpointId) {
            return serviceEndpointId(Output.of(serviceEndpointId));
        }

        /**
         * @param serviceEndpointScope The Project ID of Service Endpoint belongs to.
         * 
         * @return builder
         * 
         */
        public Builder serviceEndpointScope(@Nullable Output<String> serviceEndpointScope) {
            $.serviceEndpointScope = serviceEndpointScope;
            return this;
        }

        /**
         * @param serviceEndpointScope The Project ID of Service Endpoint belongs to.
         * 
         * @return builder
         * 
         */
        public Builder serviceEndpointScope(String serviceEndpointScope) {
            return serviceEndpointScope(Output.of(serviceEndpointScope));
        }

        /**
         * @param timeToLiveMinutes Delay in minutes before deleting excess idle agents. Defaults to `30`.
         * 
         * @return builder
         * 
         */
        public Builder timeToLiveMinutes(@Nullable Output<Integer> timeToLiveMinutes) {
            $.timeToLiveMinutes = timeToLiveMinutes;
            return this;
        }

        /**
         * @param timeToLiveMinutes Delay in minutes before deleting excess idle agents. Defaults to `30`.
         * 
         * @return builder
         * 
         */
        public Builder timeToLiveMinutes(Integer timeToLiveMinutes) {
            return timeToLiveMinutes(Output.of(timeToLiveMinutes));
        }

        public ElasticPoolState build() {
            return $;
        }
    }

}
