// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExtensionState extends com.pulumi.resources.ResourceArgs {

    public static final ExtensionState Empty = new ExtensionState();

    /**
     * Whether to disable the extension.
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return Whether to disable the extension.
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * The publisher ID of the extension.
     * 
     */
    @Import(name="extensionId")
    private @Nullable Output<String> extensionId;

    /**
     * @return The publisher ID of the extension.
     * 
     */
    public Optional<Output<String>> extensionId() {
        return Optional.ofNullable(this.extensionId);
    }

    /**
     * The name of the extension.
     * 
     */
    @Import(name="extensionName")
    private @Nullable Output<String> extensionName;

    /**
     * @return The name of the extension.
     * 
     */
    public Optional<Output<String>> extensionName() {
        return Optional.ofNullable(this.extensionName);
    }

    /**
     * The extension ID of the extension.
     * 
     */
    @Import(name="publisherId")
    private @Nullable Output<String> publisherId;

    /**
     * @return The extension ID of the extension.
     * 
     */
    public Optional<Output<String>> publisherId() {
        return Optional.ofNullable(this.publisherId);
    }

    /**
     * The name of the publisher.
     * 
     */
    @Import(name="publisherName")
    private @Nullable Output<String> publisherName;

    /**
     * @return The name of the publisher.
     * 
     */
    public Optional<Output<String>> publisherName() {
        return Optional.ofNullable(this.publisherName);
    }

    /**
     * List of all oauth scopes required by this extension.
     * 
     */
    @Import(name="scopes")
    private @Nullable Output<List<String>> scopes;

    /**
     * @return List of all oauth scopes required by this extension.
     * 
     */
    public Optional<Output<List<String>>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * The version of the extension.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return The version of the extension.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private ExtensionState() {}

    private ExtensionState(ExtensionState $) {
        this.disabled = $.disabled;
        this.extensionId = $.extensionId;
        this.extensionName = $.extensionName;
        this.publisherId = $.publisherId;
        this.publisherName = $.publisherName;
        this.scopes = $.scopes;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExtensionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExtensionState $;

        public Builder() {
            $ = new ExtensionState();
        }

        public Builder(ExtensionState defaults) {
            $ = new ExtensionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param disabled Whether to disable the extension.
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled Whether to disable the extension.
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param extensionId The publisher ID of the extension.
         * 
         * @return builder
         * 
         */
        public Builder extensionId(@Nullable Output<String> extensionId) {
            $.extensionId = extensionId;
            return this;
        }

        /**
         * @param extensionId The publisher ID of the extension.
         * 
         * @return builder
         * 
         */
        public Builder extensionId(String extensionId) {
            return extensionId(Output.of(extensionId));
        }

        /**
         * @param extensionName The name of the extension.
         * 
         * @return builder
         * 
         */
        public Builder extensionName(@Nullable Output<String> extensionName) {
            $.extensionName = extensionName;
            return this;
        }

        /**
         * @param extensionName The name of the extension.
         * 
         * @return builder
         * 
         */
        public Builder extensionName(String extensionName) {
            return extensionName(Output.of(extensionName));
        }

        /**
         * @param publisherId The extension ID of the extension.
         * 
         * @return builder
         * 
         */
        public Builder publisherId(@Nullable Output<String> publisherId) {
            $.publisherId = publisherId;
            return this;
        }

        /**
         * @param publisherId The extension ID of the extension.
         * 
         * @return builder
         * 
         */
        public Builder publisherId(String publisherId) {
            return publisherId(Output.of(publisherId));
        }

        /**
         * @param publisherName The name of the publisher.
         * 
         * @return builder
         * 
         */
        public Builder publisherName(@Nullable Output<String> publisherName) {
            $.publisherName = publisherName;
            return this;
        }

        /**
         * @param publisherName The name of the publisher.
         * 
         * @return builder
         * 
         */
        public Builder publisherName(String publisherName) {
            return publisherName(Output.of(publisherName));
        }

        /**
         * @param scopes List of all oauth scopes required by this extension.
         * 
         * @return builder
         * 
         */
        public Builder scopes(@Nullable Output<List<String>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes List of all oauth scopes required by this extension.
         * 
         * @return builder
         * 
         */
        public Builder scopes(List<String> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param scopes List of all oauth scopes required by this extension.
         * 
         * @return builder
         * 
         */
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        /**
         * @param version The version of the extension.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version of the extension.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public ExtensionState build() {
            return $;
        }
    }

}
