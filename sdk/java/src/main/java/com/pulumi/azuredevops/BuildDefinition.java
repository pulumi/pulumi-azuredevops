// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops;

import com.pulumi.azuredevops.BuildDefinitionArgs;
import com.pulumi.azuredevops.Utilities;
import com.pulumi.azuredevops.inputs.BuildDefinitionState;
import com.pulumi.azuredevops.outputs.BuildDefinitionBuildCompletionTrigger;
import com.pulumi.azuredevops.outputs.BuildDefinitionCiTrigger;
import com.pulumi.azuredevops.outputs.BuildDefinitionFeature;
import com.pulumi.azuredevops.outputs.BuildDefinitionJob;
import com.pulumi.azuredevops.outputs.BuildDefinitionPullRequestTrigger;
import com.pulumi.azuredevops.outputs.BuildDefinitionRepository;
import com.pulumi.azuredevops.outputs.BuildDefinitionSchedule;
import com.pulumi.azuredevops.outputs.BuildDefinitionVariable;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a Build Definition within Azure DevOps.
 * 
 * ## Example Usage
 * 
 * ### Azure DevOps
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azuredevops.Project;
 * import com.pulumi.azuredevops.ProjectArgs;
 * import com.pulumi.azuredevops.Git;
 * import com.pulumi.azuredevops.GitArgs;
 * import com.pulumi.azuredevops.inputs.GitInitializationArgs;
 * import com.pulumi.azuredevops.VariableGroup;
 * import com.pulumi.azuredevops.VariableGroupArgs;
 * import com.pulumi.azuredevops.inputs.VariableGroupVariableArgs;
 * import com.pulumi.azuredevops.BuildDefinition;
 * import com.pulumi.azuredevops.BuildDefinitionArgs;
 * import com.pulumi.azuredevops.inputs.BuildDefinitionCiTriggerArgs;
 * import com.pulumi.azuredevops.inputs.BuildDefinitionScheduleArgs;
 * import com.pulumi.azuredevops.inputs.BuildDefinitionRepositoryArgs;
 * import com.pulumi.azuredevops.inputs.BuildDefinitionVariableArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Project("example", ProjectArgs.builder()
 *             .name("Example Project")
 *             .visibility("private")
 *             .versionControl("Git")
 *             .workItemTemplate("Agile")
 *             .build());
 * 
 *         var exampleGit = new Git("exampleGit", GitArgs.builder()
 *             .projectId(example.id())
 *             .name("Example Repository")
 *             .initialization(GitInitializationArgs.builder()
 *                 .initType("Clean")
 *                 .build())
 *             .build());
 * 
 *         var exampleVariableGroup = new VariableGroup("exampleVariableGroup", VariableGroupArgs.builder()
 *             .projectId(example.id())
 *             .name("Example Pipeline Variables")
 *             .description("Managed by Pulumi")
 *             .allowAccess(true)
 *             .variables(VariableGroupVariableArgs.builder()
 *                 .name("FOO")
 *                 .value("BAR")
 *                 .build())
 *             .build());
 * 
 *         var exampleBuildDefinition = new BuildDefinition("exampleBuildDefinition", BuildDefinitionArgs.builder()
 *             .projectId(example.id())
 *             .name("Example Build Definition")
 *             .path("\\ExampleFolder")
 *             .ciTrigger(BuildDefinitionCiTriggerArgs.builder()
 *                 .useYaml(false)
 *                 .build())
 *             .schedules(BuildDefinitionScheduleArgs.builder()
 *                 .branchFilters(BuildDefinitionScheduleBranchFilterArgs.builder()
 *                     .includes("master")
 *                     .excludes(                    
 *                         "test",
 *                         "regression")
 *                     .build())
 *                 .daysToBuilds(                
 *                     "Wed",
 *                     "Sun")
 *                 .scheduleOnlyWithChanges(true)
 *                 .startHours(10)
 *                 .startMinutes(59)
 *                 .timeZone("(UTC) Coordinated Universal Time")
 *                 .build())
 *             .repository(BuildDefinitionRepositoryArgs.builder()
 *                 .repoType("TfsGit")
 *                 .repoId(exampleGit.id())
 *                 .branchName(exampleGit.defaultBranch())
 *                 .ymlPath("azure-pipelines.yml")
 *                 .build())
 *             .variableGroups(exampleVariableGroup.id())
 *             .variables(            
 *                 BuildDefinitionVariableArgs.builder()
 *                     .name("PipelineVariable")
 *                     .value("Go Microsoft!")
 *                     .build(),
 *                 BuildDefinitionVariableArgs.builder()
 *                     .name("PipelineSecret")
 *                     .secretValue("ZGV2cw")
 *                     .isSecret(true)
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### GitHub Enterprise
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azuredevops.Project;
 * import com.pulumi.azuredevops.ProjectArgs;
 * import com.pulumi.azuredevops.ServiceEndpointGitHubEnterprise;
 * import com.pulumi.azuredevops.ServiceEndpointGitHubEnterpriseArgs;
 * import com.pulumi.azuredevops.inputs.ServiceEndpointGitHubEnterpriseAuthPersonalArgs;
 * import com.pulumi.azuredevops.BuildDefinition;
 * import com.pulumi.azuredevops.BuildDefinitionArgs;
 * import com.pulumi.azuredevops.inputs.BuildDefinitionCiTriggerArgs;
 * import com.pulumi.azuredevops.inputs.BuildDefinitionRepositoryArgs;
 * import com.pulumi.azuredevops.inputs.BuildDefinitionScheduleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Project("example", ProjectArgs.builder()
 *             .name("Example Project")
 *             .visibility("private")
 *             .versionControl("Git")
 *             .workItemTemplate("Agile")
 *             .build());
 * 
 *         var exampleServiceEndpointGitHubEnterprise = new ServiceEndpointGitHubEnterprise("exampleServiceEndpointGitHubEnterprise", ServiceEndpointGitHubEnterpriseArgs.builder()
 *             .projectId(example.id())
 *             .serviceEndpointName("Example GitHub Enterprise")
 *             .url("https://github.contoso.com")
 *             .description("Managed by Pulumi")
 *             .authPersonal(ServiceEndpointGitHubEnterpriseAuthPersonalArgs.builder()
 *                 .personalAccessToken("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")
 *                 .build())
 *             .build());
 * 
 *         var exampleBuildDefinition = new BuildDefinition("exampleBuildDefinition", BuildDefinitionArgs.builder()
 *             .projectId(example.id())
 *             .name("Example Build Definition")
 *             .path("\\ExampleFolder")
 *             .ciTrigger(BuildDefinitionCiTriggerArgs.builder()
 *                 .useYaml(false)
 *                 .build())
 *             .repository(BuildDefinitionRepositoryArgs.builder()
 *                 .repoType("GitHubEnterprise")
 *                 .repoId("<GitHub Org>/<Repo Name>")
 *                 .githubEnterpriseUrl("https://github.company.com")
 *                 .branchName("master")
 *                 .ymlPath("azure-pipelines.yml")
 *                 .serviceConnectionId(exampleServiceEndpointGitHubEnterprise.id())
 *                 .build())
 *             .schedules(BuildDefinitionScheduleArgs.builder()
 *                 .branchFilters(BuildDefinitionScheduleBranchFilterArgs.builder()
 *                     .includes("main")
 *                     .excludes(                    
 *                         "test",
 *                         "regression")
 *                     .build())
 *                 .daysToBuilds(                
 *                     "Wed",
 *                     "Sun")
 *                 .scheduleOnlyWithChanges(true)
 *                 .startHours(10)
 *                 .startMinutes(59)
 *                 .timeZone("(UTC) Coordinated Universal Time")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### Build Completion Trigger
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azuredevops.BuildDefinition;
 * import com.pulumi.azuredevops.BuildDefinitionArgs;
 * import com.pulumi.azuredevops.inputs.BuildDefinitionCiTriggerArgs;
 * import com.pulumi.azuredevops.inputs.BuildDefinitionRepositoryArgs;
 * import com.pulumi.azuredevops.inputs.BuildDefinitionBuildCompletionTriggerArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new BuildDefinition("example", BuildDefinitionArgs.builder()
 *             .projectId(exampleAzuredevopsProject.id())
 *             .name("Example Build Definition")
 *             .path("\\ExampleFolder")
 *             .ciTrigger(BuildDefinitionCiTriggerArgs.builder()
 *                 .useYaml(false)
 *                 .build())
 *             .repository(BuildDefinitionRepositoryArgs.builder()
 *                 .repoType("GitHubEnterprise")
 *                 .repoId("<GitHub Org>/<Repo Name>")
 *                 .githubEnterpriseUrl("https://github.company.com")
 *                 .branchName("main")
 *                 .ymlPath("azure-pipelines.yml")
 *                 .serviceConnectionId(exampleAzuredevopsServiceendpointGithubEnterprise.id())
 *                 .build())
 *             .buildCompletionTriggers(BuildDefinitionBuildCompletionTriggerArgs.builder()
 *                 .buildDefinitionId(10)
 *                 .branchFilters(BuildDefinitionBuildCompletionTriggerBranchFilterArgs.builder()
 *                     .includes("main")
 *                     .excludes("test")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### Pull Request Trigger
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azuredevops.AzuredevopsFunctions;
 * import com.pulumi.azuredevops.inputs.GetServiceEndpointGithubArgs;
 * import com.pulumi.azuredevops.BuildDefinition;
 * import com.pulumi.azuredevops.BuildDefinitionArgs;
 * import com.pulumi.azuredevops.inputs.BuildDefinitionCiTriggerArgs;
 * import com.pulumi.azuredevops.inputs.BuildDefinitionRepositoryArgs;
 * import com.pulumi.azuredevops.inputs.BuildDefinitionPullRequestTriggerArgs;
 * import com.pulumi.azuredevops.inputs.BuildDefinitionPullRequestTriggerOverrideArgs;
 * import com.pulumi.azuredevops.inputs.BuildDefinitionPullRequestTriggerForksArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var example = AzuredevopsFunctions.getServiceEndpointGithub(GetServiceEndpointGithubArgs.builder()
 *             .projectId(exampleAzuredevopsProject.id())
 *             .serviceEndpointId("00000000-0000-0000-0000-000000000000")
 *             .build());
 * 
 *         var exampleBuildDefinition = new BuildDefinition("exampleBuildDefinition", BuildDefinitionArgs.builder()
 *             .projectId(exampleAzuredevopsProject2.id())
 *             .name("Example Build Definition")
 *             .path("\\ExampleFolder")
 *             .ciTrigger(BuildDefinitionCiTriggerArgs.builder()
 *                 .useYaml(false)
 *                 .build())
 *             .repository(BuildDefinitionRepositoryArgs.builder()
 *                 .repoType("GitHub")
 *                 .repoId("<GitHub Org>/<Repo Name>")
 *                 .branchName("main")
 *                 .ymlPath("azure-pipelines.yml")
 *                 .serviceConnectionId(example.id())
 *                 .build())
 *             .pullRequestTrigger(BuildDefinitionPullRequestTriggerArgs.builder()
 *                 .override(BuildDefinitionPullRequestTriggerOverrideArgs.builder()
 *                     .branchFilters(BuildDefinitionPullRequestTriggerOverrideBranchFilterArgs.builder()
 *                         .includes("main")
 *                         .build())
 *                     .build())
 *                 .forks(BuildDefinitionPullRequestTriggerForksArgs.builder()
 *                     .enabled(false)
 *                     .shareSecrets(false)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### Using Other Git and Agent Jobs
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azuredevops.ServiceEndpointGenericGit;
 * import com.pulumi.azuredevops.ServiceEndpointGenericGitArgs;
 * import com.pulumi.azuredevops.BuildDefinition;
 * import com.pulumi.azuredevops.BuildDefinitionArgs;
 * import com.pulumi.azuredevops.inputs.BuildDefinitionCiTriggerArgs;
 * import com.pulumi.azuredevops.inputs.BuildDefinitionRepositoryArgs;
 * import com.pulumi.azuredevops.inputs.BuildDefinitionJobArgs;
 * import com.pulumi.azuredevops.inputs.BuildDefinitionJobTargetArgs;
 * import com.pulumi.azuredevops.inputs.BuildDefinitionJobTargetExecutionOptionsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new ServiceEndpointGenericGit("example", ServiceEndpointGenericGitArgs.builder()
 *             .projectId(exampleAzuredevopsProject.id())
 *             .repositoryUrl("https://gitlab.com/example/example.git")
 *             .password("token")
 *             .serviceEndpointName("Example Generic Git")
 *             .build());
 * 
 *         var exampleBuildDefinition = new BuildDefinition("exampleBuildDefinition", BuildDefinitionArgs.builder()
 *             .projectId(exampleAzuredevopsProject2.id())
 *             .name("Example Build Definition")
 *             .path("\\ExampleFolder")
 *             .ciTrigger(BuildDefinitionCiTriggerArgs.builder()
 *                 .useYaml(false)
 *                 .build())
 *             .repository(BuildDefinitionRepositoryArgs.builder()
 *                 .repoType("Git")
 *                 .repoId(example.repositoryUrl())
 *                 .branchName("refs/heads/main")
 *                 .url(example.repositoryUrl())
 *                 .serviceConnectionId(example.id())
 *                 .build())
 *             .jobs(            
 *                 BuildDefinitionJobArgs.builder()
 *                     .name("Agent Job1")
 *                     .refName("agent_job1")
 *                     .condition("succeededOrFailed()")
 *                     .target(BuildDefinitionJobTargetArgs.builder()
 *                         .type("AgentJob")
 *                         .executionOptions(BuildDefinitionJobTargetExecutionOptionsArgs.builder()
 *                             .type("None")
 *                             .build())
 *                         .build())
 *                     .build(),
 *                 BuildDefinitionJobArgs.builder()
 *                     .name("Agent Job2")
 *                     .refName("agent_job2")
 *                     .condition("succeededOrFailed()")
 *                     .dependencies(BuildDefinitionJobDependencyArgs.builder()
 *                         .scope("agent_job1")
 *                         .build())
 *                     .target(BuildDefinitionJobTargetArgs.builder()
 *                         .type("AgentJob")
 *                         .demands("git")
 *                         .executionOptions(BuildDefinitionJobTargetExecutionOptionsArgs.builder()
 *                             .type("Multi-Configuration")
 *                             .continueOnError(true)
 *                             .multipliers("multipliers")
 *                             .maxConcurrency(2)
 *                             .build())
 *                         .build())
 *                     .build(),
 *                 BuildDefinitionJobArgs.builder()
 *                     .name("Agentless Job1")
 *                     .refName("agentless_job1")
 *                     .condition("succeeded()")
 *                     .target(BuildDefinitionJobTargetArgs.builder()
 *                         .type("AgentlessJob")
 *                         .executionOptions(BuildDefinitionJobTargetExecutionOptionsArgs.builder()
 *                             .type("None")
 *                             .build())
 *                         .build())
 *                     .build(),
 *                 BuildDefinitionJobArgs.builder()
 *                     .name("Agentless Job2")
 *                     .refName("agentless_job2")
 *                     .condition("succeeded()")
 *                     .jobAuthorizationScope("project")
 *                     .dependencies(                    
 *                         BuildDefinitionJobDependencyArgs.builder()
 *                             .scope("agent_job2")
 *                             .build(),
 *                         BuildDefinitionJobDependencyArgs.builder()
 *                             .scope("agentless_job1")
 *                             .build())
 *                     .target(BuildDefinitionJobTargetArgs.builder()
 *                         .type("AgentlessJob")
 *                         .executionOptions(BuildDefinitionJobTargetExecutionOptionsArgs.builder()
 *                             .type("Multi-Configuration")
 *                             .continueOnError(true)
 *                             .multipliers("multipliers")
 *                             .build())
 *                         .build())
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Remarks
 * 
 * The path attribute can not end in `\` unless the path is the root value of `\`.
 * 
 * Valid path values (yaml encoded) include:
 * - `\\`
 * - `\\ExampleFolder`
 * - `\\Nested\\Example Folder`
 * 
 * The value of `\\ExampleFolder\\` would be invalid.
 * 
 * ## Relevant Links
 * 
 * - [Azure DevOps Service REST API 7.0 - Build Definitions](https://docs.microsoft.com/en-us/rest/api/azure/devops/build/definitions?view=azure-devops-rest-7.0)
 * 
 * ## Import
 * 
 * Azure DevOps Build Definitions can be imported using the project name/definitions Id or by the project Guid/definitions Id, e.g.
 * 
 * ```sh
 * $ pulumi import azuredevops:index/buildDefinition:BuildDefinition example &#34;Example Project&#34;/10
 * ```
 * 
 * or
 * 
 * ```sh
 * $ pulumi import azuredevops:index/buildDefinition:BuildDefinition example 00000000-0000-0000-0000-000000000000/0
 * ```
 * 
 */
@ResourceType(type="azuredevops:index/buildDefinition:BuildDefinition")
public class BuildDefinition extends com.pulumi.resources.CustomResource {
    /**
     * The agent pool that should execute the build. Defaults to `Azure Pipelines`.
     * 
     */
    @Export(name="agentPoolName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> agentPoolName;

    /**
     * @return The agent pool that should execute the build. Defaults to `Azure Pipelines`.
     * 
     */
    public Output<Optional<String>> agentPoolName() {
        return Codegen.optional(this.agentPoolName);
    }
    /**
     * The Agent Specification to run the pipelines. Required when `repo_type` is `Git`. Example: `windows-2019`, `windows-latest`, `macos-13` etc.
     * 
     */
    @Export(name="agentSpecification", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> agentSpecification;

    /**
     * @return The Agent Specification to run the pipelines. Required when `repo_type` is `Git`. Example: `windows-2019`, `windows-latest`, `macos-13` etc.
     * 
     */
    public Output<Optional<String>> agentSpecification() {
        return Codegen.optional(this.agentSpecification);
    }
    /**
     * A `build_completion_trigger` block as documented below.
     * 
     */
    @Export(name="buildCompletionTriggers", refs={List.class,BuildDefinitionBuildCompletionTrigger.class}, tree="[0,1]")
    private Output</* @Nullable */ List<BuildDefinitionBuildCompletionTrigger>> buildCompletionTriggers;

    /**
     * @return A `build_completion_trigger` block as documented below.
     * 
     */
    public Output<Optional<List<BuildDefinitionBuildCompletionTrigger>>> buildCompletionTriggers() {
        return Codegen.optional(this.buildCompletionTriggers);
    }
    /**
     * A `ci_trigger` block as documented below.
     * 
     */
    @Export(name="ciTrigger", refs={BuildDefinitionCiTrigger.class}, tree="[0]")
    private Output</* @Nullable */ BuildDefinitionCiTrigger> ciTrigger;

    /**
     * @return A `ci_trigger` block as documented below.
     * 
     */
    public Output<Optional<BuildDefinitionCiTrigger>> ciTrigger() {
        return Codegen.optional(this.ciTrigger);
    }
    /**
     * A `features` blocks as documented below.
     * 
     */
    @Export(name="features", refs={List.class,BuildDefinitionFeature.class}, tree="[0,1]")
    private Output</* @Nullable */ List<BuildDefinitionFeature>> features;

    /**
     * @return A `features` blocks as documented below.
     * 
     */
    public Output<Optional<List<BuildDefinitionFeature>>> features() {
        return Codegen.optional(this.features);
    }
    /**
     * The job authorization scope for builds queued against this definition. Possible values are: `project`, `projectCollection`. Defaults to `projectCollection`.
     * 
     */
    @Export(name="jobAuthorizationScope", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> jobAuthorizationScope;

    /**
     * @return The job authorization scope for builds queued against this definition. Possible values are: `project`, `projectCollection`. Defaults to `projectCollection`.
     * 
     */
    public Output<Optional<String>> jobAuthorizationScope() {
        return Codegen.optional(this.jobAuthorizationScope);
    }
    /**
     * A `jobs` blocks as documented below.
     * 
     * &gt; **NOTE:** The `jobs` are classic pipelines, you need to enable the classic pipeline feature for your organization to use this feature.
     * 
     */
    @Export(name="jobs", refs={List.class,BuildDefinitionJob.class}, tree="[0,1]")
    private Output</* @Nullable */ List<BuildDefinitionJob>> jobs;

    /**
     * @return A `jobs` blocks as documented below.
     * 
     * &gt; **NOTE:** The `jobs` are classic pipelines, you need to enable the classic pipeline feature for your organization to use this feature.
     * 
     */
    public Output<Optional<List<BuildDefinitionJob>>> jobs() {
        return Codegen.optional(this.jobs);
    }
    /**
     * The name of the build definition.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the build definition.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The folder path of the build definition.
     * 
     */
    @Export(name="path", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> path;

    /**
     * @return The folder path of the build definition.
     * 
     */
    public Output<Optional<String>> path() {
        return Codegen.optional(this.path);
    }
    /**
     * The project ID or project name.
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output<String> projectId;

    /**
     * @return The project ID or project name.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }
    /**
     * A `pull_request_trigger` block as documented below.
     * 
     */
    @Export(name="pullRequestTrigger", refs={BuildDefinitionPullRequestTrigger.class}, tree="[0]")
    private Output</* @Nullable */ BuildDefinitionPullRequestTrigger> pullRequestTrigger;

    /**
     * @return A `pull_request_trigger` block as documented below.
     * 
     */
    public Output<Optional<BuildDefinitionPullRequestTrigger>> pullRequestTrigger() {
        return Codegen.optional(this.pullRequestTrigger);
    }
    /**
     * The queue status of the build definition. Possible values are: `enabled` or `paused` or `disabled`. Defaults to `enabled`.
     * 
     */
    @Export(name="queueStatus", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> queueStatus;

    /**
     * @return The queue status of the build definition. Possible values are: `enabled` or `paused` or `disabled`. Defaults to `enabled`.
     * 
     */
    public Output<Optional<String>> queueStatus() {
        return Codegen.optional(this.queueStatus);
    }
    /**
     * A `repository` block as documented below.
     * 
     */
    @Export(name="repository", refs={BuildDefinitionRepository.class}, tree="[0]")
    private Output<BuildDefinitionRepository> repository;

    /**
     * @return A `repository` block as documented below.
     * 
     */
    public Output<BuildDefinitionRepository> repository() {
        return this.repository;
    }
    /**
     * The revision of the build definition
     * 
     */
    @Export(name="revision", refs={Integer.class}, tree="[0]")
    private Output<Integer> revision;

    /**
     * @return The revision of the build definition
     * 
     */
    public Output<Integer> revision() {
        return this.revision;
    }
    @Export(name="schedules", refs={List.class,BuildDefinitionSchedule.class}, tree="[0,1]")
    private Output</* @Nullable */ List<BuildDefinitionSchedule>> schedules;

    public Output<Optional<List<BuildDefinitionSchedule>>> schedules() {
        return Codegen.optional(this.schedules);
    }
    /**
     * A list of variable group IDs (integers) to link to the build definition.
     * 
     */
    @Export(name="variableGroups", refs={List.class,Integer.class}, tree="[0,1]")
    private Output</* @Nullable */ List<Integer>> variableGroups;

    /**
     * @return A list of variable group IDs (integers) to link to the build definition.
     * 
     */
    public Output<Optional<List<Integer>>> variableGroups() {
        return Codegen.optional(this.variableGroups);
    }
    /**
     * A list of `variable` blocks, as documented below.
     * 
     */
    @Export(name="variables", refs={List.class,BuildDefinitionVariable.class}, tree="[0,1]")
    private Output</* @Nullable */ List<BuildDefinitionVariable>> variables;

    /**
     * @return A list of `variable` blocks, as documented below.
     * 
     */
    public Output<Optional<List<BuildDefinitionVariable>>> variables() {
        return Codegen.optional(this.variables);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public BuildDefinition(java.lang.String name) {
        this(name, BuildDefinitionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public BuildDefinition(java.lang.String name, BuildDefinitionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public BuildDefinition(java.lang.String name, BuildDefinitionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azuredevops:index/buildDefinition:BuildDefinition", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private BuildDefinition(java.lang.String name, Output<java.lang.String> id, @Nullable BuildDefinitionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azuredevops:index/buildDefinition:BuildDefinition", name, state, makeResourceOptions(options, id), false);
    }

    private static BuildDefinitionArgs makeArgs(BuildDefinitionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? BuildDefinitionArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static BuildDefinition get(java.lang.String name, Output<java.lang.String> id, @Nullable BuildDefinitionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new BuildDefinition(name, id, state, options);
    }
}
