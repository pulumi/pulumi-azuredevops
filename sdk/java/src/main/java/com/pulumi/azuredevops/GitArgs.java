// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops;

import com.pulumi.azuredevops.inputs.GitInitializationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitArgs Empty = new GitArgs();

    /**
     * The ref of the default branch. Will be used as the branch name for initialized repositories.
     * 
     */
    @Import(name="defaultBranch")
    private @Nullable Output<String> defaultBranch;

    /**
     * @return The ref of the default branch. Will be used as the branch name for initialized repositories.
     * 
     */
    public Optional<Output<String>> defaultBranch() {
        return Optional.ofNullable(this.defaultBranch);
    }

    /**
     * An `initialization` block as documented below.
     * 
     */
    @Import(name="initialization", required=true)
    private Output<GitInitializationArgs> initialization;

    /**
     * @return An `initialization` block as documented below.
     * 
     */
    public Output<GitInitializationArgs> initialization() {
        return this.initialization;
    }

    /**
     * The name of the git repository.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the git repository.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of a Git project from which a fork is to be created.
     * 
     */
    @Import(name="parentRepositoryId")
    private @Nullable Output<String> parentRepositoryId;

    /**
     * @return The ID of a Git project from which a fork is to be created.
     * 
     */
    public Optional<Output<String>> parentRepositoryId() {
        return Optional.ofNullable(this.parentRepositoryId);
    }

    /**
     * The project ID or project name.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return The project ID or project name.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    private GitArgs() {}

    private GitArgs(GitArgs $) {
        this.defaultBranch = $.defaultBranch;
        this.initialization = $.initialization;
        this.name = $.name;
        this.parentRepositoryId = $.parentRepositoryId;
        this.projectId = $.projectId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitArgs $;

        public Builder() {
            $ = new GitArgs();
        }

        public Builder(GitArgs defaults) {
            $ = new GitArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultBranch The ref of the default branch. Will be used as the branch name for initialized repositories.
         * 
         * @return builder
         * 
         */
        public Builder defaultBranch(@Nullable Output<String> defaultBranch) {
            $.defaultBranch = defaultBranch;
            return this;
        }

        /**
         * @param defaultBranch The ref of the default branch. Will be used as the branch name for initialized repositories.
         * 
         * @return builder
         * 
         */
        public Builder defaultBranch(String defaultBranch) {
            return defaultBranch(Output.of(defaultBranch));
        }

        /**
         * @param initialization An `initialization` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder initialization(Output<GitInitializationArgs> initialization) {
            $.initialization = initialization;
            return this;
        }

        /**
         * @param initialization An `initialization` block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder initialization(GitInitializationArgs initialization) {
            return initialization(Output.of(initialization));
        }

        /**
         * @param name The name of the git repository.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the git repository.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parentRepositoryId The ID of a Git project from which a fork is to be created.
         * 
         * @return builder
         * 
         */
        public Builder parentRepositoryId(@Nullable Output<String> parentRepositoryId) {
            $.parentRepositoryId = parentRepositoryId;
            return this;
        }

        /**
         * @param parentRepositoryId The ID of a Git project from which a fork is to be created.
         * 
         * @return builder
         * 
         */
        public Builder parentRepositoryId(String parentRepositoryId) {
            return parentRepositoryId(Output.of(parentRepositoryId));
        }

        /**
         * @param projectId The project ID or project name.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The project ID or project name.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        public GitArgs build() {
            if ($.initialization == null) {
                throw new MissingRequiredPropertyException("GitArgs", "initialization");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("GitArgs", "projectId");
            }
            return $;
        }
    }

}
