// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops;

import com.pulumi.azuredevops.GitRepositoryFileArgs;
import com.pulumi.azuredevops.Utilities;
import com.pulumi.azuredevops.inputs.GitRepositoryFileState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manage files within an Azure DevOps Git repository.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azuredevops.Project;
 * import com.pulumi.azuredevops.ProjectArgs;
 * import com.pulumi.azuredevops.Git;
 * import com.pulumi.azuredevops.GitArgs;
 * import com.pulumi.azuredevops.inputs.GitInitializationArgs;
 * import com.pulumi.azuredevops.GitRepositoryFile;
 * import com.pulumi.azuredevops.GitRepositoryFileArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var example = new Project("example", ProjectArgs.builder()
 *             .name("Example Project")
 *             .visibility("private")
 *             .versionControl("Git")
 *             .workItemTemplate("Agile")
 *             .build());
 * 
 *         var exampleGit = new Git("exampleGit", GitArgs.builder()
 *             .projectId(example.id())
 *             .name("Example Git Repository")
 *             .initialization(GitInitializationArgs.builder()
 *                 .initType("Clean")
 *                 .build())
 *             .build());
 * 
 *         var exampleGitRepositoryFile = new GitRepositoryFile("exampleGitRepositoryFile", GitRepositoryFileArgs.builder()
 *             .repositoryId(exampleGit.id())
 *             .file(".gitignore")
 *             .content("**}&#47;{@code *.tfstate")
 *             .branch("refs/heads/master")
 *             .commitMessage("First commit")
 *             .overwriteOnCreate(false)
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Relevant Links
 * 
 * - [Azure DevOps Service REST API 7.0 - Git API](https://docs.microsoft.com/en-us/rest/api/azure/devops/git/?view=azure-devops-rest-7.0)
 * 
 * ## Import
 * 
 * Repository files can be imported using a combination of the `repository ID` and `file`, e.g.
 * 
 * ```sh
 * $ pulumi import azuredevops:index/gitRepositoryFile:GitRepositoryFile example 00000000-0000-0000-0000-000000000000/.gitignore
 * ```
 * 
 * To import a file from a branch other than `master`, append `:` and the branch name, e.g.
 * 
 * ```sh
 * $ pulumi import azuredevops:index/gitRepositoryFile:GitRepositoryFile example 00000000-0000-0000-0000-000000000000/.gitignore:refs/heads/master
 * ```
 * 
 */
@ResourceType(type="azuredevops:index/gitRepositoryFile:GitRepositoryFile")
public class GitRepositoryFile extends com.pulumi.resources.CustomResource {
    /**
     * Git branch (defaults to `refs/heads/master`). The branch must already exist, it will not be created if it
     * does not already exist.
     * 
     */
    @Export(name="branch", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> branch;

    /**
     * @return Git branch (defaults to `refs/heads/master`). The branch must already exist, it will not be created if it
     * does not already exist.
     * 
     */
    public Output<Optional<String>> branch() {
        return Codegen.optional(this.branch);
    }
    /**
     * Commit message when adding or updating the managed file.
     * 
     */
    @Export(name="commitMessage", refs={String.class}, tree="[0]")
    private Output<String> commitMessage;

    /**
     * @return Commit message when adding or updating the managed file.
     * 
     */
    public Output<String> commitMessage() {
        return this.commitMessage;
    }
    /**
     * The file content.
     * 
     */
    @Export(name="content", refs={String.class}, tree="[0]")
    private Output<String> content;

    /**
     * @return The file content.
     * 
     */
    public Output<String> content() {
        return this.content;
    }
    /**
     * The path of the file to manage.
     * 
     */
    @Export(name="file", refs={String.class}, tree="[0]")
    private Output<String> file;

    /**
     * @return The path of the file to manage.
     * 
     */
    public Output<String> file() {
        return this.file;
    }
    /**
     * Enable overwriting existing files (defaults to `false`).
     * 
     */
    @Export(name="overwriteOnCreate", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> overwriteOnCreate;

    /**
     * @return Enable overwriting existing files (defaults to `false`).
     * 
     */
    public Output<Optional<Boolean>> overwriteOnCreate() {
        return Codegen.optional(this.overwriteOnCreate);
    }
    /**
     * The ID of the Git repository.
     * 
     */
    @Export(name="repositoryId", refs={String.class}, tree="[0]")
    private Output<String> repositoryId;

    /**
     * @return The ID of the Git repository.
     * 
     */
    public Output<String> repositoryId() {
        return this.repositoryId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public GitRepositoryFile(java.lang.String name) {
        this(name, GitRepositoryFileArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public GitRepositoryFile(java.lang.String name, GitRepositoryFileArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GitRepositoryFile(java.lang.String name, GitRepositoryFileArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azuredevops:index/gitRepositoryFile:GitRepositoryFile", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private GitRepositoryFile(java.lang.String name, Output<java.lang.String> id, @Nullable GitRepositoryFileState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azuredevops:index/gitRepositoryFile:GitRepositoryFile", name, state, makeResourceOptions(options, id), false);
    }

    private static GitRepositoryFileArgs makeArgs(GitRepositoryFileArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? GitRepositoryFileArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GitRepositoryFile get(java.lang.String name, Output<java.lang.String> id, @Nullable GitRepositoryFileState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new GitRepositoryFile(name, id, state, options);
    }
}
