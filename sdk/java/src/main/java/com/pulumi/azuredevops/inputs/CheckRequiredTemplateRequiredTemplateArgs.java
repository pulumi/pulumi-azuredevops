// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CheckRequiredTemplateRequiredTemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final CheckRequiredTemplateRequiredTemplateArgs Empty = new CheckRequiredTemplateRequiredTemplateArgs();

    /**
     * The name of the repository storing the template.
     * 
     */
    @Import(name="repositoryName", required=true)
    private Output<String> repositoryName;

    /**
     * @return The name of the repository storing the template.
     * 
     */
    public Output<String> repositoryName() {
        return this.repositoryName;
    }

    /**
     * The branch in which the template will be referenced.
     * 
     */
    @Import(name="repositoryRef", required=true)
    private Output<String> repositoryRef;

    /**
     * @return The branch in which the template will be referenced.
     * 
     */
    public Output<String> repositoryRef() {
        return this.repositoryRef;
    }

    /**
     * The type of the repository storing the template. Valid values: `azuregit`, `github`, `githubenterprise`, `bitbucket`. Defaults to `azuregit`.
     * 
     */
    @Import(name="repositoryType")
    private @Nullable Output<String> repositoryType;

    /**
     * @return The type of the repository storing the template. Valid values: `azuregit`, `github`, `githubenterprise`, `bitbucket`. Defaults to `azuregit`.
     * 
     */
    public Optional<Output<String>> repositoryType() {
        return Optional.ofNullable(this.repositoryType);
    }

    /**
     * The path to the template yaml.
     * 
     */
    @Import(name="templatePath", required=true)
    private Output<String> templatePath;

    /**
     * @return The path to the template yaml.
     * 
     */
    public Output<String> templatePath() {
        return this.templatePath;
    }

    private CheckRequiredTemplateRequiredTemplateArgs() {}

    private CheckRequiredTemplateRequiredTemplateArgs(CheckRequiredTemplateRequiredTemplateArgs $) {
        this.repositoryName = $.repositoryName;
        this.repositoryRef = $.repositoryRef;
        this.repositoryType = $.repositoryType;
        this.templatePath = $.templatePath;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CheckRequiredTemplateRequiredTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CheckRequiredTemplateRequiredTemplateArgs $;

        public Builder() {
            $ = new CheckRequiredTemplateRequiredTemplateArgs();
        }

        public Builder(CheckRequiredTemplateRequiredTemplateArgs defaults) {
            $ = new CheckRequiredTemplateRequiredTemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param repositoryName The name of the repository storing the template.
         * 
         * @return builder
         * 
         */
        public Builder repositoryName(Output<String> repositoryName) {
            $.repositoryName = repositoryName;
            return this;
        }

        /**
         * @param repositoryName The name of the repository storing the template.
         * 
         * @return builder
         * 
         */
        public Builder repositoryName(String repositoryName) {
            return repositoryName(Output.of(repositoryName));
        }

        /**
         * @param repositoryRef The branch in which the template will be referenced.
         * 
         * @return builder
         * 
         */
        public Builder repositoryRef(Output<String> repositoryRef) {
            $.repositoryRef = repositoryRef;
            return this;
        }

        /**
         * @param repositoryRef The branch in which the template will be referenced.
         * 
         * @return builder
         * 
         */
        public Builder repositoryRef(String repositoryRef) {
            return repositoryRef(Output.of(repositoryRef));
        }

        /**
         * @param repositoryType The type of the repository storing the template. Valid values: `azuregit`, `github`, `githubenterprise`, `bitbucket`. Defaults to `azuregit`.
         * 
         * @return builder
         * 
         */
        public Builder repositoryType(@Nullable Output<String> repositoryType) {
            $.repositoryType = repositoryType;
            return this;
        }

        /**
         * @param repositoryType The type of the repository storing the template. Valid values: `azuregit`, `github`, `githubenterprise`, `bitbucket`. Defaults to `azuregit`.
         * 
         * @return builder
         * 
         */
        public Builder repositoryType(String repositoryType) {
            return repositoryType(Output.of(repositoryType));
        }

        /**
         * @param templatePath The path to the template yaml.
         * 
         * @return builder
         * 
         */
        public Builder templatePath(Output<String> templatePath) {
            $.templatePath = templatePath;
            return this;
        }

        /**
         * @param templatePath The path to the template yaml.
         * 
         * @return builder
         * 
         */
        public Builder templatePath(String templatePath) {
            return templatePath(Output.of(templatePath));
        }

        public CheckRequiredTemplateRequiredTemplateArgs build() {
            if ($.repositoryName == null) {
                throw new MissingRequiredPropertyException("CheckRequiredTemplateRequiredTemplateArgs", "repositoryName");
            }
            if ($.repositoryRef == null) {
                throw new MissingRequiredPropertyException("CheckRequiredTemplateRequiredTemplateArgs", "repositoryRef");
            }
            if ($.templatePath == null) {
                throw new MissingRequiredPropertyException("CheckRequiredTemplateRequiredTemplateArgs", "templatePath");
            }
            return $;
        }
    }

}
