// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetGitRepositoryFileResult {
    private @Nullable String branch;
    /**
     * @return The file content.
     * 
     */
    private String content;
    private String file;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The commit message for the file.
     * 
     */
    private String lastCommitMessage;
    private String repositoryId;
    private @Nullable String tag;

    private GetGitRepositoryFileResult() {}
    public Optional<String> branch() {
        return Optional.ofNullable(this.branch);
    }
    /**
     * @return The file content.
     * 
     */
    public String content() {
        return this.content;
    }
    public String file() {
        return this.file;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The commit message for the file.
     * 
     */
    public String lastCommitMessage() {
        return this.lastCommitMessage;
    }
    public String repositoryId() {
        return this.repositoryId;
    }
    public Optional<String> tag() {
        return Optional.ofNullable(this.tag);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGitRepositoryFileResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String branch;
        private String content;
        private String file;
        private String id;
        private String lastCommitMessage;
        private String repositoryId;
        private @Nullable String tag;
        public Builder() {}
        public Builder(GetGitRepositoryFileResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.branch = defaults.branch;
    	      this.content = defaults.content;
    	      this.file = defaults.file;
    	      this.id = defaults.id;
    	      this.lastCommitMessage = defaults.lastCommitMessage;
    	      this.repositoryId = defaults.repositoryId;
    	      this.tag = defaults.tag;
        }

        @CustomType.Setter
        public Builder branch(@Nullable String branch) {

            this.branch = branch;
            return this;
        }
        @CustomType.Setter
        public Builder content(String content) {
            if (content == null) {
              throw new MissingRequiredPropertyException("GetGitRepositoryFileResult", "content");
            }
            this.content = content;
            return this;
        }
        @CustomType.Setter
        public Builder file(String file) {
            if (file == null) {
              throw new MissingRequiredPropertyException("GetGitRepositoryFileResult", "file");
            }
            this.file = file;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetGitRepositoryFileResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lastCommitMessage(String lastCommitMessage) {
            if (lastCommitMessage == null) {
              throw new MissingRequiredPropertyException("GetGitRepositoryFileResult", "lastCommitMessage");
            }
            this.lastCommitMessage = lastCommitMessage;
            return this;
        }
        @CustomType.Setter
        public Builder repositoryId(String repositoryId) {
            if (repositoryId == null) {
              throw new MissingRequiredPropertyException("GetGitRepositoryFileResult", "repositoryId");
            }
            this.repositoryId = repositoryId;
            return this;
        }
        @CustomType.Setter
        public Builder tag(@Nullable String tag) {

            this.tag = tag;
            return this;
        }
        public GetGitRepositoryFileResult build() {
            final var _resultValue = new GetGitRepositoryFileResult();
            _resultValue.branch = branch;
            _resultValue.content = content;
            _resultValue.file = file;
            _resultValue.id = id;
            _resultValue.lastCommitMessage = lastCommitMessage;
            _resultValue.repositoryId = repositoryId;
            _resultValue.tag = tag;
            return _resultValue;
        }
    }
}
