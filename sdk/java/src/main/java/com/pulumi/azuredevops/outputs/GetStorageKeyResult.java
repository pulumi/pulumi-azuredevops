// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetStorageKeyResult {
    private String descriptor;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The Storage Key of the descriptor.
     * 
     */
    private String storageKey;

    private GetStorageKeyResult() {}
    public String descriptor() {
        return this.descriptor;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The Storage Key of the descriptor.
     * 
     */
    public String storageKey() {
        return this.storageKey;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStorageKeyResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String descriptor;
        private String id;
        private String storageKey;
        public Builder() {}
        public Builder(GetStorageKeyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.descriptor = defaults.descriptor;
    	      this.id = defaults.id;
    	      this.storageKey = defaults.storageKey;
        }

        @CustomType.Setter
        public Builder descriptor(String descriptor) {
            if (descriptor == null) {
              throw new MissingRequiredPropertyException("GetStorageKeyResult", "descriptor");
            }
            this.descriptor = descriptor;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetStorageKeyResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder storageKey(String storageKey) {
            if (storageKey == null) {
              throw new MissingRequiredPropertyException("GetStorageKeyResult", "storageKey");
            }
            this.storageKey = storageKey;
            return this;
        }
        public GetStorageKeyResult build() {
            final var _resultValue = new GetStorageKeyResult();
            _resultValue.descriptor = descriptor;
            _resultValue.id = id;
            _resultValue.storageKey = storageKey;
            return _resultValue;
        }
    }
}
