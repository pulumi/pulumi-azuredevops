// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.outputs;

import com.pulumi.azuredevops.outputs.GetBuildDefinitionJobDependency;
import com.pulumi.azuredevops.outputs.GetBuildDefinitionJobTarget;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetBuildDefinitionJob {
    /**
     * @return Enables scripts and other processes launched by tasks to access the OAuth token through the `System.AccessToken` variable.
     * 
     */
    private Boolean allowScriptsAuthAccessOption;
    /**
     * @return Specifies when this job should run. Can **Custom conditions** to specify more complex conditions. More details: [Pipeline conditions](https://learn.microsoft.com/en-us/azure/devops/pipelines/process/conditions?view=azure-devops)
     * 
     */
    private String condition;
    /**
     * @return A `dependencies` blocks as documented below. Define the job dependencies.
     * 
     */
    private List<GetBuildDefinitionJobDependency> dependencies;
    /**
     * @return The job authorization scope for builds queued against this definition.
     * 
     */
    private String jobAuthorizationScope;
    /**
     * @return The job cancel timeout (in minutes) for builds cancelled by user for this definition.
     * 
     */
    private Integer jobCancelTimeoutInMinutes;
    /**
     * @return The job execution timeout (in minutes) for builds queued against this definition.
     * 
     */
    private Integer jobTimeoutInMinutes;
    /**
     * @return The name of this Build Definition.
     * 
     */
    private String name;
    /**
     * @return The reference name of the job, can be used to define the job dependencies.
     * 
     */
    private String refName;
    /**
     * @return A `target` blocks as documented below.
     * 
     */
    private List<GetBuildDefinitionJobTarget> targets;

    private GetBuildDefinitionJob() {}
    /**
     * @return Enables scripts and other processes launched by tasks to access the OAuth token through the `System.AccessToken` variable.
     * 
     */
    public Boolean allowScriptsAuthAccessOption() {
        return this.allowScriptsAuthAccessOption;
    }
    /**
     * @return Specifies when this job should run. Can **Custom conditions** to specify more complex conditions. More details: [Pipeline conditions](https://learn.microsoft.com/en-us/azure/devops/pipelines/process/conditions?view=azure-devops)
     * 
     */
    public String condition() {
        return this.condition;
    }
    /**
     * @return A `dependencies` blocks as documented below. Define the job dependencies.
     * 
     */
    public List<GetBuildDefinitionJobDependency> dependencies() {
        return this.dependencies;
    }
    /**
     * @return The job authorization scope for builds queued against this definition.
     * 
     */
    public String jobAuthorizationScope() {
        return this.jobAuthorizationScope;
    }
    /**
     * @return The job cancel timeout (in minutes) for builds cancelled by user for this definition.
     * 
     */
    public Integer jobCancelTimeoutInMinutes() {
        return this.jobCancelTimeoutInMinutes;
    }
    /**
     * @return The job execution timeout (in minutes) for builds queued against this definition.
     * 
     */
    public Integer jobTimeoutInMinutes() {
        return this.jobTimeoutInMinutes;
    }
    /**
     * @return The name of this Build Definition.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The reference name of the job, can be used to define the job dependencies.
     * 
     */
    public String refName() {
        return this.refName;
    }
    /**
     * @return A `target` blocks as documented below.
     * 
     */
    public List<GetBuildDefinitionJobTarget> targets() {
        return this.targets;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBuildDefinitionJob defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean allowScriptsAuthAccessOption;
        private String condition;
        private List<GetBuildDefinitionJobDependency> dependencies;
        private String jobAuthorizationScope;
        private Integer jobCancelTimeoutInMinutes;
        private Integer jobTimeoutInMinutes;
        private String name;
        private String refName;
        private List<GetBuildDefinitionJobTarget> targets;
        public Builder() {}
        public Builder(GetBuildDefinitionJob defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowScriptsAuthAccessOption = defaults.allowScriptsAuthAccessOption;
    	      this.condition = defaults.condition;
    	      this.dependencies = defaults.dependencies;
    	      this.jobAuthorizationScope = defaults.jobAuthorizationScope;
    	      this.jobCancelTimeoutInMinutes = defaults.jobCancelTimeoutInMinutes;
    	      this.jobTimeoutInMinutes = defaults.jobTimeoutInMinutes;
    	      this.name = defaults.name;
    	      this.refName = defaults.refName;
    	      this.targets = defaults.targets;
        }

        @CustomType.Setter
        public Builder allowScriptsAuthAccessOption(Boolean allowScriptsAuthAccessOption) {
            if (allowScriptsAuthAccessOption == null) {
              throw new MissingRequiredPropertyException("GetBuildDefinitionJob", "allowScriptsAuthAccessOption");
            }
            this.allowScriptsAuthAccessOption = allowScriptsAuthAccessOption;
            return this;
        }
        @CustomType.Setter
        public Builder condition(String condition) {
            if (condition == null) {
              throw new MissingRequiredPropertyException("GetBuildDefinitionJob", "condition");
            }
            this.condition = condition;
            return this;
        }
        @CustomType.Setter
        public Builder dependencies(List<GetBuildDefinitionJobDependency> dependencies) {
            if (dependencies == null) {
              throw new MissingRequiredPropertyException("GetBuildDefinitionJob", "dependencies");
            }
            this.dependencies = dependencies;
            return this;
        }
        public Builder dependencies(GetBuildDefinitionJobDependency... dependencies) {
            return dependencies(List.of(dependencies));
        }
        @CustomType.Setter
        public Builder jobAuthorizationScope(String jobAuthorizationScope) {
            if (jobAuthorizationScope == null) {
              throw new MissingRequiredPropertyException("GetBuildDefinitionJob", "jobAuthorizationScope");
            }
            this.jobAuthorizationScope = jobAuthorizationScope;
            return this;
        }
        @CustomType.Setter
        public Builder jobCancelTimeoutInMinutes(Integer jobCancelTimeoutInMinutes) {
            if (jobCancelTimeoutInMinutes == null) {
              throw new MissingRequiredPropertyException("GetBuildDefinitionJob", "jobCancelTimeoutInMinutes");
            }
            this.jobCancelTimeoutInMinutes = jobCancelTimeoutInMinutes;
            return this;
        }
        @CustomType.Setter
        public Builder jobTimeoutInMinutes(Integer jobTimeoutInMinutes) {
            if (jobTimeoutInMinutes == null) {
              throw new MissingRequiredPropertyException("GetBuildDefinitionJob", "jobTimeoutInMinutes");
            }
            this.jobTimeoutInMinutes = jobTimeoutInMinutes;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetBuildDefinitionJob", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder refName(String refName) {
            if (refName == null) {
              throw new MissingRequiredPropertyException("GetBuildDefinitionJob", "refName");
            }
            this.refName = refName;
            return this;
        }
        @CustomType.Setter
        public Builder targets(List<GetBuildDefinitionJobTarget> targets) {
            if (targets == null) {
              throw new MissingRequiredPropertyException("GetBuildDefinitionJob", "targets");
            }
            this.targets = targets;
            return this;
        }
        public Builder targets(GetBuildDefinitionJobTarget... targets) {
            return targets(List.of(targets));
        }
        public GetBuildDefinitionJob build() {
            final var _resultValue = new GetBuildDefinitionJob();
            _resultValue.allowScriptsAuthAccessOption = allowScriptsAuthAccessOption;
            _resultValue.condition = condition;
            _resultValue.dependencies = dependencies;
            _resultValue.jobAuthorizationScope = jobAuthorizationScope;
            _resultValue.jobCancelTimeoutInMinutes = jobCancelTimeoutInMinutes;
            _resultValue.jobTimeoutInMinutes = jobTimeoutInMinutes;
            _resultValue.name = name;
            _resultValue.refName = refName;
            _resultValue.targets = targets;
            return _resultValue;
        }
    }
}
