// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkitemArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkitemArgs Empty = new WorkitemArgs();

    /**
     * Specifies the area where the Work Item is used.
     * 
     */
    @Import(name="areaPath")
    private @Nullable Output<String> areaPath;

    /**
     * @return Specifies the area where the Work Item is used.
     * 
     */
    public Optional<Output<String>> areaPath() {
        return Optional.ofNullable(this.areaPath);
    }

    /**
     * Specifies a list with Custom Fields for the Work Item.
     * 
     */
    @Import(name="customFields")
    private @Nullable Output<Map<String,String>> customFields;

    /**
     * @return Specifies a list with Custom Fields for the Work Item.
     * 
     */
    public Optional<Output<Map<String,String>>> customFields() {
        return Optional.ofNullable(this.customFields);
    }

    /**
     * Specifies the iteration in which the Work Item is used.
     * 
     */
    @Import(name="iterationPath")
    private @Nullable Output<String> iterationPath;

    /**
     * @return Specifies the iteration in which the Work Item is used.
     * 
     */
    public Optional<Output<String>> iterationPath() {
        return Optional.ofNullable(this.iterationPath);
    }

    /**
     * The parent work item.
     * 
     */
    @Import(name="parentId")
    private @Nullable Output<Integer> parentId;

    /**
     * @return The parent work item.
     * 
     */
    public Optional<Output<Integer>> parentId() {
        return Optional.ofNullable(this.parentId);
    }

    /**
     * The ID of the Project.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return The ID of the Project.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * The state of the Work Item. The four main states that are defined for the User Story (`Agile`) are `New`, `Active`, `Resolved`, and `Closed`. See [Workflow states](https://learn.microsoft.com/en-us/azure/devops/boards/work-items/workflow-and-state-categories?view=azure-devops&amp;tabs=agile-process#workflow-states) for more details.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the Work Item. The four main states that are defined for the User Story (`Agile`) are `New`, `Active`, `Resolved`, and `Closed`. See [Workflow states](https://learn.microsoft.com/en-us/azure/devops/boards/work-items/workflow-and-state-categories?view=azure-devops&amp;tabs=agile-process#workflow-states) for more details.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Specifies a list of Tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Specifies a list of Tags.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The Title of the Work Item.
     * 
     */
    @Import(name="title", required=true)
    private Output<String> title;

    /**
     * @return The Title of the Work Item.
     * 
     */
    public Output<String> title() {
        return this.title;
    }

    /**
     * The Type of the Work Item. The work item type varies depending on the process used when creating the project(`Agile`, `Basic`, `Scrum`, `Scrum`). See [Work Item Types](https://learn.microsoft.com/en-us/azure/devops/boards/work-items/about-work-items?view=azure-devops) for more details.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The Type of the Work Item. The work item type varies depending on the process used when creating the project(`Agile`, `Basic`, `Scrum`, `Scrum`). See [Work Item Types](https://learn.microsoft.com/en-us/azure/devops/boards/work-items/about-work-items?view=azure-devops) for more details.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private WorkitemArgs() {}

    private WorkitemArgs(WorkitemArgs $) {
        this.areaPath = $.areaPath;
        this.customFields = $.customFields;
        this.iterationPath = $.iterationPath;
        this.parentId = $.parentId;
        this.projectId = $.projectId;
        this.state = $.state;
        this.tags = $.tags;
        this.title = $.title;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkitemArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkitemArgs $;

        public Builder() {
            $ = new WorkitemArgs();
        }

        public Builder(WorkitemArgs defaults) {
            $ = new WorkitemArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param areaPath Specifies the area where the Work Item is used.
         * 
         * @return builder
         * 
         */
        public Builder areaPath(@Nullable Output<String> areaPath) {
            $.areaPath = areaPath;
            return this;
        }

        /**
         * @param areaPath Specifies the area where the Work Item is used.
         * 
         * @return builder
         * 
         */
        public Builder areaPath(String areaPath) {
            return areaPath(Output.of(areaPath));
        }

        /**
         * @param customFields Specifies a list with Custom Fields for the Work Item.
         * 
         * @return builder
         * 
         */
        public Builder customFields(@Nullable Output<Map<String,String>> customFields) {
            $.customFields = customFields;
            return this;
        }

        /**
         * @param customFields Specifies a list with Custom Fields for the Work Item.
         * 
         * @return builder
         * 
         */
        public Builder customFields(Map<String,String> customFields) {
            return customFields(Output.of(customFields));
        }

        /**
         * @param iterationPath Specifies the iteration in which the Work Item is used.
         * 
         * @return builder
         * 
         */
        public Builder iterationPath(@Nullable Output<String> iterationPath) {
            $.iterationPath = iterationPath;
            return this;
        }

        /**
         * @param iterationPath Specifies the iteration in which the Work Item is used.
         * 
         * @return builder
         * 
         */
        public Builder iterationPath(String iterationPath) {
            return iterationPath(Output.of(iterationPath));
        }

        /**
         * @param parentId The parent work item.
         * 
         * @return builder
         * 
         */
        public Builder parentId(@Nullable Output<Integer> parentId) {
            $.parentId = parentId;
            return this;
        }

        /**
         * @param parentId The parent work item.
         * 
         * @return builder
         * 
         */
        public Builder parentId(Integer parentId) {
            return parentId(Output.of(parentId));
        }

        /**
         * @param projectId The ID of the Project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The ID of the Project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param state The state of the Work Item. The four main states that are defined for the User Story (`Agile`) are `New`, `Active`, `Resolved`, and `Closed`. See [Workflow states](https://learn.microsoft.com/en-us/azure/devops/boards/work-items/workflow-and-state-categories?view=azure-devops&amp;tabs=agile-process#workflow-states) for more details.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the Work Item. The four main states that are defined for the User Story (`Agile`) are `New`, `Active`, `Resolved`, and `Closed`. See [Workflow states](https://learn.microsoft.com/en-us/azure/devops/boards/work-items/workflow-and-state-categories?view=azure-devops&amp;tabs=agile-process#workflow-states) for more details.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param tags Specifies a list of Tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Specifies a list of Tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Specifies a list of Tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param title The Title of the Work Item.
         * 
         * @return builder
         * 
         */
        public Builder title(Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title The Title of the Work Item.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        /**
         * @param type The Type of the Work Item. The work item type varies depending on the process used when creating the project(`Agile`, `Basic`, `Scrum`, `Scrum`). See [Work Item Types](https://learn.microsoft.com/en-us/azure/devops/boards/work-items/about-work-items?view=azure-devops) for more details.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The Type of the Work Item. The work item type varies depending on the process used when creating the project(`Agile`, `Basic`, `Scrum`, `Scrum`). See [Work Item Types](https://learn.microsoft.com/en-us/azure/devops/boards/work-items/about-work-items?view=azure-devops) for more details.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public WorkitemArgs build() {
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("WorkitemArgs", "projectId");
            }
            if ($.title == null) {
                throw new MissingRequiredPropertyException("WorkitemArgs", "title");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("WorkitemArgs", "type");
            }
            return $;
        }
    }

}
