// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CheckExclusiveLockArgs extends com.pulumi.resources.ResourceArgs {

    public static final CheckExclusiveLockArgs Empty = new CheckExclusiveLockArgs();

    /**
     * The project ID. Changing this forces a new Exclusive Lock Check to be created.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return The project ID. Changing this forces a new Exclusive Lock Check to be created.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * The ID of the resource being protected by the check. Changing this forces a new Exclusive Lock to be created.
     * 
     */
    @Import(name="targetResourceId", required=true)
    private Output<String> targetResourceId;

    /**
     * @return The ID of the resource being protected by the check. Changing this forces a new Exclusive Lock to be created.
     * 
     */
    public Output<String> targetResourceId() {
        return this.targetResourceId;
    }

    /**
     * The type of resource being protected by the check. Possible values are: `endpoint`, `environment`, `queue`, `repository`, `securefile`, `variablegroup`. Changing this forces a new Exclusive Lock to be created.
     * 
     */
    @Import(name="targetResourceType", required=true)
    private Output<String> targetResourceType;

    /**
     * @return The type of resource being protected by the check. Possible values are: `endpoint`, `environment`, `queue`, `repository`, `securefile`, `variablegroup`. Changing this forces a new Exclusive Lock to be created.
     * 
     */
    public Output<String> targetResourceType() {
        return this.targetResourceType;
    }

    /**
     * The timeout in minutes for the exclusive lock. Defaults to `43200`.
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<Integer> timeout;

    /**
     * @return The timeout in minutes for the exclusive lock. Defaults to `43200`.
     * 
     */
    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    private CheckExclusiveLockArgs() {}

    private CheckExclusiveLockArgs(CheckExclusiveLockArgs $) {
        this.projectId = $.projectId;
        this.targetResourceId = $.targetResourceId;
        this.targetResourceType = $.targetResourceType;
        this.timeout = $.timeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CheckExclusiveLockArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CheckExclusiveLockArgs $;

        public Builder() {
            $ = new CheckExclusiveLockArgs();
        }

        public Builder(CheckExclusiveLockArgs defaults) {
            $ = new CheckExclusiveLockArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param projectId The project ID. Changing this forces a new Exclusive Lock Check to be created.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The project ID. Changing this forces a new Exclusive Lock Check to be created.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param targetResourceId The ID of the resource being protected by the check. Changing this forces a new Exclusive Lock to be created.
         * 
         * @return builder
         * 
         */
        public Builder targetResourceId(Output<String> targetResourceId) {
            $.targetResourceId = targetResourceId;
            return this;
        }

        /**
         * @param targetResourceId The ID of the resource being protected by the check. Changing this forces a new Exclusive Lock to be created.
         * 
         * @return builder
         * 
         */
        public Builder targetResourceId(String targetResourceId) {
            return targetResourceId(Output.of(targetResourceId));
        }

        /**
         * @param targetResourceType The type of resource being protected by the check. Possible values are: `endpoint`, `environment`, `queue`, `repository`, `securefile`, `variablegroup`. Changing this forces a new Exclusive Lock to be created.
         * 
         * @return builder
         * 
         */
        public Builder targetResourceType(Output<String> targetResourceType) {
            $.targetResourceType = targetResourceType;
            return this;
        }

        /**
         * @param targetResourceType The type of resource being protected by the check. Possible values are: `endpoint`, `environment`, `queue`, `repository`, `securefile`, `variablegroup`. Changing this forces a new Exclusive Lock to be created.
         * 
         * @return builder
         * 
         */
        public Builder targetResourceType(String targetResourceType) {
            return targetResourceType(Output.of(targetResourceType));
        }

        /**
         * @param timeout The timeout in minutes for the exclusive lock. Defaults to `43200`.
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout The timeout in minutes for the exclusive lock. Defaults to `43200`.
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        public CheckExclusiveLockArgs build() {
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("CheckExclusiveLockArgs", "projectId");
            }
            if ($.targetResourceId == null) {
                throw new MissingRequiredPropertyException("CheckExclusiveLockArgs", "targetResourceId");
            }
            if ($.targetResourceType == null) {
                throw new MissingRequiredPropertyException("CheckExclusiveLockArgs", "targetResourceType");
            }
            return $;
        }
    }

}
