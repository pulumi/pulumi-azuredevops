// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetBuildDefinitionRepository {
    /**
     * @return The branch name for which builds are triggered.
     * 
     */
    private String branchName;
    /**
     * @return The Github Enterprise URL.
     * 
     */
    private String githubEnterpriseUrl;
    /**
     * @return The id of the repository.
     * 
     */
    private String repoId;
    /**
     * @return The repository type.
     * 
     */
    private String repoType;
    /**
     * @return Report build status.
     * 
     */
    private Boolean reportBuildStatus;
    /**
     * @return The service connection ID.
     * 
     */
    private String serviceConnectionId;
    private String url;
    /**
     * @return The path of the Yaml file describing the build definition.
     * 
     */
    private String ymlPath;

    private GetBuildDefinitionRepository() {}
    /**
     * @return The branch name for which builds are triggered.
     * 
     */
    public String branchName() {
        return this.branchName;
    }
    /**
     * @return The Github Enterprise URL.
     * 
     */
    public String githubEnterpriseUrl() {
        return this.githubEnterpriseUrl;
    }
    /**
     * @return The id of the repository.
     * 
     */
    public String repoId() {
        return this.repoId;
    }
    /**
     * @return The repository type.
     * 
     */
    public String repoType() {
        return this.repoType;
    }
    /**
     * @return Report build status.
     * 
     */
    public Boolean reportBuildStatus() {
        return this.reportBuildStatus;
    }
    /**
     * @return The service connection ID.
     * 
     */
    public String serviceConnectionId() {
        return this.serviceConnectionId;
    }
    public String url() {
        return this.url;
    }
    /**
     * @return The path of the Yaml file describing the build definition.
     * 
     */
    public String ymlPath() {
        return this.ymlPath;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBuildDefinitionRepository defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String branchName;
        private String githubEnterpriseUrl;
        private String repoId;
        private String repoType;
        private Boolean reportBuildStatus;
        private String serviceConnectionId;
        private String url;
        private String ymlPath;
        public Builder() {}
        public Builder(GetBuildDefinitionRepository defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.branchName = defaults.branchName;
    	      this.githubEnterpriseUrl = defaults.githubEnterpriseUrl;
    	      this.repoId = defaults.repoId;
    	      this.repoType = defaults.repoType;
    	      this.reportBuildStatus = defaults.reportBuildStatus;
    	      this.serviceConnectionId = defaults.serviceConnectionId;
    	      this.url = defaults.url;
    	      this.ymlPath = defaults.ymlPath;
        }

        @CustomType.Setter
        public Builder branchName(String branchName) {
            if (branchName == null) {
              throw new MissingRequiredPropertyException("GetBuildDefinitionRepository", "branchName");
            }
            this.branchName = branchName;
            return this;
        }
        @CustomType.Setter
        public Builder githubEnterpriseUrl(String githubEnterpriseUrl) {
            if (githubEnterpriseUrl == null) {
              throw new MissingRequiredPropertyException("GetBuildDefinitionRepository", "githubEnterpriseUrl");
            }
            this.githubEnterpriseUrl = githubEnterpriseUrl;
            return this;
        }
        @CustomType.Setter
        public Builder repoId(String repoId) {
            if (repoId == null) {
              throw new MissingRequiredPropertyException("GetBuildDefinitionRepository", "repoId");
            }
            this.repoId = repoId;
            return this;
        }
        @CustomType.Setter
        public Builder repoType(String repoType) {
            if (repoType == null) {
              throw new MissingRequiredPropertyException("GetBuildDefinitionRepository", "repoType");
            }
            this.repoType = repoType;
            return this;
        }
        @CustomType.Setter
        public Builder reportBuildStatus(Boolean reportBuildStatus) {
            if (reportBuildStatus == null) {
              throw new MissingRequiredPropertyException("GetBuildDefinitionRepository", "reportBuildStatus");
            }
            this.reportBuildStatus = reportBuildStatus;
            return this;
        }
        @CustomType.Setter
        public Builder serviceConnectionId(String serviceConnectionId) {
            if (serviceConnectionId == null) {
              throw new MissingRequiredPropertyException("GetBuildDefinitionRepository", "serviceConnectionId");
            }
            this.serviceConnectionId = serviceConnectionId;
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            if (url == null) {
              throw new MissingRequiredPropertyException("GetBuildDefinitionRepository", "url");
            }
            this.url = url;
            return this;
        }
        @CustomType.Setter
        public Builder ymlPath(String ymlPath) {
            if (ymlPath == null) {
              throw new MissingRequiredPropertyException("GetBuildDefinitionRepository", "ymlPath");
            }
            this.ymlPath = ymlPath;
            return this;
        }
        public GetBuildDefinitionRepository build() {
            final var _resultValue = new GetBuildDefinitionRepository();
            _resultValue.branchName = branchName;
            _resultValue.githubEnterpriseUrl = githubEnterpriseUrl;
            _resultValue.repoId = repoId;
            _resultValue.repoType = repoType;
            _resultValue.reportBuildStatus = reportBuildStatus;
            _resultValue.serviceConnectionId = serviceConnectionId;
            _resultValue.url = url;
            _resultValue.ymlPath = ymlPath;
            return _resultValue;
        }
    }
}
