// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops;

import com.pulumi.azuredevops.GitArgs;
import com.pulumi.azuredevops.Utilities;
import com.pulumi.azuredevops.inputs.GitState;
import com.pulumi.azuredevops.outputs.GitInitialization;
import com.pulumi.core.Alias;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Import
 * 
 * Azure DevOps Repositories can be imported using the repo name or by the repo Guid e.g.
 * 
 * ```sh
 *  $ pulumi import azuredevops:index/git:Git example projectName/repoName
 * ```
 * 
 *  or
 * 
 * ```sh
 *  $ pulumi import azuredevops:index/git:Git example projectName/00000000-0000-0000-0000-000000000000
 * ```
 * 
 *  hcl resource &#34;azuredevops_project&#34; &#34;example&#34; {
 * 
 *  name
 * 
 *  = &#34;Example Project&#34;
 * 
 *  visibility
 * 
 *  = &#34;private&#34;
 * 
 *  version_control
 * 
 * = &#34;Git&#34;
 * 
 *  work_item_template = &#34;Agile&#34; } resource &#34;azuredevops_git_repository&#34; &#34;example&#34; {
 * 
 *  project_id
 * 
 *  = azuredevops_project.example.id
 * 
 *  name
 * 
 *  = &#34;Example Git Repository&#34;
 * 
 *  default_branch = &#34;refs/heads/main&#34;
 * 
 *  initialization {
 * 
 *  init_type = &#34;Clean&#34;
 * 
 *  }
 * 
 *  lifecycle {
 * 
 *  ignore_changes = [
 * 
 * # Ignore changes to initialization to support importing existing repositories
 * 
 * # Given that a repo now exists, either imported into terraform state or created by terraform,
 * 
 * # we don&#39;t care for the configuration of initialization against the existing resource
 * 
 *  initialization,
 * 
 *  ]
 * 
 *  } }
 * 
 */
@ResourceType(type="azuredevops:index/git:Git")
public class Git extends com.pulumi.resources.CustomResource {
    /**
     * The ref of the default branch. Will be used as the branch name for initialized repositories.
     * 
     */
    @Export(name="defaultBranch", type=String.class, parameters={})
    private Output<String> defaultBranch;

    /**
     * @return The ref of the default branch. Will be used as the branch name for initialized repositories.
     * 
     */
    public Output<String> defaultBranch() {
        return this.defaultBranch;
    }
    /**
     * An `initialization` block as documented below.
     * 
     */
    @Export(name="initialization", type=GitInitialization.class, parameters={})
    private Output<GitInitialization> initialization;

    /**
     * @return An `initialization` block as documented below.
     * 
     */
    public Output<GitInitialization> initialization() {
        return this.initialization;
    }
    /**
     * True if the repository was created as a fork.
     * 
     */
    @Export(name="isFork", type=Boolean.class, parameters={})
    private Output<Boolean> isFork;

    /**
     * @return True if the repository was created as a fork.
     * 
     */
    public Output<Boolean> isFork() {
        return this.isFork;
    }
    /**
     * The name of the git repository.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the git repository.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of a Git project from which a fork is to be created.
     * 
     */
    @Export(name="parentRepositoryId", type=String.class, parameters={})
    private Output</* @Nullable */ String> parentRepositoryId;

    /**
     * @return The ID of a Git project from which a fork is to be created.
     * 
     */
    public Output<Optional<String>> parentRepositoryId() {
        return Codegen.optional(this.parentRepositoryId);
    }
    /**
     * The project ID or project name.
     * 
     */
    @Export(name="projectId", type=String.class, parameters={})
    private Output<String> projectId;

    /**
     * @return The project ID or project name.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }
    /**
     * Git HTTPS URL of the repository
     * 
     */
    @Export(name="remoteUrl", type=String.class, parameters={})
    private Output<String> remoteUrl;

    /**
     * @return Git HTTPS URL of the repository
     * 
     */
    public Output<String> remoteUrl() {
        return this.remoteUrl;
    }
    /**
     * Size in bytes.
     * 
     */
    @Export(name="size", type=Integer.class, parameters={})
    private Output<Integer> size;

    /**
     * @return Size in bytes.
     * 
     */
    public Output<Integer> size() {
        return this.size;
    }
    /**
     * Git SSH URL of the repository.
     * 
     */
    @Export(name="sshUrl", type=String.class, parameters={})
    private Output<String> sshUrl;

    /**
     * @return Git SSH URL of the repository.
     * 
     */
    public Output<String> sshUrl() {
        return this.sshUrl;
    }
    /**
     * REST API URL of the repository.
     * 
     */
    @Export(name="url", type=String.class, parameters={})
    private Output<String> url;

    /**
     * @return REST API URL of the repository.
     * 
     */
    public Output<String> url() {
        return this.url;
    }
    /**
     * Web link to the repository.
     * 
     */
    @Export(name="webUrl", type=String.class, parameters={})
    private Output<String> webUrl;

    /**
     * @return Web link to the repository.
     * 
     */
    public Output<String> webUrl() {
        return this.webUrl;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Git(String name) {
        this(name, GitArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Git(String name, GitArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Git(String name, GitArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azuredevops:index/git:Git", name, args == null ? GitArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Git(String name, Output<String> id, @Nullable GitState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azuredevops:index/git:Git", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .aliases(List.of(
                Output.of(Alias.builder().type("azuredevops:Repository/git:Git").build())
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Git get(String name, Output<String> id, @Nullable GitState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Git(name, id, state, options);
    }
}
