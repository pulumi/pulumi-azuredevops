// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops;

import com.pulumi.azuredevops.GitArgs;
import com.pulumi.azuredevops.Utilities;
import com.pulumi.azuredevops.inputs.GitState;
import com.pulumi.azuredevops.outputs.GitInitialization;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Import
 * 
 * Azure DevOps Repositories can be imported using the repo name or by the repo Guid e.g.
 * 
 * ```sh
 * $ pulumi import azuredevops:index/git:Git example projectName/repoName
 * ```
 * 
 * or
 * 
 * ```sh
 * $ pulumi import azuredevops:index/git:Git example projectName/00000000-0000-0000-0000-000000000000
 * ```
 * 
 */
@ResourceType(type="azuredevops:index/git:Git")
public class Git extends com.pulumi.resources.CustomResource {
    /**
     * The ref of the default branch. Will be used as the branch name for initialized repositories.
     * 
     */
    @Export(name="defaultBranch", refs={String.class}, tree="[0]")
    private Output<String> defaultBranch;

    /**
     * @return The ref of the default branch. Will be used as the branch name for initialized repositories.
     * 
     */
    public Output<String> defaultBranch() {
        return this.defaultBranch;
    }
    /**
     * The ability to disable or enable the repository. Defaults to `false`.
     * 
     */
    @Export(name="disabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> disabled;

    /**
     * @return The ability to disable or enable the repository. Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> disabled() {
        return Codegen.optional(this.disabled);
    }
    /**
     * A `initialization` block as documented below.
     * 
     */
    @Export(name="initialization", refs={GitInitialization.class}, tree="[0]")
    private Output<GitInitialization> initialization;

    /**
     * @return A `initialization` block as documented below.
     * 
     */
    public Output<GitInitialization> initialization() {
        return this.initialization;
    }
    /**
     * True if the repository was created as a fork.
     * 
     */
    @Export(name="isFork", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> isFork;

    /**
     * @return True if the repository was created as a fork.
     * 
     */
    public Output<Boolean> isFork() {
        return this.isFork;
    }
    /**
     * The name of the git repository.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the git repository.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of a Git project from which a fork is to be created.
     * 
     */
    @Export(name="parentRepositoryId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> parentRepositoryId;

    /**
     * @return The ID of a Git project from which a fork is to be created.
     * 
     */
    public Output<Optional<String>> parentRepositoryId() {
        return Codegen.optional(this.parentRepositoryId);
    }
    /**
     * The project ID or project name.
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output<String> projectId;

    /**
     * @return The project ID or project name.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }
    /**
     * Git HTTPS URL of the repository
     * 
     */
    @Export(name="remoteUrl", refs={String.class}, tree="[0]")
    private Output<String> remoteUrl;

    /**
     * @return Git HTTPS URL of the repository
     * 
     */
    public Output<String> remoteUrl() {
        return this.remoteUrl;
    }
    /**
     * Size in bytes.
     * 
     */
    @Export(name="size", refs={Integer.class}, tree="[0]")
    private Output<Integer> size;

    /**
     * @return Size in bytes.
     * 
     */
    public Output<Integer> size() {
        return this.size;
    }
    /**
     * Git SSH URL of the repository.
     * 
     */
    @Export(name="sshUrl", refs={String.class}, tree="[0]")
    private Output<String> sshUrl;

    /**
     * @return Git SSH URL of the repository.
     * 
     */
    public Output<String> sshUrl() {
        return this.sshUrl;
    }
    /**
     * REST API URL of the repository.
     * 
     */
    @Export(name="url", refs={String.class}, tree="[0]")
    private Output<String> url;

    /**
     * @return REST API URL of the repository.
     * 
     */
    public Output<String> url() {
        return this.url;
    }
    /**
     * Web link to the repository.
     * 
     */
    @Export(name="webUrl", refs={String.class}, tree="[0]")
    private Output<String> webUrl;

    /**
     * @return Web link to the repository.
     * 
     */
    public Output<String> webUrl() {
        return this.webUrl;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Git(java.lang.String name) {
        this(name, GitArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Git(java.lang.String name, GitArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Git(java.lang.String name, GitArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azuredevops:index/git:Git", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Git(java.lang.String name, Output<java.lang.String> id, @Nullable GitState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azuredevops:index/git:Git", name, state, makeResourceOptions(options, id), false);
    }

    private static GitArgs makeArgs(GitArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? GitArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Git get(java.lang.String name, Output<java.lang.String> id, @Nullable GitState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Git(name, id, state, options);
    }
}
