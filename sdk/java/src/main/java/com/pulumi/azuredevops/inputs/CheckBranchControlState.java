// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CheckBranchControlState extends com.pulumi.resources.ResourceArgs {

    public static final CheckBranchControlState Empty = new CheckBranchControlState();

    /**
     * The branches allowed to use the resource. Specify a comma separated list of allowed branches in `refs/heads/branch_name` format. To allow deployments from all branches, specify `*` . `refs/heads/features/* , refs/heads/releases/*` restricts deployments to all branches under features/ or releases/ . Defaults to `*`.
     * 
     */
    @Import(name="allowedBranches")
    private @Nullable Output<String> allowedBranches;

    /**
     * @return The branches allowed to use the resource. Specify a comma separated list of allowed branches in `refs/heads/branch_name` format. To allow deployments from all branches, specify `*` . `refs/heads/features/* , refs/heads/releases/*` restricts deployments to all branches under features/ or releases/ . Defaults to `*`.
     * 
     */
    public Optional<Output<String>> allowedBranches() {
        return Optional.ofNullable(this.allowedBranches);
    }

    /**
     * The name of the branch control check displayed in the web UI.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The name of the branch control check displayed in the web UI.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Allow deployment from branches for which protection status could not be obtained. Only relevant when verify_branch_protection is `true`. Defaults to `false`.
     * 
     */
    @Import(name="ignoreUnknownProtectionStatus")
    private @Nullable Output<Boolean> ignoreUnknownProtectionStatus;

    /**
     * @return Allow deployment from branches for which protection status could not be obtained. Only relevant when verify_branch_protection is `true`. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> ignoreUnknownProtectionStatus() {
        return Optional.ofNullable(this.ignoreUnknownProtectionStatus);
    }

    /**
     * The project ID.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The project ID.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The ID of the resource being protected by the check.
     * 
     */
    @Import(name="targetResourceId")
    private @Nullable Output<String> targetResourceId;

    /**
     * @return The ID of the resource being protected by the check.
     * 
     */
    public Optional<Output<String>> targetResourceId() {
        return Optional.ofNullable(this.targetResourceId);
    }

    /**
     * The type of resource being protected by the check. Valid values: `endpoint`, `environment`, `queue`, `repository`, `securefile`, `variablegroup`.
     * 
     */
    @Import(name="targetResourceType")
    private @Nullable Output<String> targetResourceType;

    /**
     * @return The type of resource being protected by the check. Valid values: `endpoint`, `environment`, `queue`, `repository`, `securefile`, `variablegroup`.
     * 
     */
    public Optional<Output<String>> targetResourceType() {
        return Optional.ofNullable(this.targetResourceType);
    }

    /**
     * The timeout in minutes for the branch control check. Defaults to `1440`.
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<Integer> timeout;

    /**
     * @return The timeout in minutes for the branch control check. Defaults to `1440`.
     * 
     */
    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    /**
     * Validate the branches being deployed are protected. Defaults to `false`.
     * 
     */
    @Import(name="verifyBranchProtection")
    private @Nullable Output<Boolean> verifyBranchProtection;

    /**
     * @return Validate the branches being deployed are protected. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> verifyBranchProtection() {
        return Optional.ofNullable(this.verifyBranchProtection);
    }

    /**
     * The version of the check.
     * 
     */
    @Import(name="version")
    private @Nullable Output<Integer> version;

    /**
     * @return The version of the check.
     * 
     */
    public Optional<Output<Integer>> version() {
        return Optional.ofNullable(this.version);
    }

    private CheckBranchControlState() {}

    private CheckBranchControlState(CheckBranchControlState $) {
        this.allowedBranches = $.allowedBranches;
        this.displayName = $.displayName;
        this.ignoreUnknownProtectionStatus = $.ignoreUnknownProtectionStatus;
        this.projectId = $.projectId;
        this.targetResourceId = $.targetResourceId;
        this.targetResourceType = $.targetResourceType;
        this.timeout = $.timeout;
        this.verifyBranchProtection = $.verifyBranchProtection;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CheckBranchControlState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CheckBranchControlState $;

        public Builder() {
            $ = new CheckBranchControlState();
        }

        public Builder(CheckBranchControlState defaults) {
            $ = new CheckBranchControlState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedBranches The branches allowed to use the resource. Specify a comma separated list of allowed branches in `refs/heads/branch_name` format. To allow deployments from all branches, specify `*` . `refs/heads/features/* , refs/heads/releases/*` restricts deployments to all branches under features/ or releases/ . Defaults to `*`.
         * 
         * @return builder
         * 
         */
        public Builder allowedBranches(@Nullable Output<String> allowedBranches) {
            $.allowedBranches = allowedBranches;
            return this;
        }

        /**
         * @param allowedBranches The branches allowed to use the resource. Specify a comma separated list of allowed branches in `refs/heads/branch_name` format. To allow deployments from all branches, specify `*` . `refs/heads/features/* , refs/heads/releases/*` restricts deployments to all branches under features/ or releases/ . Defaults to `*`.
         * 
         * @return builder
         * 
         */
        public Builder allowedBranches(String allowedBranches) {
            return allowedBranches(Output.of(allowedBranches));
        }

        /**
         * @param displayName The name of the branch control check displayed in the web UI.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The name of the branch control check displayed in the web UI.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param ignoreUnknownProtectionStatus Allow deployment from branches for which protection status could not be obtained. Only relevant when verify_branch_protection is `true`. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder ignoreUnknownProtectionStatus(@Nullable Output<Boolean> ignoreUnknownProtectionStatus) {
            $.ignoreUnknownProtectionStatus = ignoreUnknownProtectionStatus;
            return this;
        }

        /**
         * @param ignoreUnknownProtectionStatus Allow deployment from branches for which protection status could not be obtained. Only relevant when verify_branch_protection is `true`. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder ignoreUnknownProtectionStatus(Boolean ignoreUnknownProtectionStatus) {
            return ignoreUnknownProtectionStatus(Output.of(ignoreUnknownProtectionStatus));
        }

        /**
         * @param projectId The project ID.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The project ID.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param targetResourceId The ID of the resource being protected by the check.
         * 
         * @return builder
         * 
         */
        public Builder targetResourceId(@Nullable Output<String> targetResourceId) {
            $.targetResourceId = targetResourceId;
            return this;
        }

        /**
         * @param targetResourceId The ID of the resource being protected by the check.
         * 
         * @return builder
         * 
         */
        public Builder targetResourceId(String targetResourceId) {
            return targetResourceId(Output.of(targetResourceId));
        }

        /**
         * @param targetResourceType The type of resource being protected by the check. Valid values: `endpoint`, `environment`, `queue`, `repository`, `securefile`, `variablegroup`.
         * 
         * @return builder
         * 
         */
        public Builder targetResourceType(@Nullable Output<String> targetResourceType) {
            $.targetResourceType = targetResourceType;
            return this;
        }

        /**
         * @param targetResourceType The type of resource being protected by the check. Valid values: `endpoint`, `environment`, `queue`, `repository`, `securefile`, `variablegroup`.
         * 
         * @return builder
         * 
         */
        public Builder targetResourceType(String targetResourceType) {
            return targetResourceType(Output.of(targetResourceType));
        }

        /**
         * @param timeout The timeout in minutes for the branch control check. Defaults to `1440`.
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout The timeout in minutes for the branch control check. Defaults to `1440`.
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        /**
         * @param verifyBranchProtection Validate the branches being deployed are protected. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder verifyBranchProtection(@Nullable Output<Boolean> verifyBranchProtection) {
            $.verifyBranchProtection = verifyBranchProtection;
            return this;
        }

        /**
         * @param verifyBranchProtection Validate the branches being deployed are protected. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder verifyBranchProtection(Boolean verifyBranchProtection) {
            return verifyBranchProtection(Output.of(verifyBranchProtection));
        }

        /**
         * @param version The version of the check.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<Integer> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version of the check.
         * 
         * @return builder
         * 
         */
        public Builder version(Integer version) {
            return version(Output.of(version));
        }

        public CheckBranchControlState build() {
            return $;
        }
    }

}
