// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceEndpointServiceFabricCertificate {
    /**
     * @return Base64 encoding of the cluster&#39;s client certificate file.
     * 
     */
    private String clientCertificate;
    /**
     * @return Password for the certificate.
     * 
     */
    private @Nullable String clientCertificatePassword;
    /**
     * @return The common name(s) of the cluster&#39;s certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple common names with a comma (&#39;,&#39;)
     * 
     */
    private @Nullable String serverCertificateCommonName;
    /**
     * @return Verification mode for the cluster. Possible values are: `Thumbprint`, `CommonName`.
     * 
     */
    private String serverCertificateLookup;
    /**
     * @return The thumbprint(s) of the cluster&#39;s certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple thumbprints with a comma (&#39;,&#39;)
     * 
     */
    private @Nullable String serverCertificateThumbprint;

    private ServiceEndpointServiceFabricCertificate() {}
    /**
     * @return Base64 encoding of the cluster&#39;s client certificate file.
     * 
     */
    public String clientCertificate() {
        return this.clientCertificate;
    }
    /**
     * @return Password for the certificate.
     * 
     */
    public Optional<String> clientCertificatePassword() {
        return Optional.ofNullable(this.clientCertificatePassword);
    }
    /**
     * @return The common name(s) of the cluster&#39;s certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple common names with a comma (&#39;,&#39;)
     * 
     */
    public Optional<String> serverCertificateCommonName() {
        return Optional.ofNullable(this.serverCertificateCommonName);
    }
    /**
     * @return Verification mode for the cluster. Possible values are: `Thumbprint`, `CommonName`.
     * 
     */
    public String serverCertificateLookup() {
        return this.serverCertificateLookup;
    }
    /**
     * @return The thumbprint(s) of the cluster&#39;s certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple thumbprints with a comma (&#39;,&#39;)
     * 
     */
    public Optional<String> serverCertificateThumbprint() {
        return Optional.ofNullable(this.serverCertificateThumbprint);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceEndpointServiceFabricCertificate defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String clientCertificate;
        private @Nullable String clientCertificatePassword;
        private @Nullable String serverCertificateCommonName;
        private String serverCertificateLookup;
        private @Nullable String serverCertificateThumbprint;
        public Builder() {}
        public Builder(ServiceEndpointServiceFabricCertificate defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientCertificate = defaults.clientCertificate;
    	      this.clientCertificatePassword = defaults.clientCertificatePassword;
    	      this.serverCertificateCommonName = defaults.serverCertificateCommonName;
    	      this.serverCertificateLookup = defaults.serverCertificateLookup;
    	      this.serverCertificateThumbprint = defaults.serverCertificateThumbprint;
        }

        @CustomType.Setter
        public Builder clientCertificate(String clientCertificate) {
            if (clientCertificate == null) {
              throw new MissingRequiredPropertyException("ServiceEndpointServiceFabricCertificate", "clientCertificate");
            }
            this.clientCertificate = clientCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder clientCertificatePassword(@Nullable String clientCertificatePassword) {

            this.clientCertificatePassword = clientCertificatePassword;
            return this;
        }
        @CustomType.Setter
        public Builder serverCertificateCommonName(@Nullable String serverCertificateCommonName) {

            this.serverCertificateCommonName = serverCertificateCommonName;
            return this;
        }
        @CustomType.Setter
        public Builder serverCertificateLookup(String serverCertificateLookup) {
            if (serverCertificateLookup == null) {
              throw new MissingRequiredPropertyException("ServiceEndpointServiceFabricCertificate", "serverCertificateLookup");
            }
            this.serverCertificateLookup = serverCertificateLookup;
            return this;
        }
        @CustomType.Setter
        public Builder serverCertificateThumbprint(@Nullable String serverCertificateThumbprint) {

            this.serverCertificateThumbprint = serverCertificateThumbprint;
            return this;
        }
        public ServiceEndpointServiceFabricCertificate build() {
            final var _resultValue = new ServiceEndpointServiceFabricCertificate();
            _resultValue.clientCertificate = clientCertificate;
            _resultValue.clientCertificatePassword = clientCertificatePassword;
            _resultValue.serverCertificateCommonName = serverCertificateCommonName;
            _resultValue.serverCertificateLookup = serverCertificateLookup;
            _resultValue.serverCertificateThumbprint = serverCertificateThumbprint;
            return _resultValue;
        }
    }
}
