// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceendpointCheckmarxOneArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceendpointCheckmarxOneArgs Empty = new ServiceendpointCheckmarxOneArgs();

    /**
     * The account of the Checkmarx One. Conflict with `client_id` and `client_secret`.
     * 
     */
    @Import(name="apiKey")
    private @Nullable Output<String> apiKey;

    /**
     * @return The account of the Checkmarx One. Conflict with `client_id` and `client_secret`.
     * 
     */
    public Optional<Output<String>> apiKey() {
        return Optional.ofNullable(this.apiKey);
    }

    /**
     * The URL of Checkmarx Authorization. Used when using `client_id` and `client_secret` authorization.
     * 
     */
    @Import(name="authorizationUrl")
    private @Nullable Output<String> authorizationUrl;

    /**
     * @return The URL of Checkmarx Authorization. Used when using `client_id` and `client_secret` authorization.
     * 
     */
    public Optional<Output<String>> authorizationUrl() {
        return Optional.ofNullable(this.authorizationUrl);
    }

    /**
     * The Client ID of the Checkmarx One. Conflict with `api_key`
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return The Client ID of the Checkmarx One. Conflict with `api_key`
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * The Client Secret of the Checkmarx One. Conflict with `api_key`
     * 
     * &gt; **Note** At least one of `api_key` and `client_id`, `client_secret` must be set
     * 
     */
    @Import(name="clientSecret")
    private @Nullable Output<String> clientSecret;

    /**
     * @return The Client Secret of the Checkmarx One. Conflict with `api_key`
     * 
     * &gt; **Note** At least one of `api_key` and `client_id`, `client_secret` must be set
     * 
     */
    public Optional<Output<String>> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The ID of the project.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return The ID of the project.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * The Server URL of the Checkmarx One Service.
     * 
     */
    @Import(name="serverUrl", required=true)
    private Output<String> serverUrl;

    /**
     * @return The Server URL of the Checkmarx One Service.
     * 
     */
    public Output<String> serverUrl() {
        return this.serverUrl;
    }

    /**
     * The Service Endpoint name.
     * 
     */
    @Import(name="serviceEndpointName", required=true)
    private Output<String> serviceEndpointName;

    /**
     * @return The Service Endpoint name.
     * 
     */
    public Output<String> serviceEndpointName() {
        return this.serviceEndpointName;
    }

    private ServiceendpointCheckmarxOneArgs() {}

    private ServiceendpointCheckmarxOneArgs(ServiceendpointCheckmarxOneArgs $) {
        this.apiKey = $.apiKey;
        this.authorizationUrl = $.authorizationUrl;
        this.clientId = $.clientId;
        this.clientSecret = $.clientSecret;
        this.description = $.description;
        this.projectId = $.projectId;
        this.serverUrl = $.serverUrl;
        this.serviceEndpointName = $.serviceEndpointName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceendpointCheckmarxOneArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceendpointCheckmarxOneArgs $;

        public Builder() {
            $ = new ServiceendpointCheckmarxOneArgs();
        }

        public Builder(ServiceendpointCheckmarxOneArgs defaults) {
            $ = new ServiceendpointCheckmarxOneArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiKey The account of the Checkmarx One. Conflict with `client_id` and `client_secret`.
         * 
         * @return builder
         * 
         */
        public Builder apiKey(@Nullable Output<String> apiKey) {
            $.apiKey = apiKey;
            return this;
        }

        /**
         * @param apiKey The account of the Checkmarx One. Conflict with `client_id` and `client_secret`.
         * 
         * @return builder
         * 
         */
        public Builder apiKey(String apiKey) {
            return apiKey(Output.of(apiKey));
        }

        /**
         * @param authorizationUrl The URL of Checkmarx Authorization. Used when using `client_id` and `client_secret` authorization.
         * 
         * @return builder
         * 
         */
        public Builder authorizationUrl(@Nullable Output<String> authorizationUrl) {
            $.authorizationUrl = authorizationUrl;
            return this;
        }

        /**
         * @param authorizationUrl The URL of Checkmarx Authorization. Used when using `client_id` and `client_secret` authorization.
         * 
         * @return builder
         * 
         */
        public Builder authorizationUrl(String authorizationUrl) {
            return authorizationUrl(Output.of(authorizationUrl));
        }

        /**
         * @param clientId The Client ID of the Checkmarx One. Conflict with `api_key`
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId The Client ID of the Checkmarx One. Conflict with `api_key`
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clientSecret The Client Secret of the Checkmarx One. Conflict with `api_key`
         * 
         * &gt; **Note** At least one of `api_key` and `client_id`, `client_secret` must be set
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(@Nullable Output<String> clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        /**
         * @param clientSecret The Client Secret of the Checkmarx One. Conflict with `api_key`
         * 
         * &gt; **Note** At least one of `api_key` and `client_id`, `client_secret` must be set
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(String clientSecret) {
            return clientSecret(Output.of(clientSecret));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param projectId The ID of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The ID of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param serverUrl The Server URL of the Checkmarx One Service.
         * 
         * @return builder
         * 
         */
        public Builder serverUrl(Output<String> serverUrl) {
            $.serverUrl = serverUrl;
            return this;
        }

        /**
         * @param serverUrl The Server URL of the Checkmarx One Service.
         * 
         * @return builder
         * 
         */
        public Builder serverUrl(String serverUrl) {
            return serverUrl(Output.of(serverUrl));
        }

        /**
         * @param serviceEndpointName The Service Endpoint name.
         * 
         * @return builder
         * 
         */
        public Builder serviceEndpointName(Output<String> serviceEndpointName) {
            $.serviceEndpointName = serviceEndpointName;
            return this;
        }

        /**
         * @param serviceEndpointName The Service Endpoint name.
         * 
         * @return builder
         * 
         */
        public Builder serviceEndpointName(String serviceEndpointName) {
            return serviceEndpointName(Output.of(serviceEndpointName));
        }

        public ServiceendpointCheckmarxOneArgs build() {
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("ServiceendpointCheckmarxOneArgs", "projectId");
            }
            if ($.serverUrl == null) {
                throw new MissingRequiredPropertyException("ServiceendpointCheckmarxOneArgs", "serverUrl");
            }
            if ($.serviceEndpointName == null) {
                throw new MissingRequiredPropertyException("ServiceendpointCheckmarxOneArgs", "serviceEndpointName");
            }
            return $;
        }
    }

}
