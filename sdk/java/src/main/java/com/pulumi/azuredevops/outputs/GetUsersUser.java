// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetUsersUser {
    /**
     * @return The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.
     * 
     */
    private String descriptor;
    /**
     * @return This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.
     * 
     */
    private String displayName;
    /**
     * @return The user ID.
     * 
     */
    private String id;
    /**
     * @return The email address of record for a given graph member. This may be different than the principal name.
     * 
     */
    private String mailAddress;
    /**
     * @return The type of source provider for the `origin_id` parameter (ex:AD, AAD, MSA) The supported origins are listed below.
     * 
     */
    private String origin;
    /**
     * @return The unique identifier from the system of origin.
     * 
     * DataSource without specifying any arguments will return all users inside an organization.
     * 
     * List of possible subject types
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *     }
     * }
     * ```
     * 
     * List of possible origins
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *     }
     * }
     * ```
     * 
     */
    private @Nullable String originId;
    /**
     * @return The PrincipalName of this graph member from the source provider.
     * 
     */
    private String principalName;

    private GetUsersUser() {}
    /**
     * @return The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.
     * 
     */
    public String descriptor() {
        return this.descriptor;
    }
    /**
     * @return This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The user ID.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The email address of record for a given graph member. This may be different than the principal name.
     * 
     */
    public String mailAddress() {
        return this.mailAddress;
    }
    /**
     * @return The type of source provider for the `origin_id` parameter (ex:AD, AAD, MSA) The supported origins are listed below.
     * 
     */
    public String origin() {
        return this.origin;
    }
    /**
     * @return The unique identifier from the system of origin.
     * 
     * DataSource without specifying any arguments will return all users inside an organization.
     * 
     * List of possible subject types
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *     }
     * }
     * ```
     * 
     * List of possible origins
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *     }
     * }
     * ```
     * 
     */
    public Optional<String> originId() {
        return Optional.ofNullable(this.originId);
    }
    /**
     * @return The PrincipalName of this graph member from the source provider.
     * 
     */
    public String principalName() {
        return this.principalName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUsersUser defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String descriptor;
        private String displayName;
        private String id;
        private String mailAddress;
        private String origin;
        private @Nullable String originId;
        private String principalName;
        public Builder() {}
        public Builder(GetUsersUser defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.descriptor = defaults.descriptor;
    	      this.displayName = defaults.displayName;
    	      this.id = defaults.id;
    	      this.mailAddress = defaults.mailAddress;
    	      this.origin = defaults.origin;
    	      this.originId = defaults.originId;
    	      this.principalName = defaults.principalName;
        }

        @CustomType.Setter
        public Builder descriptor(String descriptor) {
            this.descriptor = Objects.requireNonNull(descriptor);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder mailAddress(String mailAddress) {
            this.mailAddress = Objects.requireNonNull(mailAddress);
            return this;
        }
        @CustomType.Setter
        public Builder origin(String origin) {
            this.origin = Objects.requireNonNull(origin);
            return this;
        }
        @CustomType.Setter
        public Builder originId(@Nullable String originId) {
            this.originId = originId;
            return this;
        }
        @CustomType.Setter
        public Builder principalName(String principalName) {
            this.principalName = Objects.requireNonNull(principalName);
            return this;
        }
        public GetUsersUser build() {
            final var o = new GetUsersUser();
            o.descriptor = descriptor;
            o.displayName = displayName;
            o.id = id;
            o.mailAddress = mailAddress;
            o.origin = origin;
            o.originId = originId;
            o.principalName = principalName;
            return o;
        }
    }
}
