// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GroupMembershipArgs extends com.pulumi.resources.ResourceArgs {

    public static final GroupMembershipArgs Empty = new GroupMembershipArgs();

    /**
     * The descriptor of the group being managed.
     * 
     */
    @Import(name="group", required=true)
    private Output<String> group;

    /**
     * @return The descriptor of the group being managed.
     * 
     */
    public Output<String> group() {
        return this.group;
    }

    /**
     * A list of user or group descriptors that will become members of the group.
     * 
     * &gt; **NOTE** 1. It&#39;s possible to define group members both within the `azuredevops.GroupMembership resource` via the members block and by using the `azuredevops.Group` resource. However it&#39;s not possible to use both methods to manage group members, since there&#39;ll be conflicts.
     * &lt;br&gt;2. The `members` uses `descriptor` as the identifier not Resource ID or others.
     * 
     */
    @Import(name="members", required=true)
    private Output<List<String>> members;

    /**
     * @return A list of user or group descriptors that will become members of the group.
     * 
     * &gt; **NOTE** 1. It&#39;s possible to define group members both within the `azuredevops.GroupMembership resource` via the members block and by using the `azuredevops.Group` resource. However it&#39;s not possible to use both methods to manage group members, since there&#39;ll be conflicts.
     * &lt;br&gt;2. The `members` uses `descriptor` as the identifier not Resource ID or others.
     * 
     */
    public Output<List<String>> members() {
        return this.members;
    }

    /**
     * The mode how the resource manages group members.
     * 
     * ~&gt;**NOTE** 1. `mode = add`: the resource will ensure that all specified members will be part of the referenced group
     * &lt;br&gt;2. `mode = overwrite`: the resource will replace all existing members with the members specified within the `members` block
     * &lt;br&gt;3. To clear all members from a group, specify an empty list of descriptors in the `members` attribute and set the `mode` member to `overwrite`.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return The mode how the resource manages group members.
     * 
     * ~&gt;**NOTE** 1. `mode = add`: the resource will ensure that all specified members will be part of the referenced group
     * &lt;br&gt;2. `mode = overwrite`: the resource will replace all existing members with the members specified within the `members` block
     * &lt;br&gt;3. To clear all members from a group, specify an empty list of descriptors in the `members` attribute and set the `mode` member to `overwrite`.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    private GroupMembershipArgs() {}

    private GroupMembershipArgs(GroupMembershipArgs $) {
        this.group = $.group;
        this.members = $.members;
        this.mode = $.mode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupMembershipArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupMembershipArgs $;

        public Builder() {
            $ = new GroupMembershipArgs();
        }

        public Builder(GroupMembershipArgs defaults) {
            $ = new GroupMembershipArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param group The descriptor of the group being managed.
         * 
         * @return builder
         * 
         */
        public Builder group(Output<String> group) {
            $.group = group;
            return this;
        }

        /**
         * @param group The descriptor of the group being managed.
         * 
         * @return builder
         * 
         */
        public Builder group(String group) {
            return group(Output.of(group));
        }

        /**
         * @param members A list of user or group descriptors that will become members of the group.
         * 
         * &gt; **NOTE** 1. It&#39;s possible to define group members both within the `azuredevops.GroupMembership resource` via the members block and by using the `azuredevops.Group` resource. However it&#39;s not possible to use both methods to manage group members, since there&#39;ll be conflicts.
         * &lt;br&gt;2. The `members` uses `descriptor` as the identifier not Resource ID or others.
         * 
         * @return builder
         * 
         */
        public Builder members(Output<List<String>> members) {
            $.members = members;
            return this;
        }

        /**
         * @param members A list of user or group descriptors that will become members of the group.
         * 
         * &gt; **NOTE** 1. It&#39;s possible to define group members both within the `azuredevops.GroupMembership resource` via the members block and by using the `azuredevops.Group` resource. However it&#39;s not possible to use both methods to manage group members, since there&#39;ll be conflicts.
         * &lt;br&gt;2. The `members` uses `descriptor` as the identifier not Resource ID or others.
         * 
         * @return builder
         * 
         */
        public Builder members(List<String> members) {
            return members(Output.of(members));
        }

        /**
         * @param members A list of user or group descriptors that will become members of the group.
         * 
         * &gt; **NOTE** 1. It&#39;s possible to define group members both within the `azuredevops.GroupMembership resource` via the members block and by using the `azuredevops.Group` resource. However it&#39;s not possible to use both methods to manage group members, since there&#39;ll be conflicts.
         * &lt;br&gt;2. The `members` uses `descriptor` as the identifier not Resource ID or others.
         * 
         * @return builder
         * 
         */
        public Builder members(String... members) {
            return members(List.of(members));
        }

        /**
         * @param mode The mode how the resource manages group members.
         * 
         * ~&gt;**NOTE** 1. `mode = add`: the resource will ensure that all specified members will be part of the referenced group
         * &lt;br&gt;2. `mode = overwrite`: the resource will replace all existing members with the members specified within the `members` block
         * &lt;br&gt;3. To clear all members from a group, specify an empty list of descriptors in the `members` attribute and set the `mode` member to `overwrite`.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The mode how the resource manages group members.
         * 
         * ~&gt;**NOTE** 1. `mode = add`: the resource will ensure that all specified members will be part of the referenced group
         * &lt;br&gt;2. `mode = overwrite`: the resource will replace all existing members with the members specified within the `members` block
         * &lt;br&gt;3. To clear all members from a group, specify an empty list of descriptors in the `members` attribute and set the `mode` member to `overwrite`.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        public GroupMembershipArgs build() {
            if ($.group == null) {
                throw new MissingRequiredPropertyException("GroupMembershipArgs", "group");
            }
            if ($.members == null) {
                throw new MissingRequiredPropertyException("GroupMembershipArgs", "members");
            }
            return $;
        }
    }

}
