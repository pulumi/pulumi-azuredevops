// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServicehookStorageQueuePipelinesRunStateChangedEventArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServicehookStorageQueuePipelinesRunStateChangedEventArgs Empty = new ServicehookStorageQueuePipelinesRunStateChangedEventArgs();

    /**
     * The pipeline ID that will generate an event. If not specified, all pipelines in the project will trigger the event.
     * 
     */
    @Import(name="pipelineId")
    private @Nullable Output<String> pipelineId;

    /**
     * @return The pipeline ID that will generate an event. If not specified, all pipelines in the project will trigger the event.
     * 
     */
    public Optional<Output<String>> pipelineId() {
        return Optional.ofNullable(this.pipelineId);
    }

    /**
     * Which run result should generate an event. Only valid if publishedEvent is `RunStateChanged`. If not specified, all results will trigger the event.
     * 
     */
    @Import(name="runResultFilter")
    private @Nullable Output<String> runResultFilter;

    /**
     * @return Which run result should generate an event. Only valid if publishedEvent is `RunStateChanged`. If not specified, all results will trigger the event.
     * 
     */
    public Optional<Output<String>> runResultFilter() {
        return Optional.ofNullable(this.runResultFilter);
    }

    /**
     * Which run state should generate an event. Only valid if publishedEvent is `RunStateChanged`. If not specified, all states will trigger the event.
     * 
     */
    @Import(name="runStateFilter")
    private @Nullable Output<String> runStateFilter;

    /**
     * @return Which run state should generate an event. Only valid if publishedEvent is `RunStateChanged`. If not specified, all states will trigger the event.
     * 
     */
    public Optional<Output<String>> runStateFilter() {
        return Optional.ofNullable(this.runStateFilter);
    }

    private ServicehookStorageQueuePipelinesRunStateChangedEventArgs() {}

    private ServicehookStorageQueuePipelinesRunStateChangedEventArgs(ServicehookStorageQueuePipelinesRunStateChangedEventArgs $) {
        this.pipelineId = $.pipelineId;
        this.runResultFilter = $.runResultFilter;
        this.runStateFilter = $.runStateFilter;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServicehookStorageQueuePipelinesRunStateChangedEventArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServicehookStorageQueuePipelinesRunStateChangedEventArgs $;

        public Builder() {
            $ = new ServicehookStorageQueuePipelinesRunStateChangedEventArgs();
        }

        public Builder(ServicehookStorageQueuePipelinesRunStateChangedEventArgs defaults) {
            $ = new ServicehookStorageQueuePipelinesRunStateChangedEventArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param pipelineId The pipeline ID that will generate an event. If not specified, all pipelines in the project will trigger the event.
         * 
         * @return builder
         * 
         */
        public Builder pipelineId(@Nullable Output<String> pipelineId) {
            $.pipelineId = pipelineId;
            return this;
        }

        /**
         * @param pipelineId The pipeline ID that will generate an event. If not specified, all pipelines in the project will trigger the event.
         * 
         * @return builder
         * 
         */
        public Builder pipelineId(String pipelineId) {
            return pipelineId(Output.of(pipelineId));
        }

        /**
         * @param runResultFilter Which run result should generate an event. Only valid if publishedEvent is `RunStateChanged`. If not specified, all results will trigger the event.
         * 
         * @return builder
         * 
         */
        public Builder runResultFilter(@Nullable Output<String> runResultFilter) {
            $.runResultFilter = runResultFilter;
            return this;
        }

        /**
         * @param runResultFilter Which run result should generate an event. Only valid if publishedEvent is `RunStateChanged`. If not specified, all results will trigger the event.
         * 
         * @return builder
         * 
         */
        public Builder runResultFilter(String runResultFilter) {
            return runResultFilter(Output.of(runResultFilter));
        }

        /**
         * @param runStateFilter Which run state should generate an event. Only valid if publishedEvent is `RunStateChanged`. If not specified, all states will trigger the event.
         * 
         * @return builder
         * 
         */
        public Builder runStateFilter(@Nullable Output<String> runStateFilter) {
            $.runStateFilter = runStateFilter;
            return this;
        }

        /**
         * @param runStateFilter Which run state should generate an event. Only valid if publishedEvent is `RunStateChanged`. If not specified, all states will trigger the event.
         * 
         * @return builder
         * 
         */
        public Builder runStateFilter(String runStateFilter) {
            return runStateFilter(Output.of(runStateFilter));
        }

        public ServicehookStorageQueuePipelinesRunStateChangedEventArgs build() {
            return $;
        }
    }

}
