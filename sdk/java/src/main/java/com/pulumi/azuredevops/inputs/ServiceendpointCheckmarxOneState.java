// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceendpointCheckmarxOneState extends com.pulumi.resources.ResourceArgs {

    public static final ServiceendpointCheckmarxOneState Empty = new ServiceendpointCheckmarxOneState();

    /**
     * The account of the Checkmarx One. Conflict with `clientId` and `clientSecret`.
     * 
     */
    @Import(name="apiKey")
    private @Nullable Output<String> apiKey;

    /**
     * @return The account of the Checkmarx One. Conflict with `clientId` and `clientSecret`.
     * 
     */
    public Optional<Output<String>> apiKey() {
        return Optional.ofNullable(this.apiKey);
    }

    @Import(name="authorization")
    private @Nullable Output<Map<String,String>> authorization;

    public Optional<Output<Map<String,String>>> authorization() {
        return Optional.ofNullable(this.authorization);
    }

    /**
     * The URL of Checkmarx Authorization. Used when using `clientId` and `clientSecret` authorization.
     * 
     */
    @Import(name="authorizationUrl")
    private @Nullable Output<String> authorizationUrl;

    /**
     * @return The URL of Checkmarx Authorization. Used when using `clientId` and `clientSecret` authorization.
     * 
     */
    public Optional<Output<String>> authorizationUrl() {
        return Optional.ofNullable(this.authorizationUrl);
    }

    /**
     * The Client ID of the Checkmarx One. Conflict with `apiKey`
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return The Client ID of the Checkmarx One. Conflict with `apiKey`
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * The Client Secret of the Checkmarx One. Conflict with `apiKey`
     * 
     * &gt; **Note** At least one of `apiKey` and `clientId`, `clientSecret` must be set
     * 
     */
    @Import(name="clientSecret")
    private @Nullable Output<String> clientSecret;

    /**
     * @return The Client Secret of the Checkmarx One. Conflict with `apiKey`
     * 
     * &gt; **Note** At least one of `apiKey` and `clientId`, `clientSecret` must be set
     * 
     */
    public Optional<Output<String>> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The ID of the project.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The ID of the project.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The Server URL of the Checkmarx One Service.
     * 
     */
    @Import(name="serverUrl")
    private @Nullable Output<String> serverUrl;

    /**
     * @return The Server URL of the Checkmarx One Service.
     * 
     */
    public Optional<Output<String>> serverUrl() {
        return Optional.ofNullable(this.serverUrl);
    }

    /**
     * The Service Endpoint name.
     * 
     */
    @Import(name="serviceEndpointName")
    private @Nullable Output<String> serviceEndpointName;

    /**
     * @return The Service Endpoint name.
     * 
     */
    public Optional<Output<String>> serviceEndpointName() {
        return Optional.ofNullable(this.serviceEndpointName);
    }

    private ServiceendpointCheckmarxOneState() {}

    private ServiceendpointCheckmarxOneState(ServiceendpointCheckmarxOneState $) {
        this.apiKey = $.apiKey;
        this.authorization = $.authorization;
        this.authorizationUrl = $.authorizationUrl;
        this.clientId = $.clientId;
        this.clientSecret = $.clientSecret;
        this.description = $.description;
        this.projectId = $.projectId;
        this.serverUrl = $.serverUrl;
        this.serviceEndpointName = $.serviceEndpointName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceendpointCheckmarxOneState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceendpointCheckmarxOneState $;

        public Builder() {
            $ = new ServiceendpointCheckmarxOneState();
        }

        public Builder(ServiceendpointCheckmarxOneState defaults) {
            $ = new ServiceendpointCheckmarxOneState(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiKey The account of the Checkmarx One. Conflict with `clientId` and `clientSecret`.
         * 
         * @return builder
         * 
         */
        public Builder apiKey(@Nullable Output<String> apiKey) {
            $.apiKey = apiKey;
            return this;
        }

        /**
         * @param apiKey The account of the Checkmarx One. Conflict with `clientId` and `clientSecret`.
         * 
         * @return builder
         * 
         */
        public Builder apiKey(String apiKey) {
            return apiKey(Output.of(apiKey));
        }

        public Builder authorization(@Nullable Output<Map<String,String>> authorization) {
            $.authorization = authorization;
            return this;
        }

        public Builder authorization(Map<String,String> authorization) {
            return authorization(Output.of(authorization));
        }

        /**
         * @param authorizationUrl The URL of Checkmarx Authorization. Used when using `clientId` and `clientSecret` authorization.
         * 
         * @return builder
         * 
         */
        public Builder authorizationUrl(@Nullable Output<String> authorizationUrl) {
            $.authorizationUrl = authorizationUrl;
            return this;
        }

        /**
         * @param authorizationUrl The URL of Checkmarx Authorization. Used when using `clientId` and `clientSecret` authorization.
         * 
         * @return builder
         * 
         */
        public Builder authorizationUrl(String authorizationUrl) {
            return authorizationUrl(Output.of(authorizationUrl));
        }

        /**
         * @param clientId The Client ID of the Checkmarx One. Conflict with `apiKey`
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId The Client ID of the Checkmarx One. Conflict with `apiKey`
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clientSecret The Client Secret of the Checkmarx One. Conflict with `apiKey`
         * 
         * &gt; **Note** At least one of `apiKey` and `clientId`, `clientSecret` must be set
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(@Nullable Output<String> clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        /**
         * @param clientSecret The Client Secret of the Checkmarx One. Conflict with `apiKey`
         * 
         * &gt; **Note** At least one of `apiKey` and `clientId`, `clientSecret` must be set
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(String clientSecret) {
            return clientSecret(Output.of(clientSecret));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param projectId The ID of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The ID of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param serverUrl The Server URL of the Checkmarx One Service.
         * 
         * @return builder
         * 
         */
        public Builder serverUrl(@Nullable Output<String> serverUrl) {
            $.serverUrl = serverUrl;
            return this;
        }

        /**
         * @param serverUrl The Server URL of the Checkmarx One Service.
         * 
         * @return builder
         * 
         */
        public Builder serverUrl(String serverUrl) {
            return serverUrl(Output.of(serverUrl));
        }

        /**
         * @param serviceEndpointName The Service Endpoint name.
         * 
         * @return builder
         * 
         */
        public Builder serviceEndpointName(@Nullable Output<String> serviceEndpointName) {
            $.serviceEndpointName = serviceEndpointName;
            return this;
        }

        /**
         * @param serviceEndpointName The Service Endpoint name.
         * 
         * @return builder
         * 
         */
        public Builder serviceEndpointName(String serviceEndpointName) {
            return serviceEndpointName(Output.of(serviceEndpointName));
        }

        public ServiceendpointCheckmarxOneState build() {
            return $;
        }
    }

}
