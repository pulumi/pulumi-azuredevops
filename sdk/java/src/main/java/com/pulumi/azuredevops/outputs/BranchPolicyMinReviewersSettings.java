// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.outputs;

import com.pulumi.azuredevops.outputs.BranchPolicyMinReviewersSettingsScope;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BranchPolicyMinReviewersSettings {
    /**
     * @return Allow completion even if some reviewers vote to wait or reject. Defaults to `false`.
     * 
     */
    private @Nullable Boolean allowCompletionWithRejectsOrWaits;
    /**
     * @return Prohibit the most recent pusher from approving their own changes. Defaults to `false`.
     * 
     */
    private @Nullable Boolean lastPusherCannotApprove;
    /**
     * @return On last iteration require vote. Defaults to `false`.
     * 
     */
    private @Nullable Boolean onLastIterationRequireVote;
    /**
     * @return When new changes are pushed reset all code reviewer votes. Defaults to `false`.
     * 
     * &gt; **Note:** If `on_push_reset_all_votes` is `true` then `on_push_reset_approved_votes` will be set to `true`. To enable `on_push_reset_approved_votes`, you need explicitly set `on_push_reset_all_votes` `false` or not configure.
     * 
     */
    private @Nullable Boolean onPushResetAllVotes;
    /**
     * @return When new changes are pushed reset all approval votes (does not reset votes to reject or wait). Defaults to `false`.
     * 
     */
    private @Nullable Boolean onPushResetApprovedVotes;
    /**
     * @return The number of reviewers needed to approve.
     * 
     */
    private @Nullable Integer reviewerCount;
    /**
     * @return A `scope` block as defined below. Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
     * 
     */
    private List<BranchPolicyMinReviewersSettingsScope> scopes;
    /**
     * @return Allow requesters to approve their own changes. Defaults to `false`.
     * 
     */
    private @Nullable Boolean submitterCanVote;

    private BranchPolicyMinReviewersSettings() {}
    /**
     * @return Allow completion even if some reviewers vote to wait or reject. Defaults to `false`.
     * 
     */
    public Optional<Boolean> allowCompletionWithRejectsOrWaits() {
        return Optional.ofNullable(this.allowCompletionWithRejectsOrWaits);
    }
    /**
     * @return Prohibit the most recent pusher from approving their own changes. Defaults to `false`.
     * 
     */
    public Optional<Boolean> lastPusherCannotApprove() {
        return Optional.ofNullable(this.lastPusherCannotApprove);
    }
    /**
     * @return On last iteration require vote. Defaults to `false`.
     * 
     */
    public Optional<Boolean> onLastIterationRequireVote() {
        return Optional.ofNullable(this.onLastIterationRequireVote);
    }
    /**
     * @return When new changes are pushed reset all code reviewer votes. Defaults to `false`.
     * 
     * &gt; **Note:** If `on_push_reset_all_votes` is `true` then `on_push_reset_approved_votes` will be set to `true`. To enable `on_push_reset_approved_votes`, you need explicitly set `on_push_reset_all_votes` `false` or not configure.
     * 
     */
    public Optional<Boolean> onPushResetAllVotes() {
        return Optional.ofNullable(this.onPushResetAllVotes);
    }
    /**
     * @return When new changes are pushed reset all approval votes (does not reset votes to reject or wait). Defaults to `false`.
     * 
     */
    public Optional<Boolean> onPushResetApprovedVotes() {
        return Optional.ofNullable(this.onPushResetApprovedVotes);
    }
    /**
     * @return The number of reviewers needed to approve.
     * 
     */
    public Optional<Integer> reviewerCount() {
        return Optional.ofNullable(this.reviewerCount);
    }
    /**
     * @return A `scope` block as defined below. Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
     * 
     */
    public List<BranchPolicyMinReviewersSettingsScope> scopes() {
        return this.scopes;
    }
    /**
     * @return Allow requesters to approve their own changes. Defaults to `false`.
     * 
     */
    public Optional<Boolean> submitterCanVote() {
        return Optional.ofNullable(this.submitterCanVote);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BranchPolicyMinReviewersSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean allowCompletionWithRejectsOrWaits;
        private @Nullable Boolean lastPusherCannotApprove;
        private @Nullable Boolean onLastIterationRequireVote;
        private @Nullable Boolean onPushResetAllVotes;
        private @Nullable Boolean onPushResetApprovedVotes;
        private @Nullable Integer reviewerCount;
        private List<BranchPolicyMinReviewersSettingsScope> scopes;
        private @Nullable Boolean submitterCanVote;
        public Builder() {}
        public Builder(BranchPolicyMinReviewersSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowCompletionWithRejectsOrWaits = defaults.allowCompletionWithRejectsOrWaits;
    	      this.lastPusherCannotApprove = defaults.lastPusherCannotApprove;
    	      this.onLastIterationRequireVote = defaults.onLastIterationRequireVote;
    	      this.onPushResetAllVotes = defaults.onPushResetAllVotes;
    	      this.onPushResetApprovedVotes = defaults.onPushResetApprovedVotes;
    	      this.reviewerCount = defaults.reviewerCount;
    	      this.scopes = defaults.scopes;
    	      this.submitterCanVote = defaults.submitterCanVote;
        }

        @CustomType.Setter
        public Builder allowCompletionWithRejectsOrWaits(@Nullable Boolean allowCompletionWithRejectsOrWaits) {

            this.allowCompletionWithRejectsOrWaits = allowCompletionWithRejectsOrWaits;
            return this;
        }
        @CustomType.Setter
        public Builder lastPusherCannotApprove(@Nullable Boolean lastPusherCannotApprove) {

            this.lastPusherCannotApprove = lastPusherCannotApprove;
            return this;
        }
        @CustomType.Setter
        public Builder onLastIterationRequireVote(@Nullable Boolean onLastIterationRequireVote) {

            this.onLastIterationRequireVote = onLastIterationRequireVote;
            return this;
        }
        @CustomType.Setter
        public Builder onPushResetAllVotes(@Nullable Boolean onPushResetAllVotes) {

            this.onPushResetAllVotes = onPushResetAllVotes;
            return this;
        }
        @CustomType.Setter
        public Builder onPushResetApprovedVotes(@Nullable Boolean onPushResetApprovedVotes) {

            this.onPushResetApprovedVotes = onPushResetApprovedVotes;
            return this;
        }
        @CustomType.Setter
        public Builder reviewerCount(@Nullable Integer reviewerCount) {

            this.reviewerCount = reviewerCount;
            return this;
        }
        @CustomType.Setter
        public Builder scopes(List<BranchPolicyMinReviewersSettingsScope> scopes) {
            if (scopes == null) {
              throw new MissingRequiredPropertyException("BranchPolicyMinReviewersSettings", "scopes");
            }
            this.scopes = scopes;
            return this;
        }
        public Builder scopes(BranchPolicyMinReviewersSettingsScope... scopes) {
            return scopes(List.of(scopes));
        }
        @CustomType.Setter
        public Builder submitterCanVote(@Nullable Boolean submitterCanVote) {

            this.submitterCanVote = submitterCanVote;
            return this;
        }
        public BranchPolicyMinReviewersSettings build() {
            final var _resultValue = new BranchPolicyMinReviewersSettings();
            _resultValue.allowCompletionWithRejectsOrWaits = allowCompletionWithRejectsOrWaits;
            _resultValue.lastPusherCannotApprove = lastPusherCannotApprove;
            _resultValue.onLastIterationRequireVote = onLastIterationRequireVote;
            _resultValue.onPushResetAllVotes = onPushResetAllVotes;
            _resultValue.onPushResetApprovedVotes = onPushResetApprovedVotes;
            _resultValue.reviewerCount = reviewerCount;
            _resultValue.scopes = scopes;
            _resultValue.submitterCanVote = submitterCanVote;
            return _resultValue;
        }
    }
}
