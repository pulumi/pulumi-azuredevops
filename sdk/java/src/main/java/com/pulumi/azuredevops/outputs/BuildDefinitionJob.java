// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.outputs;

import com.pulumi.azuredevops.outputs.BuildDefinitionJobDependency;
import com.pulumi.azuredevops.outputs.BuildDefinitionJobTarget;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BuildDefinitionJob {
    /**
     * @return Enables scripts and other processes launched by tasks to access the OAuth token through the `System.AccessToken` variable. Possible values: `true`, `false`. Defaults to `false`. Available when Job type is `AgentJob`
     * 
     */
    private @Nullable Boolean allowScriptsAuthAccessOption;
    /**
     * @return Specifies when this job should run. Can **Custom conditions** to specify more complex conditions. Possible values: `succeeded()`, `succeededOrFailed()`, `always()`, `failed()` etc. More details: [Pipeline conditions](https://learn.microsoft.com/en-us/azure/devops/pipelines/process/conditions?view=azure-devops)
     * 
     */
    private String condition;
    /**
     * @return A `dependencies` blocks as documented below. Define the job dependencies.
     * 
     */
    private @Nullable List<BuildDefinitionJobDependency> dependencies;
    /**
     * @return The job authorization scope for builds queued against this definition. Possible values are: `project`, `projectCollection`. Defaults to `projectCollection`.
     * 
     */
    private @Nullable String jobAuthorizationScope;
    /**
     * @return The job cancel timeout (in minutes) for builds cancelled by user for this definition. Possible values are between `0` and `60`. Defaults to `0`.
     * 
     */
    private @Nullable Integer jobCancelTimeoutInMinutes;
    /**
     * @return The job execution timeout (in minutes) for builds queued against this definition. Possible values are between `0` and `1000000000`. Defaults to `0`.
     * 
     */
    private @Nullable Integer jobTimeoutInMinutes;
    /**
     * @return The name of the job.
     * 
     */
    private String name;
    /**
     * @return The reference name of the job, can be used to define the job dependencies.
     * 
     */
    private String refName;
    /**
     * @return A `target` blocks as documented below.
     * 
     */
    private BuildDefinitionJobTarget target;

    private BuildDefinitionJob() {}
    /**
     * @return Enables scripts and other processes launched by tasks to access the OAuth token through the `System.AccessToken` variable. Possible values: `true`, `false`. Defaults to `false`. Available when Job type is `AgentJob`
     * 
     */
    public Optional<Boolean> allowScriptsAuthAccessOption() {
        return Optional.ofNullable(this.allowScriptsAuthAccessOption);
    }
    /**
     * @return Specifies when this job should run. Can **Custom conditions** to specify more complex conditions. Possible values: `succeeded()`, `succeededOrFailed()`, `always()`, `failed()` etc. More details: [Pipeline conditions](https://learn.microsoft.com/en-us/azure/devops/pipelines/process/conditions?view=azure-devops)
     * 
     */
    public String condition() {
        return this.condition;
    }
    /**
     * @return A `dependencies` blocks as documented below. Define the job dependencies.
     * 
     */
    public List<BuildDefinitionJobDependency> dependencies() {
        return this.dependencies == null ? List.of() : this.dependencies;
    }
    /**
     * @return The job authorization scope for builds queued against this definition. Possible values are: `project`, `projectCollection`. Defaults to `projectCollection`.
     * 
     */
    public Optional<String> jobAuthorizationScope() {
        return Optional.ofNullable(this.jobAuthorizationScope);
    }
    /**
     * @return The job cancel timeout (in minutes) for builds cancelled by user for this definition. Possible values are between `0` and `60`. Defaults to `0`.
     * 
     */
    public Optional<Integer> jobCancelTimeoutInMinutes() {
        return Optional.ofNullable(this.jobCancelTimeoutInMinutes);
    }
    /**
     * @return The job execution timeout (in minutes) for builds queued against this definition. Possible values are between `0` and `1000000000`. Defaults to `0`.
     * 
     */
    public Optional<Integer> jobTimeoutInMinutes() {
        return Optional.ofNullable(this.jobTimeoutInMinutes);
    }
    /**
     * @return The name of the job.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The reference name of the job, can be used to define the job dependencies.
     * 
     */
    public String refName() {
        return this.refName;
    }
    /**
     * @return A `target` blocks as documented below.
     * 
     */
    public BuildDefinitionJobTarget target() {
        return this.target;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BuildDefinitionJob defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean allowScriptsAuthAccessOption;
        private String condition;
        private @Nullable List<BuildDefinitionJobDependency> dependencies;
        private @Nullable String jobAuthorizationScope;
        private @Nullable Integer jobCancelTimeoutInMinutes;
        private @Nullable Integer jobTimeoutInMinutes;
        private String name;
        private String refName;
        private BuildDefinitionJobTarget target;
        public Builder() {}
        public Builder(BuildDefinitionJob defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowScriptsAuthAccessOption = defaults.allowScriptsAuthAccessOption;
    	      this.condition = defaults.condition;
    	      this.dependencies = defaults.dependencies;
    	      this.jobAuthorizationScope = defaults.jobAuthorizationScope;
    	      this.jobCancelTimeoutInMinutes = defaults.jobCancelTimeoutInMinutes;
    	      this.jobTimeoutInMinutes = defaults.jobTimeoutInMinutes;
    	      this.name = defaults.name;
    	      this.refName = defaults.refName;
    	      this.target = defaults.target;
        }

        @CustomType.Setter
        public Builder allowScriptsAuthAccessOption(@Nullable Boolean allowScriptsAuthAccessOption) {

            this.allowScriptsAuthAccessOption = allowScriptsAuthAccessOption;
            return this;
        }
        @CustomType.Setter
        public Builder condition(String condition) {
            if (condition == null) {
              throw new MissingRequiredPropertyException("BuildDefinitionJob", "condition");
            }
            this.condition = condition;
            return this;
        }
        @CustomType.Setter
        public Builder dependencies(@Nullable List<BuildDefinitionJobDependency> dependencies) {

            this.dependencies = dependencies;
            return this;
        }
        public Builder dependencies(BuildDefinitionJobDependency... dependencies) {
            return dependencies(List.of(dependencies));
        }
        @CustomType.Setter
        public Builder jobAuthorizationScope(@Nullable String jobAuthorizationScope) {

            this.jobAuthorizationScope = jobAuthorizationScope;
            return this;
        }
        @CustomType.Setter
        public Builder jobCancelTimeoutInMinutes(@Nullable Integer jobCancelTimeoutInMinutes) {

            this.jobCancelTimeoutInMinutes = jobCancelTimeoutInMinutes;
            return this;
        }
        @CustomType.Setter
        public Builder jobTimeoutInMinutes(@Nullable Integer jobTimeoutInMinutes) {

            this.jobTimeoutInMinutes = jobTimeoutInMinutes;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("BuildDefinitionJob", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder refName(String refName) {
            if (refName == null) {
              throw new MissingRequiredPropertyException("BuildDefinitionJob", "refName");
            }
            this.refName = refName;
            return this;
        }
        @CustomType.Setter
        public Builder target(BuildDefinitionJobTarget target) {
            if (target == null) {
              throw new MissingRequiredPropertyException("BuildDefinitionJob", "target");
            }
            this.target = target;
            return this;
        }
        public BuildDefinitionJob build() {
            final var _resultValue = new BuildDefinitionJob();
            _resultValue.allowScriptsAuthAccessOption = allowScriptsAuthAccessOption;
            _resultValue.condition = condition;
            _resultValue.dependencies = dependencies;
            _resultValue.jobAuthorizationScope = jobAuthorizationScope;
            _resultValue.jobCancelTimeoutInMinutes = jobCancelTimeoutInMinutes;
            _resultValue.jobTimeoutInMinutes = jobTimeoutInMinutes;
            _resultValue.name = name;
            _resultValue.refName = refName;
            _resultValue.target = target;
            return _resultValue;
        }
    }
}
