// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.inputs;

import com.pulumi.azuredevops.inputs.BranchPolicyStatusCheckSettingsScopeArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BranchPolicyStatusCheckSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final BranchPolicyStatusCheckSettingsArgs Empty = new BranchPolicyStatusCheckSettingsArgs();

    /**
     * Policy applicability. If policy `applicability` is `default`, apply unless &#34;Not Applicable&#34;
     * status is posted to the pull request. If policy `applicability` is `conditional`, policy is applied only after a status
     * is posted to the pull request.
     * 
     */
    @Import(name="applicability")
    private @Nullable Output<String> applicability;

    /**
     * @return Policy applicability. If policy `applicability` is `default`, apply unless &#34;Not Applicable&#34;
     * status is posted to the pull request. If policy `applicability` is `conditional`, policy is applied only after a status
     * is posted to the pull request.
     * 
     */
    public Optional<Output<String>> applicability() {
        return Optional.ofNullable(this.applicability);
    }

    /**
     * The authorized user can post the status.
     * 
     */
    @Import(name="authorId")
    private @Nullable Output<String> authorId;

    /**
     * @return The authorized user can post the status.
     * 
     */
    public Optional<Output<String>> authorId() {
        return Optional.ofNullable(this.authorId);
    }

    /**
     * The display name.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The display name.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * If a path filter is set, the policy will only apply when files which match the filter are changes. Not setting this field means that the policy will always apply. You can specify absolute paths and wildcards. Example: `[&#34;/WebApp/Models/Data.cs&#34;, &#34;/WebApp/*&#34;, &#34;*.cs&#34;]`. Paths prefixed with &#34;!&#34; are excluded. Example: `[&#34;/WebApp/*&#34;, &#34;!/WebApp/Tests/*&#34;]`. Order is significant.
     * 
     */
    @Import(name="filenamePatterns")
    private @Nullable Output<List<String>> filenamePatterns;

    /**
     * @return If a path filter is set, the policy will only apply when files which match the filter are changes. Not setting this field means that the policy will always apply. You can specify absolute paths and wildcards. Example: `[&#34;/WebApp/Models/Data.cs&#34;, &#34;/WebApp/*&#34;, &#34;*.cs&#34;]`. Paths prefixed with &#34;!&#34; are excluded. Example: `[&#34;/WebApp/*&#34;, &#34;!/WebApp/Tests/*&#34;]`. Order is significant.
     * 
     */
    public Optional<Output<List<String>>> filenamePatterns() {
        return Optional.ofNullable(this.filenamePatterns);
    }

    /**
     * The genre of the status to check (see [Microsoft Documentation](https://docs.microsoft.com/en-us/azure/devops/repos/git/pull-request-status?view=azure-devops#status-policy))
     * 
     */
    @Import(name="genre")
    private @Nullable Output<String> genre;

    /**
     * @return The genre of the status to check (see [Microsoft Documentation](https://docs.microsoft.com/en-us/azure/devops/repos/git/pull-request-status?view=azure-devops#status-policy))
     * 
     */
    public Optional<Output<String>> genre() {
        return Optional.ofNullable(this.genre);
    }

    /**
     * Reset status whenever there are new changes.
     * 
     */
    @Import(name="invalidateOnUpdate")
    private @Nullable Output<Boolean> invalidateOnUpdate;

    /**
     * @return Reset status whenever there are new changes.
     * 
     */
    public Optional<Output<Boolean>> invalidateOnUpdate() {
        return Optional.ofNullable(this.invalidateOnUpdate);
    }

    /**
     * The status name to check.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The status name to check.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Controls which repositories and branches the policy will be enabled for. This block must be defined
     * at least once.
     * 
     */
    @Import(name="scopes", required=true)
    private Output<List<BranchPolicyStatusCheckSettingsScopeArgs>> scopes;

    /**
     * @return Controls which repositories and branches the policy will be enabled for. This block must be defined
     * at least once.
     * 
     */
    public Output<List<BranchPolicyStatusCheckSettingsScopeArgs>> scopes() {
        return this.scopes;
    }

    private BranchPolicyStatusCheckSettingsArgs() {}

    private BranchPolicyStatusCheckSettingsArgs(BranchPolicyStatusCheckSettingsArgs $) {
        this.applicability = $.applicability;
        this.authorId = $.authorId;
        this.displayName = $.displayName;
        this.filenamePatterns = $.filenamePatterns;
        this.genre = $.genre;
        this.invalidateOnUpdate = $.invalidateOnUpdate;
        this.name = $.name;
        this.scopes = $.scopes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BranchPolicyStatusCheckSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BranchPolicyStatusCheckSettingsArgs $;

        public Builder() {
            $ = new BranchPolicyStatusCheckSettingsArgs();
        }

        public Builder(BranchPolicyStatusCheckSettingsArgs defaults) {
            $ = new BranchPolicyStatusCheckSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicability Policy applicability. If policy `applicability` is `default`, apply unless &#34;Not Applicable&#34;
         * status is posted to the pull request. If policy `applicability` is `conditional`, policy is applied only after a status
         * is posted to the pull request.
         * 
         * @return builder
         * 
         */
        public Builder applicability(@Nullable Output<String> applicability) {
            $.applicability = applicability;
            return this;
        }

        /**
         * @param applicability Policy applicability. If policy `applicability` is `default`, apply unless &#34;Not Applicable&#34;
         * status is posted to the pull request. If policy `applicability` is `conditional`, policy is applied only after a status
         * is posted to the pull request.
         * 
         * @return builder
         * 
         */
        public Builder applicability(String applicability) {
            return applicability(Output.of(applicability));
        }

        /**
         * @param authorId The authorized user can post the status.
         * 
         * @return builder
         * 
         */
        public Builder authorId(@Nullable Output<String> authorId) {
            $.authorId = authorId;
            return this;
        }

        /**
         * @param authorId The authorized user can post the status.
         * 
         * @return builder
         * 
         */
        public Builder authorId(String authorId) {
            return authorId(Output.of(authorId));
        }

        /**
         * @param displayName The display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param filenamePatterns If a path filter is set, the policy will only apply when files which match the filter are changes. Not setting this field means that the policy will always apply. You can specify absolute paths and wildcards. Example: `[&#34;/WebApp/Models/Data.cs&#34;, &#34;/WebApp/*&#34;, &#34;*.cs&#34;]`. Paths prefixed with &#34;!&#34; are excluded. Example: `[&#34;/WebApp/*&#34;, &#34;!/WebApp/Tests/*&#34;]`. Order is significant.
         * 
         * @return builder
         * 
         */
        public Builder filenamePatterns(@Nullable Output<List<String>> filenamePatterns) {
            $.filenamePatterns = filenamePatterns;
            return this;
        }

        /**
         * @param filenamePatterns If a path filter is set, the policy will only apply when files which match the filter are changes. Not setting this field means that the policy will always apply. You can specify absolute paths and wildcards. Example: `[&#34;/WebApp/Models/Data.cs&#34;, &#34;/WebApp/*&#34;, &#34;*.cs&#34;]`. Paths prefixed with &#34;!&#34; are excluded. Example: `[&#34;/WebApp/*&#34;, &#34;!/WebApp/Tests/*&#34;]`. Order is significant.
         * 
         * @return builder
         * 
         */
        public Builder filenamePatterns(List<String> filenamePatterns) {
            return filenamePatterns(Output.of(filenamePatterns));
        }

        /**
         * @param filenamePatterns If a path filter is set, the policy will only apply when files which match the filter are changes. Not setting this field means that the policy will always apply. You can specify absolute paths and wildcards. Example: `[&#34;/WebApp/Models/Data.cs&#34;, &#34;/WebApp/*&#34;, &#34;*.cs&#34;]`. Paths prefixed with &#34;!&#34; are excluded. Example: `[&#34;/WebApp/*&#34;, &#34;!/WebApp/Tests/*&#34;]`. Order is significant.
         * 
         * @return builder
         * 
         */
        public Builder filenamePatterns(String... filenamePatterns) {
            return filenamePatterns(List.of(filenamePatterns));
        }

        /**
         * @param genre The genre of the status to check (see [Microsoft Documentation](https://docs.microsoft.com/en-us/azure/devops/repos/git/pull-request-status?view=azure-devops#status-policy))
         * 
         * @return builder
         * 
         */
        public Builder genre(@Nullable Output<String> genre) {
            $.genre = genre;
            return this;
        }

        /**
         * @param genre The genre of the status to check (see [Microsoft Documentation](https://docs.microsoft.com/en-us/azure/devops/repos/git/pull-request-status?view=azure-devops#status-policy))
         * 
         * @return builder
         * 
         */
        public Builder genre(String genre) {
            return genre(Output.of(genre));
        }

        /**
         * @param invalidateOnUpdate Reset status whenever there are new changes.
         * 
         * @return builder
         * 
         */
        public Builder invalidateOnUpdate(@Nullable Output<Boolean> invalidateOnUpdate) {
            $.invalidateOnUpdate = invalidateOnUpdate;
            return this;
        }

        /**
         * @param invalidateOnUpdate Reset status whenever there are new changes.
         * 
         * @return builder
         * 
         */
        public Builder invalidateOnUpdate(Boolean invalidateOnUpdate) {
            return invalidateOnUpdate(Output.of(invalidateOnUpdate));
        }

        /**
         * @param name The status name to check.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The status name to check.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param scopes Controls which repositories and branches the policy will be enabled for. This block must be defined
         * at least once.
         * 
         * @return builder
         * 
         */
        public Builder scopes(Output<List<BranchPolicyStatusCheckSettingsScopeArgs>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes Controls which repositories and branches the policy will be enabled for. This block must be defined
         * at least once.
         * 
         * @return builder
         * 
         */
        public Builder scopes(List<BranchPolicyStatusCheckSettingsScopeArgs> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param scopes Controls which repositories and branches the policy will be enabled for. This block must be defined
         * at least once.
         * 
         * @return builder
         * 
         */
        public Builder scopes(BranchPolicyStatusCheckSettingsScopeArgs... scopes) {
            return scopes(List.of(scopes));
        }

        public BranchPolicyStatusCheckSettingsArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("BranchPolicyStatusCheckSettingsArgs", "name");
            }
            if ($.scopes == null) {
                throw new MissingRequiredPropertyException("BranchPolicyStatusCheckSettingsArgs", "scopes");
            }
            return $;
        }
    }

}
