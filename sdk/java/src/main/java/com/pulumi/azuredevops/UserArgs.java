// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserArgs Empty = new UserArgs();

    /**
     * Type of Account License. Valid values: `advanced`, `earlyAdopter`, `express`, `none`, `professional`, or `stakeholder`. Defaults to `express`. In addition the value `basic` is allowed which is an alias for `express` and reflects the name of the `express` license used in the Azure DevOps web interface.
     * 
     */
    @Import(name="accountLicenseType")
    private @Nullable Output<String> accountLicenseType;

    /**
     * @return Type of Account License. Valid values: `advanced`, `earlyAdopter`, `express`, `none`, `professional`, or `stakeholder`. Defaults to `express`. In addition the value `basic` is allowed which is an alias for `express` and reflects the name of the `express` license used in the Azure DevOps web interface.
     * 
     */
    public Optional<Output<String>> accountLicenseType() {
        return Optional.ofNullable(this.accountLicenseType);
    }

    /**
     * The source of the licensing (e.g. Account. MSDN etc.) Valid values: `account` (Default), `auto`, `msdn`, `none`, `profile`, `trial`
     * 
     * &gt; **NOTE:** A user can only be referenced by it&#39;s `principalName` or by the combination of `originId` and `origin`.
     * 
     */
    @Import(name="licensingSource")
    private @Nullable Output<String> licensingSource;

    /**
     * @return The source of the licensing (e.g. Account. MSDN etc.) Valid values: `account` (Default), `auto`, `msdn`, `none`, `profile`, `trial`
     * 
     * &gt; **NOTE:** A user can only be referenced by it&#39;s `principalName` or by the combination of `originId` and `origin`.
     * 
     */
    public Optional<Output<String>> licensingSource() {
        return Optional.ofNullable(this.licensingSource);
    }

    /**
     * The type of source provider for the origin identifier.
     * 
     */
    @Import(name="origin")
    private @Nullable Output<String> origin;

    /**
     * @return The type of source provider for the origin identifier.
     * 
     */
    public Optional<Output<String>> origin() {
        return Optional.ofNullable(this.origin);
    }

    /**
     * The unique identifier from the system of origin. Typically a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.
     * 
     */
    @Import(name="originId")
    private @Nullable Output<String> originId;

    /**
     * @return The unique identifier from the system of origin. Typically a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.
     * 
     */
    public Optional<Output<String>> originId() {
        return Optional.ofNullable(this.originId);
    }

    /**
     * The principal name is the PrincipalName of a graph member from the source provider. Usually, e-mail address.
     * 
     */
    @Import(name="principalName")
    private @Nullable Output<String> principalName;

    /**
     * @return The principal name is the PrincipalName of a graph member from the source provider. Usually, e-mail address.
     * 
     */
    public Optional<Output<String>> principalName() {
        return Optional.ofNullable(this.principalName);
    }

    private UserArgs() {}

    private UserArgs(UserArgs $) {
        this.accountLicenseType = $.accountLicenseType;
        this.licensingSource = $.licensingSource;
        this.origin = $.origin;
        this.originId = $.originId;
        this.principalName = $.principalName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserArgs $;

        public Builder() {
            $ = new UserArgs();
        }

        public Builder(UserArgs defaults) {
            $ = new UserArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountLicenseType Type of Account License. Valid values: `advanced`, `earlyAdopter`, `express`, `none`, `professional`, or `stakeholder`. Defaults to `express`. In addition the value `basic` is allowed which is an alias for `express` and reflects the name of the `express` license used in the Azure DevOps web interface.
         * 
         * @return builder
         * 
         */
        public Builder accountLicenseType(@Nullable Output<String> accountLicenseType) {
            $.accountLicenseType = accountLicenseType;
            return this;
        }

        /**
         * @param accountLicenseType Type of Account License. Valid values: `advanced`, `earlyAdopter`, `express`, `none`, `professional`, or `stakeholder`. Defaults to `express`. In addition the value `basic` is allowed which is an alias for `express` and reflects the name of the `express` license used in the Azure DevOps web interface.
         * 
         * @return builder
         * 
         */
        public Builder accountLicenseType(String accountLicenseType) {
            return accountLicenseType(Output.of(accountLicenseType));
        }

        /**
         * @param licensingSource The source of the licensing (e.g. Account. MSDN etc.) Valid values: `account` (Default), `auto`, `msdn`, `none`, `profile`, `trial`
         * 
         * &gt; **NOTE:** A user can only be referenced by it&#39;s `principalName` or by the combination of `originId` and `origin`.
         * 
         * @return builder
         * 
         */
        public Builder licensingSource(@Nullable Output<String> licensingSource) {
            $.licensingSource = licensingSource;
            return this;
        }

        /**
         * @param licensingSource The source of the licensing (e.g. Account. MSDN etc.) Valid values: `account` (Default), `auto`, `msdn`, `none`, `profile`, `trial`
         * 
         * &gt; **NOTE:** A user can only be referenced by it&#39;s `principalName` or by the combination of `originId` and `origin`.
         * 
         * @return builder
         * 
         */
        public Builder licensingSource(String licensingSource) {
            return licensingSource(Output.of(licensingSource));
        }

        /**
         * @param origin The type of source provider for the origin identifier.
         * 
         * @return builder
         * 
         */
        public Builder origin(@Nullable Output<String> origin) {
            $.origin = origin;
            return this;
        }

        /**
         * @param origin The type of source provider for the origin identifier.
         * 
         * @return builder
         * 
         */
        public Builder origin(String origin) {
            return origin(Output.of(origin));
        }

        /**
         * @param originId The unique identifier from the system of origin. Typically a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.
         * 
         * @return builder
         * 
         */
        public Builder originId(@Nullable Output<String> originId) {
            $.originId = originId;
            return this;
        }

        /**
         * @param originId The unique identifier from the system of origin. Typically a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.
         * 
         * @return builder
         * 
         */
        public Builder originId(String originId) {
            return originId(Output.of(originId));
        }

        /**
         * @param principalName The principal name is the PrincipalName of a graph member from the source provider. Usually, e-mail address.
         * 
         * @return builder
         * 
         */
        public Builder principalName(@Nullable Output<String> principalName) {
            $.principalName = principalName;
            return this;
        }

        /**
         * @param principalName The principal name is the PrincipalName of a graph member from the source provider. Usually, e-mail address.
         * 
         * @return builder
         * 
         */
        public Builder principalName(String principalName) {
            return principalName(Output.of(principalName));
        }

        public UserArgs build() {
            return $;
        }
    }

}
