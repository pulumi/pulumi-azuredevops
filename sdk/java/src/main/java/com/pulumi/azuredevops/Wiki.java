// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops;

import com.pulumi.azuredevops.Utilities;
import com.pulumi.azuredevops.WikiArgs;
import com.pulumi.azuredevops.inputs.WikiState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages Wikis within Azure DevOps project.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azuredevops.Project;
 * import com.pulumi.azuredevops.ProjectArgs;
 * import com.pulumi.azuredevops.Git;
 * import com.pulumi.azuredevops.GitArgs;
 * import com.pulumi.azuredevops.inputs.GitInitializationArgs;
 * import com.pulumi.azuredevops.Wiki;
 * import com.pulumi.azuredevops.WikiArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Project("example", ProjectArgs.builder()
 *             .name("Example Project")
 *             .description("Managed by Pulumi")
 *             .build());
 * 
 *         var exampleGit = new Git("exampleGit", GitArgs.builder()
 *             .projectId(example.id())
 *             .name("Example Repository")
 *             .initialization(GitInitializationArgs.builder()
 *                 .initType("Clean")
 *                 .build())
 *             .build());
 * 
 *         var exampleWiki = new Wiki("exampleWiki", WikiArgs.builder()
 *             .name("Example project wiki ")
 *             .projectId(example.id())
 *             .type("projectWiki")
 *             .build());
 * 
 *         var example2 = new Wiki("example2", WikiArgs.builder()
 *             .name("Example wiki in repository")
 *             .projectId(example.id())
 *             .repositoryId(exampleGit.id())
 *             .version("main")
 *             .type("codeWiki")
 *             .mappedPath("/")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Relevant Links
 * 
 * - [Azure DevOps Service REST API 7.1 - Wiki ](https://learn.microsoft.com/en-us/rest/api/azure/devops/wiki/wikis?view=azure-devops-rest-7.1)
 * 
 * ## Import
 * 
 * Azure DevOps Wiki can be imported using the `id`
 * 
 * ```sh
 * $ pulumi import azuredevops:index/wiki:Wiki wiki 00000000-0000-0000-0000-000000000000
 * ```
 * 
 */
@ResourceType(type="azuredevops:index/wiki:Wiki")
public class Wiki extends com.pulumi.resources.CustomResource {
    /**
     * Folder path inside repository which is shown as Wiki.
     * 
     */
    @Export(name="mappedPath", refs={String.class}, tree="[0]")
    private Output<String> mappedPath;

    /**
     * @return Folder path inside repository which is shown as Wiki.
     * 
     */
    public Output<String> mappedPath() {
        return this.mappedPath;
    }
    /**
     * The name of the Wiki.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the Wiki.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the Project.
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> projectId;

    /**
     * @return The ID of the Project.
     * 
     */
    public Output<Optional<String>> projectId() {
        return Codegen.optional(this.projectId);
    }
    /**
     * The remote web url to the wiki.
     * 
     */
    @Export(name="remoteUrl", refs={String.class}, tree="[0]")
    private Output<String> remoteUrl;

    /**
     * @return The remote web url to the wiki.
     * 
     */
    public Output<String> remoteUrl() {
        return this.remoteUrl;
    }
    /**
     * The ID of the repository.
     * 
     */
    @Export(name="repositoryId", refs={String.class}, tree="[0]")
    private Output<String> repositoryId;

    /**
     * @return The ID of the repository.
     * 
     */
    public Output<String> repositoryId() {
        return this.repositoryId;
    }
    /**
     * The type of the wiki. Possible values are `codeWiki`, `projectWiki`.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return The type of the wiki. Possible values are `codeWiki`, `projectWiki`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * The REST url for this wiki.
     * 
     */
    @Export(name="url", refs={String.class}, tree="[0]")
    private Output<String> url;

    /**
     * @return The REST url for this wiki.
     * 
     */
    public Output<String> url() {
        return this.url;
    }
    /**
     * Version of the wiki.
     * 
     */
    @Export(name="version", refs={String.class}, tree="[0]")
    private Output<String> version;

    /**
     * @return Version of the wiki.
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Wiki(java.lang.String name) {
        this(name, WikiArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Wiki(java.lang.String name, WikiArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Wiki(java.lang.String name, WikiArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azuredevops:index/wiki:Wiki", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Wiki(java.lang.String name, Output<java.lang.String> id, @Nullable WikiState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azuredevops:index/wiki:Wiki", name, state, makeResourceOptions(options, id), false);
    }

    private static WikiArgs makeArgs(WikiArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? WikiArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Wiki get(java.lang.String name, Output<java.lang.String> id, @Nullable WikiState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Wiki(name, id, state, options);
    }
}
