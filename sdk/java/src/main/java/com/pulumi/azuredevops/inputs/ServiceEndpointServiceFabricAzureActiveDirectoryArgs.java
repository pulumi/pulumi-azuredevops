// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceEndpointServiceFabricAzureActiveDirectoryArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceEndpointServiceFabricAzureActiveDirectoryArgs Empty = new ServiceEndpointServiceFabricAzureActiveDirectoryArgs();

    /**
     * Password for the Azure Active Directory account.
     * 
     */
    @Import(name="password", required=true)
    private Output<String> password;

    /**
     * @return Password for the Azure Active Directory account.
     * 
     */
    public Output<String> password() {
        return this.password;
    }

    /**
     * The common name(s) of the cluster&#39;s certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple common names with a comma (&#39;,&#39;)
     * 
     */
    @Import(name="serverCertificateCommonName")
    private @Nullable Output<String> serverCertificateCommonName;

    /**
     * @return The common name(s) of the cluster&#39;s certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple common names with a comma (&#39;,&#39;)
     * 
     */
    public Optional<Output<String>> serverCertificateCommonName() {
        return Optional.ofNullable(this.serverCertificateCommonName);
    }

    /**
     * Verification mode for the cluster. Possible values include `Thumbprint` or `CommonName`.
     * 
     */
    @Import(name="serverCertificateLookup", required=true)
    private Output<String> serverCertificateLookup;

    /**
     * @return Verification mode for the cluster. Possible values include `Thumbprint` or `CommonName`.
     * 
     */
    public Output<String> serverCertificateLookup() {
        return this.serverCertificateLookup;
    }

    /**
     * The thumbprint(s) of the cluster&#39;s certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple thumbprints with a comma (&#39;,&#39;)
     * 
     */
    @Import(name="serverCertificateThumbprint")
    private @Nullable Output<String> serverCertificateThumbprint;

    /**
     * @return The thumbprint(s) of the cluster&#39;s certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple thumbprints with a comma (&#39;,&#39;)
     * 
     */
    public Optional<Output<String>> serverCertificateThumbprint() {
        return Optional.ofNullable(this.serverCertificateThumbprint);
    }

    /**
     * Specify an Azure Active Directory account.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return Specify an Azure Active Directory account.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private ServiceEndpointServiceFabricAzureActiveDirectoryArgs() {}

    private ServiceEndpointServiceFabricAzureActiveDirectoryArgs(ServiceEndpointServiceFabricAzureActiveDirectoryArgs $) {
        this.password = $.password;
        this.serverCertificateCommonName = $.serverCertificateCommonName;
        this.serverCertificateLookup = $.serverCertificateLookup;
        this.serverCertificateThumbprint = $.serverCertificateThumbprint;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceEndpointServiceFabricAzureActiveDirectoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceEndpointServiceFabricAzureActiveDirectoryArgs $;

        public Builder() {
            $ = new ServiceEndpointServiceFabricAzureActiveDirectoryArgs();
        }

        public Builder(ServiceEndpointServiceFabricAzureActiveDirectoryArgs defaults) {
            $ = new ServiceEndpointServiceFabricAzureActiveDirectoryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param password Password for the Azure Active Directory account.
         * 
         * @return builder
         * 
         */
        public Builder password(Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Password for the Azure Active Directory account.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param serverCertificateCommonName The common name(s) of the cluster&#39;s certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple common names with a comma (&#39;,&#39;)
         * 
         * @return builder
         * 
         */
        public Builder serverCertificateCommonName(@Nullable Output<String> serverCertificateCommonName) {
            $.serverCertificateCommonName = serverCertificateCommonName;
            return this;
        }

        /**
         * @param serverCertificateCommonName The common name(s) of the cluster&#39;s certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple common names with a comma (&#39;,&#39;)
         * 
         * @return builder
         * 
         */
        public Builder serverCertificateCommonName(String serverCertificateCommonName) {
            return serverCertificateCommonName(Output.of(serverCertificateCommonName));
        }

        /**
         * @param serverCertificateLookup Verification mode for the cluster. Possible values include `Thumbprint` or `CommonName`.
         * 
         * @return builder
         * 
         */
        public Builder serverCertificateLookup(Output<String> serverCertificateLookup) {
            $.serverCertificateLookup = serverCertificateLookup;
            return this;
        }

        /**
         * @param serverCertificateLookup Verification mode for the cluster. Possible values include `Thumbprint` or `CommonName`.
         * 
         * @return builder
         * 
         */
        public Builder serverCertificateLookup(String serverCertificateLookup) {
            return serverCertificateLookup(Output.of(serverCertificateLookup));
        }

        /**
         * @param serverCertificateThumbprint The thumbprint(s) of the cluster&#39;s certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple thumbprints with a comma (&#39;,&#39;)
         * 
         * @return builder
         * 
         */
        public Builder serverCertificateThumbprint(@Nullable Output<String> serverCertificateThumbprint) {
            $.serverCertificateThumbprint = serverCertificateThumbprint;
            return this;
        }

        /**
         * @param serverCertificateThumbprint The thumbprint(s) of the cluster&#39;s certificate(s). This is used to verify the identity of the cluster. This value overrides the publish profile. Separate multiple thumbprints with a comma (&#39;,&#39;)
         * 
         * @return builder
         * 
         */
        public Builder serverCertificateThumbprint(String serverCertificateThumbprint) {
            return serverCertificateThumbprint(Output.of(serverCertificateThumbprint));
        }

        /**
         * @param username Specify an Azure Active Directory account.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Specify an Azure Active Directory account.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public ServiceEndpointServiceFabricAzureActiveDirectoryArgs build() {
            $.password = Objects.requireNonNull($.password, "expected parameter 'password' to be non-null");
            $.serverCertificateLookup = Objects.requireNonNull($.serverCertificateLookup, "expected parameter 'serverCertificateLookup' to be non-null");
            $.username = Objects.requireNonNull($.username, "expected parameter 'username' to be non-null");
            return $;
        }
    }

}
