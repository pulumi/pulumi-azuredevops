// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FeedPermissionArgs extends com.pulumi.resources.ResourceArgs {

    public static final FeedPermissionArgs Empty = new FeedPermissionArgs();

    /**
     * The display name of the assignment
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The display name of the assignment
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The ID of the Feed.
     * 
     */
    @Import(name="feedId", required=true)
    private Output<String> feedId;

    /**
     * @return The ID of the Feed.
     * 
     */
    public Output<String> feedId() {
        return this.feedId;
    }

    /**
     * The Descriptor of identity you want to assign a role.
     * 
     */
    @Import(name="identityDescriptor", required=true)
    private Output<String> identityDescriptor;

    /**
     * @return The Descriptor of identity you want to assign a role.
     * 
     */
    public Output<String> identityDescriptor() {
        return this.identityDescriptor;
    }

    /**
     * The ID of the Project Feed is created in. If not specified, feed will be created at the organization level.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The ID of the Project Feed is created in. If not specified, feed will be created at the organization level.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The role to be assigned. Possible values are: `reader`, `contributor`, `collaborator`, `administrator`
     * 
     */
    @Import(name="role", required=true)
    private Output<String> role;

    /**
     * @return The role to be assigned. Possible values are: `reader`, `contributor`, `collaborator`, `administrator`
     * 
     */
    public Output<String> role() {
        return this.role;
    }

    private FeedPermissionArgs() {}

    private FeedPermissionArgs(FeedPermissionArgs $) {
        this.displayName = $.displayName;
        this.feedId = $.feedId;
        this.identityDescriptor = $.identityDescriptor;
        this.projectId = $.projectId;
        this.role = $.role;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FeedPermissionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FeedPermissionArgs $;

        public Builder() {
            $ = new FeedPermissionArgs();
        }

        public Builder(FeedPermissionArgs defaults) {
            $ = new FeedPermissionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName The display name of the assignment
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The display name of the assignment
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param feedId The ID of the Feed.
         * 
         * @return builder
         * 
         */
        public Builder feedId(Output<String> feedId) {
            $.feedId = feedId;
            return this;
        }

        /**
         * @param feedId The ID of the Feed.
         * 
         * @return builder
         * 
         */
        public Builder feedId(String feedId) {
            return feedId(Output.of(feedId));
        }

        /**
         * @param identityDescriptor The Descriptor of identity you want to assign a role.
         * 
         * @return builder
         * 
         */
        public Builder identityDescriptor(Output<String> identityDescriptor) {
            $.identityDescriptor = identityDescriptor;
            return this;
        }

        /**
         * @param identityDescriptor The Descriptor of identity you want to assign a role.
         * 
         * @return builder
         * 
         */
        public Builder identityDescriptor(String identityDescriptor) {
            return identityDescriptor(Output.of(identityDescriptor));
        }

        /**
         * @param projectId The ID of the Project Feed is created in. If not specified, feed will be created at the organization level.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The ID of the Project Feed is created in. If not specified, feed will be created at the organization level.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param role The role to be assigned. Possible values are: `reader`, `contributor`, `collaborator`, `administrator`
         * 
         * @return builder
         * 
         */
        public Builder role(Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role The role to be assigned. Possible values are: `reader`, `contributor`, `collaborator`, `administrator`
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        public FeedPermissionArgs build() {
            if ($.feedId == null) {
                throw new MissingRequiredPropertyException("FeedPermissionArgs", "feedId");
            }
            if ($.identityDescriptor == null) {
                throw new MissingRequiredPropertyException("FeedPermissionArgs", "identityDescriptor");
            }
            if ($.role == null) {
                throw new MissingRequiredPropertyException("FeedPermissionArgs", "role");
            }
            return $;
        }
    }

}
