// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops;

import com.pulumi.core.TypeShape;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;

public final class Config {

    private static final com.pulumi.Config config = com.pulumi.Config.of("azuredevops");
/**
 * List of auxiliary Tenant IDs required for multi-tenancy and cross-tenant scenarios.
 * 
 */
    public Optional<List<String>> auxiliaryTenantIds() {
        return Codegen.objectProp("auxiliaryTenantIds", TypeShape.<List<String>>builder(List.class).addParameter(String.class).build()).config(config).get();
    }
/**
 * Base64 encoded certificate to use to authenticate to the service principal.
 * 
 */
    public Optional<String> clientCertificate() {
        return Codegen.stringProp("clientCertificate").config(config).get();
    }
/**
 * Password for a client certificate password.
 * 
 */
    public Optional<String> clientCertificatePassword() {
        return Codegen.stringProp("clientCertificatePassword").config(config).get();
    }
/**
 * Path to a certificate to use to authenticate to the service principal.
 * 
 */
    public Optional<String> clientCertificatePath() {
        return Codegen.stringProp("clientCertificatePath").config(config).get();
    }
/**
 * The service principal client id which should be used for AAD auth.
 * 
 */
    public Optional<String> clientId() {
        return Codegen.stringProp("clientId").config(config).get();
    }
/**
 * The path to a file containing the Client ID which should be used.
 * 
 */
    public Optional<String> clientIdFilePath() {
        return Codegen.stringProp("clientIdFilePath").config(config).get();
    }
/**
 * Client secret for authenticating to a service principal.
 * 
 */
    public Optional<String> clientSecret() {
        return Codegen.stringProp("clientSecret").config(config).get();
    }
/**
 * Path to a file containing a client secret for authenticating to a service principal.
 * 
 */
    public Optional<String> clientSecretPath() {
        return Codegen.stringProp("clientSecretPath").config(config).get();
    }
/**
 * The Azure Pipelines Service Connection ID to use for authentication.
 * 
 */
    public Optional<String> oidcAzureServiceConnectionId() {
        return Codegen.stringProp("oidcAzureServiceConnectionId").config(config).get();
    }
/**
 * The bearer token for the request to the OIDC provider. For use when authenticating as a Service Principal using OpenID
 * Connect.
 * 
 */
    public Optional<String> oidcRequestToken() {
        return Codegen.stringProp("oidcRequestToken").config(config).get();
    }
/**
 * The URL for the OIDC provider from which to request an ID token. For use when authenticating as a Service Principal
 * using OpenID Connect.
 * 
 */
    public Optional<String> oidcRequestUrl() {
        return Codegen.stringProp("oidcRequestUrl").config(config).get();
    }
/**
 * OIDC token to authenticate as a service principal.
 * 
 */
    public Optional<String> oidcToken() {
        return Codegen.stringProp("oidcToken").config(config).get();
    }
/**
 * OIDC token from file to authenticate as a service principal.
 * 
 */
    public Optional<String> oidcTokenFilePath() {
        return Codegen.stringProp("oidcTokenFilePath").config(config).get();
    }
/**
 * The url of the Azure DevOps instance which should be used.
 * 
 */
    public Optional<String> orgServiceUrl() {
        return Codegen.stringProp("orgServiceUrl").config(config).env("AZDO_ORG_SERVICE_URL").get();
    }
/**
 * The personal access token which should be used.
 * 
 */
    public Optional<String> personalAccessToken() {
        return Codegen.stringProp("personalAccessToken").config(config).get();
    }
/**
 * The service principal tenant id which should be used for AAD auth.
 * 
 */
    public Optional<String> tenantId() {
        return Codegen.stringProp("tenantId").config(config).get();
    }
/**
 * Use Azure CLI to authenticate. Defaults to `true`.
 * 
 */
    public Optional<Boolean> useCli() {
        return Codegen.booleanProp("useCli").config(config).get();
    }
/**
 * Use an Azure Managed Service Identity. Defaults to `false`.
 * 
 */
    public Optional<Boolean> useMsi() {
        return Codegen.booleanProp("useMsi").config(config).get();
    }
/**
 * Use an OIDC token to authenticate to a service principal. Defaults to `false`.
 * 
 */
    public Optional<Boolean> useOidc() {
        return Codegen.booleanProp("useOidc").config(config).get();
    }
}
