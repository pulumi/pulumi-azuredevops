// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.Security.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ResourceAuthorizationState extends com.pulumi.resources.ResourceArgs {

    public static final ResourceAuthorizationState Empty = new ResourceAuthorizationState();

    /**
     * Set to true to allow public access in the project. Type: boolean.
     * 
     */
    @Import(name="authorized")
    private @Nullable Output<Boolean> authorized;

    /**
     * @return Set to true to allow public access in the project. Type: boolean.
     * 
     */
    public Optional<Output<Boolean>> authorized() {
        return Optional.ofNullable(this.authorized);
    }

    /**
     * The ID of the build definition to authorize. Type: string.
     * 
     */
    @Import(name="definitionId")
    private @Nullable Output<Integer> definitionId;

    /**
     * @return The ID of the build definition to authorize. Type: string.
     * 
     */
    public Optional<Output<Integer>> definitionId() {
        return Optional.ofNullable(this.definitionId);
    }

    /**
     * The project ID or project name. Type: string.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The project ID or project name. Type: string.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The ID of the resource to authorize. Type: string.
     * 
     */
    @Import(name="resourceId")
    private @Nullable Output<String> resourceId;

    /**
     * @return The ID of the resource to authorize. Type: string.
     * 
     */
    public Optional<Output<String>> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }

    /**
     * The type of the resource to authorize. Type: string. Valid values: `endpoint`, `queue`, `variablegroup`. Default value: `endpoint`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of the resource to authorize. Type: string. Valid values: `endpoint`, `queue`, `variablegroup`. Default value: `endpoint`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private ResourceAuthorizationState() {}

    private ResourceAuthorizationState(ResourceAuthorizationState $) {
        this.authorized = $.authorized;
        this.definitionId = $.definitionId;
        this.projectId = $.projectId;
        this.resourceId = $.resourceId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResourceAuthorizationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResourceAuthorizationState $;

        public Builder() {
            $ = new ResourceAuthorizationState();
        }

        public Builder(ResourceAuthorizationState defaults) {
            $ = new ResourceAuthorizationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorized Set to true to allow public access in the project. Type: boolean.
         * 
         * @return builder
         * 
         */
        public Builder authorized(@Nullable Output<Boolean> authorized) {
            $.authorized = authorized;
            return this;
        }

        /**
         * @param authorized Set to true to allow public access in the project. Type: boolean.
         * 
         * @return builder
         * 
         */
        public Builder authorized(Boolean authorized) {
            return authorized(Output.of(authorized));
        }

        /**
         * @param definitionId The ID of the build definition to authorize. Type: string.
         * 
         * @return builder
         * 
         */
        public Builder definitionId(@Nullable Output<Integer> definitionId) {
            $.definitionId = definitionId;
            return this;
        }

        /**
         * @param definitionId The ID of the build definition to authorize. Type: string.
         * 
         * @return builder
         * 
         */
        public Builder definitionId(Integer definitionId) {
            return definitionId(Output.of(definitionId));
        }

        /**
         * @param projectId The project ID or project name. Type: string.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The project ID or project name. Type: string.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param resourceId The ID of the resource to authorize. Type: string.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(@Nullable Output<String> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param resourceId The ID of the resource to authorize. Type: string.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(String resourceId) {
            return resourceId(Output.of(resourceId));
        }

        /**
         * @param type The type of the resource to authorize. Type: string. Valid values: `endpoint`, `queue`, `variablegroup`. Default value: `endpoint`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the resource to authorize. Type: string. Valid values: `endpoint`, `queue`, `variablegroup`. Default value: `endpoint`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ResourceAuthorizationState build() {
            return $;
        }
    }

}
