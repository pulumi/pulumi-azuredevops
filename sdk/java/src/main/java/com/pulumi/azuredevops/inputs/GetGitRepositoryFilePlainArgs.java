// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetGitRepositoryFilePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetGitRepositoryFilePlainArgs Empty = new GetGitRepositoryFilePlainArgs();

    /**
     * The git branch to use. Conflicts with `tag`; one or the other must be specified.
     * 
     */
    @Import(name="branch")
    private @Nullable String branch;

    /**
     * @return The git branch to use. Conflicts with `tag`; one or the other must be specified.
     * 
     */
    public Optional<String> branch() {
        return Optional.ofNullable(this.branch);
    }

    /**
     * The path of the file to get.
     * 
     */
    @Import(name="file", required=true)
    private String file;

    /**
     * @return The path of the file to get.
     * 
     */
    public String file() {
        return this.file;
    }

    /**
     * The ID of the Git repository.
     * 
     */
    @Import(name="repositoryId", required=true)
    private String repositoryId;

    /**
     * @return The ID of the Git repository.
     * 
     */
    public String repositoryId() {
        return this.repositoryId;
    }

    /**
     * The tag to use.Conflicts with `branch`; one or the other must be specified.
     * 
     */
    @Import(name="tag")
    private @Nullable String tag;

    /**
     * @return The tag to use.Conflicts with `branch`; one or the other must be specified.
     * 
     */
    public Optional<String> tag() {
        return Optional.ofNullable(this.tag);
    }

    private GetGitRepositoryFilePlainArgs() {}

    private GetGitRepositoryFilePlainArgs(GetGitRepositoryFilePlainArgs $) {
        this.branch = $.branch;
        this.file = $.file;
        this.repositoryId = $.repositoryId;
        this.tag = $.tag;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetGitRepositoryFilePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetGitRepositoryFilePlainArgs $;

        public Builder() {
            $ = new GetGitRepositoryFilePlainArgs();
        }

        public Builder(GetGitRepositoryFilePlainArgs defaults) {
            $ = new GetGitRepositoryFilePlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param branch The git branch to use. Conflicts with `tag`; one or the other must be specified.
         * 
         * @return builder
         * 
         */
        public Builder branch(@Nullable String branch) {
            $.branch = branch;
            return this;
        }

        /**
         * @param file The path of the file to get.
         * 
         * @return builder
         * 
         */
        public Builder file(String file) {
            $.file = file;
            return this;
        }

        /**
         * @param repositoryId The ID of the Git repository.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(String repositoryId) {
            $.repositoryId = repositoryId;
            return this;
        }

        /**
         * @param tag The tag to use.Conflicts with `branch`; one or the other must be specified.
         * 
         * @return builder
         * 
         */
        public Builder tag(@Nullable String tag) {
            $.tag = tag;
            return this;
        }

        public GetGitRepositoryFilePlainArgs build() {
            if ($.file == null) {
                throw new MissingRequiredPropertyException("GetGitRepositoryFilePlainArgs", "file");
            }
            if ($.repositoryId == null) {
                throw new MissingRequiredPropertyException("GetGitRepositoryFilePlainArgs", "repositoryId");
            }
            return $;
        }
    }

}
