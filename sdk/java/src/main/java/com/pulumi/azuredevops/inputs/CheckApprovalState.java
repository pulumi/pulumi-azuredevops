// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CheckApprovalState extends com.pulumi.resources.ResourceArgs {

    public static final CheckApprovalState Empty = new CheckApprovalState();

    /**
     * Specifies a list of approver IDs.
     * 
     */
    @Import(name="approvers")
    private @Nullable Output<List<String>> approvers;

    /**
     * @return Specifies a list of approver IDs.
     * 
     */
    public Optional<Output<List<String>>> approvers() {
        return Optional.ofNullable(this.approvers);
    }

    /**
     * The instructions for the approvers.
     * 
     */
    @Import(name="instructions")
    private @Nullable Output<String> instructions;

    /**
     * @return The instructions for the approvers.
     * 
     */
    public Optional<Output<String>> instructions() {
        return Optional.ofNullable(this.instructions);
    }

    /**
     * The minimum number of approvers. This property is applicable when there is more than 1 approver.
     * 
     */
    @Import(name="minimumRequiredApprovers")
    private @Nullable Output<Integer> minimumRequiredApprovers;

    /**
     * @return The minimum number of approvers. This property is applicable when there is more than 1 approver.
     * 
     */
    public Optional<Output<Integer>> minimumRequiredApprovers() {
        return Optional.ofNullable(this.minimumRequiredApprovers);
    }

    /**
     * The project ID. Changing this forces a new Approval Check to be created.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The project ID. Changing this forces a new Approval Check to be created.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Can the requestor approve? Defaults to `false`.
     * 
     */
    @Import(name="requesterCanApprove")
    private @Nullable Output<Boolean> requesterCanApprove;

    /**
     * @return Can the requestor approve? Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> requesterCanApprove() {
        return Optional.ofNullable(this.requesterCanApprove);
    }

    /**
     * The ID of the resource being protected by the check. Changing this forces a new Approval Check to be created.
     * 
     */
    @Import(name="targetResourceId")
    private @Nullable Output<String> targetResourceId;

    /**
     * @return The ID of the resource being protected by the check. Changing this forces a new Approval Check to be created.
     * 
     */
    public Optional<Output<String>> targetResourceId() {
        return Optional.ofNullable(this.targetResourceId);
    }

    /**
     * The type of resource being protected by the check. Valid values: `endpoint`, `environment`, `queue`, `repository`, `securefile`, `variablegroup`. Changing this forces a new Approval Check to be created.
     * 
     */
    @Import(name="targetResourceType")
    private @Nullable Output<String> targetResourceType;

    /**
     * @return The type of resource being protected by the check. Valid values: `endpoint`, `environment`, `queue`, `repository`, `securefile`, `variablegroup`. Changing this forces a new Approval Check to be created.
     * 
     */
    public Optional<Output<String>> targetResourceType() {
        return Optional.ofNullable(this.targetResourceType);
    }

    /**
     * The timeout in minutes for the approval.  Defaults to `43200`.
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<Integer> timeout;

    /**
     * @return The timeout in minutes for the approval.  Defaults to `43200`.
     * 
     */
    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    /**
     * The version of the check.
     * 
     */
    @Import(name="version")
    private @Nullable Output<Integer> version;

    /**
     * @return The version of the check.
     * 
     */
    public Optional<Output<Integer>> version() {
        return Optional.ofNullable(this.version);
    }

    private CheckApprovalState() {}

    private CheckApprovalState(CheckApprovalState $) {
        this.approvers = $.approvers;
        this.instructions = $.instructions;
        this.minimumRequiredApprovers = $.minimumRequiredApprovers;
        this.projectId = $.projectId;
        this.requesterCanApprove = $.requesterCanApprove;
        this.targetResourceId = $.targetResourceId;
        this.targetResourceType = $.targetResourceType;
        this.timeout = $.timeout;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CheckApprovalState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CheckApprovalState $;

        public Builder() {
            $ = new CheckApprovalState();
        }

        public Builder(CheckApprovalState defaults) {
            $ = new CheckApprovalState(Objects.requireNonNull(defaults));
        }

        /**
         * @param approvers Specifies a list of approver IDs.
         * 
         * @return builder
         * 
         */
        public Builder approvers(@Nullable Output<List<String>> approvers) {
            $.approvers = approvers;
            return this;
        }

        /**
         * @param approvers Specifies a list of approver IDs.
         * 
         * @return builder
         * 
         */
        public Builder approvers(List<String> approvers) {
            return approvers(Output.of(approvers));
        }

        /**
         * @param approvers Specifies a list of approver IDs.
         * 
         * @return builder
         * 
         */
        public Builder approvers(String... approvers) {
            return approvers(List.of(approvers));
        }

        /**
         * @param instructions The instructions for the approvers.
         * 
         * @return builder
         * 
         */
        public Builder instructions(@Nullable Output<String> instructions) {
            $.instructions = instructions;
            return this;
        }

        /**
         * @param instructions The instructions for the approvers.
         * 
         * @return builder
         * 
         */
        public Builder instructions(String instructions) {
            return instructions(Output.of(instructions));
        }

        /**
         * @param minimumRequiredApprovers The minimum number of approvers. This property is applicable when there is more than 1 approver.
         * 
         * @return builder
         * 
         */
        public Builder minimumRequiredApprovers(@Nullable Output<Integer> minimumRequiredApprovers) {
            $.minimumRequiredApprovers = minimumRequiredApprovers;
            return this;
        }

        /**
         * @param minimumRequiredApprovers The minimum number of approvers. This property is applicable when there is more than 1 approver.
         * 
         * @return builder
         * 
         */
        public Builder minimumRequiredApprovers(Integer minimumRequiredApprovers) {
            return minimumRequiredApprovers(Output.of(minimumRequiredApprovers));
        }

        /**
         * @param projectId The project ID. Changing this forces a new Approval Check to be created.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The project ID. Changing this forces a new Approval Check to be created.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param requesterCanApprove Can the requestor approve? Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder requesterCanApprove(@Nullable Output<Boolean> requesterCanApprove) {
            $.requesterCanApprove = requesterCanApprove;
            return this;
        }

        /**
         * @param requesterCanApprove Can the requestor approve? Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder requesterCanApprove(Boolean requesterCanApprove) {
            return requesterCanApprove(Output.of(requesterCanApprove));
        }

        /**
         * @param targetResourceId The ID of the resource being protected by the check. Changing this forces a new Approval Check to be created.
         * 
         * @return builder
         * 
         */
        public Builder targetResourceId(@Nullable Output<String> targetResourceId) {
            $.targetResourceId = targetResourceId;
            return this;
        }

        /**
         * @param targetResourceId The ID of the resource being protected by the check. Changing this forces a new Approval Check to be created.
         * 
         * @return builder
         * 
         */
        public Builder targetResourceId(String targetResourceId) {
            return targetResourceId(Output.of(targetResourceId));
        }

        /**
         * @param targetResourceType The type of resource being protected by the check. Valid values: `endpoint`, `environment`, `queue`, `repository`, `securefile`, `variablegroup`. Changing this forces a new Approval Check to be created.
         * 
         * @return builder
         * 
         */
        public Builder targetResourceType(@Nullable Output<String> targetResourceType) {
            $.targetResourceType = targetResourceType;
            return this;
        }

        /**
         * @param targetResourceType The type of resource being protected by the check. Valid values: `endpoint`, `environment`, `queue`, `repository`, `securefile`, `variablegroup`. Changing this forces a new Approval Check to be created.
         * 
         * @return builder
         * 
         */
        public Builder targetResourceType(String targetResourceType) {
            return targetResourceType(Output.of(targetResourceType));
        }

        /**
         * @param timeout The timeout in minutes for the approval.  Defaults to `43200`.
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout The timeout in minutes for the approval.  Defaults to `43200`.
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        /**
         * @param version The version of the check.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<Integer> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version of the check.
         * 
         * @return builder
         * 
         */
        public Builder version(Integer version) {
            return version(Output.of(version));
        }

        public CheckApprovalState build() {
            return $;
        }
    }

}
