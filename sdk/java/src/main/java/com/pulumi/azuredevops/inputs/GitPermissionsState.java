// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitPermissionsState extends com.pulumi.resources.ResourceArgs {

    public static final GitPermissionsState Empty = new GitPermissionsState();

    /**
     * The name of the branch to assign the permissions.
     * 
     * &gt; **Note** to assign permissions to a branch, the `repository_id` must be set as well.
     * 
     */
    @Import(name="branchName")
    private @Nullable Output<String> branchName;

    /**
     * @return The name of the branch to assign the permissions.
     * 
     * &gt; **Note** to assign permissions to a branch, the `repository_id` must be set as well.
     * 
     */
    public Optional<Output<String>> branchName() {
        return Optional.ofNullable(this.branchName);
    }

    /**
     * the permissions to assign. The follwing permissions are available
     * &lt;table&gt;
     * &lt;thead&gt;
     * &lt;tr&gt;
     * &lt;th&gt;Permissions&lt;/th&gt;
     * &lt;th&gt;Description&lt;/th&gt;
     * &lt;/tr&gt;
     * &lt;/thead&gt;
     * &lt;tbody&gt;
     * &lt;tr&gt;
     * &lt;td&gt;Administer&lt;/td&gt;
     * &lt;td&gt;Administer&lt;/td&gt;
     * &lt;/tr&gt;
     * &lt;tr&gt;
     * &lt;td&gt;GenericRead&lt;/td&gt;
     * &lt;td&gt;Read&lt;/td&gt;
     * &lt;/tr&gt;
     * &lt;tr&gt;
     * &lt;td&gt;GenericContribute&lt;/td&gt;
     * &lt;td&gt;Contribute&lt;/td&gt;
     * &lt;/tr&gt;
     * &lt;tr&gt;
     * &lt;td&gt;ForcePush&lt;/td&gt;
     * &lt;td&gt;Force push (rewrite history, delete branches and tags)&lt;/td&gt;
     * &lt;/tr&gt;
     * &lt;tr&gt;
     * &lt;td&gt;CreateBranch&lt;/td&gt;
     * &lt;td&gt;Create branch&lt;/td&gt;
     * &lt;/tr&gt;
     * &lt;tr&gt;
     * &lt;td&gt;CreateTag&lt;/td&gt;
     * &lt;td&gt;Create tag&lt;/td&gt;
     * &lt;/tr&gt;
     * &lt;tr&gt;
     * &lt;td&gt;ManageNote&lt;/td&gt;
     * &lt;td&gt;Manage notes&lt;/td&gt;
     * &lt;/tr&gt;
     * &lt;tr&gt;
     * &lt;td&gt;PolicyExempt&lt;/td&gt;
     * &lt;td&gt;Bypass policies when pushing&lt;/td&gt;
     * &lt;/tr&gt;
     * &lt;tr&gt;
     * &lt;td&gt;CreateRepository&lt;/td&gt;
     * &lt;td&gt;Create repository&lt;/td&gt;
     * &lt;/tr&gt;
     * &lt;tr&gt;
     * &lt;td&gt;DeleteRepository&lt;/td&gt;
     * &lt;td&gt;Delete repository&lt;/td&gt;
     * &lt;/tr&gt;
     * &lt;tr&gt;
     * &lt;td&gt;RenameRepository&lt;/td&gt;
     * &lt;td&gt;Rename repository&lt;/td&gt;
     * &lt;/tr&gt;
     * &lt;tr&gt;
     * &lt;td&gt;EditPolicies&lt;/td&gt;
     * &lt;td&gt;Edit policies&lt;/td&gt;
     * &lt;/tr&gt;
     * &lt;tr&gt;
     * &lt;td&gt;RemoveOthersLocks&lt;/td&gt;
     * &lt;td&gt;Remove others&#39; locks&lt;/td&gt;
     * &lt;/tr&gt;
     * &lt;tr&gt;
     * &lt;td&gt;ManagePermissions&lt;/td&gt;
     * &lt;td&gt;Manage permissions&lt;/td&gt;
     * &lt;/tr&gt;
     * &lt;tr&gt;
     * &lt;td&gt;PullRequestContribute&lt;/td&gt;
     * &lt;td&gt;Contribute to pull requests&lt;/td&gt;
     * &lt;/tr&gt;
     * &lt;tr&gt;
     * &lt;td&gt;PullRequestBypassPolicy&lt;/td&gt;
     * &lt;td&gt;Bypass policies when completing pull requests&lt;/td&gt;
     * &lt;/tr&gt;
     * &lt;/tbody&gt;
     * &lt;/table&gt;
     * 
     */
    @Import(name="permissions")
    private @Nullable Output<Map<String,String>> permissions;

    /**
     * @return the permissions to assign. The follwing permissions are available
     * &lt;table&gt;
     * &lt;thead&gt;
     * &lt;tr&gt;
     * &lt;th&gt;Permissions&lt;/th&gt;
     * &lt;th&gt;Description&lt;/th&gt;
     * &lt;/tr&gt;
     * &lt;/thead&gt;
     * &lt;tbody&gt;
     * &lt;tr&gt;
     * &lt;td&gt;Administer&lt;/td&gt;
     * &lt;td&gt;Administer&lt;/td&gt;
     * &lt;/tr&gt;
     * &lt;tr&gt;
     * &lt;td&gt;GenericRead&lt;/td&gt;
     * &lt;td&gt;Read&lt;/td&gt;
     * &lt;/tr&gt;
     * &lt;tr&gt;
     * &lt;td&gt;GenericContribute&lt;/td&gt;
     * &lt;td&gt;Contribute&lt;/td&gt;
     * &lt;/tr&gt;
     * &lt;tr&gt;
     * &lt;td&gt;ForcePush&lt;/td&gt;
     * &lt;td&gt;Force push (rewrite history, delete branches and tags)&lt;/td&gt;
     * &lt;/tr&gt;
     * &lt;tr&gt;
     * &lt;td&gt;CreateBranch&lt;/td&gt;
     * &lt;td&gt;Create branch&lt;/td&gt;
     * &lt;/tr&gt;
     * &lt;tr&gt;
     * &lt;td&gt;CreateTag&lt;/td&gt;
     * &lt;td&gt;Create tag&lt;/td&gt;
     * &lt;/tr&gt;
     * &lt;tr&gt;
     * &lt;td&gt;ManageNote&lt;/td&gt;
     * &lt;td&gt;Manage notes&lt;/td&gt;
     * &lt;/tr&gt;
     * &lt;tr&gt;
     * &lt;td&gt;PolicyExempt&lt;/td&gt;
     * &lt;td&gt;Bypass policies when pushing&lt;/td&gt;
     * &lt;/tr&gt;
     * &lt;tr&gt;
     * &lt;td&gt;CreateRepository&lt;/td&gt;
     * &lt;td&gt;Create repository&lt;/td&gt;
     * &lt;/tr&gt;
     * &lt;tr&gt;
     * &lt;td&gt;DeleteRepository&lt;/td&gt;
     * &lt;td&gt;Delete repository&lt;/td&gt;
     * &lt;/tr&gt;
     * &lt;tr&gt;
     * &lt;td&gt;RenameRepository&lt;/td&gt;
     * &lt;td&gt;Rename repository&lt;/td&gt;
     * &lt;/tr&gt;
     * &lt;tr&gt;
     * &lt;td&gt;EditPolicies&lt;/td&gt;
     * &lt;td&gt;Edit policies&lt;/td&gt;
     * &lt;/tr&gt;
     * &lt;tr&gt;
     * &lt;td&gt;RemoveOthersLocks&lt;/td&gt;
     * &lt;td&gt;Remove others&#39; locks&lt;/td&gt;
     * &lt;/tr&gt;
     * &lt;tr&gt;
     * &lt;td&gt;ManagePermissions&lt;/td&gt;
     * &lt;td&gt;Manage permissions&lt;/td&gt;
     * &lt;/tr&gt;
     * &lt;tr&gt;
     * &lt;td&gt;PullRequestContribute&lt;/td&gt;
     * &lt;td&gt;Contribute to pull requests&lt;/td&gt;
     * &lt;/tr&gt;
     * &lt;tr&gt;
     * &lt;td&gt;PullRequestBypassPolicy&lt;/td&gt;
     * &lt;td&gt;Bypass policies when completing pull requests&lt;/td&gt;
     * &lt;/tr&gt;
     * &lt;/tbody&gt;
     * &lt;/table&gt;
     * 
     */
    public Optional<Output<Map<String,String>>> permissions() {
        return Optional.ofNullable(this.permissions);
    }

    /**
     * The **group** principal to assign the permissions.
     * 
     */
    @Import(name="principal")
    private @Nullable Output<String> principal;

    /**
     * @return The **group** principal to assign the permissions.
     * 
     */
    public Optional<Output<String>> principal() {
        return Optional.ofNullable(this.principal);
    }

    /**
     * The ID of the project to assign the permissions.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The ID of the project to assign the permissions.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Replace (`true`) or merge (`false`) the permissions. Default: `true`
     * 
     */
    @Import(name="replace")
    private @Nullable Output<Boolean> replace;

    /**
     * @return Replace (`true`) or merge (`false`) the permissions. Default: `true`
     * 
     */
    public Optional<Output<Boolean>> replace() {
        return Optional.ofNullable(this.replace);
    }

    /**
     * The ID of the GIT repository to assign the permissions
     * 
     */
    @Import(name="repositoryId")
    private @Nullable Output<String> repositoryId;

    /**
     * @return The ID of the GIT repository to assign the permissions
     * 
     */
    public Optional<Output<String>> repositoryId() {
        return Optional.ofNullable(this.repositoryId);
    }

    private GitPermissionsState() {}

    private GitPermissionsState(GitPermissionsState $) {
        this.branchName = $.branchName;
        this.permissions = $.permissions;
        this.principal = $.principal;
        this.projectId = $.projectId;
        this.replace = $.replace;
        this.repositoryId = $.repositoryId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitPermissionsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitPermissionsState $;

        public Builder() {
            $ = new GitPermissionsState();
        }

        public Builder(GitPermissionsState defaults) {
            $ = new GitPermissionsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param branchName The name of the branch to assign the permissions.
         * 
         * &gt; **Note** to assign permissions to a branch, the `repository_id` must be set as well.
         * 
         * @return builder
         * 
         */
        public Builder branchName(@Nullable Output<String> branchName) {
            $.branchName = branchName;
            return this;
        }

        /**
         * @param branchName The name of the branch to assign the permissions.
         * 
         * &gt; **Note** to assign permissions to a branch, the `repository_id` must be set as well.
         * 
         * @return builder
         * 
         */
        public Builder branchName(String branchName) {
            return branchName(Output.of(branchName));
        }

        /**
         * @param permissions the permissions to assign. The follwing permissions are available
         * &lt;table&gt;
         * &lt;thead&gt;
         * &lt;tr&gt;
         * &lt;th&gt;Permissions&lt;/th&gt;
         * &lt;th&gt;Description&lt;/th&gt;
         * &lt;/tr&gt;
         * &lt;/thead&gt;
         * &lt;tbody&gt;
         * &lt;tr&gt;
         * &lt;td&gt;Administer&lt;/td&gt;
         * &lt;td&gt;Administer&lt;/td&gt;
         * &lt;/tr&gt;
         * &lt;tr&gt;
         * &lt;td&gt;GenericRead&lt;/td&gt;
         * &lt;td&gt;Read&lt;/td&gt;
         * &lt;/tr&gt;
         * &lt;tr&gt;
         * &lt;td&gt;GenericContribute&lt;/td&gt;
         * &lt;td&gt;Contribute&lt;/td&gt;
         * &lt;/tr&gt;
         * &lt;tr&gt;
         * &lt;td&gt;ForcePush&lt;/td&gt;
         * &lt;td&gt;Force push (rewrite history, delete branches and tags)&lt;/td&gt;
         * &lt;/tr&gt;
         * &lt;tr&gt;
         * &lt;td&gt;CreateBranch&lt;/td&gt;
         * &lt;td&gt;Create branch&lt;/td&gt;
         * &lt;/tr&gt;
         * &lt;tr&gt;
         * &lt;td&gt;CreateTag&lt;/td&gt;
         * &lt;td&gt;Create tag&lt;/td&gt;
         * &lt;/tr&gt;
         * &lt;tr&gt;
         * &lt;td&gt;ManageNote&lt;/td&gt;
         * &lt;td&gt;Manage notes&lt;/td&gt;
         * &lt;/tr&gt;
         * &lt;tr&gt;
         * &lt;td&gt;PolicyExempt&lt;/td&gt;
         * &lt;td&gt;Bypass policies when pushing&lt;/td&gt;
         * &lt;/tr&gt;
         * &lt;tr&gt;
         * &lt;td&gt;CreateRepository&lt;/td&gt;
         * &lt;td&gt;Create repository&lt;/td&gt;
         * &lt;/tr&gt;
         * &lt;tr&gt;
         * &lt;td&gt;DeleteRepository&lt;/td&gt;
         * &lt;td&gt;Delete repository&lt;/td&gt;
         * &lt;/tr&gt;
         * &lt;tr&gt;
         * &lt;td&gt;RenameRepository&lt;/td&gt;
         * &lt;td&gt;Rename repository&lt;/td&gt;
         * &lt;/tr&gt;
         * &lt;tr&gt;
         * &lt;td&gt;EditPolicies&lt;/td&gt;
         * &lt;td&gt;Edit policies&lt;/td&gt;
         * &lt;/tr&gt;
         * &lt;tr&gt;
         * &lt;td&gt;RemoveOthersLocks&lt;/td&gt;
         * &lt;td&gt;Remove others&#39; locks&lt;/td&gt;
         * &lt;/tr&gt;
         * &lt;tr&gt;
         * &lt;td&gt;ManagePermissions&lt;/td&gt;
         * &lt;td&gt;Manage permissions&lt;/td&gt;
         * &lt;/tr&gt;
         * &lt;tr&gt;
         * &lt;td&gt;PullRequestContribute&lt;/td&gt;
         * &lt;td&gt;Contribute to pull requests&lt;/td&gt;
         * &lt;/tr&gt;
         * &lt;tr&gt;
         * &lt;td&gt;PullRequestBypassPolicy&lt;/td&gt;
         * &lt;td&gt;Bypass policies when completing pull requests&lt;/td&gt;
         * &lt;/tr&gt;
         * &lt;/tbody&gt;
         * &lt;/table&gt;
         * 
         * @return builder
         * 
         */
        public Builder permissions(@Nullable Output<Map<String,String>> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions the permissions to assign. The follwing permissions are available
         * &lt;table&gt;
         * &lt;thead&gt;
         * &lt;tr&gt;
         * &lt;th&gt;Permissions&lt;/th&gt;
         * &lt;th&gt;Description&lt;/th&gt;
         * &lt;/tr&gt;
         * &lt;/thead&gt;
         * &lt;tbody&gt;
         * &lt;tr&gt;
         * &lt;td&gt;Administer&lt;/td&gt;
         * &lt;td&gt;Administer&lt;/td&gt;
         * &lt;/tr&gt;
         * &lt;tr&gt;
         * &lt;td&gt;GenericRead&lt;/td&gt;
         * &lt;td&gt;Read&lt;/td&gt;
         * &lt;/tr&gt;
         * &lt;tr&gt;
         * &lt;td&gt;GenericContribute&lt;/td&gt;
         * &lt;td&gt;Contribute&lt;/td&gt;
         * &lt;/tr&gt;
         * &lt;tr&gt;
         * &lt;td&gt;ForcePush&lt;/td&gt;
         * &lt;td&gt;Force push (rewrite history, delete branches and tags)&lt;/td&gt;
         * &lt;/tr&gt;
         * &lt;tr&gt;
         * &lt;td&gt;CreateBranch&lt;/td&gt;
         * &lt;td&gt;Create branch&lt;/td&gt;
         * &lt;/tr&gt;
         * &lt;tr&gt;
         * &lt;td&gt;CreateTag&lt;/td&gt;
         * &lt;td&gt;Create tag&lt;/td&gt;
         * &lt;/tr&gt;
         * &lt;tr&gt;
         * &lt;td&gt;ManageNote&lt;/td&gt;
         * &lt;td&gt;Manage notes&lt;/td&gt;
         * &lt;/tr&gt;
         * &lt;tr&gt;
         * &lt;td&gt;PolicyExempt&lt;/td&gt;
         * &lt;td&gt;Bypass policies when pushing&lt;/td&gt;
         * &lt;/tr&gt;
         * &lt;tr&gt;
         * &lt;td&gt;CreateRepository&lt;/td&gt;
         * &lt;td&gt;Create repository&lt;/td&gt;
         * &lt;/tr&gt;
         * &lt;tr&gt;
         * &lt;td&gt;DeleteRepository&lt;/td&gt;
         * &lt;td&gt;Delete repository&lt;/td&gt;
         * &lt;/tr&gt;
         * &lt;tr&gt;
         * &lt;td&gt;RenameRepository&lt;/td&gt;
         * &lt;td&gt;Rename repository&lt;/td&gt;
         * &lt;/tr&gt;
         * &lt;tr&gt;
         * &lt;td&gt;EditPolicies&lt;/td&gt;
         * &lt;td&gt;Edit policies&lt;/td&gt;
         * &lt;/tr&gt;
         * &lt;tr&gt;
         * &lt;td&gt;RemoveOthersLocks&lt;/td&gt;
         * &lt;td&gt;Remove others&#39; locks&lt;/td&gt;
         * &lt;/tr&gt;
         * &lt;tr&gt;
         * &lt;td&gt;ManagePermissions&lt;/td&gt;
         * &lt;td&gt;Manage permissions&lt;/td&gt;
         * &lt;/tr&gt;
         * &lt;tr&gt;
         * &lt;td&gt;PullRequestContribute&lt;/td&gt;
         * &lt;td&gt;Contribute to pull requests&lt;/td&gt;
         * &lt;/tr&gt;
         * &lt;tr&gt;
         * &lt;td&gt;PullRequestBypassPolicy&lt;/td&gt;
         * &lt;td&gt;Bypass policies when completing pull requests&lt;/td&gt;
         * &lt;/tr&gt;
         * &lt;/tbody&gt;
         * &lt;/table&gt;
         * 
         * @return builder
         * 
         */
        public Builder permissions(Map<String,String> permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param principal The **group** principal to assign the permissions.
         * 
         * @return builder
         * 
         */
        public Builder principal(@Nullable Output<String> principal) {
            $.principal = principal;
            return this;
        }

        /**
         * @param principal The **group** principal to assign the permissions.
         * 
         * @return builder
         * 
         */
        public Builder principal(String principal) {
            return principal(Output.of(principal));
        }

        /**
         * @param projectId The ID of the project to assign the permissions.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The ID of the project to assign the permissions.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param replace Replace (`true`) or merge (`false`) the permissions. Default: `true`
         * 
         * @return builder
         * 
         */
        public Builder replace(@Nullable Output<Boolean> replace) {
            $.replace = replace;
            return this;
        }

        /**
         * @param replace Replace (`true`) or merge (`false`) the permissions. Default: `true`
         * 
         * @return builder
         * 
         */
        public Builder replace(Boolean replace) {
            return replace(Output.of(replace));
        }

        /**
         * @param repositoryId The ID of the GIT repository to assign the permissions
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(@Nullable Output<String> repositoryId) {
            $.repositoryId = repositoryId;
            return this;
        }

        /**
         * @param repositoryId The ID of the GIT repository to assign the permissions
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(String repositoryId) {
            return repositoryId(Output.of(repositoryId));
        }

        public GitPermissionsState build() {
            return $;
        }
    }

}
