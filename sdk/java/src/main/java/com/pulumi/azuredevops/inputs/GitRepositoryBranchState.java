// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitRepositoryBranchState extends com.pulumi.resources.ResourceArgs {

    public static final GitRepositoryBranchState Empty = new GitRepositoryBranchState();

    /**
     * The commit object ID of last commit on the branch.
     * 
     */
    @Import(name="lastCommitId")
    private @Nullable Output<String> lastCommitId;

    /**
     * @return The commit object ID of last commit on the branch.
     * 
     */
    public Optional<Output<String>> lastCommitId() {
        return Optional.ofNullable(this.lastCommitId);
    }

    /**
     * The name of the branch in short format not prefixed with `refs/heads/`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the branch in short format not prefixed with `refs/heads/`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The reference to the source branch to create the branch from, in `&lt;name&gt;` or `refs/heads/&lt;name&gt;` format. Conflict with `ref_tag`, `ref_commit_id`.
     * 
     */
    @Import(name="refBranch")
    private @Nullable Output<String> refBranch;

    /**
     * @return The reference to the source branch to create the branch from, in `&lt;name&gt;` or `refs/heads/&lt;name&gt;` format. Conflict with `ref_tag`, `ref_commit_id`.
     * 
     */
    public Optional<Output<String>> refBranch() {
        return Optional.ofNullable(this.refBranch);
    }

    /**
     * The commit object ID to create the branch from. Conflict with `ref_branch`, `ref_tag`.
     * 
     */
    @Import(name="refCommitId")
    private @Nullable Output<String> refCommitId;

    /**
     * @return The commit object ID to create the branch from. Conflict with `ref_branch`, `ref_tag`.
     * 
     */
    public Optional<Output<String>> refCommitId() {
        return Optional.ofNullable(this.refCommitId);
    }

    /**
     * The reference to the tag to create the branch from, in `&lt;name&gt;` or `refs/tags/&lt;name&gt;` format. Conflict with `ref_branch`, `ref_commit_id`.
     * 
     */
    @Import(name="refTag")
    private @Nullable Output<String> refTag;

    /**
     * @return The reference to the tag to create the branch from, in `&lt;name&gt;` or `refs/tags/&lt;name&gt;` format. Conflict with `ref_branch`, `ref_commit_id`.
     * 
     */
    public Optional<Output<String>> refTag() {
        return Optional.ofNullable(this.refTag);
    }

    /**
     * The ID of the repository the branch is created against.
     * 
     */
    @Import(name="repositoryId")
    private @Nullable Output<String> repositoryId;

    /**
     * @return The ID of the repository the branch is created against.
     * 
     */
    public Optional<Output<String>> repositoryId() {
        return Optional.ofNullable(this.repositoryId);
    }

    private GitRepositoryBranchState() {}

    private GitRepositoryBranchState(GitRepositoryBranchState $) {
        this.lastCommitId = $.lastCommitId;
        this.name = $.name;
        this.refBranch = $.refBranch;
        this.refCommitId = $.refCommitId;
        this.refTag = $.refTag;
        this.repositoryId = $.repositoryId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitRepositoryBranchState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitRepositoryBranchState $;

        public Builder() {
            $ = new GitRepositoryBranchState();
        }

        public Builder(GitRepositoryBranchState defaults) {
            $ = new GitRepositoryBranchState(Objects.requireNonNull(defaults));
        }

        /**
         * @param lastCommitId The commit object ID of last commit on the branch.
         * 
         * @return builder
         * 
         */
        public Builder lastCommitId(@Nullable Output<String> lastCommitId) {
            $.lastCommitId = lastCommitId;
            return this;
        }

        /**
         * @param lastCommitId The commit object ID of last commit on the branch.
         * 
         * @return builder
         * 
         */
        public Builder lastCommitId(String lastCommitId) {
            return lastCommitId(Output.of(lastCommitId));
        }

        /**
         * @param name The name of the branch in short format not prefixed with `refs/heads/`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the branch in short format not prefixed with `refs/heads/`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param refBranch The reference to the source branch to create the branch from, in `&lt;name&gt;` or `refs/heads/&lt;name&gt;` format. Conflict with `ref_tag`, `ref_commit_id`.
         * 
         * @return builder
         * 
         */
        public Builder refBranch(@Nullable Output<String> refBranch) {
            $.refBranch = refBranch;
            return this;
        }

        /**
         * @param refBranch The reference to the source branch to create the branch from, in `&lt;name&gt;` or `refs/heads/&lt;name&gt;` format. Conflict with `ref_tag`, `ref_commit_id`.
         * 
         * @return builder
         * 
         */
        public Builder refBranch(String refBranch) {
            return refBranch(Output.of(refBranch));
        }

        /**
         * @param refCommitId The commit object ID to create the branch from. Conflict with `ref_branch`, `ref_tag`.
         * 
         * @return builder
         * 
         */
        public Builder refCommitId(@Nullable Output<String> refCommitId) {
            $.refCommitId = refCommitId;
            return this;
        }

        /**
         * @param refCommitId The commit object ID to create the branch from. Conflict with `ref_branch`, `ref_tag`.
         * 
         * @return builder
         * 
         */
        public Builder refCommitId(String refCommitId) {
            return refCommitId(Output.of(refCommitId));
        }

        /**
         * @param refTag The reference to the tag to create the branch from, in `&lt;name&gt;` or `refs/tags/&lt;name&gt;` format. Conflict with `ref_branch`, `ref_commit_id`.
         * 
         * @return builder
         * 
         */
        public Builder refTag(@Nullable Output<String> refTag) {
            $.refTag = refTag;
            return this;
        }

        /**
         * @param refTag The reference to the tag to create the branch from, in `&lt;name&gt;` or `refs/tags/&lt;name&gt;` format. Conflict with `ref_branch`, `ref_commit_id`.
         * 
         * @return builder
         * 
         */
        public Builder refTag(String refTag) {
            return refTag(Output.of(refTag));
        }

        /**
         * @param repositoryId The ID of the repository the branch is created against.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(@Nullable Output<String> repositoryId) {
            $.repositoryId = repositoryId;
            return this;
        }

        /**
         * @param repositoryId The ID of the repository the branch is created against.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(String repositoryId) {
            return repositoryId(Output.of(repositoryId));
        }

        public GitRepositoryBranchState build() {
            return $;
        }
    }

}
