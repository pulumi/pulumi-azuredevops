// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.Core.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetProjectsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetProjectsArgs Empty = new GetProjectsArgs();

    /**
     * Name of the Project, if not specified all projects will be returned.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the Project, if not specified all projects will be returned.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * State of the Project, if not specified all projects will be returned. Valid values are `all`, `deleting`, `new`, `wellFormed`, `createPending`, `unchanged`,`deleted`.
     * 
     * DataSource without specifying any arguments will return all projects.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return State of the Project, if not specified all projects will be returned. Valid values are `all`, `deleting`, `new`, `wellFormed`, `createPending`, `unchanged`,`deleted`.
     * 
     * DataSource without specifying any arguments will return all projects.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private GetProjectsArgs() {}

    private GetProjectsArgs(GetProjectsArgs $) {
        this.name = $.name;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetProjectsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetProjectsArgs $;

        public Builder() {
            $ = new GetProjectsArgs();
        }

        public Builder(GetProjectsArgs defaults) {
            $ = new GetProjectsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Name of the Project, if not specified all projects will be returned.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the Project, if not specified all projects will be returned.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param state State of the Project, if not specified all projects will be returned. Valid values are `all`, `deleting`, `new`, `wellFormed`, `createPending`, `unchanged`,`deleted`.
         * 
         * DataSource without specifying any arguments will return all projects.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state State of the Project, if not specified all projects will be returned. Valid values are `all`, `deleting`, `new`, `wellFormed`, `createPending`, `unchanged`,`deleted`.
         * 
         * DataSource without specifying any arguments will return all projects.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public GetProjectsArgs build() {
            return $;
        }
    }

}
