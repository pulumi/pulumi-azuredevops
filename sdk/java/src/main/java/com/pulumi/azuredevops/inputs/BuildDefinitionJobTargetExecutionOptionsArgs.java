// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BuildDefinitionJobTargetExecutionOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final BuildDefinitionJobTargetExecutionOptionsArgs Empty = new BuildDefinitionJobTargetExecutionOptionsArgs();

    /**
     * Whether to continue the job when an error occurs. Possible values are: `true`, `false`.
     * 
     */
    @Import(name="continueOnError")
    private @Nullable Output<Boolean> continueOnError;

    /**
     * @return Whether to continue the job when an error occurs. Possible values are: `true`, `false`.
     * 
     */
    public Optional<Output<Boolean>> continueOnError() {
        return Optional.ofNullable(this.continueOnError);
    }

    /**
     * Limit the number of agents to be used. If job type is `AgentlessJob`, the concurrency is not configurable and is fixed to 50.
     * 
     */
    @Import(name="maxConcurrency")
    private @Nullable Output<Integer> maxConcurrency;

    /**
     * @return Limit the number of agents to be used. If job type is `AgentlessJob`, the concurrency is not configurable and is fixed to 50.
     * 
     */
    public Optional<Output<Integer>> maxConcurrency() {
        return Optional.ofNullable(this.maxConcurrency);
    }

    /**
     * A list of comma separated configuration variables to use. These are defined on the Variables tab. For example, OperatingSystem, Browser will run the tasks for both variables. Available when `execution_options.type` is `Multi-Configuration`.
     * 
     */
    @Import(name="multipliers")
    private @Nullable Output<String> multipliers;

    /**
     * @return A list of comma separated configuration variables to use. These are defined on the Variables tab. For example, OperatingSystem, Browser will run the tasks for both variables. Available when `execution_options.type` is `Multi-Configuration`.
     * 
     */
    public Optional<Output<String>> multipliers() {
        return Optional.ofNullable(this.multipliers);
    }

    /**
     * The execution type of the Job. Possible values are: `None`, `Multi-Configuration`, `Multi-Agent`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The execution type of the Job. Possible values are: `None`, `Multi-Configuration`, `Multi-Agent`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private BuildDefinitionJobTargetExecutionOptionsArgs() {}

    private BuildDefinitionJobTargetExecutionOptionsArgs(BuildDefinitionJobTargetExecutionOptionsArgs $) {
        this.continueOnError = $.continueOnError;
        this.maxConcurrency = $.maxConcurrency;
        this.multipliers = $.multipliers;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BuildDefinitionJobTargetExecutionOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BuildDefinitionJobTargetExecutionOptionsArgs $;

        public Builder() {
            $ = new BuildDefinitionJobTargetExecutionOptionsArgs();
        }

        public Builder(BuildDefinitionJobTargetExecutionOptionsArgs defaults) {
            $ = new BuildDefinitionJobTargetExecutionOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param continueOnError Whether to continue the job when an error occurs. Possible values are: `true`, `false`.
         * 
         * @return builder
         * 
         */
        public Builder continueOnError(@Nullable Output<Boolean> continueOnError) {
            $.continueOnError = continueOnError;
            return this;
        }

        /**
         * @param continueOnError Whether to continue the job when an error occurs. Possible values are: `true`, `false`.
         * 
         * @return builder
         * 
         */
        public Builder continueOnError(Boolean continueOnError) {
            return continueOnError(Output.of(continueOnError));
        }

        /**
         * @param maxConcurrency Limit the number of agents to be used. If job type is `AgentlessJob`, the concurrency is not configurable and is fixed to 50.
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrency(@Nullable Output<Integer> maxConcurrency) {
            $.maxConcurrency = maxConcurrency;
            return this;
        }

        /**
         * @param maxConcurrency Limit the number of agents to be used. If job type is `AgentlessJob`, the concurrency is not configurable and is fixed to 50.
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrency(Integer maxConcurrency) {
            return maxConcurrency(Output.of(maxConcurrency));
        }

        /**
         * @param multipliers A list of comma separated configuration variables to use. These are defined on the Variables tab. For example, OperatingSystem, Browser will run the tasks for both variables. Available when `execution_options.type` is `Multi-Configuration`.
         * 
         * @return builder
         * 
         */
        public Builder multipliers(@Nullable Output<String> multipliers) {
            $.multipliers = multipliers;
            return this;
        }

        /**
         * @param multipliers A list of comma separated configuration variables to use. These are defined on the Variables tab. For example, OperatingSystem, Browser will run the tasks for both variables. Available when `execution_options.type` is `Multi-Configuration`.
         * 
         * @return builder
         * 
         */
        public Builder multipliers(String multipliers) {
            return multipliers(Output.of(multipliers));
        }

        /**
         * @param type The execution type of the Job. Possible values are: `None`, `Multi-Configuration`, `Multi-Agent`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The execution type of the Job. Possible values are: `None`, `Multi-Configuration`, `Multi-Agent`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public BuildDefinitionJobTargetExecutionOptionsArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("BuildDefinitionJobTargetExecutionOptionsArgs", "type");
            }
            return $;
        }
    }

}
