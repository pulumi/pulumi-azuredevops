// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.outputs;

import com.pulumi.azuredevops.outputs.GetRepositoriesRepository;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRepositoriesResult {
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable Boolean includeHidden;
    /**
     * @return Git repository name.
     * 
     */
    private @Nullable String name;
    /**
     * @return Project identifier to which the Git repository belongs.
     * 
     */
    private @Nullable String projectId;
    /**
     * @return A list of existing projects in your Azure DevOps Organization with details about every project which includes:
     * 
     */
    private List<GetRepositoriesRepository> repositories;

    private GetRepositoriesResult() {}
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<Boolean> includeHidden() {
        return Optional.ofNullable(this.includeHidden);
    }
    /**
     * @return Git repository name.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Project identifier to which the Git repository belongs.
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }
    /**
     * @return A list of existing projects in your Azure DevOps Organization with details about every project which includes:
     * 
     */
    public List<GetRepositoriesRepository> repositories() {
        return this.repositories;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRepositoriesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private @Nullable Boolean includeHidden;
        private @Nullable String name;
        private @Nullable String projectId;
        private List<GetRepositoriesRepository> repositories;
        public Builder() {}
        public Builder(GetRepositoriesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.includeHidden = defaults.includeHidden;
    	      this.name = defaults.name;
    	      this.projectId = defaults.projectId;
    	      this.repositories = defaults.repositories;
        }

        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRepositoriesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder includeHidden(@Nullable Boolean includeHidden) {

            this.includeHidden = includeHidden;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(@Nullable String projectId) {

            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder repositories(List<GetRepositoriesRepository> repositories) {
            if (repositories == null) {
              throw new MissingRequiredPropertyException("GetRepositoriesResult", "repositories");
            }
            this.repositories = repositories;
            return this;
        }
        public Builder repositories(GetRepositoriesRepository... repositories) {
            return repositories(List.of(repositories));
        }
        public GetRepositoriesResult build() {
            final var _resultValue = new GetRepositoriesResult();
            _resultValue.id = id;
            _resultValue.includeHidden = includeHidden;
            _resultValue.name = name;
            _resultValue.projectId = projectId;
            _resultValue.repositories = repositories;
            return _resultValue;
        }
    }
}
