// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.inputs;

import com.pulumi.azuredevops.inputs.BuildDefinitionScheduleBranchFilterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BuildDefinitionScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final BuildDefinitionScheduleArgs Empty = new BuildDefinitionScheduleArgs();

    /**
     * block supports the following:
     * 
     */
    @Import(name="branchFilters")
    private @Nullable Output<List<BuildDefinitionScheduleBranchFilterArgs>> branchFilters;

    /**
     * @return block supports the following:
     * 
     */
    public Optional<Output<List<BuildDefinitionScheduleBranchFilterArgs>>> branchFilters() {
        return Optional.ofNullable(this.branchFilters);
    }

    @Import(name="daysToBuilds", required=true)
    private Output<List<String>> daysToBuilds;

    public Output<List<String>> daysToBuilds() {
        return this.daysToBuilds;
    }

    /**
     * The ID of the schedule job
     * 
     */
    @Import(name="scheduleJobId")
    private @Nullable Output<String> scheduleJobId;

    /**
     * @return The ID of the schedule job
     * 
     */
    public Optional<Output<String>> scheduleJobId() {
        return Optional.ofNullable(this.scheduleJobId);
    }

    @Import(name="scheduleOnlyWithChanges")
    private @Nullable Output<Boolean> scheduleOnlyWithChanges;

    public Optional<Output<Boolean>> scheduleOnlyWithChanges() {
        return Optional.ofNullable(this.scheduleOnlyWithChanges);
    }

    @Import(name="startHours")
    private @Nullable Output<Integer> startHours;

    public Optional<Output<Integer>> startHours() {
        return Optional.ofNullable(this.startHours);
    }

    @Import(name="startMinutes")
    private @Nullable Output<Integer> startMinutes;

    public Optional<Output<Integer>> startMinutes() {
        return Optional.ofNullable(this.startMinutes);
    }

    @Import(name="timeZone")
    private @Nullable Output<String> timeZone;

    public Optional<Output<String>> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }

    private BuildDefinitionScheduleArgs() {}

    private BuildDefinitionScheduleArgs(BuildDefinitionScheduleArgs $) {
        this.branchFilters = $.branchFilters;
        this.daysToBuilds = $.daysToBuilds;
        this.scheduleJobId = $.scheduleJobId;
        this.scheduleOnlyWithChanges = $.scheduleOnlyWithChanges;
        this.startHours = $.startHours;
        this.startMinutes = $.startMinutes;
        this.timeZone = $.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BuildDefinitionScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BuildDefinitionScheduleArgs $;

        public Builder() {
            $ = new BuildDefinitionScheduleArgs();
        }

        public Builder(BuildDefinitionScheduleArgs defaults) {
            $ = new BuildDefinitionScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param branchFilters block supports the following:
         * 
         * @return builder
         * 
         */
        public Builder branchFilters(@Nullable Output<List<BuildDefinitionScheduleBranchFilterArgs>> branchFilters) {
            $.branchFilters = branchFilters;
            return this;
        }

        /**
         * @param branchFilters block supports the following:
         * 
         * @return builder
         * 
         */
        public Builder branchFilters(List<BuildDefinitionScheduleBranchFilterArgs> branchFilters) {
            return branchFilters(Output.of(branchFilters));
        }

        /**
         * @param branchFilters block supports the following:
         * 
         * @return builder
         * 
         */
        public Builder branchFilters(BuildDefinitionScheduleBranchFilterArgs... branchFilters) {
            return branchFilters(List.of(branchFilters));
        }

        public Builder daysToBuilds(Output<List<String>> daysToBuilds) {
            $.daysToBuilds = daysToBuilds;
            return this;
        }

        public Builder daysToBuilds(List<String> daysToBuilds) {
            return daysToBuilds(Output.of(daysToBuilds));
        }

        public Builder daysToBuilds(String... daysToBuilds) {
            return daysToBuilds(List.of(daysToBuilds));
        }

        /**
         * @param scheduleJobId The ID of the schedule job
         * 
         * @return builder
         * 
         */
        public Builder scheduleJobId(@Nullable Output<String> scheduleJobId) {
            $.scheduleJobId = scheduleJobId;
            return this;
        }

        /**
         * @param scheduleJobId The ID of the schedule job
         * 
         * @return builder
         * 
         */
        public Builder scheduleJobId(String scheduleJobId) {
            return scheduleJobId(Output.of(scheduleJobId));
        }

        public Builder scheduleOnlyWithChanges(@Nullable Output<Boolean> scheduleOnlyWithChanges) {
            $.scheduleOnlyWithChanges = scheduleOnlyWithChanges;
            return this;
        }

        public Builder scheduleOnlyWithChanges(Boolean scheduleOnlyWithChanges) {
            return scheduleOnlyWithChanges(Output.of(scheduleOnlyWithChanges));
        }

        public Builder startHours(@Nullable Output<Integer> startHours) {
            $.startHours = startHours;
            return this;
        }

        public Builder startHours(Integer startHours) {
            return startHours(Output.of(startHours));
        }

        public Builder startMinutes(@Nullable Output<Integer> startMinutes) {
            $.startMinutes = startMinutes;
            return this;
        }

        public Builder startMinutes(Integer startMinutes) {
            return startMinutes(Output.of(startMinutes));
        }

        public Builder timeZone(@Nullable Output<String> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        public Builder timeZone(String timeZone) {
            return timeZone(Output.of(timeZone));
        }

        public BuildDefinitionScheduleArgs build() {
            $.daysToBuilds = Objects.requireNonNull($.daysToBuilds, "expected parameter 'daysToBuilds' to be non-null");
            return $;
        }
    }

}
