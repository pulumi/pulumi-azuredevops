// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FeedPermissionState extends com.pulumi.resources.ResourceArgs {

    public static final FeedPermissionState Empty = new FeedPermissionState();

    /**
     * The display name of the assignment
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The display name of the assignment
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The ID of the Feed.
     * 
     */
    @Import(name="feedId")
    private @Nullable Output<String> feedId;

    /**
     * @return The ID of the Feed.
     * 
     */
    public Optional<Output<String>> feedId() {
        return Optional.ofNullable(this.feedId);
    }

    /**
     * The Descriptor of identity you want to assign a role.
     * 
     */
    @Import(name="identityDescriptor")
    private @Nullable Output<String> identityDescriptor;

    /**
     * @return The Descriptor of identity you want to assign a role.
     * 
     */
    public Optional<Output<String>> identityDescriptor() {
        return Optional.ofNullable(this.identityDescriptor);
    }

    /**
     * The ID of the identity.
     * 
     */
    @Import(name="identityId")
    private @Nullable Output<String> identityId;

    /**
     * @return The ID of the identity.
     * 
     */
    public Optional<Output<String>> identityId() {
        return Optional.ofNullable(this.identityId);
    }

    /**
     * The ID of the Project Feed is created in. If not specified, feed will be created at the organization level.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The ID of the Project Feed is created in. If not specified, feed will be created at the organization level.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The role to be assigned, possible values : `reader`, `contributor`, `collaborator`, `administrator`
     * 
     */
    @Import(name="role")
    private @Nullable Output<String> role;

    /**
     * @return The role to be assigned, possible values : `reader`, `contributor`, `collaborator`, `administrator`
     * 
     */
    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    private FeedPermissionState() {}

    private FeedPermissionState(FeedPermissionState $) {
        this.displayName = $.displayName;
        this.feedId = $.feedId;
        this.identityDescriptor = $.identityDescriptor;
        this.identityId = $.identityId;
        this.projectId = $.projectId;
        this.role = $.role;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FeedPermissionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FeedPermissionState $;

        public Builder() {
            $ = new FeedPermissionState();
        }

        public Builder(FeedPermissionState defaults) {
            $ = new FeedPermissionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName The display name of the assignment
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The display name of the assignment
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param feedId The ID of the Feed.
         * 
         * @return builder
         * 
         */
        public Builder feedId(@Nullable Output<String> feedId) {
            $.feedId = feedId;
            return this;
        }

        /**
         * @param feedId The ID of the Feed.
         * 
         * @return builder
         * 
         */
        public Builder feedId(String feedId) {
            return feedId(Output.of(feedId));
        }

        /**
         * @param identityDescriptor The Descriptor of identity you want to assign a role.
         * 
         * @return builder
         * 
         */
        public Builder identityDescriptor(@Nullable Output<String> identityDescriptor) {
            $.identityDescriptor = identityDescriptor;
            return this;
        }

        /**
         * @param identityDescriptor The Descriptor of identity you want to assign a role.
         * 
         * @return builder
         * 
         */
        public Builder identityDescriptor(String identityDescriptor) {
            return identityDescriptor(Output.of(identityDescriptor));
        }

        /**
         * @param identityId The ID of the identity.
         * 
         * @return builder
         * 
         */
        public Builder identityId(@Nullable Output<String> identityId) {
            $.identityId = identityId;
            return this;
        }

        /**
         * @param identityId The ID of the identity.
         * 
         * @return builder
         * 
         */
        public Builder identityId(String identityId) {
            return identityId(Output.of(identityId));
        }

        /**
         * @param projectId The ID of the Project Feed is created in. If not specified, feed will be created at the organization level.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The ID of the Project Feed is created in. If not specified, feed will be created at the organization level.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param role The role to be assigned, possible values : `reader`, `contributor`, `collaborator`, `administrator`
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role The role to be assigned, possible values : `reader`, `contributor`, `collaborator`, `administrator`
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        public FeedPermissionState build() {
            return $;
        }
    }

}
