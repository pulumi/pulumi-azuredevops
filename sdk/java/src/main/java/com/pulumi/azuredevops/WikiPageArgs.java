// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WikiPageArgs extends com.pulumi.resources.ResourceArgs {

    public static final WikiPageArgs Empty = new WikiPageArgs();

    /**
     * The content of the wiki page.
     * 
     */
    @Import(name="content", required=true)
    private Output<String> content;

    /**
     * @return The content of the wiki page.
     * 
     */
    public Output<String> content() {
        return this.content;
    }

    @Import(name="etag")
    private @Nullable Output<String> etag;

    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * The path of the wiki page.
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return The path of the wiki page.
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    /**
     * The ID of the Project.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return The ID of the Project.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * The ID of the Wiki.
     * 
     */
    @Import(name="wikiId", required=true)
    private Output<String> wikiId;

    /**
     * @return The ID of the Wiki.
     * 
     */
    public Output<String> wikiId() {
        return this.wikiId;
    }

    private WikiPageArgs() {}

    private WikiPageArgs(WikiPageArgs $) {
        this.content = $.content;
        this.etag = $.etag;
        this.path = $.path;
        this.projectId = $.projectId;
        this.wikiId = $.wikiId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WikiPageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WikiPageArgs $;

        public Builder() {
            $ = new WikiPageArgs();
        }

        public Builder(WikiPageArgs defaults) {
            $ = new WikiPageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param content The content of the wiki page.
         * 
         * @return builder
         * 
         */
        public Builder content(Output<String> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content The content of the wiki page.
         * 
         * @return builder
         * 
         */
        public Builder content(String content) {
            return content(Output.of(content));
        }

        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        /**
         * @param path The path of the wiki page.
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The path of the wiki page.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param projectId The ID of the Project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The ID of the Project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param wikiId The ID of the Wiki.
         * 
         * @return builder
         * 
         */
        public Builder wikiId(Output<String> wikiId) {
            $.wikiId = wikiId;
            return this;
        }

        /**
         * @param wikiId The ID of the Wiki.
         * 
         * @return builder
         * 
         */
        public Builder wikiId(String wikiId) {
            return wikiId(Output.of(wikiId));
        }

        public WikiPageArgs build() {
            if ($.content == null) {
                throw new MissingRequiredPropertyException("WikiPageArgs", "content");
            }
            if ($.path == null) {
                throw new MissingRequiredPropertyException("WikiPageArgs", "path");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("WikiPageArgs", "projectId");
            }
            if ($.wikiId == null) {
                throw new MissingRequiredPropertyException("WikiPageArgs", "wikiId");
            }
            return $;
        }
    }

}
