// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTeamsTeam {
    /**
     * @return List of subject descriptors for `administrators` of the team.
     * 
     */
    private List<String> administrators;
    /**
     * @return Team description.
     * 
     */
    private String description;
    private String id;
    /**
     * @return List of subject descriptors for `members` of the team.
     * 
     */
    private List<String> members;
    /**
     * @return Team name.
     * 
     */
    private String name;
    /**
     * @return The Project ID. If no project ID all teams of the organization will be returned.
     * 
     */
    private String projectId;

    private GetTeamsTeam() {}
    /**
     * @return List of subject descriptors for `administrators` of the team.
     * 
     */
    public List<String> administrators() {
        return this.administrators;
    }
    /**
     * @return Team description.
     * 
     */
    public String description() {
        return this.description;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return List of subject descriptors for `members` of the team.
     * 
     */
    public List<String> members() {
        return this.members;
    }
    /**
     * @return Team name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The Project ID. If no project ID all teams of the organization will be returned.
     * 
     */
    public String projectId() {
        return this.projectId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTeamsTeam defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> administrators;
        private String description;
        private String id;
        private List<String> members;
        private String name;
        private String projectId;
        public Builder() {}
        public Builder(GetTeamsTeam defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.administrators = defaults.administrators;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.members = defaults.members;
    	      this.name = defaults.name;
    	      this.projectId = defaults.projectId;
        }

        @CustomType.Setter
        public Builder administrators(List<String> administrators) {
            if (administrators == null) {
              throw new MissingRequiredPropertyException("GetTeamsTeam", "administrators");
            }
            this.administrators = administrators;
            return this;
        }
        public Builder administrators(String... administrators) {
            return administrators(List.of(administrators));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetTeamsTeam", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetTeamsTeam", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder members(List<String> members) {
            if (members == null) {
              throw new MissingRequiredPropertyException("GetTeamsTeam", "members");
            }
            this.members = members;
            return this;
        }
        public Builder members(String... members) {
            return members(List.of(members));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetTeamsTeam", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetTeamsTeam", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        public GetTeamsTeam build() {
            final var _resultValue = new GetTeamsTeam();
            _resultValue.administrators = administrators;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.members = members;
            _resultValue.name = name;
            _resultValue.projectId = projectId;
            return _resultValue;
        }
    }
}
