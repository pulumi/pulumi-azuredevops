// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRepositoriesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRepositoriesArgs Empty = new GetRepositoriesArgs();

    /**
     * Defaults to `false`.
     * 
     * DataSource without specifying any arguments will return all Git repositories of an organization.
     * 
     */
    @Import(name="includeHidden")
    private @Nullable Output<Boolean> includeHidden;

    /**
     * @return Defaults to `false`.
     * 
     * DataSource without specifying any arguments will return all Git repositories of an organization.
     * 
     */
    public Optional<Output<Boolean>> includeHidden() {
        return Optional.ofNullable(this.includeHidden);
    }

    /**
     * Name of the Git repository to retrieve; requires `projectId` to be specified as well
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the Git repository to retrieve; requires `projectId` to be specified as well
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * ID of project to list Git repositories
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return ID of project to list Git repositories
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    private GetRepositoriesArgs() {}

    private GetRepositoriesArgs(GetRepositoriesArgs $) {
        this.includeHidden = $.includeHidden;
        this.name = $.name;
        this.projectId = $.projectId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRepositoriesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRepositoriesArgs $;

        public Builder() {
            $ = new GetRepositoriesArgs();
        }

        public Builder(GetRepositoriesArgs defaults) {
            $ = new GetRepositoriesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param includeHidden Defaults to `false`.
         * 
         * DataSource without specifying any arguments will return all Git repositories of an organization.
         * 
         * @return builder
         * 
         */
        public Builder includeHidden(@Nullable Output<Boolean> includeHidden) {
            $.includeHidden = includeHidden;
            return this;
        }

        /**
         * @param includeHidden Defaults to `false`.
         * 
         * DataSource without specifying any arguments will return all Git repositories of an organization.
         * 
         * @return builder
         * 
         */
        public Builder includeHidden(Boolean includeHidden) {
            return includeHidden(Output.of(includeHidden));
        }

        /**
         * @param name Name of the Git repository to retrieve; requires `projectId` to be specified as well
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the Git repository to retrieve; requires `projectId` to be specified as well
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectId ID of project to list Git repositories
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId ID of project to list Git repositories
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        public GetRepositoriesArgs build() {
            return $;
        }
    }

}
