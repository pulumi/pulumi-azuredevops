// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuredevops.Build.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BuildDefinitionRepositoryArgs extends com.pulumi.resources.ResourceArgs {

    public static final BuildDefinitionRepositoryArgs Empty = new BuildDefinitionRepositoryArgs();

    /**
     * The branch name for which builds are triggered. Defaults to `master`.
     * 
     */
    @Import(name="branchName")
    private @Nullable Output<String> branchName;

    /**
     * @return The branch name for which builds are triggered. Defaults to `master`.
     * 
     */
    public Optional<Output<String>> branchName() {
        return Optional.ofNullable(this.branchName);
    }

    /**
     * The Github Enterprise URL. Used if `repo_type` is `GithubEnterprise`.
     * 
     */
    @Import(name="githubEnterpriseUrl")
    private @Nullable Output<String> githubEnterpriseUrl;

    /**
     * @return The Github Enterprise URL. Used if `repo_type` is `GithubEnterprise`.
     * 
     */
    public Optional<Output<String>> githubEnterpriseUrl() {
        return Optional.ofNullable(this.githubEnterpriseUrl);
    }

    /**
     * The id of the repository. For `TfsGit` repos, this is simply the ID of the repository. For `Github` repos, this will take the form of `&lt;GitHub Org&gt;/&lt;Repo Name&gt;`. For `Bitbucket` repos, this will take the form of `&lt;Workspace ID&gt;/&lt;Repo Name&gt;`.
     * 
     */
    @Import(name="repoId", required=true)
    private Output<String> repoId;

    /**
     * @return The id of the repository. For `TfsGit` repos, this is simply the ID of the repository. For `Github` repos, this will take the form of `&lt;GitHub Org&gt;/&lt;Repo Name&gt;`. For `Bitbucket` repos, this will take the form of `&lt;Workspace ID&gt;/&lt;Repo Name&gt;`.
     * 
     */
    public Output<String> repoId() {
        return this.repoId;
    }

    /**
     * The repository type. Valid values: `GitHub` or `TfsGit` or `Bitbucket` or `GitHub Enterprise`. Defaults to `GitHub`. If `repo_type` is `GitHubEnterprise`, must use existing project and GitHub Enterprise service connection.
     * 
     */
    @Import(name="repoType", required=true)
    private Output<String> repoType;

    /**
     * @return The repository type. Valid values: `GitHub` or `TfsGit` or `Bitbucket` or `GitHub Enterprise`. Defaults to `GitHub`. If `repo_type` is `GitHubEnterprise`, must use existing project and GitHub Enterprise service connection.
     * 
     */
    public Output<String> repoType() {
        return this.repoType;
    }

    /**
     * Report build status. Default is true.
     * 
     */
    @Import(name="reportBuildStatus")
    private @Nullable Output<Boolean> reportBuildStatus;

    /**
     * @return Report build status. Default is true.
     * 
     */
    public Optional<Output<Boolean>> reportBuildStatus() {
        return Optional.ofNullable(this.reportBuildStatus);
    }

    /**
     * The service connection ID. Used if the `repo_type` is `GitHub` or `GitHubEnterprise`.
     * 
     */
    @Import(name="serviceConnectionId")
    private @Nullable Output<String> serviceConnectionId;

    /**
     * @return The service connection ID. Used if the `repo_type` is `GitHub` or `GitHubEnterprise`.
     * 
     */
    public Optional<Output<String>> serviceConnectionId() {
        return Optional.ofNullable(this.serviceConnectionId);
    }

    /**
     * The path of the Yaml file describing the build definition.
     * 
     */
    @Import(name="ymlPath", required=true)
    private Output<String> ymlPath;

    /**
     * @return The path of the Yaml file describing the build definition.
     * 
     */
    public Output<String> ymlPath() {
        return this.ymlPath;
    }

    private BuildDefinitionRepositoryArgs() {}

    private BuildDefinitionRepositoryArgs(BuildDefinitionRepositoryArgs $) {
        this.branchName = $.branchName;
        this.githubEnterpriseUrl = $.githubEnterpriseUrl;
        this.repoId = $.repoId;
        this.repoType = $.repoType;
        this.reportBuildStatus = $.reportBuildStatus;
        this.serviceConnectionId = $.serviceConnectionId;
        this.ymlPath = $.ymlPath;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BuildDefinitionRepositoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BuildDefinitionRepositoryArgs $;

        public Builder() {
            $ = new BuildDefinitionRepositoryArgs();
        }

        public Builder(BuildDefinitionRepositoryArgs defaults) {
            $ = new BuildDefinitionRepositoryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param branchName The branch name for which builds are triggered. Defaults to `master`.
         * 
         * @return builder
         * 
         */
        public Builder branchName(@Nullable Output<String> branchName) {
            $.branchName = branchName;
            return this;
        }

        /**
         * @param branchName The branch name for which builds are triggered. Defaults to `master`.
         * 
         * @return builder
         * 
         */
        public Builder branchName(String branchName) {
            return branchName(Output.of(branchName));
        }

        /**
         * @param githubEnterpriseUrl The Github Enterprise URL. Used if `repo_type` is `GithubEnterprise`.
         * 
         * @return builder
         * 
         */
        public Builder githubEnterpriseUrl(@Nullable Output<String> githubEnterpriseUrl) {
            $.githubEnterpriseUrl = githubEnterpriseUrl;
            return this;
        }

        /**
         * @param githubEnterpriseUrl The Github Enterprise URL. Used if `repo_type` is `GithubEnterprise`.
         * 
         * @return builder
         * 
         */
        public Builder githubEnterpriseUrl(String githubEnterpriseUrl) {
            return githubEnterpriseUrl(Output.of(githubEnterpriseUrl));
        }

        /**
         * @param repoId The id of the repository. For `TfsGit` repos, this is simply the ID of the repository. For `Github` repos, this will take the form of `&lt;GitHub Org&gt;/&lt;Repo Name&gt;`. For `Bitbucket` repos, this will take the form of `&lt;Workspace ID&gt;/&lt;Repo Name&gt;`.
         * 
         * @return builder
         * 
         */
        public Builder repoId(Output<String> repoId) {
            $.repoId = repoId;
            return this;
        }

        /**
         * @param repoId The id of the repository. For `TfsGit` repos, this is simply the ID of the repository. For `Github` repos, this will take the form of `&lt;GitHub Org&gt;/&lt;Repo Name&gt;`. For `Bitbucket` repos, this will take the form of `&lt;Workspace ID&gt;/&lt;Repo Name&gt;`.
         * 
         * @return builder
         * 
         */
        public Builder repoId(String repoId) {
            return repoId(Output.of(repoId));
        }

        /**
         * @param repoType The repository type. Valid values: `GitHub` or `TfsGit` or `Bitbucket` or `GitHub Enterprise`. Defaults to `GitHub`. If `repo_type` is `GitHubEnterprise`, must use existing project and GitHub Enterprise service connection.
         * 
         * @return builder
         * 
         */
        public Builder repoType(Output<String> repoType) {
            $.repoType = repoType;
            return this;
        }

        /**
         * @param repoType The repository type. Valid values: `GitHub` or `TfsGit` or `Bitbucket` or `GitHub Enterprise`. Defaults to `GitHub`. If `repo_type` is `GitHubEnterprise`, must use existing project and GitHub Enterprise service connection.
         * 
         * @return builder
         * 
         */
        public Builder repoType(String repoType) {
            return repoType(Output.of(repoType));
        }

        /**
         * @param reportBuildStatus Report build status. Default is true.
         * 
         * @return builder
         * 
         */
        public Builder reportBuildStatus(@Nullable Output<Boolean> reportBuildStatus) {
            $.reportBuildStatus = reportBuildStatus;
            return this;
        }

        /**
         * @param reportBuildStatus Report build status. Default is true.
         * 
         * @return builder
         * 
         */
        public Builder reportBuildStatus(Boolean reportBuildStatus) {
            return reportBuildStatus(Output.of(reportBuildStatus));
        }

        /**
         * @param serviceConnectionId The service connection ID. Used if the `repo_type` is `GitHub` or `GitHubEnterprise`.
         * 
         * @return builder
         * 
         */
        public Builder serviceConnectionId(@Nullable Output<String> serviceConnectionId) {
            $.serviceConnectionId = serviceConnectionId;
            return this;
        }

        /**
         * @param serviceConnectionId The service connection ID. Used if the `repo_type` is `GitHub` or `GitHubEnterprise`.
         * 
         * @return builder
         * 
         */
        public Builder serviceConnectionId(String serviceConnectionId) {
            return serviceConnectionId(Output.of(serviceConnectionId));
        }

        /**
         * @param ymlPath The path of the Yaml file describing the build definition.
         * 
         * @return builder
         * 
         */
        public Builder ymlPath(Output<String> ymlPath) {
            $.ymlPath = ymlPath;
            return this;
        }

        /**
         * @param ymlPath The path of the Yaml file describing the build definition.
         * 
         * @return builder
         * 
         */
        public Builder ymlPath(String ymlPath) {
            return ymlPath(Output.of(ymlPath));
        }

        public BuildDefinitionRepositoryArgs build() {
            if ($.repoId == null) {
                throw new MissingRequiredPropertyException("BuildDefinitionRepositoryArgs", "repoId");
            }
            if ($.repoType == null) {
                throw new MissingRequiredPropertyException("BuildDefinitionRepositoryArgs", "repoType");
            }
            if ($.ymlPath == null) {
                throw new MissingRequiredPropertyException("BuildDefinitionRepositoryArgs", "ymlPath");
            }
            return $;
        }
    }

}
