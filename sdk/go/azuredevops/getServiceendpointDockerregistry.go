// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azuredevops

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Docker Registry Service Endpoint.
//
// ## Example Usage
//
// ### By Service Endpoint ID
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := azuredevops.LookupProject(ctx, &azuredevops.LookupProjectArgs{
//				Name: pulumi.StringRef("Example Project"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleGetServiceendpointDockerregistry, err := azuredevops.GetServiceendpointDockerregistry(ctx, &azuredevops.GetServiceendpointDockerregistryArgs{
//				ProjectId:         example.Id,
//				ServiceEndpointId: pulumi.StringRef("00000000-0000-0000-0000-000000000000"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("serviceEndpointName", exampleGetServiceendpointDockerregistry.ServiceEndpointName)
//			return nil
//		})
//	}
//
// ```
//
// ### By Service Endpoint Name
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := azuredevops.LookupProject(ctx, &azuredevops.LookupProjectArgs{
//				Name: pulumi.StringRef("Example Project"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = azuredevops.GetServiceendpointDockerregistry(ctx, &azuredevops.GetServiceendpointDockerregistryArgs{
//				ProjectId:           example.Id,
//				ServiceEndpointName: pulumi.StringRef("Example-Service-Endpoint"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("serviceEndpointId", serviceendpoint.Id)
//			return nil
//		})
//	}
//
// ```
func GetServiceendpointDockerregistry(ctx *pulumi.Context, args *GetServiceendpointDockerregistryArgs, opts ...pulumi.InvokeOption) (*GetServiceendpointDockerregistryResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetServiceendpointDockerregistryResult
	err := ctx.Invoke("azuredevops:index/getServiceendpointDockerregistry:getServiceendpointDockerregistry", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getServiceendpointDockerregistry.
type GetServiceendpointDockerregistryArgs struct {
	// The ID of the project.
	ProjectId string `pulumi:"projectId"`
	// the ID of the Service Endpoint.
	ServiceEndpointId *string `pulumi:"serviceEndpointId"`
	// the Name of the Service Endpoint.
	//
	// > **NOTE:** 1. One of either `serviceEndpointId` or `serviceEndpointName` must be specified.
	// <br>2. When supplying `serviceEndpointName`, take care to ensure that this is a unique name.
	ServiceEndpointName *string `pulumi:"serviceEndpointName"`
}

// A collection of values returned by getServiceendpointDockerregistry.
type GetServiceendpointDockerregistryResult struct {
	// The Authorization scheme.
	Authorization map[string]string `pulumi:"authorization"`
	// The Service Endpoint description.
	Description string `pulumi:"description"`
	// The email for Docker account user.
	DockerEmail string `pulumi:"dockerEmail"`
	// The password for the account user identified above.
	DockerPassword string `pulumi:"dockerPassword"`
	// The URL of the Docker registry.
	DockerRegistry string `pulumi:"dockerRegistry"`
	// The identifier of the Docker account user.
	DockerUsername string `pulumi:"dockerUsername"`
	// The provider-assigned unique ID for this managed resource.
	Id        string `pulumi:"id"`
	ProjectId string `pulumi:"projectId"`
	// Can be "DockerHub" or "Others" (Default "DockerHub")
	RegistryType        string `pulumi:"registryType"`
	ServiceEndpointId   string `pulumi:"serviceEndpointId"`
	ServiceEndpointName string `pulumi:"serviceEndpointName"`
}

func GetServiceendpointDockerregistryOutput(ctx *pulumi.Context, args GetServiceendpointDockerregistryOutputArgs, opts ...pulumi.InvokeOption) GetServiceendpointDockerregistryResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetServiceendpointDockerregistryResultOutput, error) {
			args := v.(GetServiceendpointDockerregistryArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azuredevops:index/getServiceendpointDockerregistry:getServiceendpointDockerregistry", args, GetServiceendpointDockerregistryResultOutput{}, options).(GetServiceendpointDockerregistryResultOutput), nil
		}).(GetServiceendpointDockerregistryResultOutput)
}

// A collection of arguments for invoking getServiceendpointDockerregistry.
type GetServiceendpointDockerregistryOutputArgs struct {
	// The ID of the project.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// the ID of the Service Endpoint.
	ServiceEndpointId pulumi.StringPtrInput `pulumi:"serviceEndpointId"`
	// the Name of the Service Endpoint.
	//
	// > **NOTE:** 1. One of either `serviceEndpointId` or `serviceEndpointName` must be specified.
	// <br>2. When supplying `serviceEndpointName`, take care to ensure that this is a unique name.
	ServiceEndpointName pulumi.StringPtrInput `pulumi:"serviceEndpointName"`
}

func (GetServiceendpointDockerregistryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceendpointDockerregistryArgs)(nil)).Elem()
}

// A collection of values returned by getServiceendpointDockerregistry.
type GetServiceendpointDockerregistryResultOutput struct{ *pulumi.OutputState }

func (GetServiceendpointDockerregistryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceendpointDockerregistryResult)(nil)).Elem()
}

func (o GetServiceendpointDockerregistryResultOutput) ToGetServiceendpointDockerregistryResultOutput() GetServiceendpointDockerregistryResultOutput {
	return o
}

func (o GetServiceendpointDockerregistryResultOutput) ToGetServiceendpointDockerregistryResultOutputWithContext(ctx context.Context) GetServiceendpointDockerregistryResultOutput {
	return o
}

// The Authorization scheme.
func (o GetServiceendpointDockerregistryResultOutput) Authorization() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetServiceendpointDockerregistryResult) map[string]string { return v.Authorization }).(pulumi.StringMapOutput)
}

// The Service Endpoint description.
func (o GetServiceendpointDockerregistryResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceendpointDockerregistryResult) string { return v.Description }).(pulumi.StringOutput)
}

// The email for Docker account user.
func (o GetServiceendpointDockerregistryResultOutput) DockerEmail() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceendpointDockerregistryResult) string { return v.DockerEmail }).(pulumi.StringOutput)
}

// The password for the account user identified above.
func (o GetServiceendpointDockerregistryResultOutput) DockerPassword() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceendpointDockerregistryResult) string { return v.DockerPassword }).(pulumi.StringOutput)
}

// The URL of the Docker registry.
func (o GetServiceendpointDockerregistryResultOutput) DockerRegistry() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceendpointDockerregistryResult) string { return v.DockerRegistry }).(pulumi.StringOutput)
}

// The identifier of the Docker account user.
func (o GetServiceendpointDockerregistryResultOutput) DockerUsername() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceendpointDockerregistryResult) string { return v.DockerUsername }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetServiceendpointDockerregistryResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceendpointDockerregistryResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetServiceendpointDockerregistryResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceendpointDockerregistryResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Can be "DockerHub" or "Others" (Default "DockerHub")
func (o GetServiceendpointDockerregistryResultOutput) RegistryType() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceendpointDockerregistryResult) string { return v.RegistryType }).(pulumi.StringOutput)
}

func (o GetServiceendpointDockerregistryResultOutput) ServiceEndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceendpointDockerregistryResult) string { return v.ServiceEndpointId }).(pulumi.StringOutput)
}

func (o GetServiceendpointDockerregistryResultOutput) ServiceEndpointName() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceendpointDockerregistryResult) string { return v.ServiceEndpointName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetServiceendpointDockerregistryResultOutput{})
}
