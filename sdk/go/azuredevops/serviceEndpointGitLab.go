// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azuredevops

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an GitLab service endpoint within Azure DevOps. Using this service endpoint requires you to install: [GitLab Integration](https://marketplace.visualstudio.com/items?itemName=onlyutkarsh.gitlab-integration)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := azuredevops.NewProject(ctx, "example", &azuredevops.ProjectArgs{
//				Name:             pulumi.String("Example Project"),
//				Visibility:       pulumi.String("private"),
//				VersionControl:   pulumi.String("Git"),
//				WorkItemTemplate: pulumi.String("Agile"),
//				Description:      pulumi.String("Managed by Pulumi"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = azuredevops.NewServiceEndpointGitLab(ctx, "example", &azuredevops.ServiceEndpointGitLabArgs{
//				ProjectId:           example.ID(),
//				ServiceEndpointName: pulumi.String("Example GitLab"),
//				Url:                 pulumi.String("https://gitlab.com"),
//				Username:            pulumi.String("username"),
//				ApiToken:            pulumi.String("token"),
//				Description:         pulumi.String("Managed by Pulumi"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Relevant Links
//
// - [Azure DevOps Service REST API 7.0 - Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-7.0)
//
// ## Import
//
// Azure DevOps GitLab Service Endpoint can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**
//
// ```sh
// $ pulumi import azuredevops:index/serviceEndpointGitLab:ServiceEndpointGitLab example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000
// ```
type ServiceEndpointGitLab struct {
	pulumi.CustomResourceState

	// The API token of the GitLab.
	ApiToken      pulumi.StringOutput    `pulumi:"apiToken"`
	Authorization pulumi.StringMapOutput `pulumi:"authorization"`
	Description   pulumi.StringPtrOutput `pulumi:"description"`
	// The ID of the project.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The Service Endpoint name.
	ServiceEndpointName pulumi.StringOutput `pulumi:"serviceEndpointName"`
	// The server URL for GitLab. Example: `https://gitlab.com`.
	Url pulumi.StringOutput `pulumi:"url"`
	// The username used to login to GitLab.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewServiceEndpointGitLab registers a new resource with the given unique name, arguments, and options.
func NewServiceEndpointGitLab(ctx *pulumi.Context,
	name string, args *ServiceEndpointGitLabArgs, opts ...pulumi.ResourceOption) (*ServiceEndpointGitLab, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiToken == nil {
		return nil, errors.New("invalid value for required argument 'ApiToken'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.ServiceEndpointName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceEndpointName'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.ApiToken != nil {
		args.ApiToken = pulumi.ToSecret(args.ApiToken).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"apiToken",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceEndpointGitLab
	err := ctx.RegisterResource("azuredevops:index/serviceEndpointGitLab:ServiceEndpointGitLab", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceEndpointGitLab gets an existing ServiceEndpointGitLab resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceEndpointGitLab(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceEndpointGitLabState, opts ...pulumi.ResourceOption) (*ServiceEndpointGitLab, error) {
	var resource ServiceEndpointGitLab
	err := ctx.ReadResource("azuredevops:index/serviceEndpointGitLab:ServiceEndpointGitLab", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceEndpointGitLab resources.
type serviceEndpointGitLabState struct {
	// The API token of the GitLab.
	ApiToken      *string           `pulumi:"apiToken"`
	Authorization map[string]string `pulumi:"authorization"`
	Description   *string           `pulumi:"description"`
	// The ID of the project.
	ProjectId *string `pulumi:"projectId"`
	// The Service Endpoint name.
	ServiceEndpointName *string `pulumi:"serviceEndpointName"`
	// The server URL for GitLab. Example: `https://gitlab.com`.
	Url *string `pulumi:"url"`
	// The username used to login to GitLab.
	Username *string `pulumi:"username"`
}

type ServiceEndpointGitLabState struct {
	// The API token of the GitLab.
	ApiToken      pulumi.StringPtrInput
	Authorization pulumi.StringMapInput
	Description   pulumi.StringPtrInput
	// The ID of the project.
	ProjectId pulumi.StringPtrInput
	// The Service Endpoint name.
	ServiceEndpointName pulumi.StringPtrInput
	// The server URL for GitLab. Example: `https://gitlab.com`.
	Url pulumi.StringPtrInput
	// The username used to login to GitLab.
	Username pulumi.StringPtrInput
}

func (ServiceEndpointGitLabState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceEndpointGitLabState)(nil)).Elem()
}

type serviceEndpointGitLabArgs struct {
	// The API token of the GitLab.
	ApiToken    string  `pulumi:"apiToken"`
	Description *string `pulumi:"description"`
	// The ID of the project.
	ProjectId string `pulumi:"projectId"`
	// The Service Endpoint name.
	ServiceEndpointName string `pulumi:"serviceEndpointName"`
	// The server URL for GitLab. Example: `https://gitlab.com`.
	Url string `pulumi:"url"`
	// The username used to login to GitLab.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a ServiceEndpointGitLab resource.
type ServiceEndpointGitLabArgs struct {
	// The API token of the GitLab.
	ApiToken    pulumi.StringInput
	Description pulumi.StringPtrInput
	// The ID of the project.
	ProjectId pulumi.StringInput
	// The Service Endpoint name.
	ServiceEndpointName pulumi.StringInput
	// The server URL for GitLab. Example: `https://gitlab.com`.
	Url pulumi.StringInput
	// The username used to login to GitLab.
	Username pulumi.StringInput
}

func (ServiceEndpointGitLabArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceEndpointGitLabArgs)(nil)).Elem()
}

type ServiceEndpointGitLabInput interface {
	pulumi.Input

	ToServiceEndpointGitLabOutput() ServiceEndpointGitLabOutput
	ToServiceEndpointGitLabOutputWithContext(ctx context.Context) ServiceEndpointGitLabOutput
}

func (*ServiceEndpointGitLab) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceEndpointGitLab)(nil)).Elem()
}

func (i *ServiceEndpointGitLab) ToServiceEndpointGitLabOutput() ServiceEndpointGitLabOutput {
	return i.ToServiceEndpointGitLabOutputWithContext(context.Background())
}

func (i *ServiceEndpointGitLab) ToServiceEndpointGitLabOutputWithContext(ctx context.Context) ServiceEndpointGitLabOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEndpointGitLabOutput)
}

// ServiceEndpointGitLabArrayInput is an input type that accepts ServiceEndpointGitLabArray and ServiceEndpointGitLabArrayOutput values.
// You can construct a concrete instance of `ServiceEndpointGitLabArrayInput` via:
//
//	ServiceEndpointGitLabArray{ ServiceEndpointGitLabArgs{...} }
type ServiceEndpointGitLabArrayInput interface {
	pulumi.Input

	ToServiceEndpointGitLabArrayOutput() ServiceEndpointGitLabArrayOutput
	ToServiceEndpointGitLabArrayOutputWithContext(context.Context) ServiceEndpointGitLabArrayOutput
}

type ServiceEndpointGitLabArray []ServiceEndpointGitLabInput

func (ServiceEndpointGitLabArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceEndpointGitLab)(nil)).Elem()
}

func (i ServiceEndpointGitLabArray) ToServiceEndpointGitLabArrayOutput() ServiceEndpointGitLabArrayOutput {
	return i.ToServiceEndpointGitLabArrayOutputWithContext(context.Background())
}

func (i ServiceEndpointGitLabArray) ToServiceEndpointGitLabArrayOutputWithContext(ctx context.Context) ServiceEndpointGitLabArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEndpointGitLabArrayOutput)
}

// ServiceEndpointGitLabMapInput is an input type that accepts ServiceEndpointGitLabMap and ServiceEndpointGitLabMapOutput values.
// You can construct a concrete instance of `ServiceEndpointGitLabMapInput` via:
//
//	ServiceEndpointGitLabMap{ "key": ServiceEndpointGitLabArgs{...} }
type ServiceEndpointGitLabMapInput interface {
	pulumi.Input

	ToServiceEndpointGitLabMapOutput() ServiceEndpointGitLabMapOutput
	ToServiceEndpointGitLabMapOutputWithContext(context.Context) ServiceEndpointGitLabMapOutput
}

type ServiceEndpointGitLabMap map[string]ServiceEndpointGitLabInput

func (ServiceEndpointGitLabMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceEndpointGitLab)(nil)).Elem()
}

func (i ServiceEndpointGitLabMap) ToServiceEndpointGitLabMapOutput() ServiceEndpointGitLabMapOutput {
	return i.ToServiceEndpointGitLabMapOutputWithContext(context.Background())
}

func (i ServiceEndpointGitLabMap) ToServiceEndpointGitLabMapOutputWithContext(ctx context.Context) ServiceEndpointGitLabMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEndpointGitLabMapOutput)
}

type ServiceEndpointGitLabOutput struct{ *pulumi.OutputState }

func (ServiceEndpointGitLabOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceEndpointGitLab)(nil)).Elem()
}

func (o ServiceEndpointGitLabOutput) ToServiceEndpointGitLabOutput() ServiceEndpointGitLabOutput {
	return o
}

func (o ServiceEndpointGitLabOutput) ToServiceEndpointGitLabOutputWithContext(ctx context.Context) ServiceEndpointGitLabOutput {
	return o
}

// The API token of the GitLab.
func (o ServiceEndpointGitLabOutput) ApiToken() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceEndpointGitLab) pulumi.StringOutput { return v.ApiToken }).(pulumi.StringOutput)
}

func (o ServiceEndpointGitLabOutput) Authorization() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServiceEndpointGitLab) pulumi.StringMapOutput { return v.Authorization }).(pulumi.StringMapOutput)
}

func (o ServiceEndpointGitLabOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceEndpointGitLab) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The ID of the project.
func (o ServiceEndpointGitLabOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceEndpointGitLab) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The Service Endpoint name.
func (o ServiceEndpointGitLabOutput) ServiceEndpointName() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceEndpointGitLab) pulumi.StringOutput { return v.ServiceEndpointName }).(pulumi.StringOutput)
}

// The server URL for GitLab. Example: `https://gitlab.com`.
func (o ServiceEndpointGitLabOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceEndpointGitLab) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// The username used to login to GitLab.
func (o ServiceEndpointGitLabOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceEndpointGitLab) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type ServiceEndpointGitLabArrayOutput struct{ *pulumi.OutputState }

func (ServiceEndpointGitLabArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceEndpointGitLab)(nil)).Elem()
}

func (o ServiceEndpointGitLabArrayOutput) ToServiceEndpointGitLabArrayOutput() ServiceEndpointGitLabArrayOutput {
	return o
}

func (o ServiceEndpointGitLabArrayOutput) ToServiceEndpointGitLabArrayOutputWithContext(ctx context.Context) ServiceEndpointGitLabArrayOutput {
	return o
}

func (o ServiceEndpointGitLabArrayOutput) Index(i pulumi.IntInput) ServiceEndpointGitLabOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceEndpointGitLab {
		return vs[0].([]*ServiceEndpointGitLab)[vs[1].(int)]
	}).(ServiceEndpointGitLabOutput)
}

type ServiceEndpointGitLabMapOutput struct{ *pulumi.OutputState }

func (ServiceEndpointGitLabMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceEndpointGitLab)(nil)).Elem()
}

func (o ServiceEndpointGitLabMapOutput) ToServiceEndpointGitLabMapOutput() ServiceEndpointGitLabMapOutput {
	return o
}

func (o ServiceEndpointGitLabMapOutput) ToServiceEndpointGitLabMapOutputWithContext(ctx context.Context) ServiceEndpointGitLabMapOutput {
	return o
}

func (o ServiceEndpointGitLabMapOutput) MapIndex(k pulumi.StringInput) ServiceEndpointGitLabOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceEndpointGitLab {
		return vs[0].(map[string]*ServiceEndpointGitLab)[vs[1].(string)]
	}).(ServiceEndpointGitLabOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEndpointGitLabInput)(nil)).Elem(), &ServiceEndpointGitLab{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEndpointGitLabArrayInput)(nil)).Elem(), ServiceEndpointGitLabArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEndpointGitLabMapInput)(nil)).Elem(), ServiceEndpointGitLabMap{})
	pulumi.RegisterOutputType(ServiceEndpointGitLabOutput{})
	pulumi.RegisterOutputType(ServiceEndpointGitLabArrayOutput{})
	pulumi.RegisterOutputType(ServiceEndpointGitLabMapOutput{})
}
