// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azuredevops

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Openshift service endpoint within Azure DevOps organization. Using this service endpoint requires you to first install the [OpenShift Extension](https://marketplace.visualstudio.com/items?itemName=redhat.openshift-vsts).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := azuredevops.NewProject(ctx, "example", &azuredevops.ProjectArgs{
//				Name:             pulumi.String("Example Project"),
//				Visibility:       pulumi.String("private"),
//				VersionControl:   pulumi.String("Git"),
//				WorkItemTemplate: pulumi.String("Agile"),
//				Description:      pulumi.String("Managed by Pulumi"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = azuredevops.NewServiceendpointOpenshift(ctx, "example", &azuredevops.ServiceendpointOpenshiftArgs{
//				ProjectId:                example.ID(),
//				ServiceEndpointName:      pulumi.String("Example Openshift"),
//				ServerUrl:                pulumi.String("https://example.server"),
//				CertificateAuthorityFile: pulumi.String("/opt/file"),
//				AcceptUntrustedCerts:     pulumi.Bool(true),
//				AuthBasic: &azuredevops.ServiceendpointOpenshiftAuthBasicArgs{
//					Username: pulumi.String("username"),
//					Password: pulumi.String("password"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := azuredevops.NewProject(ctx, "example", &azuredevops.ProjectArgs{
//				Name:             pulumi.String("Example Project"),
//				Visibility:       pulumi.String("private"),
//				VersionControl:   pulumi.String("Git"),
//				WorkItemTemplate: pulumi.String("Agile"),
//				Description:      pulumi.String("Managed by Pulumi"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = azuredevops.NewServiceendpointOpenshift(ctx, "example", &azuredevops.ServiceendpointOpenshiftArgs{
//				ProjectId:                example.ID(),
//				ServiceEndpointName:      pulumi.String("Example Openshift"),
//				ServerUrl:                pulumi.String("https://example.server"),
//				CertificateAuthorityFile: pulumi.String("/opt/file"),
//				AcceptUntrustedCerts:     pulumi.Bool(true),
//				AuthToken: &azuredevops.ServiceendpointOpenshiftAuthTokenArgs{
//					Token: pulumi.String("username"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := azuredevops.NewProject(ctx, "example", &azuredevops.ProjectArgs{
//				Name:             pulumi.String("Example Project"),
//				Visibility:       pulumi.String("private"),
//				VersionControl:   pulumi.String("Git"),
//				WorkItemTemplate: pulumi.String("Agile"),
//				Description:      pulumi.String("Managed by Pulumi"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = azuredevops.NewServiceendpointOpenshift(ctx, "example", &azuredevops.ServiceendpointOpenshiftArgs{
//				ProjectId:           example.ID(),
//				ServiceEndpointName: pulumi.String("Example Openshift"),
//				ServerUrl:           pulumi.String("https://example.server"),
//				AuthNone: &azuredevops.ServiceendpointOpenshiftAuthNoneArgs{
//					KubeConfig: pulumi.String("config"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Relevant Links
//
// - [Azure DevOps Service REST API 7.1 - Service Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-7.1)
//
// ## Import
//
// Azure DevOps Openshift Service Endpoint can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**
//
// ```sh
// $ pulumi import azuredevops:index/serviceendpointOpenshift:ServiceendpointOpenshift example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000
// ```
type ServiceendpointOpenshift struct {
	pulumi.CustomResourceState

	// Set this option to allow clients to accept a self-signed certificate. Available when using `authBasic` or `authToken` authorization.
	AcceptUntrustedCerts pulumi.BoolPtrOutput `pulumi:"acceptUntrustedCerts"`
	// An `authBasic` block as documented below.
	AuthBasic ServiceendpointOpenshiftAuthBasicPtrOutput `pulumi:"authBasic"`
	// An `authNone` block as documented below.
	AuthNone ServiceendpointOpenshiftAuthNonePtrOutput `pulumi:"authNone"`
	// An `authToken` block as documented below.
	AuthToken     ServiceendpointOpenshiftAuthTokenPtrOutput `pulumi:"authToken"`
	Authorization pulumi.StringMapOutput                     `pulumi:"authorization"`
	// The path to a certificate authority file to correctly and securely authenticates with an OpenShift server that uses HTTPS. Available when using `authBasic` or `authToken` authorization.
	CertificateAuthorityFile pulumi.StringPtrOutput `pulumi:"certificateAuthorityFile"`
	Description              pulumi.StringPtrOutput `pulumi:"description"`
	// The ID of the project.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The URL for the OpenShift cluster to connect to.
	ServerUrl pulumi.StringPtrOutput `pulumi:"serverUrl"`
	// The Service Endpoint name.
	ServiceEndpointName pulumi.StringOutput `pulumi:"serviceEndpointName"`
}

// NewServiceendpointOpenshift registers a new resource with the given unique name, arguments, and options.
func NewServiceendpointOpenshift(ctx *pulumi.Context,
	name string, args *ServiceendpointOpenshiftArgs, opts ...pulumi.ResourceOption) (*ServiceendpointOpenshift, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.ServiceEndpointName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceEndpointName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceendpointOpenshift
	err := ctx.RegisterResource("azuredevops:index/serviceendpointOpenshift:ServiceendpointOpenshift", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceendpointOpenshift gets an existing ServiceendpointOpenshift resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceendpointOpenshift(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceendpointOpenshiftState, opts ...pulumi.ResourceOption) (*ServiceendpointOpenshift, error) {
	var resource ServiceendpointOpenshift
	err := ctx.ReadResource("azuredevops:index/serviceendpointOpenshift:ServiceendpointOpenshift", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceendpointOpenshift resources.
type serviceendpointOpenshiftState struct {
	// Set this option to allow clients to accept a self-signed certificate. Available when using `authBasic` or `authToken` authorization.
	AcceptUntrustedCerts *bool `pulumi:"acceptUntrustedCerts"`
	// An `authBasic` block as documented below.
	AuthBasic *ServiceendpointOpenshiftAuthBasic `pulumi:"authBasic"`
	// An `authNone` block as documented below.
	AuthNone *ServiceendpointOpenshiftAuthNone `pulumi:"authNone"`
	// An `authToken` block as documented below.
	AuthToken     *ServiceendpointOpenshiftAuthToken `pulumi:"authToken"`
	Authorization map[string]string                  `pulumi:"authorization"`
	// The path to a certificate authority file to correctly and securely authenticates with an OpenShift server that uses HTTPS. Available when using `authBasic` or `authToken` authorization.
	CertificateAuthorityFile *string `pulumi:"certificateAuthorityFile"`
	Description              *string `pulumi:"description"`
	// The ID of the project.
	ProjectId *string `pulumi:"projectId"`
	// The URL for the OpenShift cluster to connect to.
	ServerUrl *string `pulumi:"serverUrl"`
	// The Service Endpoint name.
	ServiceEndpointName *string `pulumi:"serviceEndpointName"`
}

type ServiceendpointOpenshiftState struct {
	// Set this option to allow clients to accept a self-signed certificate. Available when using `authBasic` or `authToken` authorization.
	AcceptUntrustedCerts pulumi.BoolPtrInput
	// An `authBasic` block as documented below.
	AuthBasic ServiceendpointOpenshiftAuthBasicPtrInput
	// An `authNone` block as documented below.
	AuthNone ServiceendpointOpenshiftAuthNonePtrInput
	// An `authToken` block as documented below.
	AuthToken     ServiceendpointOpenshiftAuthTokenPtrInput
	Authorization pulumi.StringMapInput
	// The path to a certificate authority file to correctly and securely authenticates with an OpenShift server that uses HTTPS. Available when using `authBasic` or `authToken` authorization.
	CertificateAuthorityFile pulumi.StringPtrInput
	Description              pulumi.StringPtrInput
	// The ID of the project.
	ProjectId pulumi.StringPtrInput
	// The URL for the OpenShift cluster to connect to.
	ServerUrl pulumi.StringPtrInput
	// The Service Endpoint name.
	ServiceEndpointName pulumi.StringPtrInput
}

func (ServiceendpointOpenshiftState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceendpointOpenshiftState)(nil)).Elem()
}

type serviceendpointOpenshiftArgs struct {
	// Set this option to allow clients to accept a self-signed certificate. Available when using `authBasic` or `authToken` authorization.
	AcceptUntrustedCerts *bool `pulumi:"acceptUntrustedCerts"`
	// An `authBasic` block as documented below.
	AuthBasic *ServiceendpointOpenshiftAuthBasic `pulumi:"authBasic"`
	// An `authNone` block as documented below.
	AuthNone *ServiceendpointOpenshiftAuthNone `pulumi:"authNone"`
	// An `authToken` block as documented below.
	AuthToken *ServiceendpointOpenshiftAuthToken `pulumi:"authToken"`
	// The path to a certificate authority file to correctly and securely authenticates with an OpenShift server that uses HTTPS. Available when using `authBasic` or `authToken` authorization.
	CertificateAuthorityFile *string `pulumi:"certificateAuthorityFile"`
	Description              *string `pulumi:"description"`
	// The ID of the project.
	ProjectId string `pulumi:"projectId"`
	// The URL for the OpenShift cluster to connect to.
	ServerUrl *string `pulumi:"serverUrl"`
	// The Service Endpoint name.
	ServiceEndpointName string `pulumi:"serviceEndpointName"`
}

// The set of arguments for constructing a ServiceendpointOpenshift resource.
type ServiceendpointOpenshiftArgs struct {
	// Set this option to allow clients to accept a self-signed certificate. Available when using `authBasic` or `authToken` authorization.
	AcceptUntrustedCerts pulumi.BoolPtrInput
	// An `authBasic` block as documented below.
	AuthBasic ServiceendpointOpenshiftAuthBasicPtrInput
	// An `authNone` block as documented below.
	AuthNone ServiceendpointOpenshiftAuthNonePtrInput
	// An `authToken` block as documented below.
	AuthToken ServiceendpointOpenshiftAuthTokenPtrInput
	// The path to a certificate authority file to correctly and securely authenticates with an OpenShift server that uses HTTPS. Available when using `authBasic` or `authToken` authorization.
	CertificateAuthorityFile pulumi.StringPtrInput
	Description              pulumi.StringPtrInput
	// The ID of the project.
	ProjectId pulumi.StringInput
	// The URL for the OpenShift cluster to connect to.
	ServerUrl pulumi.StringPtrInput
	// The Service Endpoint name.
	ServiceEndpointName pulumi.StringInput
}

func (ServiceendpointOpenshiftArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceendpointOpenshiftArgs)(nil)).Elem()
}

type ServiceendpointOpenshiftInput interface {
	pulumi.Input

	ToServiceendpointOpenshiftOutput() ServiceendpointOpenshiftOutput
	ToServiceendpointOpenshiftOutputWithContext(ctx context.Context) ServiceendpointOpenshiftOutput
}

func (*ServiceendpointOpenshift) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceendpointOpenshift)(nil)).Elem()
}

func (i *ServiceendpointOpenshift) ToServiceendpointOpenshiftOutput() ServiceendpointOpenshiftOutput {
	return i.ToServiceendpointOpenshiftOutputWithContext(context.Background())
}

func (i *ServiceendpointOpenshift) ToServiceendpointOpenshiftOutputWithContext(ctx context.Context) ServiceendpointOpenshiftOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceendpointOpenshiftOutput)
}

// ServiceendpointOpenshiftArrayInput is an input type that accepts ServiceendpointOpenshiftArray and ServiceendpointOpenshiftArrayOutput values.
// You can construct a concrete instance of `ServiceendpointOpenshiftArrayInput` via:
//
//	ServiceendpointOpenshiftArray{ ServiceendpointOpenshiftArgs{...} }
type ServiceendpointOpenshiftArrayInput interface {
	pulumi.Input

	ToServiceendpointOpenshiftArrayOutput() ServiceendpointOpenshiftArrayOutput
	ToServiceendpointOpenshiftArrayOutputWithContext(context.Context) ServiceendpointOpenshiftArrayOutput
}

type ServiceendpointOpenshiftArray []ServiceendpointOpenshiftInput

func (ServiceendpointOpenshiftArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceendpointOpenshift)(nil)).Elem()
}

func (i ServiceendpointOpenshiftArray) ToServiceendpointOpenshiftArrayOutput() ServiceendpointOpenshiftArrayOutput {
	return i.ToServiceendpointOpenshiftArrayOutputWithContext(context.Background())
}

func (i ServiceendpointOpenshiftArray) ToServiceendpointOpenshiftArrayOutputWithContext(ctx context.Context) ServiceendpointOpenshiftArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceendpointOpenshiftArrayOutput)
}

// ServiceendpointOpenshiftMapInput is an input type that accepts ServiceendpointOpenshiftMap and ServiceendpointOpenshiftMapOutput values.
// You can construct a concrete instance of `ServiceendpointOpenshiftMapInput` via:
//
//	ServiceendpointOpenshiftMap{ "key": ServiceendpointOpenshiftArgs{...} }
type ServiceendpointOpenshiftMapInput interface {
	pulumi.Input

	ToServiceendpointOpenshiftMapOutput() ServiceendpointOpenshiftMapOutput
	ToServiceendpointOpenshiftMapOutputWithContext(context.Context) ServiceendpointOpenshiftMapOutput
}

type ServiceendpointOpenshiftMap map[string]ServiceendpointOpenshiftInput

func (ServiceendpointOpenshiftMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceendpointOpenshift)(nil)).Elem()
}

func (i ServiceendpointOpenshiftMap) ToServiceendpointOpenshiftMapOutput() ServiceendpointOpenshiftMapOutput {
	return i.ToServiceendpointOpenshiftMapOutputWithContext(context.Background())
}

func (i ServiceendpointOpenshiftMap) ToServiceendpointOpenshiftMapOutputWithContext(ctx context.Context) ServiceendpointOpenshiftMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceendpointOpenshiftMapOutput)
}

type ServiceendpointOpenshiftOutput struct{ *pulumi.OutputState }

func (ServiceendpointOpenshiftOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceendpointOpenshift)(nil)).Elem()
}

func (o ServiceendpointOpenshiftOutput) ToServiceendpointOpenshiftOutput() ServiceendpointOpenshiftOutput {
	return o
}

func (o ServiceendpointOpenshiftOutput) ToServiceendpointOpenshiftOutputWithContext(ctx context.Context) ServiceendpointOpenshiftOutput {
	return o
}

// Set this option to allow clients to accept a self-signed certificate. Available when using `authBasic` or `authToken` authorization.
func (o ServiceendpointOpenshiftOutput) AcceptUntrustedCerts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceendpointOpenshift) pulumi.BoolPtrOutput { return v.AcceptUntrustedCerts }).(pulumi.BoolPtrOutput)
}

// An `authBasic` block as documented below.
func (o ServiceendpointOpenshiftOutput) AuthBasic() ServiceendpointOpenshiftAuthBasicPtrOutput {
	return o.ApplyT(func(v *ServiceendpointOpenshift) ServiceendpointOpenshiftAuthBasicPtrOutput { return v.AuthBasic }).(ServiceendpointOpenshiftAuthBasicPtrOutput)
}

// An `authNone` block as documented below.
func (o ServiceendpointOpenshiftOutput) AuthNone() ServiceendpointOpenshiftAuthNonePtrOutput {
	return o.ApplyT(func(v *ServiceendpointOpenshift) ServiceendpointOpenshiftAuthNonePtrOutput { return v.AuthNone }).(ServiceendpointOpenshiftAuthNonePtrOutput)
}

// An `authToken` block as documented below.
func (o ServiceendpointOpenshiftOutput) AuthToken() ServiceendpointOpenshiftAuthTokenPtrOutput {
	return o.ApplyT(func(v *ServiceendpointOpenshift) ServiceendpointOpenshiftAuthTokenPtrOutput { return v.AuthToken }).(ServiceendpointOpenshiftAuthTokenPtrOutput)
}

func (o ServiceendpointOpenshiftOutput) Authorization() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServiceendpointOpenshift) pulumi.StringMapOutput { return v.Authorization }).(pulumi.StringMapOutput)
}

// The path to a certificate authority file to correctly and securely authenticates with an OpenShift server that uses HTTPS. Available when using `authBasic` or `authToken` authorization.
func (o ServiceendpointOpenshiftOutput) CertificateAuthorityFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceendpointOpenshift) pulumi.StringPtrOutput { return v.CertificateAuthorityFile }).(pulumi.StringPtrOutput)
}

func (o ServiceendpointOpenshiftOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceendpointOpenshift) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The ID of the project.
func (o ServiceendpointOpenshiftOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceendpointOpenshift) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The URL for the OpenShift cluster to connect to.
func (o ServiceendpointOpenshiftOutput) ServerUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceendpointOpenshift) pulumi.StringPtrOutput { return v.ServerUrl }).(pulumi.StringPtrOutput)
}

// The Service Endpoint name.
func (o ServiceendpointOpenshiftOutput) ServiceEndpointName() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceendpointOpenshift) pulumi.StringOutput { return v.ServiceEndpointName }).(pulumi.StringOutput)
}

type ServiceendpointOpenshiftArrayOutput struct{ *pulumi.OutputState }

func (ServiceendpointOpenshiftArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceendpointOpenshift)(nil)).Elem()
}

func (o ServiceendpointOpenshiftArrayOutput) ToServiceendpointOpenshiftArrayOutput() ServiceendpointOpenshiftArrayOutput {
	return o
}

func (o ServiceendpointOpenshiftArrayOutput) ToServiceendpointOpenshiftArrayOutputWithContext(ctx context.Context) ServiceendpointOpenshiftArrayOutput {
	return o
}

func (o ServiceendpointOpenshiftArrayOutput) Index(i pulumi.IntInput) ServiceendpointOpenshiftOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceendpointOpenshift {
		return vs[0].([]*ServiceendpointOpenshift)[vs[1].(int)]
	}).(ServiceendpointOpenshiftOutput)
}

type ServiceendpointOpenshiftMapOutput struct{ *pulumi.OutputState }

func (ServiceendpointOpenshiftMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceendpointOpenshift)(nil)).Elem()
}

func (o ServiceendpointOpenshiftMapOutput) ToServiceendpointOpenshiftMapOutput() ServiceendpointOpenshiftMapOutput {
	return o
}

func (o ServiceendpointOpenshiftMapOutput) ToServiceendpointOpenshiftMapOutputWithContext(ctx context.Context) ServiceendpointOpenshiftMapOutput {
	return o
}

func (o ServiceendpointOpenshiftMapOutput) MapIndex(k pulumi.StringInput) ServiceendpointOpenshiftOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceendpointOpenshift {
		return vs[0].(map[string]*ServiceendpointOpenshift)[vs[1].(string)]
	}).(ServiceendpointOpenshiftOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceendpointOpenshiftInput)(nil)).Elem(), &ServiceendpointOpenshift{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceendpointOpenshiftArrayInput)(nil)).Elem(), ServiceendpointOpenshiftArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceendpointOpenshiftMapInput)(nil)).Elem(), ServiceendpointOpenshiftMap{})
	pulumi.RegisterOutputType(ServiceendpointOpenshiftOutput{})
	pulumi.RegisterOutputType(ServiceendpointOpenshiftArrayOutput{})
	pulumi.RegisterOutputType(ServiceendpointOpenshiftMapOutput{})
}
