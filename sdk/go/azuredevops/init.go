// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package azuredevops

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "azuredevops:index/areaPermissions:AreaPermissions":
		r, err = NewAreaPermissions(ctx, name, nil, pulumi.URN_(urn))
	case "azuredevops:index/branchPolicyAutoReviewers:BranchPolicyAutoReviewers":
		r, err = NewBranchPolicyAutoReviewers(ctx, name, nil, pulumi.URN_(urn))
	case "azuredevops:index/branchPolicyBuildValidation:BranchPolicyBuildValidation":
		r, err = NewBranchPolicyBuildValidation(ctx, name, nil, pulumi.URN_(urn))
	case "azuredevops:index/branchPolicyCommentResolution:BranchPolicyCommentResolution":
		r, err = NewBranchPolicyCommentResolution(ctx, name, nil, pulumi.URN_(urn))
	case "azuredevops:index/branchPolicyMinReviewers:BranchPolicyMinReviewers":
		r, err = NewBranchPolicyMinReviewers(ctx, name, nil, pulumi.URN_(urn))
	case "azuredevops:index/branchPolicyWorkItemLinking:BranchPolicyWorkItemLinking":
		r, err = NewBranchPolicyWorkItemLinking(ctx, name, nil, pulumi.URN_(urn))
	case "azuredevops:index/buildDefinition:BuildDefinition":
		r, err = NewBuildDefinition(ctx, name, nil, pulumi.URN_(urn))
	case "azuredevops:index/buildDefinitionPermissions:BuildDefinitionPermissions":
		r, err = NewBuildDefinitionPermissions(ctx, name, nil, pulumi.URN_(urn))
	case "azuredevops:index/git:Git":
		r, err = NewGit(ctx, name, nil, pulumi.URN_(urn))
	case "azuredevops:index/gitPermissions:GitPermissions":
		r, err = NewGitPermissions(ctx, name, nil, pulumi.URN_(urn))
	case "azuredevops:index/group:Group":
		r, err = NewGroup(ctx, name, nil, pulumi.URN_(urn))
	case "azuredevops:index/groupMembership:GroupMembership":
		r, err = NewGroupMembership(ctx, name, nil, pulumi.URN_(urn))
	case "azuredevops:index/iterativePermissions:IterativePermissions":
		r, err = NewIterativePermissions(ctx, name, nil, pulumi.URN_(urn))
	case "azuredevops:index/pool:Pool":
		r, err = NewPool(ctx, name, nil, pulumi.URN_(urn))
	case "azuredevops:index/project:Project":
		r, err = NewProject(ctx, name, nil, pulumi.URN_(urn))
	case "azuredevops:index/projectFeatures:ProjectFeatures":
		r, err = NewProjectFeatures(ctx, name, nil, pulumi.URN_(urn))
	case "azuredevops:index/projectPermissions:ProjectPermissions":
		r, err = NewProjectPermissions(ctx, name, nil, pulumi.URN_(urn))
	case "azuredevops:index/queue:Queue":
		r, err = NewQueue(ctx, name, nil, pulumi.URN_(urn))
	case "azuredevops:index/resourceAuthorization:ResourceAuthorization":
		r, err = NewResourceAuthorization(ctx, name, nil, pulumi.URN_(urn))
	case "azuredevops:index/serviceEndpointAws:ServiceEndpointAws":
		r, err = NewServiceEndpointAws(ctx, name, nil, pulumi.URN_(urn))
	case "azuredevops:index/serviceEndpointAzureEcr:ServiceEndpointAzureEcr":
		r, err = NewServiceEndpointAzureEcr(ctx, name, nil, pulumi.URN_(urn))
	case "azuredevops:index/serviceEndpointAzureRM:ServiceEndpointAzureRM":
		r, err = NewServiceEndpointAzureRM(ctx, name, nil, pulumi.URN_(urn))
	case "azuredevops:index/serviceEndpointBitBucket:ServiceEndpointBitBucket":
		r, err = NewServiceEndpointBitBucket(ctx, name, nil, pulumi.URN_(urn))
	case "azuredevops:index/serviceEndpointDockerRegistry:ServiceEndpointDockerRegistry":
		r, err = NewServiceEndpointDockerRegistry(ctx, name, nil, pulumi.URN_(urn))
	case "azuredevops:index/serviceEndpointGitHub:ServiceEndpointGitHub":
		r, err = NewServiceEndpointGitHub(ctx, name, nil, pulumi.URN_(urn))
	case "azuredevops:index/serviceEndpointKubernetes:ServiceEndpointKubernetes":
		r, err = NewServiceEndpointKubernetes(ctx, name, nil, pulumi.URN_(urn))
	case "azuredevops:index/serviceEndpointPipeline:ServiceEndpointPipeline":
		r, err = NewServiceEndpointPipeline(ctx, name, nil, pulumi.URN_(urn))
	case "azuredevops:index/user:User":
		r, err = NewUser(ctx, name, nil, pulumi.URN_(urn))
	case "azuredevops:index/variableGroup:VariableGroup":
		r, err = NewVariableGroup(ctx, name, nil, pulumi.URN_(urn))
	case "azuredevops:index/workItemQueryPermissions:WorkItemQueryPermissions":
		r, err = NewWorkItemQueryPermissions(ctx, name, nil, pulumi.URN_(urn))
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:azuredevops" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	return NewProvider(ctx, name, nil, pulumi.URN_(urn))
}

func init() {
	version, err := PkgVersion()
	if err != nil {
		fmt.Println("failed to determine package version. defaulting to v1: %v", err)
	}
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/areaPermissions",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/branchPolicyAutoReviewers",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/branchPolicyBuildValidation",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/branchPolicyCommentResolution",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/branchPolicyMinReviewers",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/branchPolicyWorkItemLinking",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/buildDefinition",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/buildDefinitionPermissions",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/git",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/gitPermissions",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/group",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/groupMembership",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/iterativePermissions",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/pool",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/project",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/projectFeatures",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/projectPermissions",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/queue",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/resourceAuthorization",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceEndpointAws",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceEndpointAzureEcr",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceEndpointAzureRM",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceEndpointBitBucket",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceEndpointDockerRegistry",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceEndpointGitHub",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceEndpointKubernetes",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceEndpointPipeline",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/user",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/variableGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/workItemQueryPermissions",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"azuredevops",
		&pkg{version},
	)
}
