// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azuredevops

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "azuredevops:index/areaPermissions:AreaPermissions":
		r = &AreaPermissions{}
	case "azuredevops:index/branchPolicyAutoReviewers:BranchPolicyAutoReviewers":
		r = &BranchPolicyAutoReviewers{}
	case "azuredevops:index/branchPolicyBuildValidation:BranchPolicyBuildValidation":
		r = &BranchPolicyBuildValidation{}
	case "azuredevops:index/branchPolicyCommentResolution:BranchPolicyCommentResolution":
		r = &BranchPolicyCommentResolution{}
	case "azuredevops:index/branchPolicyMergeTypes:BranchPolicyMergeTypes":
		r = &BranchPolicyMergeTypes{}
	case "azuredevops:index/branchPolicyMinReviewers:BranchPolicyMinReviewers":
		r = &BranchPolicyMinReviewers{}
	case "azuredevops:index/branchPolicyStatusCheck:BranchPolicyStatusCheck":
		r = &BranchPolicyStatusCheck{}
	case "azuredevops:index/branchPolicyWorkItemLinking:BranchPolicyWorkItemLinking":
		r = &BranchPolicyWorkItemLinking{}
	case "azuredevops:index/buildDefinition:BuildDefinition":
		r = &BuildDefinition{}
	case "azuredevops:index/buildDefinitionPermissions:BuildDefinitionPermissions":
		r = &BuildDefinitionPermissions{}
	case "azuredevops:index/buildFolder:BuildFolder":
		r = &BuildFolder{}
	case "azuredevops:index/buildFolderPermissions:BuildFolderPermissions":
		r = &BuildFolderPermissions{}
	case "azuredevops:index/checkApproval:CheckApproval":
		r = &CheckApproval{}
	case "azuredevops:index/checkBranchControl:CheckBranchControl":
		r = &CheckBranchControl{}
	case "azuredevops:index/checkBusinessHours:CheckBusinessHours":
		r = &CheckBusinessHours{}
	case "azuredevops:index/checkExclusiveLock:CheckExclusiveLock":
		r = &CheckExclusiveLock{}
	case "azuredevops:index/checkRequiredTemplate:CheckRequiredTemplate":
		r = &CheckRequiredTemplate{}
	case "azuredevops:index/elasticPool:ElasticPool":
		r = &ElasticPool{}
	case "azuredevops:index/environment:Environment":
		r = &Environment{}
	case "azuredevops:index/environmentResourceKubernetes:EnvironmentResourceKubernetes":
		r = &EnvironmentResourceKubernetes{}
	case "azuredevops:index/feed:Feed":
		r = &Feed{}
	case "azuredevops:index/feedPermission:FeedPermission":
		r = &FeedPermission{}
	case "azuredevops:index/git:Git":
		r = &Git{}
	case "azuredevops:index/gitPermissions:GitPermissions":
		r = &GitPermissions{}
	case "azuredevops:index/gitRepositoryBranch:GitRepositoryBranch":
		r = &GitRepositoryBranch{}
	case "azuredevops:index/gitRepositoryFile:GitRepositoryFile":
		r = &GitRepositoryFile{}
	case "azuredevops:index/group:Group":
		r = &Group{}
	case "azuredevops:index/groupEntitlement:GroupEntitlement":
		r = &GroupEntitlement{}
	case "azuredevops:index/groupMembership:GroupMembership":
		r = &GroupMembership{}
	case "azuredevops:index/iterativePermissions:IterativePermissions":
		r = &IterativePermissions{}
	case "azuredevops:index/libraryPermissions:LibraryPermissions":
		r = &LibraryPermissions{}
	case "azuredevops:index/pipelineAuthorization:PipelineAuthorization":
		r = &PipelineAuthorization{}
	case "azuredevops:index/pool:Pool":
		r = &Pool{}
	case "azuredevops:index/project:Project":
		r = &Project{}
	case "azuredevops:index/projectFeatures:ProjectFeatures":
		r = &ProjectFeatures{}
	case "azuredevops:index/projectPermissions:ProjectPermissions":
		r = &ProjectPermissions{}
	case "azuredevops:index/projectPipelineSettings:ProjectPipelineSettings":
		r = &ProjectPipelineSettings{}
	case "azuredevops:index/queue:Queue":
		r = &Queue{}
	case "azuredevops:index/repositoryPolicyAuthorEmailPattern:RepositoryPolicyAuthorEmailPattern":
		r = &RepositoryPolicyAuthorEmailPattern{}
	case "azuredevops:index/repositoryPolicyCaseEnforcement:RepositoryPolicyCaseEnforcement":
		r = &RepositoryPolicyCaseEnforcement{}
	case "azuredevops:index/repositoryPolicyCheckCredentials:RepositoryPolicyCheckCredentials":
		r = &RepositoryPolicyCheckCredentials{}
	case "azuredevops:index/repositoryPolicyFilePathPattern:RepositoryPolicyFilePathPattern":
		r = &RepositoryPolicyFilePathPattern{}
	case "azuredevops:index/repositoryPolicyMaxFileSize:RepositoryPolicyMaxFileSize":
		r = &RepositoryPolicyMaxFileSize{}
	case "azuredevops:index/repositoryPolicyMaxPathLength:RepositoryPolicyMaxPathLength":
		r = &RepositoryPolicyMaxPathLength{}
	case "azuredevops:index/repositoryPolicyReservedNames:RepositoryPolicyReservedNames":
		r = &RepositoryPolicyReservedNames{}
	case "azuredevops:index/resourceAuthorization:ResourceAuthorization":
		r = &ResourceAuthorization{}
	case "azuredevops:index/securityroleAssignment:SecurityroleAssignment":
		r = &SecurityroleAssignment{}
	case "azuredevops:index/serviceEndpointArtifactory:ServiceEndpointArtifactory":
		r = &ServiceEndpointArtifactory{}
	case "azuredevops:index/serviceEndpointAws:ServiceEndpointAws":
		r = &ServiceEndpointAws{}
	case "azuredevops:index/serviceEndpointAzureDevOps:ServiceEndpointAzureDevOps":
		r = &ServiceEndpointAzureDevOps{}
	case "azuredevops:index/serviceEndpointAzureEcr:ServiceEndpointAzureEcr":
		r = &ServiceEndpointAzureEcr{}
	case "azuredevops:index/serviceEndpointAzureRM:ServiceEndpointAzureRM":
		r = &ServiceEndpointAzureRM{}
	case "azuredevops:index/serviceEndpointBitBucket:ServiceEndpointBitBucket":
		r = &ServiceEndpointBitBucket{}
	case "azuredevops:index/serviceEndpointDockerRegistry:ServiceEndpointDockerRegistry":
		r = &ServiceEndpointDockerRegistry{}
	case "azuredevops:index/serviceEndpointGeneric:ServiceEndpointGeneric":
		r = &ServiceEndpointGeneric{}
	case "azuredevops:index/serviceEndpointGenericGit:ServiceEndpointGenericGit":
		r = &ServiceEndpointGenericGit{}
	case "azuredevops:index/serviceEndpointGitHub:ServiceEndpointGitHub":
		r = &ServiceEndpointGitHub{}
	case "azuredevops:index/serviceEndpointGitHubEnterprise:ServiceEndpointGitHubEnterprise":
		r = &ServiceEndpointGitHubEnterprise{}
	case "azuredevops:index/serviceEndpointKubernetes:ServiceEndpointKubernetes":
		r = &ServiceEndpointKubernetes{}
	case "azuredevops:index/serviceEndpointNpm:ServiceEndpointNpm":
		r = &ServiceEndpointNpm{}
	case "azuredevops:index/serviceEndpointPipeline:ServiceEndpointPipeline":
		r = &ServiceEndpointPipeline{}
	case "azuredevops:index/serviceEndpointServiceFabric:ServiceEndpointServiceFabric":
		r = &ServiceEndpointServiceFabric{}
	case "azuredevops:index/serviceEndpointSonarCloud:ServiceEndpointSonarCloud":
		r = &ServiceEndpointSonarCloud{}
	case "azuredevops:index/serviceEndpointSonarQube:ServiceEndpointSonarQube":
		r = &ServiceEndpointSonarQube{}
	case "azuredevops:index/serviceEndpointSsh:ServiceEndpointSsh":
		r = &ServiceEndpointSsh{}
	case "azuredevops:index/serviceendpointArgocd:ServiceendpointArgocd":
		r = &ServiceendpointArgocd{}
	case "azuredevops:index/serviceendpointExternaltfs:ServiceendpointExternaltfs":
		r = &ServiceendpointExternaltfs{}
	case "azuredevops:index/serviceendpointGcpTerraform:ServiceendpointGcpTerraform":
		r = &ServiceendpointGcpTerraform{}
	case "azuredevops:index/serviceendpointIncomingwebhook:ServiceendpointIncomingwebhook":
		r = &ServiceendpointIncomingwebhook{}
	case "azuredevops:index/serviceendpointJenkins:ServiceendpointJenkins":
		r = &ServiceendpointJenkins{}
	case "azuredevops:index/serviceendpointJfrogArtifactoryV2:ServiceendpointJfrogArtifactoryV2":
		r = &ServiceendpointJfrogArtifactoryV2{}
	case "azuredevops:index/serviceendpointJfrogDistributionV2:ServiceendpointJfrogDistributionV2":
		r = &ServiceendpointJfrogDistributionV2{}
	case "azuredevops:index/serviceendpointJfrogPlatformV2:ServiceendpointJfrogPlatformV2":
		r = &ServiceendpointJfrogPlatformV2{}
	case "azuredevops:index/serviceendpointJfrogXrayV2:ServiceendpointJfrogXrayV2":
		r = &ServiceendpointJfrogXrayV2{}
	case "azuredevops:index/serviceendpointMaven:ServiceendpointMaven":
		r = &ServiceendpointMaven{}
	case "azuredevops:index/serviceendpointNexus:ServiceendpointNexus":
		r = &ServiceendpointNexus{}
	case "azuredevops:index/serviceendpointNuget:ServiceendpointNuget":
		r = &ServiceendpointNuget{}
	case "azuredevops:index/serviceendpointOctopusdeploy:ServiceendpointOctopusdeploy":
		r = &ServiceendpointOctopusdeploy{}
	case "azuredevops:index/serviceendpointPermissions:ServiceendpointPermissions":
		r = &ServiceendpointPermissions{}
	case "azuredevops:index/servicehookPermissions:ServicehookPermissions":
		r = &ServicehookPermissions{}
	case "azuredevops:index/servicehookStorageQueuePipelines:ServicehookStorageQueuePipelines":
		r = &ServicehookStorageQueuePipelines{}
	case "azuredevops:index/taggingPermissions:TaggingPermissions":
		r = &TaggingPermissions{}
	case "azuredevops:index/team:Team":
		r = &Team{}
	case "azuredevops:index/teamAdministrators:TeamAdministrators":
		r = &TeamAdministrators{}
	case "azuredevops:index/teamMembers:TeamMembers":
		r = &TeamMembers{}
	case "azuredevops:index/user:User":
		r = &User{}
	case "azuredevops:index/variableGroup:VariableGroup":
		r = &VariableGroup{}
	case "azuredevops:index/variableGroupPermissions:VariableGroupPermissions":
		r = &VariableGroupPermissions{}
	case "azuredevops:index/wiki:Wiki":
		r = &Wiki{}
	case "azuredevops:index/wikiPage:WikiPage":
		r = &WikiPage{}
	case "azuredevops:index/workItemQueryPermissions:WorkItemQueryPermissions":
		r = &WorkItemQueryPermissions{}
	case "azuredevops:index/workitem:Workitem":
		r = &Workitem{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:azuredevops" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/areaPermissions",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/branchPolicyAutoReviewers",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/branchPolicyBuildValidation",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/branchPolicyCommentResolution",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/branchPolicyMergeTypes",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/branchPolicyMinReviewers",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/branchPolicyStatusCheck",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/branchPolicyWorkItemLinking",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/buildDefinition",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/buildDefinitionPermissions",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/buildFolder",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/buildFolderPermissions",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/checkApproval",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/checkBranchControl",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/checkBusinessHours",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/checkExclusiveLock",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/checkRequiredTemplate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/elasticPool",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/environment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/environmentResourceKubernetes",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/feed",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/feedPermission",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/git",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/gitPermissions",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/gitRepositoryBranch",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/gitRepositoryFile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/group",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/groupEntitlement",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/groupMembership",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/iterativePermissions",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/libraryPermissions",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/pipelineAuthorization",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/pool",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/project",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/projectFeatures",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/projectPermissions",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/projectPipelineSettings",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/queue",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/repositoryPolicyAuthorEmailPattern",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/repositoryPolicyCaseEnforcement",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/repositoryPolicyCheckCredentials",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/repositoryPolicyFilePathPattern",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/repositoryPolicyMaxFileSize",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/repositoryPolicyMaxPathLength",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/repositoryPolicyReservedNames",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/resourceAuthorization",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/securityroleAssignment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceEndpointArtifactory",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceEndpointAws",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceEndpointAzureDevOps",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceEndpointAzureEcr",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceEndpointAzureRM",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceEndpointBitBucket",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceEndpointDockerRegistry",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceEndpointGeneric",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceEndpointGenericGit",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceEndpointGitHub",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceEndpointGitHubEnterprise",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceEndpointKubernetes",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceEndpointNpm",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceEndpointPipeline",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceEndpointServiceFabric",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceEndpointSonarCloud",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceEndpointSonarQube",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceEndpointSsh",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceendpointArgocd",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceendpointExternaltfs",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceendpointGcpTerraform",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceendpointIncomingwebhook",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceendpointJenkins",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceendpointJfrogArtifactoryV2",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceendpointJfrogDistributionV2",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceendpointJfrogPlatformV2",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceendpointJfrogXrayV2",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceendpointMaven",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceendpointNexus",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceendpointNuget",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceendpointOctopusdeploy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/serviceendpointPermissions",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/servicehookPermissions",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/servicehookStorageQueuePipelines",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/taggingPermissions",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/team",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/teamAdministrators",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/teamMembers",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/user",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/variableGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/variableGroupPermissions",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/wiki",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/wikiPage",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/workItemQueryPermissions",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azuredevops",
		"index/workitem",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"azuredevops",
		&pkg{version},
	)
}
