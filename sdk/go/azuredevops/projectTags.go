// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azuredevops

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages Project Tags within Azure DevOps organization.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := azuredevops.NewProject(ctx, "example", &azuredevops.ProjectArgs{
//				Name:             pulumi.String("Example Project"),
//				Visibility:       pulumi.String("private"),
//				VersionControl:   pulumi.String("Git"),
//				WorkItemTemplate: pulumi.String("Agile"),
//				Description:      pulumi.String("Managed by Pulumi"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = azuredevops.NewProjectTags(ctx, "example", &azuredevops.ProjectTagsArgs{
//				ProjectId: example.ID(),
//				Tags: pulumi.StringArray{
//					pulumi.String("tag1"),
//					pulumi.String("tag2"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Relevant Links
//
// - [Azure DevOps Service REST API 7.0 - Project Properties](https://learn.microsoft.com/en-us/rest/api/azure/devops/core/projects/get-project-properties?view=azure-devops-rest-7.1&tabs=HTTP)
//
// ## Import
//
// Azure DevOps Project Tags can be imported using the Project ID e.g.:
//
// ```sh
// $ pulumi import azuredevops:index/projectTags:ProjectTags example 00000000-0000-0000-0000-000000000000
// ```
type ProjectTags struct {
	pulumi.CustomResourceState

	// The ID of the Project. Changing this forces a new resource to be created.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// A mapping of tags assigned to the Project.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewProjectTags registers a new resource with the given unique name, arguments, and options.
func NewProjectTags(ctx *pulumi.Context,
	name string, args *ProjectTagsArgs, opts ...pulumi.ResourceOption) (*ProjectTags, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Tags == nil {
		return nil, errors.New("invalid value for required argument 'Tags'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectTags
	err := ctx.RegisterResource("azuredevops:index/projectTags:ProjectTags", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectTags gets an existing ProjectTags resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectTags(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectTagsState, opts ...pulumi.ResourceOption) (*ProjectTags, error) {
	var resource ProjectTags
	err := ctx.ReadResource("azuredevops:index/projectTags:ProjectTags", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectTags resources.
type projectTagsState struct {
	// The ID of the Project. Changing this forces a new resource to be created.
	ProjectId *string `pulumi:"projectId"`
	// A mapping of tags assigned to the Project.
	Tags []string `pulumi:"tags"`
}

type ProjectTagsState struct {
	// The ID of the Project. Changing this forces a new resource to be created.
	ProjectId pulumi.StringPtrInput
	// A mapping of tags assigned to the Project.
	Tags pulumi.StringArrayInput
}

func (ProjectTagsState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectTagsState)(nil)).Elem()
}

type projectTagsArgs struct {
	// The ID of the Project. Changing this forces a new resource to be created.
	ProjectId string `pulumi:"projectId"`
	// A mapping of tags assigned to the Project.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a ProjectTags resource.
type ProjectTagsArgs struct {
	// The ID of the Project. Changing this forces a new resource to be created.
	ProjectId pulumi.StringInput
	// A mapping of tags assigned to the Project.
	Tags pulumi.StringArrayInput
}

func (ProjectTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectTagsArgs)(nil)).Elem()
}

type ProjectTagsInput interface {
	pulumi.Input

	ToProjectTagsOutput() ProjectTagsOutput
	ToProjectTagsOutputWithContext(ctx context.Context) ProjectTagsOutput
}

func (*ProjectTags) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectTags)(nil)).Elem()
}

func (i *ProjectTags) ToProjectTagsOutput() ProjectTagsOutput {
	return i.ToProjectTagsOutputWithContext(context.Background())
}

func (i *ProjectTags) ToProjectTagsOutputWithContext(ctx context.Context) ProjectTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTagsOutput)
}

// ProjectTagsArrayInput is an input type that accepts ProjectTagsArray and ProjectTagsArrayOutput values.
// You can construct a concrete instance of `ProjectTagsArrayInput` via:
//
//	ProjectTagsArray{ ProjectTagsArgs{...} }
type ProjectTagsArrayInput interface {
	pulumi.Input

	ToProjectTagsArrayOutput() ProjectTagsArrayOutput
	ToProjectTagsArrayOutputWithContext(context.Context) ProjectTagsArrayOutput
}

type ProjectTagsArray []ProjectTagsInput

func (ProjectTagsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectTags)(nil)).Elem()
}

func (i ProjectTagsArray) ToProjectTagsArrayOutput() ProjectTagsArrayOutput {
	return i.ToProjectTagsArrayOutputWithContext(context.Background())
}

func (i ProjectTagsArray) ToProjectTagsArrayOutputWithContext(ctx context.Context) ProjectTagsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTagsArrayOutput)
}

// ProjectTagsMapInput is an input type that accepts ProjectTagsMap and ProjectTagsMapOutput values.
// You can construct a concrete instance of `ProjectTagsMapInput` via:
//
//	ProjectTagsMap{ "key": ProjectTagsArgs{...} }
type ProjectTagsMapInput interface {
	pulumi.Input

	ToProjectTagsMapOutput() ProjectTagsMapOutput
	ToProjectTagsMapOutputWithContext(context.Context) ProjectTagsMapOutput
}

type ProjectTagsMap map[string]ProjectTagsInput

func (ProjectTagsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectTags)(nil)).Elem()
}

func (i ProjectTagsMap) ToProjectTagsMapOutput() ProjectTagsMapOutput {
	return i.ToProjectTagsMapOutputWithContext(context.Background())
}

func (i ProjectTagsMap) ToProjectTagsMapOutputWithContext(ctx context.Context) ProjectTagsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectTagsMapOutput)
}

type ProjectTagsOutput struct{ *pulumi.OutputState }

func (ProjectTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectTags)(nil)).Elem()
}

func (o ProjectTagsOutput) ToProjectTagsOutput() ProjectTagsOutput {
	return o
}

func (o ProjectTagsOutput) ToProjectTagsOutputWithContext(ctx context.Context) ProjectTagsOutput {
	return o
}

// The ID of the Project. Changing this forces a new resource to be created.
func (o ProjectTagsOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectTags) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// A mapping of tags assigned to the Project.
func (o ProjectTagsOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectTags) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type ProjectTagsArrayOutput struct{ *pulumi.OutputState }

func (ProjectTagsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectTags)(nil)).Elem()
}

func (o ProjectTagsArrayOutput) ToProjectTagsArrayOutput() ProjectTagsArrayOutput {
	return o
}

func (o ProjectTagsArrayOutput) ToProjectTagsArrayOutputWithContext(ctx context.Context) ProjectTagsArrayOutput {
	return o
}

func (o ProjectTagsArrayOutput) Index(i pulumi.IntInput) ProjectTagsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectTags {
		return vs[0].([]*ProjectTags)[vs[1].(int)]
	}).(ProjectTagsOutput)
}

type ProjectTagsMapOutput struct{ *pulumi.OutputState }

func (ProjectTagsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectTags)(nil)).Elem()
}

func (o ProjectTagsMapOutput) ToProjectTagsMapOutput() ProjectTagsMapOutput {
	return o
}

func (o ProjectTagsMapOutput) ToProjectTagsMapOutputWithContext(ctx context.Context) ProjectTagsMapOutput {
	return o
}

func (o ProjectTagsMapOutput) MapIndex(k pulumi.StringInput) ProjectTagsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectTags {
		return vs[0].(map[string]*ProjectTags)[vs[1].(string)]
	}).(ProjectTagsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectTagsInput)(nil)).Elem(), &ProjectTags{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectTagsArrayInput)(nil)).Elem(), ProjectTagsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectTagsMapInput)(nil)).Elem(), ProjectTagsMap{})
	pulumi.RegisterOutputType(ProjectTagsOutput{})
	pulumi.RegisterOutputType(ProjectTagsArrayOutput{})
	pulumi.RegisterOutputType(ProjectTagsMapOutput{})
}
