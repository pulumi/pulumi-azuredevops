// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azuredevops

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a branch control check on a resource within Azure DevOps.
//
// ## Example Usage
// ### Protect a service connection
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleProject, err := azuredevops.NewProject(ctx, "exampleProject", nil)
//			if err != nil {
//				return err
//			}
//			exampleServiceEndpointGeneric, err := azuredevops.NewServiceEndpointGeneric(ctx, "exampleServiceEndpointGeneric", &azuredevops.ServiceEndpointGenericArgs{
//				ProjectId:           exampleProject.ID(),
//				ServerUrl:           pulumi.String("https://some-server.example.com"),
//				Username:            pulumi.String("username"),
//				Password:            pulumi.String("password"),
//				ServiceEndpointName: pulumi.String("Example Generic"),
//				Description:         pulumi.String("Managed by Terraform"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = azuredevops.NewCheckBranchControl(ctx, "exampleCheckBranchControl", &azuredevops.CheckBranchControlArgs{
//				ProjectId:          exampleProject.ID(),
//				DisplayName:        pulumi.String("Managed by Terraform"),
//				TargetResourceId:   exampleServiceEndpointGeneric.ID(),
//				TargetResourceType: pulumi.String("endpoint"),
//				AllowedBranches:    pulumi.String("refs/heads/main, refs/heads/features/*"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Protect an environment
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleProject, err := azuredevops.NewProject(ctx, "exampleProject", nil)
//			if err != nil {
//				return err
//			}
//			exampleEnvironment, err := azuredevops.NewEnvironment(ctx, "exampleEnvironment", &azuredevops.EnvironmentArgs{
//				ProjectId: exampleProject.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = azuredevops.NewCheckBranchControl(ctx, "exampleCheckBranchControl", &azuredevops.CheckBranchControlArgs{
//				ProjectId:          exampleProject.ID(),
//				DisplayName:        pulumi.String("Managed by Terraform"),
//				TargetResourceId:   exampleEnvironment.ID(),
//				TargetResourceType: pulumi.String("environment"),
//				AllowedBranches:    pulumi.String("refs/heads/main, refs/heads/features/*"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Protect an agent queue
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleProject, err := azuredevops.NewProject(ctx, "exampleProject", nil)
//			if err != nil {
//				return err
//			}
//			examplePool, err := azuredevops.NewPool(ctx, "examplePool", nil)
//			if err != nil {
//				return err
//			}
//			exampleQueue, err := azuredevops.NewQueue(ctx, "exampleQueue", &azuredevops.QueueArgs{
//				ProjectId:   exampleProject.ID(),
//				AgentPoolId: examplePool.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = azuredevops.NewCheckBranchControl(ctx, "exampleCheckBranchControl", &azuredevops.CheckBranchControlArgs{
//				ProjectId:          exampleProject.ID(),
//				DisplayName:        pulumi.String("Managed by Terraform"),
//				TargetResourceId:   exampleQueue.ID(),
//				TargetResourceType: pulumi.String("queue"),
//				AllowedBranches:    pulumi.String("refs/heads/main, refs/heads/features/*"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Protect a repository
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleProject, err := azuredevops.NewProject(ctx, "exampleProject", nil)
//			if err != nil {
//				return err
//			}
//			exampleGit, err := azuredevops.NewGit(ctx, "exampleGit", &azuredevops.GitArgs{
//				ProjectId: exampleProject.ID(),
//				Initialization: &azuredevops.GitInitializationArgs{
//					InitType: pulumi.String("Clean"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = azuredevops.NewCheckBranchControl(ctx, "exampleCheckBranchControl", &azuredevops.CheckBranchControlArgs{
//				ProjectId:   exampleProject.ID(),
//				DisplayName: pulumi.String("Managed by Terraform"),
//				TargetResourceId: pulumi.All(exampleProject.ID(), exampleGit.ID()).ApplyT(func(_args []interface{}) (string, error) {
//					exampleProjectId := _args[0].(string)
//					exampleGitId := _args[1].(string)
//					return fmt.Sprintf("%v.%v", exampleProjectId, exampleGitId), nil
//				}).(pulumi.StringOutput),
//				TargetResourceType: pulumi.String("repository"),
//				AllowedBranches:    pulumi.String("refs/heads/main, refs/heads/features/*"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Protect a variable group
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleProject, err := azuredevops.NewProject(ctx, "exampleProject", nil)
//			if err != nil {
//				return err
//			}
//			exampleVariableGroup, err := azuredevops.NewVariableGroup(ctx, "exampleVariableGroup", &azuredevops.VariableGroupArgs{
//				ProjectId:   exampleProject.ID(),
//				Description: pulumi.String("Example Variable Group Description"),
//				AllowAccess: pulumi.Bool(true),
//				Variables: azuredevops.VariableGroupVariableArray{
//					&azuredevops.VariableGroupVariableArgs{
//						Name:  pulumi.String("key1"),
//						Value: pulumi.String("val1"),
//					},
//					&azuredevops.VariableGroupVariableArgs{
//						Name:        pulumi.String("key2"),
//						SecretValue: pulumi.String("val2"),
//						IsSecret:    pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = azuredevops.NewCheckBranchControl(ctx, "exampleCheckBranchControl", &azuredevops.CheckBranchControlArgs{
//				ProjectId:          exampleProject.ID(),
//				DisplayName:        pulumi.String("Managed by Terraform"),
//				TargetResourceId:   exampleVariableGroup.ID(),
//				TargetResourceType: pulumi.String("variablegroup"),
//				AllowedBranches:    pulumi.String("refs/heads/main, refs/heads/features/*"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Relevant Links
//
// - [Define approvals and checks](https://learn.microsoft.com/en-us/azure/devops/pipelines/process/approvals?view=azure-devops&tabs=check-pass)
//
// ## Import
//
// Importing this resource is not supported.
type CheckBranchControl struct {
	pulumi.CustomResourceState

	// The branches allowed to use the resource. Specify a comma separated list of allowed branches in `refs/heads/branch_name` format. To allow deployments from all branches, specify `*` . `refs/heads/features/* , refs/heads/releases/*` restricts deployments to all branches under features/ or releases/ . Defaults to `*`.
	AllowedBranches pulumi.StringPtrOutput `pulumi:"allowedBranches"`
	// The name of the branch control check displayed in the web UI.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Allow deployment from branches for which protection status could not be obtained. Only relevant when verifyBranchProtection is `true`. Defaults to `false`.
	IgnoreUnknownProtectionStatus pulumi.BoolPtrOutput `pulumi:"ignoreUnknownProtectionStatus"`
	// The project ID.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The ID of the resource being protected by the check.
	TargetResourceId pulumi.StringOutput `pulumi:"targetResourceId"`
	// The type of resource being protected by the check. Valid values: `endpoint`, `environment`, `queue`, `repository`, `securefile`, `variablegroup`.
	TargetResourceType pulumi.StringOutput `pulumi:"targetResourceType"`
	// Validate the branches being deployed are protected. Defaults to `false`.
	VerifyBranchProtection pulumi.BoolPtrOutput `pulumi:"verifyBranchProtection"`
}

// NewCheckBranchControl registers a new resource with the given unique name, arguments, and options.
func NewCheckBranchControl(ctx *pulumi.Context,
	name string, args *CheckBranchControlArgs, opts ...pulumi.ResourceOption) (*CheckBranchControl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.TargetResourceId == nil {
		return nil, errors.New("invalid value for required argument 'TargetResourceId'")
	}
	if args.TargetResourceType == nil {
		return nil, errors.New("invalid value for required argument 'TargetResourceType'")
	}
	var resource CheckBranchControl
	err := ctx.RegisterResource("azuredevops:index/checkBranchControl:CheckBranchControl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCheckBranchControl gets an existing CheckBranchControl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCheckBranchControl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CheckBranchControlState, opts ...pulumi.ResourceOption) (*CheckBranchControl, error) {
	var resource CheckBranchControl
	err := ctx.ReadResource("azuredevops:index/checkBranchControl:CheckBranchControl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CheckBranchControl resources.
type checkBranchControlState struct {
	// The branches allowed to use the resource. Specify a comma separated list of allowed branches in `refs/heads/branch_name` format. To allow deployments from all branches, specify `*` . `refs/heads/features/* , refs/heads/releases/*` restricts deployments to all branches under features/ or releases/ . Defaults to `*`.
	AllowedBranches *string `pulumi:"allowedBranches"`
	// The name of the branch control check displayed in the web UI.
	DisplayName *string `pulumi:"displayName"`
	// Allow deployment from branches for which protection status could not be obtained. Only relevant when verifyBranchProtection is `true`. Defaults to `false`.
	IgnoreUnknownProtectionStatus *bool `pulumi:"ignoreUnknownProtectionStatus"`
	// The project ID.
	ProjectId *string `pulumi:"projectId"`
	// The ID of the resource being protected by the check.
	TargetResourceId *string `pulumi:"targetResourceId"`
	// The type of resource being protected by the check. Valid values: `endpoint`, `environment`, `queue`, `repository`, `securefile`, `variablegroup`.
	TargetResourceType *string `pulumi:"targetResourceType"`
	// Validate the branches being deployed are protected. Defaults to `false`.
	VerifyBranchProtection *bool `pulumi:"verifyBranchProtection"`
}

type CheckBranchControlState struct {
	// The branches allowed to use the resource. Specify a comma separated list of allowed branches in `refs/heads/branch_name` format. To allow deployments from all branches, specify `*` . `refs/heads/features/* , refs/heads/releases/*` restricts deployments to all branches under features/ or releases/ . Defaults to `*`.
	AllowedBranches pulumi.StringPtrInput
	// The name of the branch control check displayed in the web UI.
	DisplayName pulumi.StringPtrInput
	// Allow deployment from branches for which protection status could not be obtained. Only relevant when verifyBranchProtection is `true`. Defaults to `false`.
	IgnoreUnknownProtectionStatus pulumi.BoolPtrInput
	// The project ID.
	ProjectId pulumi.StringPtrInput
	// The ID of the resource being protected by the check.
	TargetResourceId pulumi.StringPtrInput
	// The type of resource being protected by the check. Valid values: `endpoint`, `environment`, `queue`, `repository`, `securefile`, `variablegroup`.
	TargetResourceType pulumi.StringPtrInput
	// Validate the branches being deployed are protected. Defaults to `false`.
	VerifyBranchProtection pulumi.BoolPtrInput
}

func (CheckBranchControlState) ElementType() reflect.Type {
	return reflect.TypeOf((*checkBranchControlState)(nil)).Elem()
}

type checkBranchControlArgs struct {
	// The branches allowed to use the resource. Specify a comma separated list of allowed branches in `refs/heads/branch_name` format. To allow deployments from all branches, specify `*` . `refs/heads/features/* , refs/heads/releases/*` restricts deployments to all branches under features/ or releases/ . Defaults to `*`.
	AllowedBranches *string `pulumi:"allowedBranches"`
	// The name of the branch control check displayed in the web UI.
	DisplayName *string `pulumi:"displayName"`
	// Allow deployment from branches for which protection status could not be obtained. Only relevant when verifyBranchProtection is `true`. Defaults to `false`.
	IgnoreUnknownProtectionStatus *bool `pulumi:"ignoreUnknownProtectionStatus"`
	// The project ID.
	ProjectId string `pulumi:"projectId"`
	// The ID of the resource being protected by the check.
	TargetResourceId string `pulumi:"targetResourceId"`
	// The type of resource being protected by the check. Valid values: `endpoint`, `environment`, `queue`, `repository`, `securefile`, `variablegroup`.
	TargetResourceType string `pulumi:"targetResourceType"`
	// Validate the branches being deployed are protected. Defaults to `false`.
	VerifyBranchProtection *bool `pulumi:"verifyBranchProtection"`
}

// The set of arguments for constructing a CheckBranchControl resource.
type CheckBranchControlArgs struct {
	// The branches allowed to use the resource. Specify a comma separated list of allowed branches in `refs/heads/branch_name` format. To allow deployments from all branches, specify `*` . `refs/heads/features/* , refs/heads/releases/*` restricts deployments to all branches under features/ or releases/ . Defaults to `*`.
	AllowedBranches pulumi.StringPtrInput
	// The name of the branch control check displayed in the web UI.
	DisplayName pulumi.StringPtrInput
	// Allow deployment from branches for which protection status could not be obtained. Only relevant when verifyBranchProtection is `true`. Defaults to `false`.
	IgnoreUnknownProtectionStatus pulumi.BoolPtrInput
	// The project ID.
	ProjectId pulumi.StringInput
	// The ID of the resource being protected by the check.
	TargetResourceId pulumi.StringInput
	// The type of resource being protected by the check. Valid values: `endpoint`, `environment`, `queue`, `repository`, `securefile`, `variablegroup`.
	TargetResourceType pulumi.StringInput
	// Validate the branches being deployed are protected. Defaults to `false`.
	VerifyBranchProtection pulumi.BoolPtrInput
}

func (CheckBranchControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*checkBranchControlArgs)(nil)).Elem()
}

type CheckBranchControlInput interface {
	pulumi.Input

	ToCheckBranchControlOutput() CheckBranchControlOutput
	ToCheckBranchControlOutputWithContext(ctx context.Context) CheckBranchControlOutput
}

func (*CheckBranchControl) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckBranchControl)(nil)).Elem()
}

func (i *CheckBranchControl) ToCheckBranchControlOutput() CheckBranchControlOutput {
	return i.ToCheckBranchControlOutputWithContext(context.Background())
}

func (i *CheckBranchControl) ToCheckBranchControlOutputWithContext(ctx context.Context) CheckBranchControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckBranchControlOutput)
}

// CheckBranchControlArrayInput is an input type that accepts CheckBranchControlArray and CheckBranchControlArrayOutput values.
// You can construct a concrete instance of `CheckBranchControlArrayInput` via:
//
//	CheckBranchControlArray{ CheckBranchControlArgs{...} }
type CheckBranchControlArrayInput interface {
	pulumi.Input

	ToCheckBranchControlArrayOutput() CheckBranchControlArrayOutput
	ToCheckBranchControlArrayOutputWithContext(context.Context) CheckBranchControlArrayOutput
}

type CheckBranchControlArray []CheckBranchControlInput

func (CheckBranchControlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CheckBranchControl)(nil)).Elem()
}

func (i CheckBranchControlArray) ToCheckBranchControlArrayOutput() CheckBranchControlArrayOutput {
	return i.ToCheckBranchControlArrayOutputWithContext(context.Background())
}

func (i CheckBranchControlArray) ToCheckBranchControlArrayOutputWithContext(ctx context.Context) CheckBranchControlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckBranchControlArrayOutput)
}

// CheckBranchControlMapInput is an input type that accepts CheckBranchControlMap and CheckBranchControlMapOutput values.
// You can construct a concrete instance of `CheckBranchControlMapInput` via:
//
//	CheckBranchControlMap{ "key": CheckBranchControlArgs{...} }
type CheckBranchControlMapInput interface {
	pulumi.Input

	ToCheckBranchControlMapOutput() CheckBranchControlMapOutput
	ToCheckBranchControlMapOutputWithContext(context.Context) CheckBranchControlMapOutput
}

type CheckBranchControlMap map[string]CheckBranchControlInput

func (CheckBranchControlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CheckBranchControl)(nil)).Elem()
}

func (i CheckBranchControlMap) ToCheckBranchControlMapOutput() CheckBranchControlMapOutput {
	return i.ToCheckBranchControlMapOutputWithContext(context.Background())
}

func (i CheckBranchControlMap) ToCheckBranchControlMapOutputWithContext(ctx context.Context) CheckBranchControlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckBranchControlMapOutput)
}

type CheckBranchControlOutput struct{ *pulumi.OutputState }

func (CheckBranchControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckBranchControl)(nil)).Elem()
}

func (o CheckBranchControlOutput) ToCheckBranchControlOutput() CheckBranchControlOutput {
	return o
}

func (o CheckBranchControlOutput) ToCheckBranchControlOutputWithContext(ctx context.Context) CheckBranchControlOutput {
	return o
}

// The branches allowed to use the resource. Specify a comma separated list of allowed branches in `refs/heads/branch_name` format. To allow deployments from all branches, specify `*` . `refs/heads/features/* , refs/heads/releases/*` restricts deployments to all branches under features/ or releases/ . Defaults to `*`.
func (o CheckBranchControlOutput) AllowedBranches() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckBranchControl) pulumi.StringPtrOutput { return v.AllowedBranches }).(pulumi.StringPtrOutput)
}

// The name of the branch control check displayed in the web UI.
func (o CheckBranchControlOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckBranchControl) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Allow deployment from branches for which protection status could not be obtained. Only relevant when verifyBranchProtection is `true`. Defaults to `false`.
func (o CheckBranchControlOutput) IgnoreUnknownProtectionStatus() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CheckBranchControl) pulumi.BoolPtrOutput { return v.IgnoreUnknownProtectionStatus }).(pulumi.BoolPtrOutput)
}

// The project ID.
func (o CheckBranchControlOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *CheckBranchControl) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The ID of the resource being protected by the check.
func (o CheckBranchControlOutput) TargetResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *CheckBranchControl) pulumi.StringOutput { return v.TargetResourceId }).(pulumi.StringOutput)
}

// The type of resource being protected by the check. Valid values: `endpoint`, `environment`, `queue`, `repository`, `securefile`, `variablegroup`.
func (o CheckBranchControlOutput) TargetResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *CheckBranchControl) pulumi.StringOutput { return v.TargetResourceType }).(pulumi.StringOutput)
}

// Validate the branches being deployed are protected. Defaults to `false`.
func (o CheckBranchControlOutput) VerifyBranchProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CheckBranchControl) pulumi.BoolPtrOutput { return v.VerifyBranchProtection }).(pulumi.BoolPtrOutput)
}

type CheckBranchControlArrayOutput struct{ *pulumi.OutputState }

func (CheckBranchControlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CheckBranchControl)(nil)).Elem()
}

func (o CheckBranchControlArrayOutput) ToCheckBranchControlArrayOutput() CheckBranchControlArrayOutput {
	return o
}

func (o CheckBranchControlArrayOutput) ToCheckBranchControlArrayOutputWithContext(ctx context.Context) CheckBranchControlArrayOutput {
	return o
}

func (o CheckBranchControlArrayOutput) Index(i pulumi.IntInput) CheckBranchControlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CheckBranchControl {
		return vs[0].([]*CheckBranchControl)[vs[1].(int)]
	}).(CheckBranchControlOutput)
}

type CheckBranchControlMapOutput struct{ *pulumi.OutputState }

func (CheckBranchControlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CheckBranchControl)(nil)).Elem()
}

func (o CheckBranchControlMapOutput) ToCheckBranchControlMapOutput() CheckBranchControlMapOutput {
	return o
}

func (o CheckBranchControlMapOutput) ToCheckBranchControlMapOutputWithContext(ctx context.Context) CheckBranchControlMapOutput {
	return o
}

func (o CheckBranchControlMapOutput) MapIndex(k pulumi.StringInput) CheckBranchControlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CheckBranchControl {
		return vs[0].(map[string]*CheckBranchControl)[vs[1].(string)]
	}).(CheckBranchControlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CheckBranchControlInput)(nil)).Elem(), &CheckBranchControl{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckBranchControlArrayInput)(nil)).Elem(), CheckBranchControlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckBranchControlMapInput)(nil)).Elem(), CheckBranchControlMap{})
	pulumi.RegisterOutputType(CheckBranchControlOutput{})
	pulumi.RegisterOutputType(CheckBranchControlArrayOutput{})
	pulumi.RegisterOutputType(CheckBranchControlMapOutput{})
}
