// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package security

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages authorization of resources, e.g. for access in build pipelines.
//
// Currently supported resources: service endpoint (aka service connection, endpoint).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		project, err := azuredevops.NewProject(ctx, "project", nil)
// 		if err != nil {
// 			return err
// 		}
// 		bitbucketAccount, err := azuredevops.NewServiceEndpointBitBucket(ctx, "bitbucketAccount", &azuredevops.ServiceEndpointBitBucketArgs{
// 			ProjectId:           project.ID(),
// 			Username:            pulumi.String("xxxx"),
// 			Password:            pulumi.String("xxxx"),
// 			ServiceEndpointName: pulumi.String("test-bitbucket"),
// 			Description:         pulumi.String("test"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = azuredevops.NewResourceAuthorization(ctx, "auth", &azuredevops.ResourceAuthorizationArgs{
// 			ProjectId:  project.ID(),
// 			ResourceId: bitbucketAccount.ID(),
// 			Authorized: pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Relevant Links
//
// - [Azure DevOps Service REST API 5.1 - Authorize Definition Resource](https://docs.microsoft.com/en-us/rest/api/azure/devops/build/resources/authorize%20definition%20resources?view=azure-devops-rest-5.1)
//
// Deprecated: azuredevops.security.ResourceAuthorization has been deprecated in favor of azuredevops.ResourceAuthorization
type ResourceAuthorization struct {
	pulumi.CustomResourceState

	// Set to true to allow public access in the project. Type: boolean.
	Authorized pulumi.BoolOutput `pulumi:"authorized"`
	// The ID of the build definition to authorize. Type: string.
	DefinitionId pulumi.IntPtrOutput `pulumi:"definitionId"`
	// The project ID or project name. Type: string.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The ID of the resource to authorize. Type: string.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// The type of the resource to authorize. Type: string. Valid values: `endpoint`, `queue`, `variablegroup`. Default value: `endpoint`.
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewResourceAuthorization registers a new resource with the given unique name, arguments, and options.
func NewResourceAuthorization(ctx *pulumi.Context,
	name string, args *ResourceAuthorizationArgs, opts ...pulumi.ResourceOption) (*ResourceAuthorization, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Authorized == nil {
		return nil, errors.New("invalid value for required argument 'Authorized'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	var resource ResourceAuthorization
	err := ctx.RegisterResource("azuredevops:Security/resourceAuthorization:ResourceAuthorization", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceAuthorization gets an existing ResourceAuthorization resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceAuthorization(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceAuthorizationState, opts ...pulumi.ResourceOption) (*ResourceAuthorization, error) {
	var resource ResourceAuthorization
	err := ctx.ReadResource("azuredevops:Security/resourceAuthorization:ResourceAuthorization", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceAuthorization resources.
type resourceAuthorizationState struct {
	// Set to true to allow public access in the project. Type: boolean.
	Authorized *bool `pulumi:"authorized"`
	// The ID of the build definition to authorize. Type: string.
	DefinitionId *int `pulumi:"definitionId"`
	// The project ID or project name. Type: string.
	ProjectId *string `pulumi:"projectId"`
	// The ID of the resource to authorize. Type: string.
	ResourceId *string `pulumi:"resourceId"`
	// The type of the resource to authorize. Type: string. Valid values: `endpoint`, `queue`, `variablegroup`. Default value: `endpoint`.
	Type *string `pulumi:"type"`
}

type ResourceAuthorizationState struct {
	// Set to true to allow public access in the project. Type: boolean.
	Authorized pulumi.BoolPtrInput
	// The ID of the build definition to authorize. Type: string.
	DefinitionId pulumi.IntPtrInput
	// The project ID or project name. Type: string.
	ProjectId pulumi.StringPtrInput
	// The ID of the resource to authorize. Type: string.
	ResourceId pulumi.StringPtrInput
	// The type of the resource to authorize. Type: string. Valid values: `endpoint`, `queue`, `variablegroup`. Default value: `endpoint`.
	Type pulumi.StringPtrInput
}

func (ResourceAuthorizationState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceAuthorizationState)(nil)).Elem()
}

type resourceAuthorizationArgs struct {
	// Set to true to allow public access in the project. Type: boolean.
	Authorized bool `pulumi:"authorized"`
	// The ID of the build definition to authorize. Type: string.
	DefinitionId *int `pulumi:"definitionId"`
	// The project ID or project name. Type: string.
	ProjectId string `pulumi:"projectId"`
	// The ID of the resource to authorize. Type: string.
	ResourceId string `pulumi:"resourceId"`
	// The type of the resource to authorize. Type: string. Valid values: `endpoint`, `queue`, `variablegroup`. Default value: `endpoint`.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a ResourceAuthorization resource.
type ResourceAuthorizationArgs struct {
	// Set to true to allow public access in the project. Type: boolean.
	Authorized pulumi.BoolInput
	// The ID of the build definition to authorize. Type: string.
	DefinitionId pulumi.IntPtrInput
	// The project ID or project name. Type: string.
	ProjectId pulumi.StringInput
	// The ID of the resource to authorize. Type: string.
	ResourceId pulumi.StringInput
	// The type of the resource to authorize. Type: string. Valid values: `endpoint`, `queue`, `variablegroup`. Default value: `endpoint`.
	Type pulumi.StringPtrInput
}

func (ResourceAuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceAuthorizationArgs)(nil)).Elem()
}

type ResourceAuthorizationInput interface {
	pulumi.Input

	ToResourceAuthorizationOutput() ResourceAuthorizationOutput
	ToResourceAuthorizationOutputWithContext(ctx context.Context) ResourceAuthorizationOutput
}

func (ResourceAuthorization) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAuthorization)(nil)).Elem()
}

func (i ResourceAuthorization) ToResourceAuthorizationOutput() ResourceAuthorizationOutput {
	return i.ToResourceAuthorizationOutputWithContext(context.Background())
}

func (i ResourceAuthorization) ToResourceAuthorizationOutputWithContext(ctx context.Context) ResourceAuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAuthorizationOutput)
}

type ResourceAuthorizationOutput struct {
	*pulumi.OutputState
}

func (ResourceAuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAuthorizationOutput)(nil)).Elem()
}

func (o ResourceAuthorizationOutput) ToResourceAuthorizationOutput() ResourceAuthorizationOutput {
	return o
}

func (o ResourceAuthorizationOutput) ToResourceAuthorizationOutputWithContext(ctx context.Context) ResourceAuthorizationOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ResourceAuthorizationOutput{})
}
