// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azuredevops

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get an existing Git Repository File.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := azuredevops.LookupProject(ctx, &azuredevops.LookupProjectArgs{
//				Name: pulumi.StringRef("Example Project"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Load a specific Git repository by name
//			exampleGetGitRepository, err := azuredevops.GetGitRepository(ctx, &azuredevops.GetGitRepositoryArgs{
//				ProjectId: example.Id,
//				Name:      "Example Repository",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = azuredevops.LookupGitRepositoryFile(ctx, &azuredevops.LookupGitRepositoryFileArgs{
//				RepositoryId: exampleGetGitRepository.Id,
//				Branch:       pulumi.StringRef("refs/heads/main"),
//				File:         "MyFile.txt",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupGitRepositoryFile(ctx *pulumi.Context, args *LookupGitRepositoryFileArgs, opts ...pulumi.InvokeOption) (*LookupGitRepositoryFileResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupGitRepositoryFileResult
	err := ctx.Invoke("azuredevops:index/getGitRepositoryFile:getGitRepositoryFile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGitRepositoryFile.
type LookupGitRepositoryFileArgs struct {
	// The git branch to use. Conflicts with `tag`; one or the other must be specified.
	Branch *string `pulumi:"branch"`
	// The path of the file to get.
	File string `pulumi:"file"`
	// The ID of the Git repository.
	RepositoryId string `pulumi:"repositoryId"`
	// The tag to use.Conflicts with `branch`; one or the other must be specified.
	Tag *string `pulumi:"tag"`
}

// A collection of values returned by getGitRepositoryFile.
type LookupGitRepositoryFileResult struct {
	Branch *string `pulumi:"branch"`
	// The file content.
	Content string `pulumi:"content"`
	File    string `pulumi:"file"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The commit message for the file.
	LastCommitMessage string  `pulumi:"lastCommitMessage"`
	RepositoryId      string  `pulumi:"repositoryId"`
	Tag               *string `pulumi:"tag"`
}

func LookupGitRepositoryFileOutput(ctx *pulumi.Context, args LookupGitRepositoryFileOutputArgs, opts ...pulumi.InvokeOption) LookupGitRepositoryFileResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupGitRepositoryFileResultOutput, error) {
			args := v.(LookupGitRepositoryFileArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azuredevops:index/getGitRepositoryFile:getGitRepositoryFile", args, LookupGitRepositoryFileResultOutput{}, options).(LookupGitRepositoryFileResultOutput), nil
		}).(LookupGitRepositoryFileResultOutput)
}

// A collection of arguments for invoking getGitRepositoryFile.
type LookupGitRepositoryFileOutputArgs struct {
	// The git branch to use. Conflicts with `tag`; one or the other must be specified.
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// The path of the file to get.
	File pulumi.StringInput `pulumi:"file"`
	// The ID of the Git repository.
	RepositoryId pulumi.StringInput `pulumi:"repositoryId"`
	// The tag to use.Conflicts with `branch`; one or the other must be specified.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (LookupGitRepositoryFileOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGitRepositoryFileArgs)(nil)).Elem()
}

// A collection of values returned by getGitRepositoryFile.
type LookupGitRepositoryFileResultOutput struct{ *pulumi.OutputState }

func (LookupGitRepositoryFileResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGitRepositoryFileResult)(nil)).Elem()
}

func (o LookupGitRepositoryFileResultOutput) ToLookupGitRepositoryFileResultOutput() LookupGitRepositoryFileResultOutput {
	return o
}

func (o LookupGitRepositoryFileResultOutput) ToLookupGitRepositoryFileResultOutputWithContext(ctx context.Context) LookupGitRepositoryFileResultOutput {
	return o
}

func (o LookupGitRepositoryFileResultOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGitRepositoryFileResult) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// The file content.
func (o LookupGitRepositoryFileResultOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitRepositoryFileResult) string { return v.Content }).(pulumi.StringOutput)
}

func (o LookupGitRepositoryFileResultOutput) File() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitRepositoryFileResult) string { return v.File }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupGitRepositoryFileResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitRepositoryFileResult) string { return v.Id }).(pulumi.StringOutput)
}

// The commit message for the file.
func (o LookupGitRepositoryFileResultOutput) LastCommitMessage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitRepositoryFileResult) string { return v.LastCommitMessage }).(pulumi.StringOutput)
}

func (o LookupGitRepositoryFileResultOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitRepositoryFileResult) string { return v.RepositoryId }).(pulumi.StringOutput)
}

func (o LookupGitRepositoryFileResultOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGitRepositoryFileResult) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGitRepositoryFileResultOutput{})
}
