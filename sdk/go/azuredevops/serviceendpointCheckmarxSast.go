// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azuredevops

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Checkmarx SAST service endpoint within Azure DevOps. Using this service endpoint requires you to install: [Checkmarx SAST](https://marketplace.visualstudio.com/items?itemName=checkmarx.cxsast)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := azuredevops.NewProject(ctx, "example", &azuredevops.ProjectArgs{
//				Name:             pulumi.String("Example Project"),
//				Visibility:       pulumi.String("private"),
//				VersionControl:   pulumi.String("Git"),
//				WorkItemTemplate: pulumi.String("Agile"),
//				Description:      pulumi.String("Managed by Pulumi"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = azuredevops.NewServiceendpointCheckmarxSast(ctx, "example", &azuredevops.ServiceendpointCheckmarxSastArgs{
//				ProjectId:           example.ID(),
//				ServiceEndpointName: pulumi.String("Example Checkmarx SAST"),
//				ServerUrl:           pulumi.String("https://server.com"),
//				Username:            pulumi.String("username"),
//				Password:            pulumi.String("password"),
//				Team:                pulumi.String("team"),
//				Preset:              pulumi.String("preset"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Relevant Links
//
// - [Azure DevOps Service REST API 7.0 - Service Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-7.0)
//
// ## Import
//
// Azure DevOps Service Endpoint Check Marx SAST can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**
//
// ```sh
// $ pulumi import azuredevops:index/serviceendpointCheckmarxSast:ServiceendpointCheckmarxSast example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000
// ```
type ServiceendpointCheckmarxSast struct {
	pulumi.CustomResourceState

	Authorization pulumi.StringMapOutput `pulumi:"authorization"`
	Description   pulumi.StringPtrOutput `pulumi:"description"`
	// The password of the Checkmarx SAST.
	Password pulumi.StringOutput `pulumi:"password"`
	// Predefined sets of queries that you can select when Creating, Configuring and Branching Projects. Predefined presets are provided by Checkmarx and you can configure your own. You can also import and export presets (on the server).In Service Connection if preset(optional) value is added, then it will igonres Preset available in pipeline and uses preset available in service connection only.If Preset is blank in service connection then it will use pipelines preset.
	Preset pulumi.StringPtrOutput `pulumi:"preset"`
	// The ID of the project.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The Server URL of the Checkmarx SAST.
	ServerUrl pulumi.StringOutput `pulumi:"serverUrl"`
	// The Service Endpoint name.
	ServiceEndpointName pulumi.StringOutput `pulumi:"serviceEndpointName"`
	// The full team name of the Checkmarx.
	Team pulumi.StringPtrOutput `pulumi:"team"`
	// The username of the Checkmarx SAST.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewServiceendpointCheckmarxSast registers a new resource with the given unique name, arguments, and options.
func NewServiceendpointCheckmarxSast(ctx *pulumi.Context,
	name string, args *ServiceendpointCheckmarxSastArgs, opts ...pulumi.ResourceOption) (*ServiceendpointCheckmarxSast, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.ServerUrl == nil {
		return nil, errors.New("invalid value for required argument 'ServerUrl'")
	}
	if args.ServiceEndpointName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceEndpointName'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceendpointCheckmarxSast
	err := ctx.RegisterResource("azuredevops:index/serviceendpointCheckmarxSast:ServiceendpointCheckmarxSast", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceendpointCheckmarxSast gets an existing ServiceendpointCheckmarxSast resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceendpointCheckmarxSast(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceendpointCheckmarxSastState, opts ...pulumi.ResourceOption) (*ServiceendpointCheckmarxSast, error) {
	var resource ServiceendpointCheckmarxSast
	err := ctx.ReadResource("azuredevops:index/serviceendpointCheckmarxSast:ServiceendpointCheckmarxSast", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceendpointCheckmarxSast resources.
type serviceendpointCheckmarxSastState struct {
	Authorization map[string]string `pulumi:"authorization"`
	Description   *string           `pulumi:"description"`
	// The password of the Checkmarx SAST.
	Password *string `pulumi:"password"`
	// Predefined sets of queries that you can select when Creating, Configuring and Branching Projects. Predefined presets are provided by Checkmarx and you can configure your own. You can also import and export presets (on the server).In Service Connection if preset(optional) value is added, then it will igonres Preset available in pipeline and uses preset available in service connection only.If Preset is blank in service connection then it will use pipelines preset.
	Preset *string `pulumi:"preset"`
	// The ID of the project.
	ProjectId *string `pulumi:"projectId"`
	// The Server URL of the Checkmarx SAST.
	ServerUrl *string `pulumi:"serverUrl"`
	// The Service Endpoint name.
	ServiceEndpointName *string `pulumi:"serviceEndpointName"`
	// The full team name of the Checkmarx.
	Team *string `pulumi:"team"`
	// The username of the Checkmarx SAST.
	Username *string `pulumi:"username"`
}

type ServiceendpointCheckmarxSastState struct {
	Authorization pulumi.StringMapInput
	Description   pulumi.StringPtrInput
	// The password of the Checkmarx SAST.
	Password pulumi.StringPtrInput
	// Predefined sets of queries that you can select when Creating, Configuring and Branching Projects. Predefined presets are provided by Checkmarx and you can configure your own. You can also import and export presets (on the server).In Service Connection if preset(optional) value is added, then it will igonres Preset available in pipeline and uses preset available in service connection only.If Preset is blank in service connection then it will use pipelines preset.
	Preset pulumi.StringPtrInput
	// The ID of the project.
	ProjectId pulumi.StringPtrInput
	// The Server URL of the Checkmarx SAST.
	ServerUrl pulumi.StringPtrInput
	// The Service Endpoint name.
	ServiceEndpointName pulumi.StringPtrInput
	// The full team name of the Checkmarx.
	Team pulumi.StringPtrInput
	// The username of the Checkmarx SAST.
	Username pulumi.StringPtrInput
}

func (ServiceendpointCheckmarxSastState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceendpointCheckmarxSastState)(nil)).Elem()
}

type serviceendpointCheckmarxSastArgs struct {
	Description *string `pulumi:"description"`
	// The password of the Checkmarx SAST.
	Password string `pulumi:"password"`
	// Predefined sets of queries that you can select when Creating, Configuring and Branching Projects. Predefined presets are provided by Checkmarx and you can configure your own. You can also import and export presets (on the server).In Service Connection if preset(optional) value is added, then it will igonres Preset available in pipeline and uses preset available in service connection only.If Preset is blank in service connection then it will use pipelines preset.
	Preset *string `pulumi:"preset"`
	// The ID of the project.
	ProjectId string `pulumi:"projectId"`
	// The Server URL of the Checkmarx SAST.
	ServerUrl string `pulumi:"serverUrl"`
	// The Service Endpoint name.
	ServiceEndpointName string `pulumi:"serviceEndpointName"`
	// The full team name of the Checkmarx.
	Team *string `pulumi:"team"`
	// The username of the Checkmarx SAST.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a ServiceendpointCheckmarxSast resource.
type ServiceendpointCheckmarxSastArgs struct {
	Description pulumi.StringPtrInput
	// The password of the Checkmarx SAST.
	Password pulumi.StringInput
	// Predefined sets of queries that you can select when Creating, Configuring and Branching Projects. Predefined presets are provided by Checkmarx and you can configure your own. You can also import and export presets (on the server).In Service Connection if preset(optional) value is added, then it will igonres Preset available in pipeline and uses preset available in service connection only.If Preset is blank in service connection then it will use pipelines preset.
	Preset pulumi.StringPtrInput
	// The ID of the project.
	ProjectId pulumi.StringInput
	// The Server URL of the Checkmarx SAST.
	ServerUrl pulumi.StringInput
	// The Service Endpoint name.
	ServiceEndpointName pulumi.StringInput
	// The full team name of the Checkmarx.
	Team pulumi.StringPtrInput
	// The username of the Checkmarx SAST.
	Username pulumi.StringInput
}

func (ServiceendpointCheckmarxSastArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceendpointCheckmarxSastArgs)(nil)).Elem()
}

type ServiceendpointCheckmarxSastInput interface {
	pulumi.Input

	ToServiceendpointCheckmarxSastOutput() ServiceendpointCheckmarxSastOutput
	ToServiceendpointCheckmarxSastOutputWithContext(ctx context.Context) ServiceendpointCheckmarxSastOutput
}

func (*ServiceendpointCheckmarxSast) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceendpointCheckmarxSast)(nil)).Elem()
}

func (i *ServiceendpointCheckmarxSast) ToServiceendpointCheckmarxSastOutput() ServiceendpointCheckmarxSastOutput {
	return i.ToServiceendpointCheckmarxSastOutputWithContext(context.Background())
}

func (i *ServiceendpointCheckmarxSast) ToServiceendpointCheckmarxSastOutputWithContext(ctx context.Context) ServiceendpointCheckmarxSastOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceendpointCheckmarxSastOutput)
}

// ServiceendpointCheckmarxSastArrayInput is an input type that accepts ServiceendpointCheckmarxSastArray and ServiceendpointCheckmarxSastArrayOutput values.
// You can construct a concrete instance of `ServiceendpointCheckmarxSastArrayInput` via:
//
//	ServiceendpointCheckmarxSastArray{ ServiceendpointCheckmarxSastArgs{...} }
type ServiceendpointCheckmarxSastArrayInput interface {
	pulumi.Input

	ToServiceendpointCheckmarxSastArrayOutput() ServiceendpointCheckmarxSastArrayOutput
	ToServiceendpointCheckmarxSastArrayOutputWithContext(context.Context) ServiceendpointCheckmarxSastArrayOutput
}

type ServiceendpointCheckmarxSastArray []ServiceendpointCheckmarxSastInput

func (ServiceendpointCheckmarxSastArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceendpointCheckmarxSast)(nil)).Elem()
}

func (i ServiceendpointCheckmarxSastArray) ToServiceendpointCheckmarxSastArrayOutput() ServiceendpointCheckmarxSastArrayOutput {
	return i.ToServiceendpointCheckmarxSastArrayOutputWithContext(context.Background())
}

func (i ServiceendpointCheckmarxSastArray) ToServiceendpointCheckmarxSastArrayOutputWithContext(ctx context.Context) ServiceendpointCheckmarxSastArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceendpointCheckmarxSastArrayOutput)
}

// ServiceendpointCheckmarxSastMapInput is an input type that accepts ServiceendpointCheckmarxSastMap and ServiceendpointCheckmarxSastMapOutput values.
// You can construct a concrete instance of `ServiceendpointCheckmarxSastMapInput` via:
//
//	ServiceendpointCheckmarxSastMap{ "key": ServiceendpointCheckmarxSastArgs{...} }
type ServiceendpointCheckmarxSastMapInput interface {
	pulumi.Input

	ToServiceendpointCheckmarxSastMapOutput() ServiceendpointCheckmarxSastMapOutput
	ToServiceendpointCheckmarxSastMapOutputWithContext(context.Context) ServiceendpointCheckmarxSastMapOutput
}

type ServiceendpointCheckmarxSastMap map[string]ServiceendpointCheckmarxSastInput

func (ServiceendpointCheckmarxSastMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceendpointCheckmarxSast)(nil)).Elem()
}

func (i ServiceendpointCheckmarxSastMap) ToServiceendpointCheckmarxSastMapOutput() ServiceendpointCheckmarxSastMapOutput {
	return i.ToServiceendpointCheckmarxSastMapOutputWithContext(context.Background())
}

func (i ServiceendpointCheckmarxSastMap) ToServiceendpointCheckmarxSastMapOutputWithContext(ctx context.Context) ServiceendpointCheckmarxSastMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceendpointCheckmarxSastMapOutput)
}

type ServiceendpointCheckmarxSastOutput struct{ *pulumi.OutputState }

func (ServiceendpointCheckmarxSastOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceendpointCheckmarxSast)(nil)).Elem()
}

func (o ServiceendpointCheckmarxSastOutput) ToServiceendpointCheckmarxSastOutput() ServiceendpointCheckmarxSastOutput {
	return o
}

func (o ServiceendpointCheckmarxSastOutput) ToServiceendpointCheckmarxSastOutputWithContext(ctx context.Context) ServiceendpointCheckmarxSastOutput {
	return o
}

func (o ServiceendpointCheckmarxSastOutput) Authorization() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServiceendpointCheckmarxSast) pulumi.StringMapOutput { return v.Authorization }).(pulumi.StringMapOutput)
}

func (o ServiceendpointCheckmarxSastOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceendpointCheckmarxSast) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The password of the Checkmarx SAST.
func (o ServiceendpointCheckmarxSastOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceendpointCheckmarxSast) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Predefined sets of queries that you can select when Creating, Configuring and Branching Projects. Predefined presets are provided by Checkmarx and you can configure your own. You can also import and export presets (on the server).In Service Connection if preset(optional) value is added, then it will igonres Preset available in pipeline and uses preset available in service connection only.If Preset is blank in service connection then it will use pipelines preset.
func (o ServiceendpointCheckmarxSastOutput) Preset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceendpointCheckmarxSast) pulumi.StringPtrOutput { return v.Preset }).(pulumi.StringPtrOutput)
}

// The ID of the project.
func (o ServiceendpointCheckmarxSastOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceendpointCheckmarxSast) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The Server URL of the Checkmarx SAST.
func (o ServiceendpointCheckmarxSastOutput) ServerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceendpointCheckmarxSast) pulumi.StringOutput { return v.ServerUrl }).(pulumi.StringOutput)
}

// The Service Endpoint name.
func (o ServiceendpointCheckmarxSastOutput) ServiceEndpointName() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceendpointCheckmarxSast) pulumi.StringOutput { return v.ServiceEndpointName }).(pulumi.StringOutput)
}

// The full team name of the Checkmarx.
func (o ServiceendpointCheckmarxSastOutput) Team() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceendpointCheckmarxSast) pulumi.StringPtrOutput { return v.Team }).(pulumi.StringPtrOutput)
}

// The username of the Checkmarx SAST.
func (o ServiceendpointCheckmarxSastOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceendpointCheckmarxSast) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type ServiceendpointCheckmarxSastArrayOutput struct{ *pulumi.OutputState }

func (ServiceendpointCheckmarxSastArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceendpointCheckmarxSast)(nil)).Elem()
}

func (o ServiceendpointCheckmarxSastArrayOutput) ToServiceendpointCheckmarxSastArrayOutput() ServiceendpointCheckmarxSastArrayOutput {
	return o
}

func (o ServiceendpointCheckmarxSastArrayOutput) ToServiceendpointCheckmarxSastArrayOutputWithContext(ctx context.Context) ServiceendpointCheckmarxSastArrayOutput {
	return o
}

func (o ServiceendpointCheckmarxSastArrayOutput) Index(i pulumi.IntInput) ServiceendpointCheckmarxSastOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceendpointCheckmarxSast {
		return vs[0].([]*ServiceendpointCheckmarxSast)[vs[1].(int)]
	}).(ServiceendpointCheckmarxSastOutput)
}

type ServiceendpointCheckmarxSastMapOutput struct{ *pulumi.OutputState }

func (ServiceendpointCheckmarxSastMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceendpointCheckmarxSast)(nil)).Elem()
}

func (o ServiceendpointCheckmarxSastMapOutput) ToServiceendpointCheckmarxSastMapOutput() ServiceendpointCheckmarxSastMapOutput {
	return o
}

func (o ServiceendpointCheckmarxSastMapOutput) ToServiceendpointCheckmarxSastMapOutputWithContext(ctx context.Context) ServiceendpointCheckmarxSastMapOutput {
	return o
}

func (o ServiceendpointCheckmarxSastMapOutput) MapIndex(k pulumi.StringInput) ServiceendpointCheckmarxSastOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceendpointCheckmarxSast {
		return vs[0].(map[string]*ServiceendpointCheckmarxSast)[vs[1].(string)]
	}).(ServiceendpointCheckmarxSastOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceendpointCheckmarxSastInput)(nil)).Elem(), &ServiceendpointCheckmarxSast{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceendpointCheckmarxSastArrayInput)(nil)).Elem(), ServiceendpointCheckmarxSastArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceendpointCheckmarxSastMapInput)(nil)).Elem(), ServiceendpointCheckmarxSastMap{})
	pulumi.RegisterOutputType(ServiceendpointCheckmarxSastOutput{})
	pulumi.RegisterOutputType(ServiceendpointCheckmarxSastArrayOutput{})
	pulumi.RegisterOutputType(ServiceendpointCheckmarxSastMapOutput{})
}
