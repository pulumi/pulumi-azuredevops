// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azuredevops

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The provider type for the azuredevops package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	// Base64 encoded certificate to use to authenticate to the service principal.
	ClientCertificate pulumi.StringPtrOutput `pulumi:"clientCertificate"`
	// Password for a client certificate password.
	ClientCertificatePassword pulumi.StringPtrOutput `pulumi:"clientCertificatePassword"`
	// Path to a certificate to use to authenticate to the service principal.
	ClientCertificatePath pulumi.StringPtrOutput `pulumi:"clientCertificatePath"`
	// The service principal client id which should be used for AAD auth.
	ClientId pulumi.StringPtrOutput `pulumi:"clientId"`
	// The path to a file containing the Client ID which should be used.
	ClientIdFilePath pulumi.StringPtrOutput `pulumi:"clientIdFilePath"`
	// Client secret for authenticating to a service principal.
	ClientSecret pulumi.StringPtrOutput `pulumi:"clientSecret"`
	// Path to a file containing a client secret for authenticating to a service principal.
	ClientSecretPath pulumi.StringPtrOutput `pulumi:"clientSecretPath"`
	// The Azure Pipelines Service Connection ID to use for authentication.
	OidcAzureServiceConnectionId pulumi.StringPtrOutput `pulumi:"oidcAzureServiceConnectionId"`
	// The bearer token for the request to the OIDC provider. For use when authenticating as a Service Principal using OpenID
	// Connect.
	OidcRequestToken pulumi.StringPtrOutput `pulumi:"oidcRequestToken"`
	// The URL for the OIDC provider from which to request an ID token. For use when authenticating as a Service Principal
	// using OpenID Connect.
	OidcRequestUrl pulumi.StringPtrOutput `pulumi:"oidcRequestUrl"`
	// OIDC token to authenticate as a service principal.
	OidcToken pulumi.StringPtrOutput `pulumi:"oidcToken"`
	// OIDC token from file to authenticate as a service principal.
	OidcTokenFilePath pulumi.StringPtrOutput `pulumi:"oidcTokenFilePath"`
	// The url of the Azure DevOps instance which should be used.
	OrgServiceUrl pulumi.StringPtrOutput `pulumi:"orgServiceUrl"`
	// The personal access token which should be used.
	PersonalAccessToken pulumi.StringPtrOutput `pulumi:"personalAccessToken"`
	// The service principal tenant id which should be used for AAD auth.
	TenantId pulumi.StringPtrOutput `pulumi:"tenantId"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		args = &ProviderArgs{}
	}

	if args.OrgServiceUrl == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "AZDO_ORG_SERVICE_URL"); d != nil {
			args.OrgServiceUrl = pulumi.StringPtr(d.(string))
		}
	}
	if args.ClientCertificate != nil {
		args.ClientCertificate = pulumi.ToSecret(args.ClientCertificate).(pulumi.StringPtrInput)
	}
	if args.ClientCertificatePassword != nil {
		args.ClientCertificatePassword = pulumi.ToSecret(args.ClientCertificatePassword).(pulumi.StringPtrInput)
	}
	if args.ClientSecret != nil {
		args.ClientSecret = pulumi.ToSecret(args.ClientSecret).(pulumi.StringPtrInput)
	}
	if args.OidcToken != nil {
		args.OidcToken = pulumi.ToSecret(args.OidcToken).(pulumi.StringPtrInput)
	}
	if args.PersonalAccessToken != nil {
		args.PersonalAccessToken = pulumi.ToSecret(args.PersonalAccessToken).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"clientCertificate",
		"clientCertificatePassword",
		"clientSecret",
		"oidcToken",
		"personalAccessToken",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:azuredevops", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// List of auxiliary Tenant IDs required for multi-tenancy and cross-tenant scenarios.
	AuxiliaryTenantIds []string `pulumi:"auxiliaryTenantIds"`
	// Base64 encoded certificate to use to authenticate to the service principal.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// Password for a client certificate password.
	ClientCertificatePassword *string `pulumi:"clientCertificatePassword"`
	// Path to a certificate to use to authenticate to the service principal.
	ClientCertificatePath *string `pulumi:"clientCertificatePath"`
	// The service principal client id which should be used for AAD auth.
	ClientId *string `pulumi:"clientId"`
	// The path to a file containing the Client ID which should be used.
	ClientIdFilePath *string `pulumi:"clientIdFilePath"`
	// Client secret for authenticating to a service principal.
	ClientSecret *string `pulumi:"clientSecret"`
	// Path to a file containing a client secret for authenticating to a service principal.
	ClientSecretPath *string `pulumi:"clientSecretPath"`
	// The Azure Pipelines Service Connection ID to use for authentication.
	OidcAzureServiceConnectionId *string `pulumi:"oidcAzureServiceConnectionId"`
	// The bearer token for the request to the OIDC provider. For use when authenticating as a Service Principal using OpenID
	// Connect.
	OidcRequestToken *string `pulumi:"oidcRequestToken"`
	// The URL for the OIDC provider from which to request an ID token. For use when authenticating as a Service Principal
	// using OpenID Connect.
	OidcRequestUrl *string `pulumi:"oidcRequestUrl"`
	// OIDC token to authenticate as a service principal.
	OidcToken *string `pulumi:"oidcToken"`
	// OIDC token from file to authenticate as a service principal.
	OidcTokenFilePath *string `pulumi:"oidcTokenFilePath"`
	// The url of the Azure DevOps instance which should be used.
	OrgServiceUrl *string `pulumi:"orgServiceUrl"`
	// The personal access token which should be used.
	PersonalAccessToken *string `pulumi:"personalAccessToken"`
	// The service principal tenant id which should be used for AAD auth.
	TenantId *string `pulumi:"tenantId"`
	// Use Azure CLI to authenticate. Defaults to `true`.
	UseCli *bool `pulumi:"useCli"`
	// Use an Azure Managed Service Identity. Defaults to `false`.
	UseMsi *bool `pulumi:"useMsi"`
	// Use an OIDC token to authenticate to a service principal. Defaults to `false`.
	UseOidc *bool `pulumi:"useOidc"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// List of auxiliary Tenant IDs required for multi-tenancy and cross-tenant scenarios.
	AuxiliaryTenantIds pulumi.StringArrayInput
	// Base64 encoded certificate to use to authenticate to the service principal.
	ClientCertificate pulumi.StringPtrInput
	// Password for a client certificate password.
	ClientCertificatePassword pulumi.StringPtrInput
	// Path to a certificate to use to authenticate to the service principal.
	ClientCertificatePath pulumi.StringPtrInput
	// The service principal client id which should be used for AAD auth.
	ClientId pulumi.StringPtrInput
	// The path to a file containing the Client ID which should be used.
	ClientIdFilePath pulumi.StringPtrInput
	// Client secret for authenticating to a service principal.
	ClientSecret pulumi.StringPtrInput
	// Path to a file containing a client secret for authenticating to a service principal.
	ClientSecretPath pulumi.StringPtrInput
	// The Azure Pipelines Service Connection ID to use for authentication.
	OidcAzureServiceConnectionId pulumi.StringPtrInput
	// The bearer token for the request to the OIDC provider. For use when authenticating as a Service Principal using OpenID
	// Connect.
	OidcRequestToken pulumi.StringPtrInput
	// The URL for the OIDC provider from which to request an ID token. For use when authenticating as a Service Principal
	// using OpenID Connect.
	OidcRequestUrl pulumi.StringPtrInput
	// OIDC token to authenticate as a service principal.
	OidcToken pulumi.StringPtrInput
	// OIDC token from file to authenticate as a service principal.
	OidcTokenFilePath pulumi.StringPtrInput
	// The url of the Azure DevOps instance which should be used.
	OrgServiceUrl pulumi.StringPtrInput
	// The personal access token which should be used.
	PersonalAccessToken pulumi.StringPtrInput
	// The service principal tenant id which should be used for AAD auth.
	TenantId pulumi.StringPtrInput
	// Use Azure CLI to authenticate. Defaults to `true`.
	UseCli pulumi.BoolPtrInput
	// Use an Azure Managed Service Identity. Defaults to `false`.
	UseMsi pulumi.BoolPtrInput
	// Use an OIDC token to authenticate to a service principal. Defaults to `false`.
	UseOidc pulumi.BoolPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

// This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
func (r *Provider) TerraformConfig(ctx *pulumi.Context) (ProviderTerraformConfigResultOutput, error) {
	out, err := ctx.Call("pulumi:providers:azuredevops/terraformConfig", nil, ProviderTerraformConfigResultOutput{}, r)
	if err != nil {
		return ProviderTerraformConfigResultOutput{}, err
	}
	return out.(ProviderTerraformConfigResultOutput), nil
}

type ProviderTerraformConfigResult struct {
	Result map[string]interface{} `pulumi:"result"`
}

type ProviderTerraformConfigResultOutput struct{ *pulumi.OutputState }

func (ProviderTerraformConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderTerraformConfigResult)(nil)).Elem()
}

func (o ProviderTerraformConfigResultOutput) Result() pulumi.MapOutput {
	return o.ApplyT(func(v ProviderTerraformConfigResult) map[string]interface{} { return v.Result }).(pulumi.MapOutput)
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

// Base64 encoded certificate to use to authenticate to the service principal.
func (o ProviderOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// Password for a client certificate password.
func (o ProviderOutput) ClientCertificatePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ClientCertificatePassword }).(pulumi.StringPtrOutput)
}

// Path to a certificate to use to authenticate to the service principal.
func (o ProviderOutput) ClientCertificatePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ClientCertificatePath }).(pulumi.StringPtrOutput)
}

// The service principal client id which should be used for AAD auth.
func (o ProviderOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The path to a file containing the Client ID which should be used.
func (o ProviderOutput) ClientIdFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ClientIdFilePath }).(pulumi.StringPtrOutput)
}

// Client secret for authenticating to a service principal.
func (o ProviderOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// Path to a file containing a client secret for authenticating to a service principal.
func (o ProviderOutput) ClientSecretPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ClientSecretPath }).(pulumi.StringPtrOutput)
}

// The Azure Pipelines Service Connection ID to use for authentication.
func (o ProviderOutput) OidcAzureServiceConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.OidcAzureServiceConnectionId }).(pulumi.StringPtrOutput)
}

// The bearer token for the request to the OIDC provider. For use when authenticating as a Service Principal using OpenID
// Connect.
func (o ProviderOutput) OidcRequestToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.OidcRequestToken }).(pulumi.StringPtrOutput)
}

// The URL for the OIDC provider from which to request an ID token. For use when authenticating as a Service Principal
// using OpenID Connect.
func (o ProviderOutput) OidcRequestUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.OidcRequestUrl }).(pulumi.StringPtrOutput)
}

// OIDC token to authenticate as a service principal.
func (o ProviderOutput) OidcToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.OidcToken }).(pulumi.StringPtrOutput)
}

// OIDC token from file to authenticate as a service principal.
func (o ProviderOutput) OidcTokenFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.OidcTokenFilePath }).(pulumi.StringPtrOutput)
}

// The url of the Azure DevOps instance which should be used.
func (o ProviderOutput) OrgServiceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.OrgServiceUrl }).(pulumi.StringPtrOutput)
}

// The personal access token which should be used.
func (o ProviderOutput) PersonalAccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.PersonalAccessToken }).(pulumi.StringPtrOutput)
}

// The service principal tenant id which should be used for AAD auth.
func (o ProviderOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.TenantId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
	pulumi.RegisterOutputType(ProviderTerraformConfigResultOutput{})
}
