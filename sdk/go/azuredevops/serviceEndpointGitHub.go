// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package azuredevops

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a GitHub service endpoint within Azure DevOps.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops"
// 	"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops/"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		project, err := azuredevops.NewProject(ctx, "project", &azuredevops.ProjectArgs{
// 			Visibility:       pulumi.String("private"),
// 			VersionControl:   pulumi.String("Git"),
// 			WorkItemTemplate: pulumi.String("Agile"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = azuredevops.NewServiceEndpointGitHub(ctx, "serviceendpointGh1", &azuredevops.ServiceEndpointGitHubArgs{
// 			ProjectId:           project.ID(),
// 			ServiceEndpointName: pulumi.String("Sample GithHub Personal Access Token"),
// 			AuthPersonal: &azuredevops.ServiceEndpointGitHubAuthPersonalArgs{
// 				PersonalAccessToken: pulumi.String("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops"
// 	"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops/"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := azuredevops.NewServiceEndpointGitHub(ctx, "serviceendpointGh2", &azuredevops.ServiceEndpointGitHubArgs{
// 			ProjectId:           pulumi.Any(azuredevops_project.Project.Id),
// 			ServiceEndpointName: pulumi.String("Sample GithHub Grant"),
// 			AuthOauth: &azuredevops.ServiceEndpointGitHubAuthOauthArgs{
// 				OauthConfigurationId: pulumi.String("00000000-0000-0000-0000-000000000000"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azuredevops/sdk/go/azuredevops/"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := azuredevops.NewServiceEndpointGitHub(ctx, "serviceendpointGh3", &azuredevops.ServiceEndpointGitHubArgs{
// 			ProjectId:           pulumi.Any(azuredevops_project.Project.Id),
// 			ServiceEndpointName: pulumi.String("Sample GithHub Apps: Azure Pipelines"),
// 			Description:         pulumi.String(""),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Relevant Links
//
// - [Azure DevOps Service REST API 5.1 - Service Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-5.1)
//
// ## Import
//
// Azure DevOps Service Endpoint GitHub can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**
//
// ```sh
//  $ pulumi import azuredevops:index/serviceEndpointGitHub:ServiceEndpointGitHub serviceendpoint 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000
// ```
type ServiceEndpointGitHub struct {
	pulumi.CustomResourceState

	// An `authOauth` block as documented below. Allows connecting using an Oauth token.
	AuthOauth ServiceEndpointGitHubAuthOauthPtrOutput `pulumi:"authOauth"`
	// An `authPersonal` block as documented below. Allows connecting using a personal access token.
	AuthPersonal  ServiceEndpointGitHubAuthPersonalPtrOutput `pulumi:"authPersonal"`
	Authorization pulumi.StringMapOutput                     `pulumi:"authorization"`
	Description   pulumi.StringPtrOutput                     `pulumi:"description"`
	// The project ID or project name.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The Service Endpoint name.
	ServiceEndpointName pulumi.StringOutput `pulumi:"serviceEndpointName"`
}

// NewServiceEndpointGitHub registers a new resource with the given unique name, arguments, and options.
func NewServiceEndpointGitHub(ctx *pulumi.Context,
	name string, args *ServiceEndpointGitHubArgs, opts ...pulumi.ResourceOption) (*ServiceEndpointGitHub, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.ServiceEndpointName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceEndpointName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azuredevops:ServiceEndpoint/gitHub:GitHub"),
		},
	})
	opts = append(opts, aliases)
	var resource ServiceEndpointGitHub
	err := ctx.RegisterResource("azuredevops:index/serviceEndpointGitHub:ServiceEndpointGitHub", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceEndpointGitHub gets an existing ServiceEndpointGitHub resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceEndpointGitHub(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceEndpointGitHubState, opts ...pulumi.ResourceOption) (*ServiceEndpointGitHub, error) {
	var resource ServiceEndpointGitHub
	err := ctx.ReadResource("azuredevops:index/serviceEndpointGitHub:ServiceEndpointGitHub", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceEndpointGitHub resources.
type serviceEndpointGitHubState struct {
	// An `authOauth` block as documented below. Allows connecting using an Oauth token.
	AuthOauth *ServiceEndpointGitHubAuthOauth `pulumi:"authOauth"`
	// An `authPersonal` block as documented below. Allows connecting using a personal access token.
	AuthPersonal  *ServiceEndpointGitHubAuthPersonal `pulumi:"authPersonal"`
	Authorization map[string]string                  `pulumi:"authorization"`
	Description   *string                            `pulumi:"description"`
	// The project ID or project name.
	ProjectId *string `pulumi:"projectId"`
	// The Service Endpoint name.
	ServiceEndpointName *string `pulumi:"serviceEndpointName"`
}

type ServiceEndpointGitHubState struct {
	// An `authOauth` block as documented below. Allows connecting using an Oauth token.
	AuthOauth ServiceEndpointGitHubAuthOauthPtrInput
	// An `authPersonal` block as documented below. Allows connecting using a personal access token.
	AuthPersonal  ServiceEndpointGitHubAuthPersonalPtrInput
	Authorization pulumi.StringMapInput
	Description   pulumi.StringPtrInput
	// The project ID or project name.
	ProjectId pulumi.StringPtrInput
	// The Service Endpoint name.
	ServiceEndpointName pulumi.StringPtrInput
}

func (ServiceEndpointGitHubState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceEndpointGitHubState)(nil)).Elem()
}

type serviceEndpointGitHubArgs struct {
	// An `authOauth` block as documented below. Allows connecting using an Oauth token.
	AuthOauth *ServiceEndpointGitHubAuthOauth `pulumi:"authOauth"`
	// An `authPersonal` block as documented below. Allows connecting using a personal access token.
	AuthPersonal  *ServiceEndpointGitHubAuthPersonal `pulumi:"authPersonal"`
	Authorization map[string]string                  `pulumi:"authorization"`
	Description   *string                            `pulumi:"description"`
	// The project ID or project name.
	ProjectId string `pulumi:"projectId"`
	// The Service Endpoint name.
	ServiceEndpointName string `pulumi:"serviceEndpointName"`
}

// The set of arguments for constructing a ServiceEndpointGitHub resource.
type ServiceEndpointGitHubArgs struct {
	// An `authOauth` block as documented below. Allows connecting using an Oauth token.
	AuthOauth ServiceEndpointGitHubAuthOauthPtrInput
	// An `authPersonal` block as documented below. Allows connecting using a personal access token.
	AuthPersonal  ServiceEndpointGitHubAuthPersonalPtrInput
	Authorization pulumi.StringMapInput
	Description   pulumi.StringPtrInput
	// The project ID or project name.
	ProjectId pulumi.StringInput
	// The Service Endpoint name.
	ServiceEndpointName pulumi.StringInput
}

func (ServiceEndpointGitHubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceEndpointGitHubArgs)(nil)).Elem()
}

type ServiceEndpointGitHubInput interface {
	pulumi.Input

	ToServiceEndpointGitHubOutput() ServiceEndpointGitHubOutput
	ToServiceEndpointGitHubOutputWithContext(ctx context.Context) ServiceEndpointGitHubOutput
}

func (*ServiceEndpointGitHub) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEndpointGitHub)(nil))
}

func (i *ServiceEndpointGitHub) ToServiceEndpointGitHubOutput() ServiceEndpointGitHubOutput {
	return i.ToServiceEndpointGitHubOutputWithContext(context.Background())
}

func (i *ServiceEndpointGitHub) ToServiceEndpointGitHubOutputWithContext(ctx context.Context) ServiceEndpointGitHubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEndpointGitHubOutput)
}

type ServiceEndpointGitHubOutput struct {
	*pulumi.OutputState
}

func (ServiceEndpointGitHubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEndpointGitHub)(nil))
}

func (o ServiceEndpointGitHubOutput) ToServiceEndpointGitHubOutput() ServiceEndpointGitHubOutput {
	return o
}

func (o ServiceEndpointGitHubOutput) ToServiceEndpointGitHubOutputWithContext(ctx context.Context) ServiceEndpointGitHubOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ServiceEndpointGitHubOutput{})
}
