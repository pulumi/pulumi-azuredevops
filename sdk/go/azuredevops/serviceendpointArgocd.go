// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package azuredevops

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a ArgoCD service endpoint within Azure DevOps. Using this service endpoint requires you to first install [Argo CD Extension](https://marketplace.visualstudio.com/items?itemName=scb-tomasmortensen.vsix-argocd).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleProject, err := azuredevops.NewProject(ctx, "exampleProject", &azuredevops.ProjectArgs{
// 			Visibility:       pulumi.String("private"),
// 			VersionControl:   pulumi.String("Git"),
// 			WorkItemTemplate: pulumi.String("Agile"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = azuredevops.NewServiceendpointArgocd(ctx, "exampleServiceendpointArgocd", &azuredevops.ServiceendpointArgocdArgs{
// 			ProjectId:           exampleProject.ID(),
// 			ServiceEndpointName: pulumi.String("Example ArgoCD"),
// 			Description:         pulumi.String("Managed by Terraform"),
// 			Url:                 pulumi.String("https://argocd.my.com"),
// 			AuthenticationToken: &ServiceendpointArgocdAuthenticationTokenArgs{
// 				Token: pulumi.String("0000000000000000000000000000000000000000"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// Alternatively a username and password may be used.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleProject, err := azuredevops.NewProject(ctx, "exampleProject", &azuredevops.ProjectArgs{
// 			Visibility:       pulumi.String("private"),
// 			VersionControl:   pulumi.String("Git"),
// 			WorkItemTemplate: pulumi.String("Agile"),
// 			Description:      pulumi.String("Managed by Terraform"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = azuredevops.NewServiceendpointArgocd(ctx, "exampleServiceendpointArgocd", &azuredevops.ServiceendpointArgocdArgs{
// 			ProjectId:           exampleProject.ID(),
// 			ServiceEndpointName: pulumi.String("Example ArgoCD"),
// 			Description:         pulumi.String("Managed by Terraform"),
// 			Url:                 pulumi.String("https://argocd.my.com"),
// 			AuthenticationBasic: &ServiceendpointArgocdAuthenticationBasicArgs{
// 				Username: pulumi.String("username"),
// 				Password: pulumi.String("password"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Relevant Links
//
// - [Azure DevOps Service Connections](https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops&tabs=yaml)
// - [ArgoCD Project/User Token](https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_account_generate-token/)
// - [Argo CD Extension](https://marketplace.visualstudio.com/items?itemName=scb-tomasmortensen.vsix-argocd)
//
// ## Import
//
// Azure DevOps Service Endpoint ArgoCD can be imported using the **projectID/serviceEndpointID**, e.g.
//
// ```sh
//  $ pulumi import azuredevops:index/serviceendpointArgocd:ServiceendpointArgocd example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000
// ```
type ServiceendpointArgocd struct {
	pulumi.CustomResourceState

	// An `authenticationBasic` block for the ArgoCD as documented below.
	AuthenticationBasic ServiceendpointArgocdAuthenticationBasicPtrOutput `pulumi:"authenticationBasic"`
	// An `authenticationToken` block for the ArgoCD as documented below.
	AuthenticationToken ServiceendpointArgocdAuthenticationTokenPtrOutput `pulumi:"authenticationToken"`
	Authorization       pulumi.StringMapOutput                            `pulumi:"authorization"`
	// The Service Endpoint description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The ID of the project.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The Service Endpoint name.
	ServiceEndpointName pulumi.StringOutput `pulumi:"serviceEndpointName"`
	// URL of the ArgoCD server to connect with.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewServiceendpointArgocd registers a new resource with the given unique name, arguments, and options.
func NewServiceendpointArgocd(ctx *pulumi.Context,
	name string, args *ServiceendpointArgocdArgs, opts ...pulumi.ResourceOption) (*ServiceendpointArgocd, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.ServiceEndpointName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceEndpointName'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	var resource ServiceendpointArgocd
	err := ctx.RegisterResource("azuredevops:index/serviceendpointArgocd:ServiceendpointArgocd", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceendpointArgocd gets an existing ServiceendpointArgocd resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceendpointArgocd(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceendpointArgocdState, opts ...pulumi.ResourceOption) (*ServiceendpointArgocd, error) {
	var resource ServiceendpointArgocd
	err := ctx.ReadResource("azuredevops:index/serviceendpointArgocd:ServiceendpointArgocd", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceendpointArgocd resources.
type serviceendpointArgocdState struct {
	// An `authenticationBasic` block for the ArgoCD as documented below.
	AuthenticationBasic *ServiceendpointArgocdAuthenticationBasic `pulumi:"authenticationBasic"`
	// An `authenticationToken` block for the ArgoCD as documented below.
	AuthenticationToken *ServiceendpointArgocdAuthenticationToken `pulumi:"authenticationToken"`
	Authorization       map[string]string                         `pulumi:"authorization"`
	// The Service Endpoint description.
	Description *string `pulumi:"description"`
	// The ID of the project.
	ProjectId *string `pulumi:"projectId"`
	// The Service Endpoint name.
	ServiceEndpointName *string `pulumi:"serviceEndpointName"`
	// URL of the ArgoCD server to connect with.
	Url *string `pulumi:"url"`
}

type ServiceendpointArgocdState struct {
	// An `authenticationBasic` block for the ArgoCD as documented below.
	AuthenticationBasic ServiceendpointArgocdAuthenticationBasicPtrInput
	// An `authenticationToken` block for the ArgoCD as documented below.
	AuthenticationToken ServiceendpointArgocdAuthenticationTokenPtrInput
	Authorization       pulumi.StringMapInput
	// The Service Endpoint description.
	Description pulumi.StringPtrInput
	// The ID of the project.
	ProjectId pulumi.StringPtrInput
	// The Service Endpoint name.
	ServiceEndpointName pulumi.StringPtrInput
	// URL of the ArgoCD server to connect with.
	Url pulumi.StringPtrInput
}

func (ServiceendpointArgocdState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceendpointArgocdState)(nil)).Elem()
}

type serviceendpointArgocdArgs struct {
	// An `authenticationBasic` block for the ArgoCD as documented below.
	AuthenticationBasic *ServiceendpointArgocdAuthenticationBasic `pulumi:"authenticationBasic"`
	// An `authenticationToken` block for the ArgoCD as documented below.
	AuthenticationToken *ServiceendpointArgocdAuthenticationToken `pulumi:"authenticationToken"`
	Authorization       map[string]string                         `pulumi:"authorization"`
	// The Service Endpoint description.
	Description *string `pulumi:"description"`
	// The ID of the project.
	ProjectId string `pulumi:"projectId"`
	// The Service Endpoint name.
	ServiceEndpointName string `pulumi:"serviceEndpointName"`
	// URL of the ArgoCD server to connect with.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a ServiceendpointArgocd resource.
type ServiceendpointArgocdArgs struct {
	// An `authenticationBasic` block for the ArgoCD as documented below.
	AuthenticationBasic ServiceendpointArgocdAuthenticationBasicPtrInput
	// An `authenticationToken` block for the ArgoCD as documented below.
	AuthenticationToken ServiceendpointArgocdAuthenticationTokenPtrInput
	Authorization       pulumi.StringMapInput
	// The Service Endpoint description.
	Description pulumi.StringPtrInput
	// The ID of the project.
	ProjectId pulumi.StringInput
	// The Service Endpoint name.
	ServiceEndpointName pulumi.StringInput
	// URL of the ArgoCD server to connect with.
	Url pulumi.StringInput
}

func (ServiceendpointArgocdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceendpointArgocdArgs)(nil)).Elem()
}

type ServiceendpointArgocdInput interface {
	pulumi.Input

	ToServiceendpointArgocdOutput() ServiceendpointArgocdOutput
	ToServiceendpointArgocdOutputWithContext(ctx context.Context) ServiceendpointArgocdOutput
}

func (*ServiceendpointArgocd) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceendpointArgocd)(nil)).Elem()
}

func (i *ServiceendpointArgocd) ToServiceendpointArgocdOutput() ServiceendpointArgocdOutput {
	return i.ToServiceendpointArgocdOutputWithContext(context.Background())
}

func (i *ServiceendpointArgocd) ToServiceendpointArgocdOutputWithContext(ctx context.Context) ServiceendpointArgocdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceendpointArgocdOutput)
}

// ServiceendpointArgocdArrayInput is an input type that accepts ServiceendpointArgocdArray and ServiceendpointArgocdArrayOutput values.
// You can construct a concrete instance of `ServiceendpointArgocdArrayInput` via:
//
//          ServiceendpointArgocdArray{ ServiceendpointArgocdArgs{...} }
type ServiceendpointArgocdArrayInput interface {
	pulumi.Input

	ToServiceendpointArgocdArrayOutput() ServiceendpointArgocdArrayOutput
	ToServiceendpointArgocdArrayOutputWithContext(context.Context) ServiceendpointArgocdArrayOutput
}

type ServiceendpointArgocdArray []ServiceendpointArgocdInput

func (ServiceendpointArgocdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceendpointArgocd)(nil)).Elem()
}

func (i ServiceendpointArgocdArray) ToServiceendpointArgocdArrayOutput() ServiceendpointArgocdArrayOutput {
	return i.ToServiceendpointArgocdArrayOutputWithContext(context.Background())
}

func (i ServiceendpointArgocdArray) ToServiceendpointArgocdArrayOutputWithContext(ctx context.Context) ServiceendpointArgocdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceendpointArgocdArrayOutput)
}

// ServiceendpointArgocdMapInput is an input type that accepts ServiceendpointArgocdMap and ServiceendpointArgocdMapOutput values.
// You can construct a concrete instance of `ServiceendpointArgocdMapInput` via:
//
//          ServiceendpointArgocdMap{ "key": ServiceendpointArgocdArgs{...} }
type ServiceendpointArgocdMapInput interface {
	pulumi.Input

	ToServiceendpointArgocdMapOutput() ServiceendpointArgocdMapOutput
	ToServiceendpointArgocdMapOutputWithContext(context.Context) ServiceendpointArgocdMapOutput
}

type ServiceendpointArgocdMap map[string]ServiceendpointArgocdInput

func (ServiceendpointArgocdMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceendpointArgocd)(nil)).Elem()
}

func (i ServiceendpointArgocdMap) ToServiceendpointArgocdMapOutput() ServiceendpointArgocdMapOutput {
	return i.ToServiceendpointArgocdMapOutputWithContext(context.Background())
}

func (i ServiceendpointArgocdMap) ToServiceendpointArgocdMapOutputWithContext(ctx context.Context) ServiceendpointArgocdMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceendpointArgocdMapOutput)
}

type ServiceendpointArgocdOutput struct{ *pulumi.OutputState }

func (ServiceendpointArgocdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceendpointArgocd)(nil)).Elem()
}

func (o ServiceendpointArgocdOutput) ToServiceendpointArgocdOutput() ServiceendpointArgocdOutput {
	return o
}

func (o ServiceendpointArgocdOutput) ToServiceendpointArgocdOutputWithContext(ctx context.Context) ServiceendpointArgocdOutput {
	return o
}

type ServiceendpointArgocdArrayOutput struct{ *pulumi.OutputState }

func (ServiceendpointArgocdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceendpointArgocd)(nil)).Elem()
}

func (o ServiceendpointArgocdArrayOutput) ToServiceendpointArgocdArrayOutput() ServiceendpointArgocdArrayOutput {
	return o
}

func (o ServiceendpointArgocdArrayOutput) ToServiceendpointArgocdArrayOutputWithContext(ctx context.Context) ServiceendpointArgocdArrayOutput {
	return o
}

func (o ServiceendpointArgocdArrayOutput) Index(i pulumi.IntInput) ServiceendpointArgocdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceendpointArgocd {
		return vs[0].([]*ServiceendpointArgocd)[vs[1].(int)]
	}).(ServiceendpointArgocdOutput)
}

type ServiceendpointArgocdMapOutput struct{ *pulumi.OutputState }

func (ServiceendpointArgocdMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceendpointArgocd)(nil)).Elem()
}

func (o ServiceendpointArgocdMapOutput) ToServiceendpointArgocdMapOutput() ServiceendpointArgocdMapOutput {
	return o
}

func (o ServiceendpointArgocdMapOutput) ToServiceendpointArgocdMapOutputWithContext(ctx context.Context) ServiceendpointArgocdMapOutput {
	return o
}

func (o ServiceendpointArgocdMapOutput) MapIndex(k pulumi.StringInput) ServiceendpointArgocdOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceendpointArgocd {
		return vs[0].(map[string]*ServiceendpointArgocd)[vs[1].(string)]
	}).(ServiceendpointArgocdOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceendpointArgocdInput)(nil)).Elem(), &ServiceendpointArgocd{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceendpointArgocdArrayInput)(nil)).Elem(), ServiceendpointArgocdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceendpointArgocdMapInput)(nil)).Elem(), ServiceendpointArgocdMap{})
	pulumi.RegisterOutputType(ServiceendpointArgocdOutput{})
	pulumi.RegisterOutputType(ServiceendpointArgocdArrayOutput{})
	pulumi.RegisterOutputType(ServiceendpointArgocdMapOutput{})
}
