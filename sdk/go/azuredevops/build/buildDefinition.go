// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package build

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Deprecated: azuredevops.build.BuildDefinition has been deprecated in favor of azuredevops.BuildDefinition
type BuildDefinition struct {
	pulumi.CustomResourceState

	AgentPoolName      pulumi.StringPtrOutput                     `pulumi:"agentPoolName"`
	CiTrigger          BuildDefinitionCiTriggerPtrOutput          `pulumi:"ciTrigger"`
	Name               pulumi.StringOutput                        `pulumi:"name"`
	Path               pulumi.StringPtrOutput                     `pulumi:"path"`
	ProjectId          pulumi.StringOutput                        `pulumi:"projectId"`
	PullRequestTrigger BuildDefinitionPullRequestTriggerPtrOutput `pulumi:"pullRequestTrigger"`
	Repository         BuildDefinitionRepositoryOutput            `pulumi:"repository"`
	Revision           pulumi.IntOutput                           `pulumi:"revision"`
	Schedules          BuildDefinitionScheduleArrayOutput         `pulumi:"schedules"`
	VariableGroups     pulumi.IntArrayOutput                      `pulumi:"variableGroups"`
	Variables          BuildDefinitionVariableArrayOutput         `pulumi:"variables"`
}

// NewBuildDefinition registers a new resource with the given unique name, arguments, and options.
func NewBuildDefinition(ctx *pulumi.Context,
	name string, args *BuildDefinitionArgs, opts ...pulumi.ResourceOption) (*BuildDefinition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	var resource BuildDefinition
	err := ctx.RegisterResource("azuredevops:Build/buildDefinition:BuildDefinition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBuildDefinition gets an existing BuildDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBuildDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BuildDefinitionState, opts ...pulumi.ResourceOption) (*BuildDefinition, error) {
	var resource BuildDefinition
	err := ctx.ReadResource("azuredevops:Build/buildDefinition:BuildDefinition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BuildDefinition resources.
type buildDefinitionState struct {
	AgentPoolName      *string                            `pulumi:"agentPoolName"`
	CiTrigger          *BuildDefinitionCiTrigger          `pulumi:"ciTrigger"`
	Name               *string                            `pulumi:"name"`
	Path               *string                            `pulumi:"path"`
	ProjectId          *string                            `pulumi:"projectId"`
	PullRequestTrigger *BuildDefinitionPullRequestTrigger `pulumi:"pullRequestTrigger"`
	Repository         *BuildDefinitionRepository         `pulumi:"repository"`
	Revision           *int                               `pulumi:"revision"`
	Schedules          []BuildDefinitionSchedule          `pulumi:"schedules"`
	VariableGroups     []int                              `pulumi:"variableGroups"`
	Variables          []BuildDefinitionVariable          `pulumi:"variables"`
}

type BuildDefinitionState struct {
	AgentPoolName      pulumi.StringPtrInput
	CiTrigger          BuildDefinitionCiTriggerPtrInput
	Name               pulumi.StringPtrInput
	Path               pulumi.StringPtrInput
	ProjectId          pulumi.StringPtrInput
	PullRequestTrigger BuildDefinitionPullRequestTriggerPtrInput
	Repository         BuildDefinitionRepositoryPtrInput
	Revision           pulumi.IntPtrInput
	Schedules          BuildDefinitionScheduleArrayInput
	VariableGroups     pulumi.IntArrayInput
	Variables          BuildDefinitionVariableArrayInput
}

func (BuildDefinitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*buildDefinitionState)(nil)).Elem()
}

type buildDefinitionArgs struct {
	AgentPoolName      *string                            `pulumi:"agentPoolName"`
	CiTrigger          *BuildDefinitionCiTrigger          `pulumi:"ciTrigger"`
	Name               *string                            `pulumi:"name"`
	Path               *string                            `pulumi:"path"`
	ProjectId          string                             `pulumi:"projectId"`
	PullRequestTrigger *BuildDefinitionPullRequestTrigger `pulumi:"pullRequestTrigger"`
	Repository         BuildDefinitionRepository          `pulumi:"repository"`
	Schedules          []BuildDefinitionSchedule          `pulumi:"schedules"`
	VariableGroups     []int                              `pulumi:"variableGroups"`
	Variables          []BuildDefinitionVariable          `pulumi:"variables"`
}

// The set of arguments for constructing a BuildDefinition resource.
type BuildDefinitionArgs struct {
	AgentPoolName      pulumi.StringPtrInput
	CiTrigger          BuildDefinitionCiTriggerPtrInput
	Name               pulumi.StringPtrInput
	Path               pulumi.StringPtrInput
	ProjectId          pulumi.StringInput
	PullRequestTrigger BuildDefinitionPullRequestTriggerPtrInput
	Repository         BuildDefinitionRepositoryInput
	Schedules          BuildDefinitionScheduleArrayInput
	VariableGroups     pulumi.IntArrayInput
	Variables          BuildDefinitionVariableArrayInput
}

func (BuildDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*buildDefinitionArgs)(nil)).Elem()
}

type BuildDefinitionInput interface {
	pulumi.Input

	ToBuildDefinitionOutput() BuildDefinitionOutput
	ToBuildDefinitionOutputWithContext(ctx context.Context) BuildDefinitionOutput
}

func (*BuildDefinition) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildDefinition)(nil)).Elem()
}

func (i *BuildDefinition) ToBuildDefinitionOutput() BuildDefinitionOutput {
	return i.ToBuildDefinitionOutputWithContext(context.Background())
}

func (i *BuildDefinition) ToBuildDefinitionOutputWithContext(ctx context.Context) BuildDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionOutput)
}

// BuildDefinitionArrayInput is an input type that accepts BuildDefinitionArray and BuildDefinitionArrayOutput values.
// You can construct a concrete instance of `BuildDefinitionArrayInput` via:
//
//          BuildDefinitionArray{ BuildDefinitionArgs{...} }
type BuildDefinitionArrayInput interface {
	pulumi.Input

	ToBuildDefinitionArrayOutput() BuildDefinitionArrayOutput
	ToBuildDefinitionArrayOutputWithContext(context.Context) BuildDefinitionArrayOutput
}

type BuildDefinitionArray []BuildDefinitionInput

func (BuildDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BuildDefinition)(nil)).Elem()
}

func (i BuildDefinitionArray) ToBuildDefinitionArrayOutput() BuildDefinitionArrayOutput {
	return i.ToBuildDefinitionArrayOutputWithContext(context.Background())
}

func (i BuildDefinitionArray) ToBuildDefinitionArrayOutputWithContext(ctx context.Context) BuildDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionArrayOutput)
}

// BuildDefinitionMapInput is an input type that accepts BuildDefinitionMap and BuildDefinitionMapOutput values.
// You can construct a concrete instance of `BuildDefinitionMapInput` via:
//
//          BuildDefinitionMap{ "key": BuildDefinitionArgs{...} }
type BuildDefinitionMapInput interface {
	pulumi.Input

	ToBuildDefinitionMapOutput() BuildDefinitionMapOutput
	ToBuildDefinitionMapOutputWithContext(context.Context) BuildDefinitionMapOutput
}

type BuildDefinitionMap map[string]BuildDefinitionInput

func (BuildDefinitionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BuildDefinition)(nil)).Elem()
}

func (i BuildDefinitionMap) ToBuildDefinitionMapOutput() BuildDefinitionMapOutput {
	return i.ToBuildDefinitionMapOutputWithContext(context.Background())
}

func (i BuildDefinitionMap) ToBuildDefinitionMapOutputWithContext(ctx context.Context) BuildDefinitionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionMapOutput)
}

type BuildDefinitionOutput struct{ *pulumi.OutputState }

func (BuildDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildDefinition)(nil)).Elem()
}

func (o BuildDefinitionOutput) ToBuildDefinitionOutput() BuildDefinitionOutput {
	return o
}

func (o BuildDefinitionOutput) ToBuildDefinitionOutputWithContext(ctx context.Context) BuildDefinitionOutput {
	return o
}

func (o BuildDefinitionOutput) AgentPoolName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildDefinition) pulumi.StringPtrOutput { return v.AgentPoolName }).(pulumi.StringPtrOutput)
}

func (o BuildDefinitionOutput) CiTrigger() BuildDefinitionCiTriggerPtrOutput {
	return o.ApplyT(func(v *BuildDefinition) BuildDefinitionCiTriggerPtrOutput { return v.CiTrigger }).(BuildDefinitionCiTriggerPtrOutput)
}

func (o BuildDefinitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BuildDefinition) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o BuildDefinitionOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildDefinition) pulumi.StringPtrOutput { return v.Path }).(pulumi.StringPtrOutput)
}

func (o BuildDefinitionOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *BuildDefinition) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

func (o BuildDefinitionOutput) PullRequestTrigger() BuildDefinitionPullRequestTriggerPtrOutput {
	return o.ApplyT(func(v *BuildDefinition) BuildDefinitionPullRequestTriggerPtrOutput { return v.PullRequestTrigger }).(BuildDefinitionPullRequestTriggerPtrOutput)
}

func (o BuildDefinitionOutput) Repository() BuildDefinitionRepositoryOutput {
	return o.ApplyT(func(v *BuildDefinition) BuildDefinitionRepositoryOutput { return v.Repository }).(BuildDefinitionRepositoryOutput)
}

func (o BuildDefinitionOutput) Revision() pulumi.IntOutput {
	return o.ApplyT(func(v *BuildDefinition) pulumi.IntOutput { return v.Revision }).(pulumi.IntOutput)
}

func (o BuildDefinitionOutput) Schedules() BuildDefinitionScheduleArrayOutput {
	return o.ApplyT(func(v *BuildDefinition) BuildDefinitionScheduleArrayOutput { return v.Schedules }).(BuildDefinitionScheduleArrayOutput)
}

func (o BuildDefinitionOutput) VariableGroups() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *BuildDefinition) pulumi.IntArrayOutput { return v.VariableGroups }).(pulumi.IntArrayOutput)
}

func (o BuildDefinitionOutput) Variables() BuildDefinitionVariableArrayOutput {
	return o.ApplyT(func(v *BuildDefinition) BuildDefinitionVariableArrayOutput { return v.Variables }).(BuildDefinitionVariableArrayOutput)
}

type BuildDefinitionArrayOutput struct{ *pulumi.OutputState }

func (BuildDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BuildDefinition)(nil)).Elem()
}

func (o BuildDefinitionArrayOutput) ToBuildDefinitionArrayOutput() BuildDefinitionArrayOutput {
	return o
}

func (o BuildDefinitionArrayOutput) ToBuildDefinitionArrayOutputWithContext(ctx context.Context) BuildDefinitionArrayOutput {
	return o
}

func (o BuildDefinitionArrayOutput) Index(i pulumi.IntInput) BuildDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BuildDefinition {
		return vs[0].([]*BuildDefinition)[vs[1].(int)]
	}).(BuildDefinitionOutput)
}

type BuildDefinitionMapOutput struct{ *pulumi.OutputState }

func (BuildDefinitionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BuildDefinition)(nil)).Elem()
}

func (o BuildDefinitionMapOutput) ToBuildDefinitionMapOutput() BuildDefinitionMapOutput {
	return o
}

func (o BuildDefinitionMapOutput) ToBuildDefinitionMapOutputWithContext(ctx context.Context) BuildDefinitionMapOutput {
	return o
}

func (o BuildDefinitionMapOutput) MapIndex(k pulumi.StringInput) BuildDefinitionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BuildDefinition {
		return vs[0].(map[string]*BuildDefinition)[vs[1].(string)]
	}).(BuildDefinitionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BuildDefinitionInput)(nil)).Elem(), &BuildDefinition{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildDefinitionArrayInput)(nil)).Elem(), BuildDefinitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildDefinitionMapInput)(nil)).Elem(), BuildDefinitionMap{})
	pulumi.RegisterOutputType(BuildDefinitionOutput{})
	pulumi.RegisterOutputType(BuildDefinitionArrayOutput{})
	pulumi.RegisterOutputType(BuildDefinitionMapOutput{})
}
