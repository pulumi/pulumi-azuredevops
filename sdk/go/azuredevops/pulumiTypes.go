// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package azuredevops

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type BranchPolicyAutoReviewersSettings struct {
	// Required reviewers ids. Supports multiples user Ids.
	AutoReviewerIds []string `pulumi:"autoReviewerIds"`
	// Activity feed message, Message will appear in the activity feed of pull requests with automatically added reviewers.
	Message *string `pulumi:"message"`
	// Filter path(s) on which the policy is applied. Supports absolute paths, wildcards and multiple paths. Example: /WebApp/Models/Data.cs, /WebApp/* or *.cs,/WebApp/Models/Data.cs;ClientApp/Models/Data.cs.
	PathFilters []string `pulumi:"pathFilters"`
	// Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
	Scopes []BranchPolicyAutoReviewersSettingsScope `pulumi:"scopes"`
	// Controls whether or not the submitter's vote counts. Defaults to `false`.
	SubmitterCanVote *bool `pulumi:"submitterCanVote"`
}

// BranchPolicyAutoReviewersSettingsInput is an input type that accepts BranchPolicyAutoReviewersSettingsArgs and BranchPolicyAutoReviewersSettingsOutput values.
// You can construct a concrete instance of `BranchPolicyAutoReviewersSettingsInput` via:
//
//          BranchPolicyAutoReviewersSettingsArgs{...}
type BranchPolicyAutoReviewersSettingsInput interface {
	pulumi.Input

	ToBranchPolicyAutoReviewersSettingsOutput() BranchPolicyAutoReviewersSettingsOutput
	ToBranchPolicyAutoReviewersSettingsOutputWithContext(context.Context) BranchPolicyAutoReviewersSettingsOutput
}

type BranchPolicyAutoReviewersSettingsArgs struct {
	// Required reviewers ids. Supports multiples user Ids.
	AutoReviewerIds pulumi.StringArrayInput `pulumi:"autoReviewerIds"`
	// Activity feed message, Message will appear in the activity feed of pull requests with automatically added reviewers.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Filter path(s) on which the policy is applied. Supports absolute paths, wildcards and multiple paths. Example: /WebApp/Models/Data.cs, /WebApp/* or *.cs,/WebApp/Models/Data.cs;ClientApp/Models/Data.cs.
	PathFilters pulumi.StringArrayInput `pulumi:"pathFilters"`
	// Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
	Scopes BranchPolicyAutoReviewersSettingsScopeArrayInput `pulumi:"scopes"`
	// Controls whether or not the submitter's vote counts. Defaults to `false`.
	SubmitterCanVote pulumi.BoolPtrInput `pulumi:"submitterCanVote"`
}

func (BranchPolicyAutoReviewersSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchPolicyAutoReviewersSettings)(nil)).Elem()
}

func (i BranchPolicyAutoReviewersSettingsArgs) ToBranchPolicyAutoReviewersSettingsOutput() BranchPolicyAutoReviewersSettingsOutput {
	return i.ToBranchPolicyAutoReviewersSettingsOutputWithContext(context.Background())
}

func (i BranchPolicyAutoReviewersSettingsArgs) ToBranchPolicyAutoReviewersSettingsOutputWithContext(ctx context.Context) BranchPolicyAutoReviewersSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchPolicyAutoReviewersSettingsOutput)
}

func (i BranchPolicyAutoReviewersSettingsArgs) ToBranchPolicyAutoReviewersSettingsPtrOutput() BranchPolicyAutoReviewersSettingsPtrOutput {
	return i.ToBranchPolicyAutoReviewersSettingsPtrOutputWithContext(context.Background())
}

func (i BranchPolicyAutoReviewersSettingsArgs) ToBranchPolicyAutoReviewersSettingsPtrOutputWithContext(ctx context.Context) BranchPolicyAutoReviewersSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchPolicyAutoReviewersSettingsOutput).ToBranchPolicyAutoReviewersSettingsPtrOutputWithContext(ctx)
}

// BranchPolicyAutoReviewersSettingsPtrInput is an input type that accepts BranchPolicyAutoReviewersSettingsArgs, BranchPolicyAutoReviewersSettingsPtr and BranchPolicyAutoReviewersSettingsPtrOutput values.
// You can construct a concrete instance of `BranchPolicyAutoReviewersSettingsPtrInput` via:
//
//          BranchPolicyAutoReviewersSettingsArgs{...}
//
//  or:
//
//          nil
type BranchPolicyAutoReviewersSettingsPtrInput interface {
	pulumi.Input

	ToBranchPolicyAutoReviewersSettingsPtrOutput() BranchPolicyAutoReviewersSettingsPtrOutput
	ToBranchPolicyAutoReviewersSettingsPtrOutputWithContext(context.Context) BranchPolicyAutoReviewersSettingsPtrOutput
}

type branchPolicyAutoReviewersSettingsPtrType BranchPolicyAutoReviewersSettingsArgs

func BranchPolicyAutoReviewersSettingsPtr(v *BranchPolicyAutoReviewersSettingsArgs) BranchPolicyAutoReviewersSettingsPtrInput {
	return (*branchPolicyAutoReviewersSettingsPtrType)(v)
}

func (*branchPolicyAutoReviewersSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchPolicyAutoReviewersSettings)(nil)).Elem()
}

func (i *branchPolicyAutoReviewersSettingsPtrType) ToBranchPolicyAutoReviewersSettingsPtrOutput() BranchPolicyAutoReviewersSettingsPtrOutput {
	return i.ToBranchPolicyAutoReviewersSettingsPtrOutputWithContext(context.Background())
}

func (i *branchPolicyAutoReviewersSettingsPtrType) ToBranchPolicyAutoReviewersSettingsPtrOutputWithContext(ctx context.Context) BranchPolicyAutoReviewersSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchPolicyAutoReviewersSettingsPtrOutput)
}

type BranchPolicyAutoReviewersSettingsOutput struct{ *pulumi.OutputState }

func (BranchPolicyAutoReviewersSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchPolicyAutoReviewersSettings)(nil)).Elem()
}

func (o BranchPolicyAutoReviewersSettingsOutput) ToBranchPolicyAutoReviewersSettingsOutput() BranchPolicyAutoReviewersSettingsOutput {
	return o
}

func (o BranchPolicyAutoReviewersSettingsOutput) ToBranchPolicyAutoReviewersSettingsOutputWithContext(ctx context.Context) BranchPolicyAutoReviewersSettingsOutput {
	return o
}

func (o BranchPolicyAutoReviewersSettingsOutput) ToBranchPolicyAutoReviewersSettingsPtrOutput() BranchPolicyAutoReviewersSettingsPtrOutput {
	return o.ToBranchPolicyAutoReviewersSettingsPtrOutputWithContext(context.Background())
}

func (o BranchPolicyAutoReviewersSettingsOutput) ToBranchPolicyAutoReviewersSettingsPtrOutputWithContext(ctx context.Context) BranchPolicyAutoReviewersSettingsPtrOutput {
	return o.ApplyT(func(v BranchPolicyAutoReviewersSettings) *BranchPolicyAutoReviewersSettings {
		return &v
	}).(BranchPolicyAutoReviewersSettingsPtrOutput)
}

// Required reviewers ids. Supports multiples user Ids.
func (o BranchPolicyAutoReviewersSettingsOutput) AutoReviewerIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BranchPolicyAutoReviewersSettings) []string { return v.AutoReviewerIds }).(pulumi.StringArrayOutput)
}

// Activity feed message, Message will appear in the activity feed of pull requests with automatically added reviewers.
func (o BranchPolicyAutoReviewersSettingsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchPolicyAutoReviewersSettings) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Filter path(s) on which the policy is applied. Supports absolute paths, wildcards and multiple paths. Example: /WebApp/Models/Data.cs, /WebApp/* or *.cs,/WebApp/Models/Data.cs;ClientApp/Models/Data.cs.
func (o BranchPolicyAutoReviewersSettingsOutput) PathFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BranchPolicyAutoReviewersSettings) []string { return v.PathFilters }).(pulumi.StringArrayOutput)
}

// Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
func (o BranchPolicyAutoReviewersSettingsOutput) Scopes() BranchPolicyAutoReviewersSettingsScopeArrayOutput {
	return o.ApplyT(func(v BranchPolicyAutoReviewersSettings) []BranchPolicyAutoReviewersSettingsScope { return v.Scopes }).(BranchPolicyAutoReviewersSettingsScopeArrayOutput)
}

// Controls whether or not the submitter's vote counts. Defaults to `false`.
func (o BranchPolicyAutoReviewersSettingsOutput) SubmitterCanVote() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BranchPolicyAutoReviewersSettings) *bool { return v.SubmitterCanVote }).(pulumi.BoolPtrOutput)
}

type BranchPolicyAutoReviewersSettingsPtrOutput struct{ *pulumi.OutputState }

func (BranchPolicyAutoReviewersSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchPolicyAutoReviewersSettings)(nil)).Elem()
}

func (o BranchPolicyAutoReviewersSettingsPtrOutput) ToBranchPolicyAutoReviewersSettingsPtrOutput() BranchPolicyAutoReviewersSettingsPtrOutput {
	return o
}

func (o BranchPolicyAutoReviewersSettingsPtrOutput) ToBranchPolicyAutoReviewersSettingsPtrOutputWithContext(ctx context.Context) BranchPolicyAutoReviewersSettingsPtrOutput {
	return o
}

func (o BranchPolicyAutoReviewersSettingsPtrOutput) Elem() BranchPolicyAutoReviewersSettingsOutput {
	return o.ApplyT(func(v *BranchPolicyAutoReviewersSettings) BranchPolicyAutoReviewersSettings { return *v }).(BranchPolicyAutoReviewersSettingsOutput)
}

// Required reviewers ids. Supports multiples user Ids.
func (o BranchPolicyAutoReviewersSettingsPtrOutput) AutoReviewerIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BranchPolicyAutoReviewersSettings) []string {
		if v == nil {
			return nil
		}
		return v.AutoReviewerIds
	}).(pulumi.StringArrayOutput)
}

// Activity feed message, Message will appear in the activity feed of pull requests with automatically added reviewers.
func (o BranchPolicyAutoReviewersSettingsPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BranchPolicyAutoReviewersSettings) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// Filter path(s) on which the policy is applied. Supports absolute paths, wildcards and multiple paths. Example: /WebApp/Models/Data.cs, /WebApp/* or *.cs,/WebApp/Models/Data.cs;ClientApp/Models/Data.cs.
func (o BranchPolicyAutoReviewersSettingsPtrOutput) PathFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BranchPolicyAutoReviewersSettings) []string {
		if v == nil {
			return nil
		}
		return v.PathFilters
	}).(pulumi.StringArrayOutput)
}

// Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
func (o BranchPolicyAutoReviewersSettingsPtrOutput) Scopes() BranchPolicyAutoReviewersSettingsScopeArrayOutput {
	return o.ApplyT(func(v *BranchPolicyAutoReviewersSettings) []BranchPolicyAutoReviewersSettingsScope {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(BranchPolicyAutoReviewersSettingsScopeArrayOutput)
}

// Controls whether or not the submitter's vote counts. Defaults to `false`.
func (o BranchPolicyAutoReviewersSettingsPtrOutput) SubmitterCanVote() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BranchPolicyAutoReviewersSettings) *bool {
		if v == nil {
			return nil
		}
		return v.SubmitterCanVote
	}).(pulumi.BoolPtrOutput)
}

type BranchPolicyAutoReviewersSettingsScope struct {
	// The match type to use when applying the policy. Supported values are `Exact` (default) or `Prefix`.
	MatchType *string `pulumi:"matchType"`
	// The repository ID. Needed only if the scope of the policy will be limited to a single repository.
	RepositoryId *string `pulumi:"repositoryId"`
	// The ref pattern to use for the match. If `matchType` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `matchType` is `Prefix`, this should be a ref path such as `refs/heads/releases`.
	RepositoryRef *string `pulumi:"repositoryRef"`
}

// BranchPolicyAutoReviewersSettingsScopeInput is an input type that accepts BranchPolicyAutoReviewersSettingsScopeArgs and BranchPolicyAutoReviewersSettingsScopeOutput values.
// You can construct a concrete instance of `BranchPolicyAutoReviewersSettingsScopeInput` via:
//
//          BranchPolicyAutoReviewersSettingsScopeArgs{...}
type BranchPolicyAutoReviewersSettingsScopeInput interface {
	pulumi.Input

	ToBranchPolicyAutoReviewersSettingsScopeOutput() BranchPolicyAutoReviewersSettingsScopeOutput
	ToBranchPolicyAutoReviewersSettingsScopeOutputWithContext(context.Context) BranchPolicyAutoReviewersSettingsScopeOutput
}

type BranchPolicyAutoReviewersSettingsScopeArgs struct {
	// The match type to use when applying the policy. Supported values are `Exact` (default) or `Prefix`.
	MatchType pulumi.StringPtrInput `pulumi:"matchType"`
	// The repository ID. Needed only if the scope of the policy will be limited to a single repository.
	RepositoryId pulumi.StringPtrInput `pulumi:"repositoryId"`
	// The ref pattern to use for the match. If `matchType` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `matchType` is `Prefix`, this should be a ref path such as `refs/heads/releases`.
	RepositoryRef pulumi.StringPtrInput `pulumi:"repositoryRef"`
}

func (BranchPolicyAutoReviewersSettingsScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchPolicyAutoReviewersSettingsScope)(nil)).Elem()
}

func (i BranchPolicyAutoReviewersSettingsScopeArgs) ToBranchPolicyAutoReviewersSettingsScopeOutput() BranchPolicyAutoReviewersSettingsScopeOutput {
	return i.ToBranchPolicyAutoReviewersSettingsScopeOutputWithContext(context.Background())
}

func (i BranchPolicyAutoReviewersSettingsScopeArgs) ToBranchPolicyAutoReviewersSettingsScopeOutputWithContext(ctx context.Context) BranchPolicyAutoReviewersSettingsScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchPolicyAutoReviewersSettingsScopeOutput)
}

// BranchPolicyAutoReviewersSettingsScopeArrayInput is an input type that accepts BranchPolicyAutoReviewersSettingsScopeArray and BranchPolicyAutoReviewersSettingsScopeArrayOutput values.
// You can construct a concrete instance of `BranchPolicyAutoReviewersSettingsScopeArrayInput` via:
//
//          BranchPolicyAutoReviewersSettingsScopeArray{ BranchPolicyAutoReviewersSettingsScopeArgs{...} }
type BranchPolicyAutoReviewersSettingsScopeArrayInput interface {
	pulumi.Input

	ToBranchPolicyAutoReviewersSettingsScopeArrayOutput() BranchPolicyAutoReviewersSettingsScopeArrayOutput
	ToBranchPolicyAutoReviewersSettingsScopeArrayOutputWithContext(context.Context) BranchPolicyAutoReviewersSettingsScopeArrayOutput
}

type BranchPolicyAutoReviewersSettingsScopeArray []BranchPolicyAutoReviewersSettingsScopeInput

func (BranchPolicyAutoReviewersSettingsScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchPolicyAutoReviewersSettingsScope)(nil)).Elem()
}

func (i BranchPolicyAutoReviewersSettingsScopeArray) ToBranchPolicyAutoReviewersSettingsScopeArrayOutput() BranchPolicyAutoReviewersSettingsScopeArrayOutput {
	return i.ToBranchPolicyAutoReviewersSettingsScopeArrayOutputWithContext(context.Background())
}

func (i BranchPolicyAutoReviewersSettingsScopeArray) ToBranchPolicyAutoReviewersSettingsScopeArrayOutputWithContext(ctx context.Context) BranchPolicyAutoReviewersSettingsScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchPolicyAutoReviewersSettingsScopeArrayOutput)
}

type BranchPolicyAutoReviewersSettingsScopeOutput struct{ *pulumi.OutputState }

func (BranchPolicyAutoReviewersSettingsScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchPolicyAutoReviewersSettingsScope)(nil)).Elem()
}

func (o BranchPolicyAutoReviewersSettingsScopeOutput) ToBranchPolicyAutoReviewersSettingsScopeOutput() BranchPolicyAutoReviewersSettingsScopeOutput {
	return o
}

func (o BranchPolicyAutoReviewersSettingsScopeOutput) ToBranchPolicyAutoReviewersSettingsScopeOutputWithContext(ctx context.Context) BranchPolicyAutoReviewersSettingsScopeOutput {
	return o
}

// The match type to use when applying the policy. Supported values are `Exact` (default) or `Prefix`.
func (o BranchPolicyAutoReviewersSettingsScopeOutput) MatchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchPolicyAutoReviewersSettingsScope) *string { return v.MatchType }).(pulumi.StringPtrOutput)
}

// The repository ID. Needed only if the scope of the policy will be limited to a single repository.
func (o BranchPolicyAutoReviewersSettingsScopeOutput) RepositoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchPolicyAutoReviewersSettingsScope) *string { return v.RepositoryId }).(pulumi.StringPtrOutput)
}

// The ref pattern to use for the match. If `matchType` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `matchType` is `Prefix`, this should be a ref path such as `refs/heads/releases`.
func (o BranchPolicyAutoReviewersSettingsScopeOutput) RepositoryRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchPolicyAutoReviewersSettingsScope) *string { return v.RepositoryRef }).(pulumi.StringPtrOutput)
}

type BranchPolicyAutoReviewersSettingsScopeArrayOutput struct{ *pulumi.OutputState }

func (BranchPolicyAutoReviewersSettingsScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchPolicyAutoReviewersSettingsScope)(nil)).Elem()
}

func (o BranchPolicyAutoReviewersSettingsScopeArrayOutput) ToBranchPolicyAutoReviewersSettingsScopeArrayOutput() BranchPolicyAutoReviewersSettingsScopeArrayOutput {
	return o
}

func (o BranchPolicyAutoReviewersSettingsScopeArrayOutput) ToBranchPolicyAutoReviewersSettingsScopeArrayOutputWithContext(ctx context.Context) BranchPolicyAutoReviewersSettingsScopeArrayOutput {
	return o
}

func (o BranchPolicyAutoReviewersSettingsScopeArrayOutput) Index(i pulumi.IntInput) BranchPolicyAutoReviewersSettingsScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BranchPolicyAutoReviewersSettingsScope {
		return vs[0].([]BranchPolicyAutoReviewersSettingsScope)[vs[1].(int)]
	}).(BranchPolicyAutoReviewersSettingsScopeOutput)
}

type BranchPolicyBuildValidationSettings struct {
	// The ID of the build to monitor for the policy.
	BuildDefinitionId int `pulumi:"buildDefinitionId"`
	// The display name for the policy.
	DisplayName string `pulumi:"displayName"`
	// If a path filter is set, the policy wil only apply when files which match the filter are changes. Not setting this field means that the policy will always apply. You can specify absolute paths and wildcards. Example: `["/WebApp/Models/Data.cs", "/WebApp/*", "*.cs"]`. Paths prefixed with "!" are excluded. Example: `["/WebApp/*", "!/WebApp/Tests/*"]`. Order is significant.
	FilenamePatterns []string `pulumi:"filenamePatterns"`
	// If set to true, the build will need to be manually queued. Defaults to `false`
	ManualQueueOnly *bool `pulumi:"manualQueueOnly"`
	// True if the build should queue on source updates only. Defaults to `true`.
	QueueOnSourceUpdateOnly *bool `pulumi:"queueOnSourceUpdateOnly"`
	// Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
	Scopes []BranchPolicyBuildValidationSettingsScope `pulumi:"scopes"`
	// The number of minutes for which the build is valid. If `0`, the build will not expire. Defaults to `720` (12 hours).
	ValidDuration *int `pulumi:"validDuration"`
}

// BranchPolicyBuildValidationSettingsInput is an input type that accepts BranchPolicyBuildValidationSettingsArgs and BranchPolicyBuildValidationSettingsOutput values.
// You can construct a concrete instance of `BranchPolicyBuildValidationSettingsInput` via:
//
//          BranchPolicyBuildValidationSettingsArgs{...}
type BranchPolicyBuildValidationSettingsInput interface {
	pulumi.Input

	ToBranchPolicyBuildValidationSettingsOutput() BranchPolicyBuildValidationSettingsOutput
	ToBranchPolicyBuildValidationSettingsOutputWithContext(context.Context) BranchPolicyBuildValidationSettingsOutput
}

type BranchPolicyBuildValidationSettingsArgs struct {
	// The ID of the build to monitor for the policy.
	BuildDefinitionId pulumi.IntInput `pulumi:"buildDefinitionId"`
	// The display name for the policy.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// If a path filter is set, the policy wil only apply when files which match the filter are changes. Not setting this field means that the policy will always apply. You can specify absolute paths and wildcards. Example: `["/WebApp/Models/Data.cs", "/WebApp/*", "*.cs"]`. Paths prefixed with "!" are excluded. Example: `["/WebApp/*", "!/WebApp/Tests/*"]`. Order is significant.
	FilenamePatterns pulumi.StringArrayInput `pulumi:"filenamePatterns"`
	// If set to true, the build will need to be manually queued. Defaults to `false`
	ManualQueueOnly pulumi.BoolPtrInput `pulumi:"manualQueueOnly"`
	// True if the build should queue on source updates only. Defaults to `true`.
	QueueOnSourceUpdateOnly pulumi.BoolPtrInput `pulumi:"queueOnSourceUpdateOnly"`
	// Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
	Scopes BranchPolicyBuildValidationSettingsScopeArrayInput `pulumi:"scopes"`
	// The number of minutes for which the build is valid. If `0`, the build will not expire. Defaults to `720` (12 hours).
	ValidDuration pulumi.IntPtrInput `pulumi:"validDuration"`
}

func (BranchPolicyBuildValidationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchPolicyBuildValidationSettings)(nil)).Elem()
}

func (i BranchPolicyBuildValidationSettingsArgs) ToBranchPolicyBuildValidationSettingsOutput() BranchPolicyBuildValidationSettingsOutput {
	return i.ToBranchPolicyBuildValidationSettingsOutputWithContext(context.Background())
}

func (i BranchPolicyBuildValidationSettingsArgs) ToBranchPolicyBuildValidationSettingsOutputWithContext(ctx context.Context) BranchPolicyBuildValidationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchPolicyBuildValidationSettingsOutput)
}

func (i BranchPolicyBuildValidationSettingsArgs) ToBranchPolicyBuildValidationSettingsPtrOutput() BranchPolicyBuildValidationSettingsPtrOutput {
	return i.ToBranchPolicyBuildValidationSettingsPtrOutputWithContext(context.Background())
}

func (i BranchPolicyBuildValidationSettingsArgs) ToBranchPolicyBuildValidationSettingsPtrOutputWithContext(ctx context.Context) BranchPolicyBuildValidationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchPolicyBuildValidationSettingsOutput).ToBranchPolicyBuildValidationSettingsPtrOutputWithContext(ctx)
}

// BranchPolicyBuildValidationSettingsPtrInput is an input type that accepts BranchPolicyBuildValidationSettingsArgs, BranchPolicyBuildValidationSettingsPtr and BranchPolicyBuildValidationSettingsPtrOutput values.
// You can construct a concrete instance of `BranchPolicyBuildValidationSettingsPtrInput` via:
//
//          BranchPolicyBuildValidationSettingsArgs{...}
//
//  or:
//
//          nil
type BranchPolicyBuildValidationSettingsPtrInput interface {
	pulumi.Input

	ToBranchPolicyBuildValidationSettingsPtrOutput() BranchPolicyBuildValidationSettingsPtrOutput
	ToBranchPolicyBuildValidationSettingsPtrOutputWithContext(context.Context) BranchPolicyBuildValidationSettingsPtrOutput
}

type branchPolicyBuildValidationSettingsPtrType BranchPolicyBuildValidationSettingsArgs

func BranchPolicyBuildValidationSettingsPtr(v *BranchPolicyBuildValidationSettingsArgs) BranchPolicyBuildValidationSettingsPtrInput {
	return (*branchPolicyBuildValidationSettingsPtrType)(v)
}

func (*branchPolicyBuildValidationSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchPolicyBuildValidationSettings)(nil)).Elem()
}

func (i *branchPolicyBuildValidationSettingsPtrType) ToBranchPolicyBuildValidationSettingsPtrOutput() BranchPolicyBuildValidationSettingsPtrOutput {
	return i.ToBranchPolicyBuildValidationSettingsPtrOutputWithContext(context.Background())
}

func (i *branchPolicyBuildValidationSettingsPtrType) ToBranchPolicyBuildValidationSettingsPtrOutputWithContext(ctx context.Context) BranchPolicyBuildValidationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchPolicyBuildValidationSettingsPtrOutput)
}

type BranchPolicyBuildValidationSettingsOutput struct{ *pulumi.OutputState }

func (BranchPolicyBuildValidationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchPolicyBuildValidationSettings)(nil)).Elem()
}

func (o BranchPolicyBuildValidationSettingsOutput) ToBranchPolicyBuildValidationSettingsOutput() BranchPolicyBuildValidationSettingsOutput {
	return o
}

func (o BranchPolicyBuildValidationSettingsOutput) ToBranchPolicyBuildValidationSettingsOutputWithContext(ctx context.Context) BranchPolicyBuildValidationSettingsOutput {
	return o
}

func (o BranchPolicyBuildValidationSettingsOutput) ToBranchPolicyBuildValidationSettingsPtrOutput() BranchPolicyBuildValidationSettingsPtrOutput {
	return o.ToBranchPolicyBuildValidationSettingsPtrOutputWithContext(context.Background())
}

func (o BranchPolicyBuildValidationSettingsOutput) ToBranchPolicyBuildValidationSettingsPtrOutputWithContext(ctx context.Context) BranchPolicyBuildValidationSettingsPtrOutput {
	return o.ApplyT(func(v BranchPolicyBuildValidationSettings) *BranchPolicyBuildValidationSettings {
		return &v
	}).(BranchPolicyBuildValidationSettingsPtrOutput)
}

// The ID of the build to monitor for the policy.
func (o BranchPolicyBuildValidationSettingsOutput) BuildDefinitionId() pulumi.IntOutput {
	return o.ApplyT(func(v BranchPolicyBuildValidationSettings) int { return v.BuildDefinitionId }).(pulumi.IntOutput)
}

// The display name for the policy.
func (o BranchPolicyBuildValidationSettingsOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v BranchPolicyBuildValidationSettings) string { return v.DisplayName }).(pulumi.StringOutput)
}

// If a path filter is set, the policy wil only apply when files which match the filter are changes. Not setting this field means that the policy will always apply. You can specify absolute paths and wildcards. Example: `["/WebApp/Models/Data.cs", "/WebApp/*", "*.cs"]`. Paths prefixed with "!" are excluded. Example: `["/WebApp/*", "!/WebApp/Tests/*"]`. Order is significant.
func (o BranchPolicyBuildValidationSettingsOutput) FilenamePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BranchPolicyBuildValidationSettings) []string { return v.FilenamePatterns }).(pulumi.StringArrayOutput)
}

// If set to true, the build will need to be manually queued. Defaults to `false`
func (o BranchPolicyBuildValidationSettingsOutput) ManualQueueOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BranchPolicyBuildValidationSettings) *bool { return v.ManualQueueOnly }).(pulumi.BoolPtrOutput)
}

// True if the build should queue on source updates only. Defaults to `true`.
func (o BranchPolicyBuildValidationSettingsOutput) QueueOnSourceUpdateOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BranchPolicyBuildValidationSettings) *bool { return v.QueueOnSourceUpdateOnly }).(pulumi.BoolPtrOutput)
}

// Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
func (o BranchPolicyBuildValidationSettingsOutput) Scopes() BranchPolicyBuildValidationSettingsScopeArrayOutput {
	return o.ApplyT(func(v BranchPolicyBuildValidationSettings) []BranchPolicyBuildValidationSettingsScope {
		return v.Scopes
	}).(BranchPolicyBuildValidationSettingsScopeArrayOutput)
}

// The number of minutes for which the build is valid. If `0`, the build will not expire. Defaults to `720` (12 hours).
func (o BranchPolicyBuildValidationSettingsOutput) ValidDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BranchPolicyBuildValidationSettings) *int { return v.ValidDuration }).(pulumi.IntPtrOutput)
}

type BranchPolicyBuildValidationSettingsPtrOutput struct{ *pulumi.OutputState }

func (BranchPolicyBuildValidationSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchPolicyBuildValidationSettings)(nil)).Elem()
}

func (o BranchPolicyBuildValidationSettingsPtrOutput) ToBranchPolicyBuildValidationSettingsPtrOutput() BranchPolicyBuildValidationSettingsPtrOutput {
	return o
}

func (o BranchPolicyBuildValidationSettingsPtrOutput) ToBranchPolicyBuildValidationSettingsPtrOutputWithContext(ctx context.Context) BranchPolicyBuildValidationSettingsPtrOutput {
	return o
}

func (o BranchPolicyBuildValidationSettingsPtrOutput) Elem() BranchPolicyBuildValidationSettingsOutput {
	return o.ApplyT(func(v *BranchPolicyBuildValidationSettings) BranchPolicyBuildValidationSettings { return *v }).(BranchPolicyBuildValidationSettingsOutput)
}

// The ID of the build to monitor for the policy.
func (o BranchPolicyBuildValidationSettingsPtrOutput) BuildDefinitionId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BranchPolicyBuildValidationSettings) *int {
		if v == nil {
			return nil
		}
		return &v.BuildDefinitionId
	}).(pulumi.IntPtrOutput)
}

// The display name for the policy.
func (o BranchPolicyBuildValidationSettingsPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BranchPolicyBuildValidationSettings) *string {
		if v == nil {
			return nil
		}
		return &v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// If a path filter is set, the policy wil only apply when files which match the filter are changes. Not setting this field means that the policy will always apply. You can specify absolute paths and wildcards. Example: `["/WebApp/Models/Data.cs", "/WebApp/*", "*.cs"]`. Paths prefixed with "!" are excluded. Example: `["/WebApp/*", "!/WebApp/Tests/*"]`. Order is significant.
func (o BranchPolicyBuildValidationSettingsPtrOutput) FilenamePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BranchPolicyBuildValidationSettings) []string {
		if v == nil {
			return nil
		}
		return v.FilenamePatterns
	}).(pulumi.StringArrayOutput)
}

// If set to true, the build will need to be manually queued. Defaults to `false`
func (o BranchPolicyBuildValidationSettingsPtrOutput) ManualQueueOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BranchPolicyBuildValidationSettings) *bool {
		if v == nil {
			return nil
		}
		return v.ManualQueueOnly
	}).(pulumi.BoolPtrOutput)
}

// True if the build should queue on source updates only. Defaults to `true`.
func (o BranchPolicyBuildValidationSettingsPtrOutput) QueueOnSourceUpdateOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BranchPolicyBuildValidationSettings) *bool {
		if v == nil {
			return nil
		}
		return v.QueueOnSourceUpdateOnly
	}).(pulumi.BoolPtrOutput)
}

// Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
func (o BranchPolicyBuildValidationSettingsPtrOutput) Scopes() BranchPolicyBuildValidationSettingsScopeArrayOutput {
	return o.ApplyT(func(v *BranchPolicyBuildValidationSettings) []BranchPolicyBuildValidationSettingsScope {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(BranchPolicyBuildValidationSettingsScopeArrayOutput)
}

// The number of minutes for which the build is valid. If `0`, the build will not expire. Defaults to `720` (12 hours).
func (o BranchPolicyBuildValidationSettingsPtrOutput) ValidDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BranchPolicyBuildValidationSettings) *int {
		if v == nil {
			return nil
		}
		return v.ValidDuration
	}).(pulumi.IntPtrOutput)
}

type BranchPolicyBuildValidationSettingsScope struct {
	// The match type to use when applying the policy. Supported values are `Exact` (default) or `Prefix`.
	MatchType *string `pulumi:"matchType"`
	// The repository ID. Needed only if the scope of the policy will be limited to a single repository.
	RepositoryId *string `pulumi:"repositoryId"`
	// The ref pattern to use for the match. If `matchType` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `matchType` is `Prefix`, this should be a ref path such as `refs/heads/releases`.
	RepositoryRef *string `pulumi:"repositoryRef"`
}

// BranchPolicyBuildValidationSettingsScopeInput is an input type that accepts BranchPolicyBuildValidationSettingsScopeArgs and BranchPolicyBuildValidationSettingsScopeOutput values.
// You can construct a concrete instance of `BranchPolicyBuildValidationSettingsScopeInput` via:
//
//          BranchPolicyBuildValidationSettingsScopeArgs{...}
type BranchPolicyBuildValidationSettingsScopeInput interface {
	pulumi.Input

	ToBranchPolicyBuildValidationSettingsScopeOutput() BranchPolicyBuildValidationSettingsScopeOutput
	ToBranchPolicyBuildValidationSettingsScopeOutputWithContext(context.Context) BranchPolicyBuildValidationSettingsScopeOutput
}

type BranchPolicyBuildValidationSettingsScopeArgs struct {
	// The match type to use when applying the policy. Supported values are `Exact` (default) or `Prefix`.
	MatchType pulumi.StringPtrInput `pulumi:"matchType"`
	// The repository ID. Needed only if the scope of the policy will be limited to a single repository.
	RepositoryId pulumi.StringPtrInput `pulumi:"repositoryId"`
	// The ref pattern to use for the match. If `matchType` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `matchType` is `Prefix`, this should be a ref path such as `refs/heads/releases`.
	RepositoryRef pulumi.StringPtrInput `pulumi:"repositoryRef"`
}

func (BranchPolicyBuildValidationSettingsScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchPolicyBuildValidationSettingsScope)(nil)).Elem()
}

func (i BranchPolicyBuildValidationSettingsScopeArgs) ToBranchPolicyBuildValidationSettingsScopeOutput() BranchPolicyBuildValidationSettingsScopeOutput {
	return i.ToBranchPolicyBuildValidationSettingsScopeOutputWithContext(context.Background())
}

func (i BranchPolicyBuildValidationSettingsScopeArgs) ToBranchPolicyBuildValidationSettingsScopeOutputWithContext(ctx context.Context) BranchPolicyBuildValidationSettingsScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchPolicyBuildValidationSettingsScopeOutput)
}

// BranchPolicyBuildValidationSettingsScopeArrayInput is an input type that accepts BranchPolicyBuildValidationSettingsScopeArray and BranchPolicyBuildValidationSettingsScopeArrayOutput values.
// You can construct a concrete instance of `BranchPolicyBuildValidationSettingsScopeArrayInput` via:
//
//          BranchPolicyBuildValidationSettingsScopeArray{ BranchPolicyBuildValidationSettingsScopeArgs{...} }
type BranchPolicyBuildValidationSettingsScopeArrayInput interface {
	pulumi.Input

	ToBranchPolicyBuildValidationSettingsScopeArrayOutput() BranchPolicyBuildValidationSettingsScopeArrayOutput
	ToBranchPolicyBuildValidationSettingsScopeArrayOutputWithContext(context.Context) BranchPolicyBuildValidationSettingsScopeArrayOutput
}

type BranchPolicyBuildValidationSettingsScopeArray []BranchPolicyBuildValidationSettingsScopeInput

func (BranchPolicyBuildValidationSettingsScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchPolicyBuildValidationSettingsScope)(nil)).Elem()
}

func (i BranchPolicyBuildValidationSettingsScopeArray) ToBranchPolicyBuildValidationSettingsScopeArrayOutput() BranchPolicyBuildValidationSettingsScopeArrayOutput {
	return i.ToBranchPolicyBuildValidationSettingsScopeArrayOutputWithContext(context.Background())
}

func (i BranchPolicyBuildValidationSettingsScopeArray) ToBranchPolicyBuildValidationSettingsScopeArrayOutputWithContext(ctx context.Context) BranchPolicyBuildValidationSettingsScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchPolicyBuildValidationSettingsScopeArrayOutput)
}

type BranchPolicyBuildValidationSettingsScopeOutput struct{ *pulumi.OutputState }

func (BranchPolicyBuildValidationSettingsScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchPolicyBuildValidationSettingsScope)(nil)).Elem()
}

func (o BranchPolicyBuildValidationSettingsScopeOutput) ToBranchPolicyBuildValidationSettingsScopeOutput() BranchPolicyBuildValidationSettingsScopeOutput {
	return o
}

func (o BranchPolicyBuildValidationSettingsScopeOutput) ToBranchPolicyBuildValidationSettingsScopeOutputWithContext(ctx context.Context) BranchPolicyBuildValidationSettingsScopeOutput {
	return o
}

// The match type to use when applying the policy. Supported values are `Exact` (default) or `Prefix`.
func (o BranchPolicyBuildValidationSettingsScopeOutput) MatchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchPolicyBuildValidationSettingsScope) *string { return v.MatchType }).(pulumi.StringPtrOutput)
}

// The repository ID. Needed only if the scope of the policy will be limited to a single repository.
func (o BranchPolicyBuildValidationSettingsScopeOutput) RepositoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchPolicyBuildValidationSettingsScope) *string { return v.RepositoryId }).(pulumi.StringPtrOutput)
}

// The ref pattern to use for the match. If `matchType` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `matchType` is `Prefix`, this should be a ref path such as `refs/heads/releases`.
func (o BranchPolicyBuildValidationSettingsScopeOutput) RepositoryRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchPolicyBuildValidationSettingsScope) *string { return v.RepositoryRef }).(pulumi.StringPtrOutput)
}

type BranchPolicyBuildValidationSettingsScopeArrayOutput struct{ *pulumi.OutputState }

func (BranchPolicyBuildValidationSettingsScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchPolicyBuildValidationSettingsScope)(nil)).Elem()
}

func (o BranchPolicyBuildValidationSettingsScopeArrayOutput) ToBranchPolicyBuildValidationSettingsScopeArrayOutput() BranchPolicyBuildValidationSettingsScopeArrayOutput {
	return o
}

func (o BranchPolicyBuildValidationSettingsScopeArrayOutput) ToBranchPolicyBuildValidationSettingsScopeArrayOutputWithContext(ctx context.Context) BranchPolicyBuildValidationSettingsScopeArrayOutput {
	return o
}

func (o BranchPolicyBuildValidationSettingsScopeArrayOutput) Index(i pulumi.IntInput) BranchPolicyBuildValidationSettingsScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BranchPolicyBuildValidationSettingsScope {
		return vs[0].([]BranchPolicyBuildValidationSettingsScope)[vs[1].(int)]
	}).(BranchPolicyBuildValidationSettingsScopeOutput)
}

type BranchPolicyCommentResolutionSettings struct {
	// Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
	Scopes []BranchPolicyCommentResolutionSettingsScope `pulumi:"scopes"`
}

// BranchPolicyCommentResolutionSettingsInput is an input type that accepts BranchPolicyCommentResolutionSettingsArgs and BranchPolicyCommentResolutionSettingsOutput values.
// You can construct a concrete instance of `BranchPolicyCommentResolutionSettingsInput` via:
//
//          BranchPolicyCommentResolutionSettingsArgs{...}
type BranchPolicyCommentResolutionSettingsInput interface {
	pulumi.Input

	ToBranchPolicyCommentResolutionSettingsOutput() BranchPolicyCommentResolutionSettingsOutput
	ToBranchPolicyCommentResolutionSettingsOutputWithContext(context.Context) BranchPolicyCommentResolutionSettingsOutput
}

type BranchPolicyCommentResolutionSettingsArgs struct {
	// Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
	Scopes BranchPolicyCommentResolutionSettingsScopeArrayInput `pulumi:"scopes"`
}

func (BranchPolicyCommentResolutionSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchPolicyCommentResolutionSettings)(nil)).Elem()
}

func (i BranchPolicyCommentResolutionSettingsArgs) ToBranchPolicyCommentResolutionSettingsOutput() BranchPolicyCommentResolutionSettingsOutput {
	return i.ToBranchPolicyCommentResolutionSettingsOutputWithContext(context.Background())
}

func (i BranchPolicyCommentResolutionSettingsArgs) ToBranchPolicyCommentResolutionSettingsOutputWithContext(ctx context.Context) BranchPolicyCommentResolutionSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchPolicyCommentResolutionSettingsOutput)
}

func (i BranchPolicyCommentResolutionSettingsArgs) ToBranchPolicyCommentResolutionSettingsPtrOutput() BranchPolicyCommentResolutionSettingsPtrOutput {
	return i.ToBranchPolicyCommentResolutionSettingsPtrOutputWithContext(context.Background())
}

func (i BranchPolicyCommentResolutionSettingsArgs) ToBranchPolicyCommentResolutionSettingsPtrOutputWithContext(ctx context.Context) BranchPolicyCommentResolutionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchPolicyCommentResolutionSettingsOutput).ToBranchPolicyCommentResolutionSettingsPtrOutputWithContext(ctx)
}

// BranchPolicyCommentResolutionSettingsPtrInput is an input type that accepts BranchPolicyCommentResolutionSettingsArgs, BranchPolicyCommentResolutionSettingsPtr and BranchPolicyCommentResolutionSettingsPtrOutput values.
// You can construct a concrete instance of `BranchPolicyCommentResolutionSettingsPtrInput` via:
//
//          BranchPolicyCommentResolutionSettingsArgs{...}
//
//  or:
//
//          nil
type BranchPolicyCommentResolutionSettingsPtrInput interface {
	pulumi.Input

	ToBranchPolicyCommentResolutionSettingsPtrOutput() BranchPolicyCommentResolutionSettingsPtrOutput
	ToBranchPolicyCommentResolutionSettingsPtrOutputWithContext(context.Context) BranchPolicyCommentResolutionSettingsPtrOutput
}

type branchPolicyCommentResolutionSettingsPtrType BranchPolicyCommentResolutionSettingsArgs

func BranchPolicyCommentResolutionSettingsPtr(v *BranchPolicyCommentResolutionSettingsArgs) BranchPolicyCommentResolutionSettingsPtrInput {
	return (*branchPolicyCommentResolutionSettingsPtrType)(v)
}

func (*branchPolicyCommentResolutionSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchPolicyCommentResolutionSettings)(nil)).Elem()
}

func (i *branchPolicyCommentResolutionSettingsPtrType) ToBranchPolicyCommentResolutionSettingsPtrOutput() BranchPolicyCommentResolutionSettingsPtrOutput {
	return i.ToBranchPolicyCommentResolutionSettingsPtrOutputWithContext(context.Background())
}

func (i *branchPolicyCommentResolutionSettingsPtrType) ToBranchPolicyCommentResolutionSettingsPtrOutputWithContext(ctx context.Context) BranchPolicyCommentResolutionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchPolicyCommentResolutionSettingsPtrOutput)
}

type BranchPolicyCommentResolutionSettingsOutput struct{ *pulumi.OutputState }

func (BranchPolicyCommentResolutionSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchPolicyCommentResolutionSettings)(nil)).Elem()
}

func (o BranchPolicyCommentResolutionSettingsOutput) ToBranchPolicyCommentResolutionSettingsOutput() BranchPolicyCommentResolutionSettingsOutput {
	return o
}

func (o BranchPolicyCommentResolutionSettingsOutput) ToBranchPolicyCommentResolutionSettingsOutputWithContext(ctx context.Context) BranchPolicyCommentResolutionSettingsOutput {
	return o
}

func (o BranchPolicyCommentResolutionSettingsOutput) ToBranchPolicyCommentResolutionSettingsPtrOutput() BranchPolicyCommentResolutionSettingsPtrOutput {
	return o.ToBranchPolicyCommentResolutionSettingsPtrOutputWithContext(context.Background())
}

func (o BranchPolicyCommentResolutionSettingsOutput) ToBranchPolicyCommentResolutionSettingsPtrOutputWithContext(ctx context.Context) BranchPolicyCommentResolutionSettingsPtrOutput {
	return o.ApplyT(func(v BranchPolicyCommentResolutionSettings) *BranchPolicyCommentResolutionSettings {
		return &v
	}).(BranchPolicyCommentResolutionSettingsPtrOutput)
}

// Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
func (o BranchPolicyCommentResolutionSettingsOutput) Scopes() BranchPolicyCommentResolutionSettingsScopeArrayOutput {
	return o.ApplyT(func(v BranchPolicyCommentResolutionSettings) []BranchPolicyCommentResolutionSettingsScope {
		return v.Scopes
	}).(BranchPolicyCommentResolutionSettingsScopeArrayOutput)
}

type BranchPolicyCommentResolutionSettingsPtrOutput struct{ *pulumi.OutputState }

func (BranchPolicyCommentResolutionSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchPolicyCommentResolutionSettings)(nil)).Elem()
}

func (o BranchPolicyCommentResolutionSettingsPtrOutput) ToBranchPolicyCommentResolutionSettingsPtrOutput() BranchPolicyCommentResolutionSettingsPtrOutput {
	return o
}

func (o BranchPolicyCommentResolutionSettingsPtrOutput) ToBranchPolicyCommentResolutionSettingsPtrOutputWithContext(ctx context.Context) BranchPolicyCommentResolutionSettingsPtrOutput {
	return o
}

func (o BranchPolicyCommentResolutionSettingsPtrOutput) Elem() BranchPolicyCommentResolutionSettingsOutput {
	return o.ApplyT(func(v *BranchPolicyCommentResolutionSettings) BranchPolicyCommentResolutionSettings { return *v }).(BranchPolicyCommentResolutionSettingsOutput)
}

// Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
func (o BranchPolicyCommentResolutionSettingsPtrOutput) Scopes() BranchPolicyCommentResolutionSettingsScopeArrayOutput {
	return o.ApplyT(func(v *BranchPolicyCommentResolutionSettings) []BranchPolicyCommentResolutionSettingsScope {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(BranchPolicyCommentResolutionSettingsScopeArrayOutput)
}

type BranchPolicyCommentResolutionSettingsScope struct {
	// The match type to use when applying the policy. Supported values are `Exact` (default) or `Prefix`.
	MatchType *string `pulumi:"matchType"`
	// The repository ID. Needed only if the scope of the policy will be limited to a single repository.
	RepositoryId *string `pulumi:"repositoryId"`
	// The ref pattern to use for the match. If `matchType` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `matchType` is `Prefix`, this should be a ref path such as `refs/heads/releases`.
	RepositoryRef *string `pulumi:"repositoryRef"`
}

// BranchPolicyCommentResolutionSettingsScopeInput is an input type that accepts BranchPolicyCommentResolutionSettingsScopeArgs and BranchPolicyCommentResolutionSettingsScopeOutput values.
// You can construct a concrete instance of `BranchPolicyCommentResolutionSettingsScopeInput` via:
//
//          BranchPolicyCommentResolutionSettingsScopeArgs{...}
type BranchPolicyCommentResolutionSettingsScopeInput interface {
	pulumi.Input

	ToBranchPolicyCommentResolutionSettingsScopeOutput() BranchPolicyCommentResolutionSettingsScopeOutput
	ToBranchPolicyCommentResolutionSettingsScopeOutputWithContext(context.Context) BranchPolicyCommentResolutionSettingsScopeOutput
}

type BranchPolicyCommentResolutionSettingsScopeArgs struct {
	// The match type to use when applying the policy. Supported values are `Exact` (default) or `Prefix`.
	MatchType pulumi.StringPtrInput `pulumi:"matchType"`
	// The repository ID. Needed only if the scope of the policy will be limited to a single repository.
	RepositoryId pulumi.StringPtrInput `pulumi:"repositoryId"`
	// The ref pattern to use for the match. If `matchType` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `matchType` is `Prefix`, this should be a ref path such as `refs/heads/releases`.
	RepositoryRef pulumi.StringPtrInput `pulumi:"repositoryRef"`
}

func (BranchPolicyCommentResolutionSettingsScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchPolicyCommentResolutionSettingsScope)(nil)).Elem()
}

func (i BranchPolicyCommentResolutionSettingsScopeArgs) ToBranchPolicyCommentResolutionSettingsScopeOutput() BranchPolicyCommentResolutionSettingsScopeOutput {
	return i.ToBranchPolicyCommentResolutionSettingsScopeOutputWithContext(context.Background())
}

func (i BranchPolicyCommentResolutionSettingsScopeArgs) ToBranchPolicyCommentResolutionSettingsScopeOutputWithContext(ctx context.Context) BranchPolicyCommentResolutionSettingsScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchPolicyCommentResolutionSettingsScopeOutput)
}

// BranchPolicyCommentResolutionSettingsScopeArrayInput is an input type that accepts BranchPolicyCommentResolutionSettingsScopeArray and BranchPolicyCommentResolutionSettingsScopeArrayOutput values.
// You can construct a concrete instance of `BranchPolicyCommentResolutionSettingsScopeArrayInput` via:
//
//          BranchPolicyCommentResolutionSettingsScopeArray{ BranchPolicyCommentResolutionSettingsScopeArgs{...} }
type BranchPolicyCommentResolutionSettingsScopeArrayInput interface {
	pulumi.Input

	ToBranchPolicyCommentResolutionSettingsScopeArrayOutput() BranchPolicyCommentResolutionSettingsScopeArrayOutput
	ToBranchPolicyCommentResolutionSettingsScopeArrayOutputWithContext(context.Context) BranchPolicyCommentResolutionSettingsScopeArrayOutput
}

type BranchPolicyCommentResolutionSettingsScopeArray []BranchPolicyCommentResolutionSettingsScopeInput

func (BranchPolicyCommentResolutionSettingsScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchPolicyCommentResolutionSettingsScope)(nil)).Elem()
}

func (i BranchPolicyCommentResolutionSettingsScopeArray) ToBranchPolicyCommentResolutionSettingsScopeArrayOutput() BranchPolicyCommentResolutionSettingsScopeArrayOutput {
	return i.ToBranchPolicyCommentResolutionSettingsScopeArrayOutputWithContext(context.Background())
}

func (i BranchPolicyCommentResolutionSettingsScopeArray) ToBranchPolicyCommentResolutionSettingsScopeArrayOutputWithContext(ctx context.Context) BranchPolicyCommentResolutionSettingsScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchPolicyCommentResolutionSettingsScopeArrayOutput)
}

type BranchPolicyCommentResolutionSettingsScopeOutput struct{ *pulumi.OutputState }

func (BranchPolicyCommentResolutionSettingsScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchPolicyCommentResolutionSettingsScope)(nil)).Elem()
}

func (o BranchPolicyCommentResolutionSettingsScopeOutput) ToBranchPolicyCommentResolutionSettingsScopeOutput() BranchPolicyCommentResolutionSettingsScopeOutput {
	return o
}

func (o BranchPolicyCommentResolutionSettingsScopeOutput) ToBranchPolicyCommentResolutionSettingsScopeOutputWithContext(ctx context.Context) BranchPolicyCommentResolutionSettingsScopeOutput {
	return o
}

// The match type to use when applying the policy. Supported values are `Exact` (default) or `Prefix`.
func (o BranchPolicyCommentResolutionSettingsScopeOutput) MatchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchPolicyCommentResolutionSettingsScope) *string { return v.MatchType }).(pulumi.StringPtrOutput)
}

// The repository ID. Needed only if the scope of the policy will be limited to a single repository.
func (o BranchPolicyCommentResolutionSettingsScopeOutput) RepositoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchPolicyCommentResolutionSettingsScope) *string { return v.RepositoryId }).(pulumi.StringPtrOutput)
}

// The ref pattern to use for the match. If `matchType` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `matchType` is `Prefix`, this should be a ref path such as `refs/heads/releases`.
func (o BranchPolicyCommentResolutionSettingsScopeOutput) RepositoryRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchPolicyCommentResolutionSettingsScope) *string { return v.RepositoryRef }).(pulumi.StringPtrOutput)
}

type BranchPolicyCommentResolutionSettingsScopeArrayOutput struct{ *pulumi.OutputState }

func (BranchPolicyCommentResolutionSettingsScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchPolicyCommentResolutionSettingsScope)(nil)).Elem()
}

func (o BranchPolicyCommentResolutionSettingsScopeArrayOutput) ToBranchPolicyCommentResolutionSettingsScopeArrayOutput() BranchPolicyCommentResolutionSettingsScopeArrayOutput {
	return o
}

func (o BranchPolicyCommentResolutionSettingsScopeArrayOutput) ToBranchPolicyCommentResolutionSettingsScopeArrayOutputWithContext(ctx context.Context) BranchPolicyCommentResolutionSettingsScopeArrayOutput {
	return o
}

func (o BranchPolicyCommentResolutionSettingsScopeArrayOutput) Index(i pulumi.IntInput) BranchPolicyCommentResolutionSettingsScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BranchPolicyCommentResolutionSettingsScope {
		return vs[0].([]BranchPolicyCommentResolutionSettingsScope)[vs[1].(int)]
	}).(BranchPolicyCommentResolutionSettingsScopeOutput)
}

type BranchPolicyMinReviewersSettings struct {
	// The number of reviewrs needed to approve.
	ReviewerCount int `pulumi:"reviewerCount"`
	// Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
	Scopes []BranchPolicyMinReviewersSettingsScope `pulumi:"scopes"`
	// Controls whether or not the submitter's vote counts. Defaults to `false`.
	SubmitterCanVote *bool `pulumi:"submitterCanVote"`
}

// BranchPolicyMinReviewersSettingsInput is an input type that accepts BranchPolicyMinReviewersSettingsArgs and BranchPolicyMinReviewersSettingsOutput values.
// You can construct a concrete instance of `BranchPolicyMinReviewersSettingsInput` via:
//
//          BranchPolicyMinReviewersSettingsArgs{...}
type BranchPolicyMinReviewersSettingsInput interface {
	pulumi.Input

	ToBranchPolicyMinReviewersSettingsOutput() BranchPolicyMinReviewersSettingsOutput
	ToBranchPolicyMinReviewersSettingsOutputWithContext(context.Context) BranchPolicyMinReviewersSettingsOutput
}

type BranchPolicyMinReviewersSettingsArgs struct {
	// The number of reviewrs needed to approve.
	ReviewerCount pulumi.IntInput `pulumi:"reviewerCount"`
	// Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
	Scopes BranchPolicyMinReviewersSettingsScopeArrayInput `pulumi:"scopes"`
	// Controls whether or not the submitter's vote counts. Defaults to `false`.
	SubmitterCanVote pulumi.BoolPtrInput `pulumi:"submitterCanVote"`
}

func (BranchPolicyMinReviewersSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchPolicyMinReviewersSettings)(nil)).Elem()
}

func (i BranchPolicyMinReviewersSettingsArgs) ToBranchPolicyMinReviewersSettingsOutput() BranchPolicyMinReviewersSettingsOutput {
	return i.ToBranchPolicyMinReviewersSettingsOutputWithContext(context.Background())
}

func (i BranchPolicyMinReviewersSettingsArgs) ToBranchPolicyMinReviewersSettingsOutputWithContext(ctx context.Context) BranchPolicyMinReviewersSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchPolicyMinReviewersSettingsOutput)
}

func (i BranchPolicyMinReviewersSettingsArgs) ToBranchPolicyMinReviewersSettingsPtrOutput() BranchPolicyMinReviewersSettingsPtrOutput {
	return i.ToBranchPolicyMinReviewersSettingsPtrOutputWithContext(context.Background())
}

func (i BranchPolicyMinReviewersSettingsArgs) ToBranchPolicyMinReviewersSettingsPtrOutputWithContext(ctx context.Context) BranchPolicyMinReviewersSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchPolicyMinReviewersSettingsOutput).ToBranchPolicyMinReviewersSettingsPtrOutputWithContext(ctx)
}

// BranchPolicyMinReviewersSettingsPtrInput is an input type that accepts BranchPolicyMinReviewersSettingsArgs, BranchPolicyMinReviewersSettingsPtr and BranchPolicyMinReviewersSettingsPtrOutput values.
// You can construct a concrete instance of `BranchPolicyMinReviewersSettingsPtrInput` via:
//
//          BranchPolicyMinReviewersSettingsArgs{...}
//
//  or:
//
//          nil
type BranchPolicyMinReviewersSettingsPtrInput interface {
	pulumi.Input

	ToBranchPolicyMinReviewersSettingsPtrOutput() BranchPolicyMinReviewersSettingsPtrOutput
	ToBranchPolicyMinReviewersSettingsPtrOutputWithContext(context.Context) BranchPolicyMinReviewersSettingsPtrOutput
}

type branchPolicyMinReviewersSettingsPtrType BranchPolicyMinReviewersSettingsArgs

func BranchPolicyMinReviewersSettingsPtr(v *BranchPolicyMinReviewersSettingsArgs) BranchPolicyMinReviewersSettingsPtrInput {
	return (*branchPolicyMinReviewersSettingsPtrType)(v)
}

func (*branchPolicyMinReviewersSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchPolicyMinReviewersSettings)(nil)).Elem()
}

func (i *branchPolicyMinReviewersSettingsPtrType) ToBranchPolicyMinReviewersSettingsPtrOutput() BranchPolicyMinReviewersSettingsPtrOutput {
	return i.ToBranchPolicyMinReviewersSettingsPtrOutputWithContext(context.Background())
}

func (i *branchPolicyMinReviewersSettingsPtrType) ToBranchPolicyMinReviewersSettingsPtrOutputWithContext(ctx context.Context) BranchPolicyMinReviewersSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchPolicyMinReviewersSettingsPtrOutput)
}

type BranchPolicyMinReviewersSettingsOutput struct{ *pulumi.OutputState }

func (BranchPolicyMinReviewersSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchPolicyMinReviewersSettings)(nil)).Elem()
}

func (o BranchPolicyMinReviewersSettingsOutput) ToBranchPolicyMinReviewersSettingsOutput() BranchPolicyMinReviewersSettingsOutput {
	return o
}

func (o BranchPolicyMinReviewersSettingsOutput) ToBranchPolicyMinReviewersSettingsOutputWithContext(ctx context.Context) BranchPolicyMinReviewersSettingsOutput {
	return o
}

func (o BranchPolicyMinReviewersSettingsOutput) ToBranchPolicyMinReviewersSettingsPtrOutput() BranchPolicyMinReviewersSettingsPtrOutput {
	return o.ToBranchPolicyMinReviewersSettingsPtrOutputWithContext(context.Background())
}

func (o BranchPolicyMinReviewersSettingsOutput) ToBranchPolicyMinReviewersSettingsPtrOutputWithContext(ctx context.Context) BranchPolicyMinReviewersSettingsPtrOutput {
	return o.ApplyT(func(v BranchPolicyMinReviewersSettings) *BranchPolicyMinReviewersSettings {
		return &v
	}).(BranchPolicyMinReviewersSettingsPtrOutput)
}

// The number of reviewrs needed to approve.
func (o BranchPolicyMinReviewersSettingsOutput) ReviewerCount() pulumi.IntOutput {
	return o.ApplyT(func(v BranchPolicyMinReviewersSettings) int { return v.ReviewerCount }).(pulumi.IntOutput)
}

// Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
func (o BranchPolicyMinReviewersSettingsOutput) Scopes() BranchPolicyMinReviewersSettingsScopeArrayOutput {
	return o.ApplyT(func(v BranchPolicyMinReviewersSettings) []BranchPolicyMinReviewersSettingsScope { return v.Scopes }).(BranchPolicyMinReviewersSettingsScopeArrayOutput)
}

// Controls whether or not the submitter's vote counts. Defaults to `false`.
func (o BranchPolicyMinReviewersSettingsOutput) SubmitterCanVote() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BranchPolicyMinReviewersSettings) *bool { return v.SubmitterCanVote }).(pulumi.BoolPtrOutput)
}

type BranchPolicyMinReviewersSettingsPtrOutput struct{ *pulumi.OutputState }

func (BranchPolicyMinReviewersSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchPolicyMinReviewersSettings)(nil)).Elem()
}

func (o BranchPolicyMinReviewersSettingsPtrOutput) ToBranchPolicyMinReviewersSettingsPtrOutput() BranchPolicyMinReviewersSettingsPtrOutput {
	return o
}

func (o BranchPolicyMinReviewersSettingsPtrOutput) ToBranchPolicyMinReviewersSettingsPtrOutputWithContext(ctx context.Context) BranchPolicyMinReviewersSettingsPtrOutput {
	return o
}

func (o BranchPolicyMinReviewersSettingsPtrOutput) Elem() BranchPolicyMinReviewersSettingsOutput {
	return o.ApplyT(func(v *BranchPolicyMinReviewersSettings) BranchPolicyMinReviewersSettings { return *v }).(BranchPolicyMinReviewersSettingsOutput)
}

// The number of reviewrs needed to approve.
func (o BranchPolicyMinReviewersSettingsPtrOutput) ReviewerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BranchPolicyMinReviewersSettings) *int {
		if v == nil {
			return nil
		}
		return &v.ReviewerCount
	}).(pulumi.IntPtrOutput)
}

// Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
func (o BranchPolicyMinReviewersSettingsPtrOutput) Scopes() BranchPolicyMinReviewersSettingsScopeArrayOutput {
	return o.ApplyT(func(v *BranchPolicyMinReviewersSettings) []BranchPolicyMinReviewersSettingsScope {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(BranchPolicyMinReviewersSettingsScopeArrayOutput)
}

// Controls whether or not the submitter's vote counts. Defaults to `false`.
func (o BranchPolicyMinReviewersSettingsPtrOutput) SubmitterCanVote() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BranchPolicyMinReviewersSettings) *bool {
		if v == nil {
			return nil
		}
		return v.SubmitterCanVote
	}).(pulumi.BoolPtrOutput)
}

type BranchPolicyMinReviewersSettingsScope struct {
	// The match type to use when applying the policy. Supported values are `Exact` (default) or `Prefix`.
	MatchType *string `pulumi:"matchType"`
	// The repository ID. Needed only if the scope of the policy will be limited to a single repository.
	RepositoryId *string `pulumi:"repositoryId"`
	// The ref pattern to use for the match. If `matchType` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `matchType` is `Prefix`, this should be a ref path such as `refs/heads/releases`.
	RepositoryRef *string `pulumi:"repositoryRef"`
}

// BranchPolicyMinReviewersSettingsScopeInput is an input type that accepts BranchPolicyMinReviewersSettingsScopeArgs and BranchPolicyMinReviewersSettingsScopeOutput values.
// You can construct a concrete instance of `BranchPolicyMinReviewersSettingsScopeInput` via:
//
//          BranchPolicyMinReviewersSettingsScopeArgs{...}
type BranchPolicyMinReviewersSettingsScopeInput interface {
	pulumi.Input

	ToBranchPolicyMinReviewersSettingsScopeOutput() BranchPolicyMinReviewersSettingsScopeOutput
	ToBranchPolicyMinReviewersSettingsScopeOutputWithContext(context.Context) BranchPolicyMinReviewersSettingsScopeOutput
}

type BranchPolicyMinReviewersSettingsScopeArgs struct {
	// The match type to use when applying the policy. Supported values are `Exact` (default) or `Prefix`.
	MatchType pulumi.StringPtrInput `pulumi:"matchType"`
	// The repository ID. Needed only if the scope of the policy will be limited to a single repository.
	RepositoryId pulumi.StringPtrInput `pulumi:"repositoryId"`
	// The ref pattern to use for the match. If `matchType` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `matchType` is `Prefix`, this should be a ref path such as `refs/heads/releases`.
	RepositoryRef pulumi.StringPtrInput `pulumi:"repositoryRef"`
}

func (BranchPolicyMinReviewersSettingsScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchPolicyMinReviewersSettingsScope)(nil)).Elem()
}

func (i BranchPolicyMinReviewersSettingsScopeArgs) ToBranchPolicyMinReviewersSettingsScopeOutput() BranchPolicyMinReviewersSettingsScopeOutput {
	return i.ToBranchPolicyMinReviewersSettingsScopeOutputWithContext(context.Background())
}

func (i BranchPolicyMinReviewersSettingsScopeArgs) ToBranchPolicyMinReviewersSettingsScopeOutputWithContext(ctx context.Context) BranchPolicyMinReviewersSettingsScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchPolicyMinReviewersSettingsScopeOutput)
}

// BranchPolicyMinReviewersSettingsScopeArrayInput is an input type that accepts BranchPolicyMinReviewersSettingsScopeArray and BranchPolicyMinReviewersSettingsScopeArrayOutput values.
// You can construct a concrete instance of `BranchPolicyMinReviewersSettingsScopeArrayInput` via:
//
//          BranchPolicyMinReviewersSettingsScopeArray{ BranchPolicyMinReviewersSettingsScopeArgs{...} }
type BranchPolicyMinReviewersSettingsScopeArrayInput interface {
	pulumi.Input

	ToBranchPolicyMinReviewersSettingsScopeArrayOutput() BranchPolicyMinReviewersSettingsScopeArrayOutput
	ToBranchPolicyMinReviewersSettingsScopeArrayOutputWithContext(context.Context) BranchPolicyMinReviewersSettingsScopeArrayOutput
}

type BranchPolicyMinReviewersSettingsScopeArray []BranchPolicyMinReviewersSettingsScopeInput

func (BranchPolicyMinReviewersSettingsScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchPolicyMinReviewersSettingsScope)(nil)).Elem()
}

func (i BranchPolicyMinReviewersSettingsScopeArray) ToBranchPolicyMinReviewersSettingsScopeArrayOutput() BranchPolicyMinReviewersSettingsScopeArrayOutput {
	return i.ToBranchPolicyMinReviewersSettingsScopeArrayOutputWithContext(context.Background())
}

func (i BranchPolicyMinReviewersSettingsScopeArray) ToBranchPolicyMinReviewersSettingsScopeArrayOutputWithContext(ctx context.Context) BranchPolicyMinReviewersSettingsScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchPolicyMinReviewersSettingsScopeArrayOutput)
}

type BranchPolicyMinReviewersSettingsScopeOutput struct{ *pulumi.OutputState }

func (BranchPolicyMinReviewersSettingsScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchPolicyMinReviewersSettingsScope)(nil)).Elem()
}

func (o BranchPolicyMinReviewersSettingsScopeOutput) ToBranchPolicyMinReviewersSettingsScopeOutput() BranchPolicyMinReviewersSettingsScopeOutput {
	return o
}

func (o BranchPolicyMinReviewersSettingsScopeOutput) ToBranchPolicyMinReviewersSettingsScopeOutputWithContext(ctx context.Context) BranchPolicyMinReviewersSettingsScopeOutput {
	return o
}

// The match type to use when applying the policy. Supported values are `Exact` (default) or `Prefix`.
func (o BranchPolicyMinReviewersSettingsScopeOutput) MatchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchPolicyMinReviewersSettingsScope) *string { return v.MatchType }).(pulumi.StringPtrOutput)
}

// The repository ID. Needed only if the scope of the policy will be limited to a single repository.
func (o BranchPolicyMinReviewersSettingsScopeOutput) RepositoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchPolicyMinReviewersSettingsScope) *string { return v.RepositoryId }).(pulumi.StringPtrOutput)
}

// The ref pattern to use for the match. If `matchType` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `matchType` is `Prefix`, this should be a ref path such as `refs/heads/releases`.
func (o BranchPolicyMinReviewersSettingsScopeOutput) RepositoryRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchPolicyMinReviewersSettingsScope) *string { return v.RepositoryRef }).(pulumi.StringPtrOutput)
}

type BranchPolicyMinReviewersSettingsScopeArrayOutput struct{ *pulumi.OutputState }

func (BranchPolicyMinReviewersSettingsScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchPolicyMinReviewersSettingsScope)(nil)).Elem()
}

func (o BranchPolicyMinReviewersSettingsScopeArrayOutput) ToBranchPolicyMinReviewersSettingsScopeArrayOutput() BranchPolicyMinReviewersSettingsScopeArrayOutput {
	return o
}

func (o BranchPolicyMinReviewersSettingsScopeArrayOutput) ToBranchPolicyMinReviewersSettingsScopeArrayOutputWithContext(ctx context.Context) BranchPolicyMinReviewersSettingsScopeArrayOutput {
	return o
}

func (o BranchPolicyMinReviewersSettingsScopeArrayOutput) Index(i pulumi.IntInput) BranchPolicyMinReviewersSettingsScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BranchPolicyMinReviewersSettingsScope {
		return vs[0].([]BranchPolicyMinReviewersSettingsScope)[vs[1].(int)]
	}).(BranchPolicyMinReviewersSettingsScopeOutput)
}

type BranchPolicyWorkItemLinkingSettings struct {
	// Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
	Scopes []BranchPolicyWorkItemLinkingSettingsScope `pulumi:"scopes"`
}

// BranchPolicyWorkItemLinkingSettingsInput is an input type that accepts BranchPolicyWorkItemLinkingSettingsArgs and BranchPolicyWorkItemLinkingSettingsOutput values.
// You can construct a concrete instance of `BranchPolicyWorkItemLinkingSettingsInput` via:
//
//          BranchPolicyWorkItemLinkingSettingsArgs{...}
type BranchPolicyWorkItemLinkingSettingsInput interface {
	pulumi.Input

	ToBranchPolicyWorkItemLinkingSettingsOutput() BranchPolicyWorkItemLinkingSettingsOutput
	ToBranchPolicyWorkItemLinkingSettingsOutputWithContext(context.Context) BranchPolicyWorkItemLinkingSettingsOutput
}

type BranchPolicyWorkItemLinkingSettingsArgs struct {
	// Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
	Scopes BranchPolicyWorkItemLinkingSettingsScopeArrayInput `pulumi:"scopes"`
}

func (BranchPolicyWorkItemLinkingSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchPolicyWorkItemLinkingSettings)(nil)).Elem()
}

func (i BranchPolicyWorkItemLinkingSettingsArgs) ToBranchPolicyWorkItemLinkingSettingsOutput() BranchPolicyWorkItemLinkingSettingsOutput {
	return i.ToBranchPolicyWorkItemLinkingSettingsOutputWithContext(context.Background())
}

func (i BranchPolicyWorkItemLinkingSettingsArgs) ToBranchPolicyWorkItemLinkingSettingsOutputWithContext(ctx context.Context) BranchPolicyWorkItemLinkingSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchPolicyWorkItemLinkingSettingsOutput)
}

func (i BranchPolicyWorkItemLinkingSettingsArgs) ToBranchPolicyWorkItemLinkingSettingsPtrOutput() BranchPolicyWorkItemLinkingSettingsPtrOutput {
	return i.ToBranchPolicyWorkItemLinkingSettingsPtrOutputWithContext(context.Background())
}

func (i BranchPolicyWorkItemLinkingSettingsArgs) ToBranchPolicyWorkItemLinkingSettingsPtrOutputWithContext(ctx context.Context) BranchPolicyWorkItemLinkingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchPolicyWorkItemLinkingSettingsOutput).ToBranchPolicyWorkItemLinkingSettingsPtrOutputWithContext(ctx)
}

// BranchPolicyWorkItemLinkingSettingsPtrInput is an input type that accepts BranchPolicyWorkItemLinkingSettingsArgs, BranchPolicyWorkItemLinkingSettingsPtr and BranchPolicyWorkItemLinkingSettingsPtrOutput values.
// You can construct a concrete instance of `BranchPolicyWorkItemLinkingSettingsPtrInput` via:
//
//          BranchPolicyWorkItemLinkingSettingsArgs{...}
//
//  or:
//
//          nil
type BranchPolicyWorkItemLinkingSettingsPtrInput interface {
	pulumi.Input

	ToBranchPolicyWorkItemLinkingSettingsPtrOutput() BranchPolicyWorkItemLinkingSettingsPtrOutput
	ToBranchPolicyWorkItemLinkingSettingsPtrOutputWithContext(context.Context) BranchPolicyWorkItemLinkingSettingsPtrOutput
}

type branchPolicyWorkItemLinkingSettingsPtrType BranchPolicyWorkItemLinkingSettingsArgs

func BranchPolicyWorkItemLinkingSettingsPtr(v *BranchPolicyWorkItemLinkingSettingsArgs) BranchPolicyWorkItemLinkingSettingsPtrInput {
	return (*branchPolicyWorkItemLinkingSettingsPtrType)(v)
}

func (*branchPolicyWorkItemLinkingSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchPolicyWorkItemLinkingSettings)(nil)).Elem()
}

func (i *branchPolicyWorkItemLinkingSettingsPtrType) ToBranchPolicyWorkItemLinkingSettingsPtrOutput() BranchPolicyWorkItemLinkingSettingsPtrOutput {
	return i.ToBranchPolicyWorkItemLinkingSettingsPtrOutputWithContext(context.Background())
}

func (i *branchPolicyWorkItemLinkingSettingsPtrType) ToBranchPolicyWorkItemLinkingSettingsPtrOutputWithContext(ctx context.Context) BranchPolicyWorkItemLinkingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchPolicyWorkItemLinkingSettingsPtrOutput)
}

type BranchPolicyWorkItemLinkingSettingsOutput struct{ *pulumi.OutputState }

func (BranchPolicyWorkItemLinkingSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchPolicyWorkItemLinkingSettings)(nil)).Elem()
}

func (o BranchPolicyWorkItemLinkingSettingsOutput) ToBranchPolicyWorkItemLinkingSettingsOutput() BranchPolicyWorkItemLinkingSettingsOutput {
	return o
}

func (o BranchPolicyWorkItemLinkingSettingsOutput) ToBranchPolicyWorkItemLinkingSettingsOutputWithContext(ctx context.Context) BranchPolicyWorkItemLinkingSettingsOutput {
	return o
}

func (o BranchPolicyWorkItemLinkingSettingsOutput) ToBranchPolicyWorkItemLinkingSettingsPtrOutput() BranchPolicyWorkItemLinkingSettingsPtrOutput {
	return o.ToBranchPolicyWorkItemLinkingSettingsPtrOutputWithContext(context.Background())
}

func (o BranchPolicyWorkItemLinkingSettingsOutput) ToBranchPolicyWorkItemLinkingSettingsPtrOutputWithContext(ctx context.Context) BranchPolicyWorkItemLinkingSettingsPtrOutput {
	return o.ApplyT(func(v BranchPolicyWorkItemLinkingSettings) *BranchPolicyWorkItemLinkingSettings {
		return &v
	}).(BranchPolicyWorkItemLinkingSettingsPtrOutput)
}

// Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
func (o BranchPolicyWorkItemLinkingSettingsOutput) Scopes() BranchPolicyWorkItemLinkingSettingsScopeArrayOutput {
	return o.ApplyT(func(v BranchPolicyWorkItemLinkingSettings) []BranchPolicyWorkItemLinkingSettingsScope {
		return v.Scopes
	}).(BranchPolicyWorkItemLinkingSettingsScopeArrayOutput)
}

type BranchPolicyWorkItemLinkingSettingsPtrOutput struct{ *pulumi.OutputState }

func (BranchPolicyWorkItemLinkingSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchPolicyWorkItemLinkingSettings)(nil)).Elem()
}

func (o BranchPolicyWorkItemLinkingSettingsPtrOutput) ToBranchPolicyWorkItemLinkingSettingsPtrOutput() BranchPolicyWorkItemLinkingSettingsPtrOutput {
	return o
}

func (o BranchPolicyWorkItemLinkingSettingsPtrOutput) ToBranchPolicyWorkItemLinkingSettingsPtrOutputWithContext(ctx context.Context) BranchPolicyWorkItemLinkingSettingsPtrOutput {
	return o
}

func (o BranchPolicyWorkItemLinkingSettingsPtrOutput) Elem() BranchPolicyWorkItemLinkingSettingsOutput {
	return o.ApplyT(func(v *BranchPolicyWorkItemLinkingSettings) BranchPolicyWorkItemLinkingSettings { return *v }).(BranchPolicyWorkItemLinkingSettingsOutput)
}

// Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
func (o BranchPolicyWorkItemLinkingSettingsPtrOutput) Scopes() BranchPolicyWorkItemLinkingSettingsScopeArrayOutput {
	return o.ApplyT(func(v *BranchPolicyWorkItemLinkingSettings) []BranchPolicyWorkItemLinkingSettingsScope {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(BranchPolicyWorkItemLinkingSettingsScopeArrayOutput)
}

type BranchPolicyWorkItemLinkingSettingsScope struct {
	// The match type to use when applying the policy. Supported values are `Exact` (default) or `Prefix`.
	MatchType *string `pulumi:"matchType"`
	// The repository ID. Needed only if the scope of the policy will be limited to a single repository.
	RepositoryId *string `pulumi:"repositoryId"`
	// The ref pattern to use for the match. If `matchType` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `matchType` is `Prefix`, this should be a ref path such as `refs/heads/releases`.
	RepositoryRef *string `pulumi:"repositoryRef"`
}

// BranchPolicyWorkItemLinkingSettingsScopeInput is an input type that accepts BranchPolicyWorkItemLinkingSettingsScopeArgs and BranchPolicyWorkItemLinkingSettingsScopeOutput values.
// You can construct a concrete instance of `BranchPolicyWorkItemLinkingSettingsScopeInput` via:
//
//          BranchPolicyWorkItemLinkingSettingsScopeArgs{...}
type BranchPolicyWorkItemLinkingSettingsScopeInput interface {
	pulumi.Input

	ToBranchPolicyWorkItemLinkingSettingsScopeOutput() BranchPolicyWorkItemLinkingSettingsScopeOutput
	ToBranchPolicyWorkItemLinkingSettingsScopeOutputWithContext(context.Context) BranchPolicyWorkItemLinkingSettingsScopeOutput
}

type BranchPolicyWorkItemLinkingSettingsScopeArgs struct {
	// The match type to use when applying the policy. Supported values are `Exact` (default) or `Prefix`.
	MatchType pulumi.StringPtrInput `pulumi:"matchType"`
	// The repository ID. Needed only if the scope of the policy will be limited to a single repository.
	RepositoryId pulumi.StringPtrInput `pulumi:"repositoryId"`
	// The ref pattern to use for the match. If `matchType` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `matchType` is `Prefix`, this should be a ref path such as `refs/heads/releases`.
	RepositoryRef pulumi.StringPtrInput `pulumi:"repositoryRef"`
}

func (BranchPolicyWorkItemLinkingSettingsScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchPolicyWorkItemLinkingSettingsScope)(nil)).Elem()
}

func (i BranchPolicyWorkItemLinkingSettingsScopeArgs) ToBranchPolicyWorkItemLinkingSettingsScopeOutput() BranchPolicyWorkItemLinkingSettingsScopeOutput {
	return i.ToBranchPolicyWorkItemLinkingSettingsScopeOutputWithContext(context.Background())
}

func (i BranchPolicyWorkItemLinkingSettingsScopeArgs) ToBranchPolicyWorkItemLinkingSettingsScopeOutputWithContext(ctx context.Context) BranchPolicyWorkItemLinkingSettingsScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchPolicyWorkItemLinkingSettingsScopeOutput)
}

// BranchPolicyWorkItemLinkingSettingsScopeArrayInput is an input type that accepts BranchPolicyWorkItemLinkingSettingsScopeArray and BranchPolicyWorkItemLinkingSettingsScopeArrayOutput values.
// You can construct a concrete instance of `BranchPolicyWorkItemLinkingSettingsScopeArrayInput` via:
//
//          BranchPolicyWorkItemLinkingSettingsScopeArray{ BranchPolicyWorkItemLinkingSettingsScopeArgs{...} }
type BranchPolicyWorkItemLinkingSettingsScopeArrayInput interface {
	pulumi.Input

	ToBranchPolicyWorkItemLinkingSettingsScopeArrayOutput() BranchPolicyWorkItemLinkingSettingsScopeArrayOutput
	ToBranchPolicyWorkItemLinkingSettingsScopeArrayOutputWithContext(context.Context) BranchPolicyWorkItemLinkingSettingsScopeArrayOutput
}

type BranchPolicyWorkItemLinkingSettingsScopeArray []BranchPolicyWorkItemLinkingSettingsScopeInput

func (BranchPolicyWorkItemLinkingSettingsScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchPolicyWorkItemLinkingSettingsScope)(nil)).Elem()
}

func (i BranchPolicyWorkItemLinkingSettingsScopeArray) ToBranchPolicyWorkItemLinkingSettingsScopeArrayOutput() BranchPolicyWorkItemLinkingSettingsScopeArrayOutput {
	return i.ToBranchPolicyWorkItemLinkingSettingsScopeArrayOutputWithContext(context.Background())
}

func (i BranchPolicyWorkItemLinkingSettingsScopeArray) ToBranchPolicyWorkItemLinkingSettingsScopeArrayOutputWithContext(ctx context.Context) BranchPolicyWorkItemLinkingSettingsScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchPolicyWorkItemLinkingSettingsScopeArrayOutput)
}

type BranchPolicyWorkItemLinkingSettingsScopeOutput struct{ *pulumi.OutputState }

func (BranchPolicyWorkItemLinkingSettingsScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchPolicyWorkItemLinkingSettingsScope)(nil)).Elem()
}

func (o BranchPolicyWorkItemLinkingSettingsScopeOutput) ToBranchPolicyWorkItemLinkingSettingsScopeOutput() BranchPolicyWorkItemLinkingSettingsScopeOutput {
	return o
}

func (o BranchPolicyWorkItemLinkingSettingsScopeOutput) ToBranchPolicyWorkItemLinkingSettingsScopeOutputWithContext(ctx context.Context) BranchPolicyWorkItemLinkingSettingsScopeOutput {
	return o
}

// The match type to use when applying the policy. Supported values are `Exact` (default) or `Prefix`.
func (o BranchPolicyWorkItemLinkingSettingsScopeOutput) MatchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchPolicyWorkItemLinkingSettingsScope) *string { return v.MatchType }).(pulumi.StringPtrOutput)
}

// The repository ID. Needed only if the scope of the policy will be limited to a single repository.
func (o BranchPolicyWorkItemLinkingSettingsScopeOutput) RepositoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchPolicyWorkItemLinkingSettingsScope) *string { return v.RepositoryId }).(pulumi.StringPtrOutput)
}

// The ref pattern to use for the match. If `matchType` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `matchType` is `Prefix`, this should be a ref path such as `refs/heads/releases`.
func (o BranchPolicyWorkItemLinkingSettingsScopeOutput) RepositoryRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchPolicyWorkItemLinkingSettingsScope) *string { return v.RepositoryRef }).(pulumi.StringPtrOutput)
}

type BranchPolicyWorkItemLinkingSettingsScopeArrayOutput struct{ *pulumi.OutputState }

func (BranchPolicyWorkItemLinkingSettingsScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchPolicyWorkItemLinkingSettingsScope)(nil)).Elem()
}

func (o BranchPolicyWorkItemLinkingSettingsScopeArrayOutput) ToBranchPolicyWorkItemLinkingSettingsScopeArrayOutput() BranchPolicyWorkItemLinkingSettingsScopeArrayOutput {
	return o
}

func (o BranchPolicyWorkItemLinkingSettingsScopeArrayOutput) ToBranchPolicyWorkItemLinkingSettingsScopeArrayOutputWithContext(ctx context.Context) BranchPolicyWorkItemLinkingSettingsScopeArrayOutput {
	return o
}

func (o BranchPolicyWorkItemLinkingSettingsScopeArrayOutput) Index(i pulumi.IntInput) BranchPolicyWorkItemLinkingSettingsScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BranchPolicyWorkItemLinkingSettingsScope {
		return vs[0].([]BranchPolicyWorkItemLinkingSettingsScope)[vs[1].(int)]
	}).(BranchPolicyWorkItemLinkingSettingsScopeOutput)
}

type BuildDefinitionCiTrigger struct {
	// Override the azure-pipeline file and use a this configuration for all builds.
	Override *BuildDefinitionCiTriggerOverride `pulumi:"override"`
	// Use the azure-pipeline file for the build configuration. Defaults to `false`.
	UseYaml *bool `pulumi:"useYaml"`
}

// BuildDefinitionCiTriggerInput is an input type that accepts BuildDefinitionCiTriggerArgs and BuildDefinitionCiTriggerOutput values.
// You can construct a concrete instance of `BuildDefinitionCiTriggerInput` via:
//
//          BuildDefinitionCiTriggerArgs{...}
type BuildDefinitionCiTriggerInput interface {
	pulumi.Input

	ToBuildDefinitionCiTriggerOutput() BuildDefinitionCiTriggerOutput
	ToBuildDefinitionCiTriggerOutputWithContext(context.Context) BuildDefinitionCiTriggerOutput
}

type BuildDefinitionCiTriggerArgs struct {
	// Override the azure-pipeline file and use a this configuration for all builds.
	Override BuildDefinitionCiTriggerOverridePtrInput `pulumi:"override"`
	// Use the azure-pipeline file for the build configuration. Defaults to `false`.
	UseYaml pulumi.BoolPtrInput `pulumi:"useYaml"`
}

func (BuildDefinitionCiTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDefinitionCiTrigger)(nil)).Elem()
}

func (i BuildDefinitionCiTriggerArgs) ToBuildDefinitionCiTriggerOutput() BuildDefinitionCiTriggerOutput {
	return i.ToBuildDefinitionCiTriggerOutputWithContext(context.Background())
}

func (i BuildDefinitionCiTriggerArgs) ToBuildDefinitionCiTriggerOutputWithContext(ctx context.Context) BuildDefinitionCiTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionCiTriggerOutput)
}

func (i BuildDefinitionCiTriggerArgs) ToBuildDefinitionCiTriggerPtrOutput() BuildDefinitionCiTriggerPtrOutput {
	return i.ToBuildDefinitionCiTriggerPtrOutputWithContext(context.Background())
}

func (i BuildDefinitionCiTriggerArgs) ToBuildDefinitionCiTriggerPtrOutputWithContext(ctx context.Context) BuildDefinitionCiTriggerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionCiTriggerOutput).ToBuildDefinitionCiTriggerPtrOutputWithContext(ctx)
}

// BuildDefinitionCiTriggerPtrInput is an input type that accepts BuildDefinitionCiTriggerArgs, BuildDefinitionCiTriggerPtr and BuildDefinitionCiTriggerPtrOutput values.
// You can construct a concrete instance of `BuildDefinitionCiTriggerPtrInput` via:
//
//          BuildDefinitionCiTriggerArgs{...}
//
//  or:
//
//          nil
type BuildDefinitionCiTriggerPtrInput interface {
	pulumi.Input

	ToBuildDefinitionCiTriggerPtrOutput() BuildDefinitionCiTriggerPtrOutput
	ToBuildDefinitionCiTriggerPtrOutputWithContext(context.Context) BuildDefinitionCiTriggerPtrOutput
}

type buildDefinitionCiTriggerPtrType BuildDefinitionCiTriggerArgs

func BuildDefinitionCiTriggerPtr(v *BuildDefinitionCiTriggerArgs) BuildDefinitionCiTriggerPtrInput {
	return (*buildDefinitionCiTriggerPtrType)(v)
}

func (*buildDefinitionCiTriggerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildDefinitionCiTrigger)(nil)).Elem()
}

func (i *buildDefinitionCiTriggerPtrType) ToBuildDefinitionCiTriggerPtrOutput() BuildDefinitionCiTriggerPtrOutput {
	return i.ToBuildDefinitionCiTriggerPtrOutputWithContext(context.Background())
}

func (i *buildDefinitionCiTriggerPtrType) ToBuildDefinitionCiTriggerPtrOutputWithContext(ctx context.Context) BuildDefinitionCiTriggerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionCiTriggerPtrOutput)
}

type BuildDefinitionCiTriggerOutput struct{ *pulumi.OutputState }

func (BuildDefinitionCiTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDefinitionCiTrigger)(nil)).Elem()
}

func (o BuildDefinitionCiTriggerOutput) ToBuildDefinitionCiTriggerOutput() BuildDefinitionCiTriggerOutput {
	return o
}

func (o BuildDefinitionCiTriggerOutput) ToBuildDefinitionCiTriggerOutputWithContext(ctx context.Context) BuildDefinitionCiTriggerOutput {
	return o
}

func (o BuildDefinitionCiTriggerOutput) ToBuildDefinitionCiTriggerPtrOutput() BuildDefinitionCiTriggerPtrOutput {
	return o.ToBuildDefinitionCiTriggerPtrOutputWithContext(context.Background())
}

func (o BuildDefinitionCiTriggerOutput) ToBuildDefinitionCiTriggerPtrOutputWithContext(ctx context.Context) BuildDefinitionCiTriggerPtrOutput {
	return o.ApplyT(func(v BuildDefinitionCiTrigger) *BuildDefinitionCiTrigger {
		return &v
	}).(BuildDefinitionCiTriggerPtrOutput)
}

// Override the azure-pipeline file and use a this configuration for all builds.
func (o BuildDefinitionCiTriggerOutput) Override() BuildDefinitionCiTriggerOverridePtrOutput {
	return o.ApplyT(func(v BuildDefinitionCiTrigger) *BuildDefinitionCiTriggerOverride { return v.Override }).(BuildDefinitionCiTriggerOverridePtrOutput)
}

// Use the azure-pipeline file for the build configuration. Defaults to `false`.
func (o BuildDefinitionCiTriggerOutput) UseYaml() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BuildDefinitionCiTrigger) *bool { return v.UseYaml }).(pulumi.BoolPtrOutput)
}

type BuildDefinitionCiTriggerPtrOutput struct{ *pulumi.OutputState }

func (BuildDefinitionCiTriggerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildDefinitionCiTrigger)(nil)).Elem()
}

func (o BuildDefinitionCiTriggerPtrOutput) ToBuildDefinitionCiTriggerPtrOutput() BuildDefinitionCiTriggerPtrOutput {
	return o
}

func (o BuildDefinitionCiTriggerPtrOutput) ToBuildDefinitionCiTriggerPtrOutputWithContext(ctx context.Context) BuildDefinitionCiTriggerPtrOutput {
	return o
}

func (o BuildDefinitionCiTriggerPtrOutput) Elem() BuildDefinitionCiTriggerOutput {
	return o.ApplyT(func(v *BuildDefinitionCiTrigger) BuildDefinitionCiTrigger { return *v }).(BuildDefinitionCiTriggerOutput)
}

// Override the azure-pipeline file and use a this configuration for all builds.
func (o BuildDefinitionCiTriggerPtrOutput) Override() BuildDefinitionCiTriggerOverridePtrOutput {
	return o.ApplyT(func(v *BuildDefinitionCiTrigger) *BuildDefinitionCiTriggerOverride {
		if v == nil {
			return nil
		}
		return v.Override
	}).(BuildDefinitionCiTriggerOverridePtrOutput)
}

// Use the azure-pipeline file for the build configuration. Defaults to `false`.
func (o BuildDefinitionCiTriggerPtrOutput) UseYaml() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BuildDefinitionCiTrigger) *bool {
		if v == nil {
			return nil
		}
		return v.UseYaml
	}).(pulumi.BoolPtrOutput)
}

type BuildDefinitionCiTriggerOverride struct {
	// If you set batch to true, when a pipeline is running, the system waits until the run is completed, then starts another run with all changes that have not yet been built. Defaults to `true`.
	Batch *bool `pulumi:"batch"`
	// The branches to include and exclude from the trigger.
	BranchFilters []BuildDefinitionCiTriggerOverrideBranchFilter `pulumi:"branchFilters"`
	// The number of max builds per branch. Defaults to `1`.
	MaxConcurrentBuildsPerBranch *int `pulumi:"maxConcurrentBuildsPerBranch"`
	// Specify file paths to include or exclude. Note that the wildcard syntax is different between branches/tags and file paths.
	PathFilters []BuildDefinitionCiTriggerOverridePathFilter `pulumi:"pathFilters"`
	// How often the external repository is polled. Defaults to `0`.
	PollingInterval *int `pulumi:"pollingInterval"`
	// This is the ID of the polling job that polls the external repository. Once the build definition is saved/updated, this value is set.
	PollingJobId *string `pulumi:"pollingJobId"`
}

// BuildDefinitionCiTriggerOverrideInput is an input type that accepts BuildDefinitionCiTriggerOverrideArgs and BuildDefinitionCiTriggerOverrideOutput values.
// You can construct a concrete instance of `BuildDefinitionCiTriggerOverrideInput` via:
//
//          BuildDefinitionCiTriggerOverrideArgs{...}
type BuildDefinitionCiTriggerOverrideInput interface {
	pulumi.Input

	ToBuildDefinitionCiTriggerOverrideOutput() BuildDefinitionCiTriggerOverrideOutput
	ToBuildDefinitionCiTriggerOverrideOutputWithContext(context.Context) BuildDefinitionCiTriggerOverrideOutput
}

type BuildDefinitionCiTriggerOverrideArgs struct {
	// If you set batch to true, when a pipeline is running, the system waits until the run is completed, then starts another run with all changes that have not yet been built. Defaults to `true`.
	Batch pulumi.BoolPtrInput `pulumi:"batch"`
	// The branches to include and exclude from the trigger.
	BranchFilters BuildDefinitionCiTriggerOverrideBranchFilterArrayInput `pulumi:"branchFilters"`
	// The number of max builds per branch. Defaults to `1`.
	MaxConcurrentBuildsPerBranch pulumi.IntPtrInput `pulumi:"maxConcurrentBuildsPerBranch"`
	// Specify file paths to include or exclude. Note that the wildcard syntax is different between branches/tags and file paths.
	PathFilters BuildDefinitionCiTriggerOverridePathFilterArrayInput `pulumi:"pathFilters"`
	// How often the external repository is polled. Defaults to `0`.
	PollingInterval pulumi.IntPtrInput `pulumi:"pollingInterval"`
	// This is the ID of the polling job that polls the external repository. Once the build definition is saved/updated, this value is set.
	PollingJobId pulumi.StringPtrInput `pulumi:"pollingJobId"`
}

func (BuildDefinitionCiTriggerOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDefinitionCiTriggerOverride)(nil)).Elem()
}

func (i BuildDefinitionCiTriggerOverrideArgs) ToBuildDefinitionCiTriggerOverrideOutput() BuildDefinitionCiTriggerOverrideOutput {
	return i.ToBuildDefinitionCiTriggerOverrideOutputWithContext(context.Background())
}

func (i BuildDefinitionCiTriggerOverrideArgs) ToBuildDefinitionCiTriggerOverrideOutputWithContext(ctx context.Context) BuildDefinitionCiTriggerOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionCiTriggerOverrideOutput)
}

func (i BuildDefinitionCiTriggerOverrideArgs) ToBuildDefinitionCiTriggerOverridePtrOutput() BuildDefinitionCiTriggerOverridePtrOutput {
	return i.ToBuildDefinitionCiTriggerOverridePtrOutputWithContext(context.Background())
}

func (i BuildDefinitionCiTriggerOverrideArgs) ToBuildDefinitionCiTriggerOverridePtrOutputWithContext(ctx context.Context) BuildDefinitionCiTriggerOverridePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionCiTriggerOverrideOutput).ToBuildDefinitionCiTriggerOverridePtrOutputWithContext(ctx)
}

// BuildDefinitionCiTriggerOverridePtrInput is an input type that accepts BuildDefinitionCiTriggerOverrideArgs, BuildDefinitionCiTriggerOverridePtr and BuildDefinitionCiTriggerOverridePtrOutput values.
// You can construct a concrete instance of `BuildDefinitionCiTriggerOverridePtrInput` via:
//
//          BuildDefinitionCiTriggerOverrideArgs{...}
//
//  or:
//
//          nil
type BuildDefinitionCiTriggerOverridePtrInput interface {
	pulumi.Input

	ToBuildDefinitionCiTriggerOverridePtrOutput() BuildDefinitionCiTriggerOverridePtrOutput
	ToBuildDefinitionCiTriggerOverridePtrOutputWithContext(context.Context) BuildDefinitionCiTriggerOverridePtrOutput
}

type buildDefinitionCiTriggerOverridePtrType BuildDefinitionCiTriggerOverrideArgs

func BuildDefinitionCiTriggerOverridePtr(v *BuildDefinitionCiTriggerOverrideArgs) BuildDefinitionCiTriggerOverridePtrInput {
	return (*buildDefinitionCiTriggerOverridePtrType)(v)
}

func (*buildDefinitionCiTriggerOverridePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildDefinitionCiTriggerOverride)(nil)).Elem()
}

func (i *buildDefinitionCiTriggerOverridePtrType) ToBuildDefinitionCiTriggerOverridePtrOutput() BuildDefinitionCiTriggerOverridePtrOutput {
	return i.ToBuildDefinitionCiTriggerOverridePtrOutputWithContext(context.Background())
}

func (i *buildDefinitionCiTriggerOverridePtrType) ToBuildDefinitionCiTriggerOverridePtrOutputWithContext(ctx context.Context) BuildDefinitionCiTriggerOverridePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionCiTriggerOverridePtrOutput)
}

type BuildDefinitionCiTriggerOverrideOutput struct{ *pulumi.OutputState }

func (BuildDefinitionCiTriggerOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDefinitionCiTriggerOverride)(nil)).Elem()
}

func (o BuildDefinitionCiTriggerOverrideOutput) ToBuildDefinitionCiTriggerOverrideOutput() BuildDefinitionCiTriggerOverrideOutput {
	return o
}

func (o BuildDefinitionCiTriggerOverrideOutput) ToBuildDefinitionCiTriggerOverrideOutputWithContext(ctx context.Context) BuildDefinitionCiTriggerOverrideOutput {
	return o
}

func (o BuildDefinitionCiTriggerOverrideOutput) ToBuildDefinitionCiTriggerOverridePtrOutput() BuildDefinitionCiTriggerOverridePtrOutput {
	return o.ToBuildDefinitionCiTriggerOverridePtrOutputWithContext(context.Background())
}

func (o BuildDefinitionCiTriggerOverrideOutput) ToBuildDefinitionCiTriggerOverridePtrOutputWithContext(ctx context.Context) BuildDefinitionCiTriggerOverridePtrOutput {
	return o.ApplyT(func(v BuildDefinitionCiTriggerOverride) *BuildDefinitionCiTriggerOverride {
		return &v
	}).(BuildDefinitionCiTriggerOverridePtrOutput)
}

// If you set batch to true, when a pipeline is running, the system waits until the run is completed, then starts another run with all changes that have not yet been built. Defaults to `true`.
func (o BuildDefinitionCiTriggerOverrideOutput) Batch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BuildDefinitionCiTriggerOverride) *bool { return v.Batch }).(pulumi.BoolPtrOutput)
}

// The branches to include and exclude from the trigger.
func (o BuildDefinitionCiTriggerOverrideOutput) BranchFilters() BuildDefinitionCiTriggerOverrideBranchFilterArrayOutput {
	return o.ApplyT(func(v BuildDefinitionCiTriggerOverride) []BuildDefinitionCiTriggerOverrideBranchFilter {
		return v.BranchFilters
	}).(BuildDefinitionCiTriggerOverrideBranchFilterArrayOutput)
}

// The number of max builds per branch. Defaults to `1`.
func (o BuildDefinitionCiTriggerOverrideOutput) MaxConcurrentBuildsPerBranch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BuildDefinitionCiTriggerOverride) *int { return v.MaxConcurrentBuildsPerBranch }).(pulumi.IntPtrOutput)
}

// Specify file paths to include or exclude. Note that the wildcard syntax is different between branches/tags and file paths.
func (o BuildDefinitionCiTriggerOverrideOutput) PathFilters() BuildDefinitionCiTriggerOverridePathFilterArrayOutput {
	return o.ApplyT(func(v BuildDefinitionCiTriggerOverride) []BuildDefinitionCiTriggerOverridePathFilter {
		return v.PathFilters
	}).(BuildDefinitionCiTriggerOverridePathFilterArrayOutput)
}

// How often the external repository is polled. Defaults to `0`.
func (o BuildDefinitionCiTriggerOverrideOutput) PollingInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BuildDefinitionCiTriggerOverride) *int { return v.PollingInterval }).(pulumi.IntPtrOutput)
}

// This is the ID of the polling job that polls the external repository. Once the build definition is saved/updated, this value is set.
func (o BuildDefinitionCiTriggerOverrideOutput) PollingJobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildDefinitionCiTriggerOverride) *string { return v.PollingJobId }).(pulumi.StringPtrOutput)
}

type BuildDefinitionCiTriggerOverridePtrOutput struct{ *pulumi.OutputState }

func (BuildDefinitionCiTriggerOverridePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildDefinitionCiTriggerOverride)(nil)).Elem()
}

func (o BuildDefinitionCiTriggerOverridePtrOutput) ToBuildDefinitionCiTriggerOverridePtrOutput() BuildDefinitionCiTriggerOverridePtrOutput {
	return o
}

func (o BuildDefinitionCiTriggerOverridePtrOutput) ToBuildDefinitionCiTriggerOverridePtrOutputWithContext(ctx context.Context) BuildDefinitionCiTriggerOverridePtrOutput {
	return o
}

func (o BuildDefinitionCiTriggerOverridePtrOutput) Elem() BuildDefinitionCiTriggerOverrideOutput {
	return o.ApplyT(func(v *BuildDefinitionCiTriggerOverride) BuildDefinitionCiTriggerOverride { return *v }).(BuildDefinitionCiTriggerOverrideOutput)
}

// If you set batch to true, when a pipeline is running, the system waits until the run is completed, then starts another run with all changes that have not yet been built. Defaults to `true`.
func (o BuildDefinitionCiTriggerOverridePtrOutput) Batch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BuildDefinitionCiTriggerOverride) *bool {
		if v == nil {
			return nil
		}
		return v.Batch
	}).(pulumi.BoolPtrOutput)
}

// The branches to include and exclude from the trigger.
func (o BuildDefinitionCiTriggerOverridePtrOutput) BranchFilters() BuildDefinitionCiTriggerOverrideBranchFilterArrayOutput {
	return o.ApplyT(func(v *BuildDefinitionCiTriggerOverride) []BuildDefinitionCiTriggerOverrideBranchFilter {
		if v == nil {
			return nil
		}
		return v.BranchFilters
	}).(BuildDefinitionCiTriggerOverrideBranchFilterArrayOutput)
}

// The number of max builds per branch. Defaults to `1`.
func (o BuildDefinitionCiTriggerOverridePtrOutput) MaxConcurrentBuildsPerBranch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BuildDefinitionCiTriggerOverride) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentBuildsPerBranch
	}).(pulumi.IntPtrOutput)
}

// Specify file paths to include or exclude. Note that the wildcard syntax is different between branches/tags and file paths.
func (o BuildDefinitionCiTriggerOverridePtrOutput) PathFilters() BuildDefinitionCiTriggerOverridePathFilterArrayOutput {
	return o.ApplyT(func(v *BuildDefinitionCiTriggerOverride) []BuildDefinitionCiTriggerOverridePathFilter {
		if v == nil {
			return nil
		}
		return v.PathFilters
	}).(BuildDefinitionCiTriggerOverridePathFilterArrayOutput)
}

// How often the external repository is polled. Defaults to `0`.
func (o BuildDefinitionCiTriggerOverridePtrOutput) PollingInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BuildDefinitionCiTriggerOverride) *int {
		if v == nil {
			return nil
		}
		return v.PollingInterval
	}).(pulumi.IntPtrOutput)
}

// This is the ID of the polling job that polls the external repository. Once the build definition is saved/updated, this value is set.
func (o BuildDefinitionCiTriggerOverridePtrOutput) PollingJobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildDefinitionCiTriggerOverride) *string {
		if v == nil {
			return nil
		}
		return v.PollingJobId
	}).(pulumi.StringPtrOutput)
}

type BuildDefinitionCiTriggerOverrideBranchFilter struct {
	// List of branch patterns to exclude.
	Excludes []string `pulumi:"excludes"`
	// List of branch patterns to include.
	Includes []string `pulumi:"includes"`
}

// BuildDefinitionCiTriggerOverrideBranchFilterInput is an input type that accepts BuildDefinitionCiTriggerOverrideBranchFilterArgs and BuildDefinitionCiTriggerOverrideBranchFilterOutput values.
// You can construct a concrete instance of `BuildDefinitionCiTriggerOverrideBranchFilterInput` via:
//
//          BuildDefinitionCiTriggerOverrideBranchFilterArgs{...}
type BuildDefinitionCiTriggerOverrideBranchFilterInput interface {
	pulumi.Input

	ToBuildDefinitionCiTriggerOverrideBranchFilterOutput() BuildDefinitionCiTriggerOverrideBranchFilterOutput
	ToBuildDefinitionCiTriggerOverrideBranchFilterOutputWithContext(context.Context) BuildDefinitionCiTriggerOverrideBranchFilterOutput
}

type BuildDefinitionCiTriggerOverrideBranchFilterArgs struct {
	// List of branch patterns to exclude.
	Excludes pulumi.StringArrayInput `pulumi:"excludes"`
	// List of branch patterns to include.
	Includes pulumi.StringArrayInput `pulumi:"includes"`
}

func (BuildDefinitionCiTriggerOverrideBranchFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDefinitionCiTriggerOverrideBranchFilter)(nil)).Elem()
}

func (i BuildDefinitionCiTriggerOverrideBranchFilterArgs) ToBuildDefinitionCiTriggerOverrideBranchFilterOutput() BuildDefinitionCiTriggerOverrideBranchFilterOutput {
	return i.ToBuildDefinitionCiTriggerOverrideBranchFilterOutputWithContext(context.Background())
}

func (i BuildDefinitionCiTriggerOverrideBranchFilterArgs) ToBuildDefinitionCiTriggerOverrideBranchFilterOutputWithContext(ctx context.Context) BuildDefinitionCiTriggerOverrideBranchFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionCiTriggerOverrideBranchFilterOutput)
}

// BuildDefinitionCiTriggerOverrideBranchFilterArrayInput is an input type that accepts BuildDefinitionCiTriggerOverrideBranchFilterArray and BuildDefinitionCiTriggerOverrideBranchFilterArrayOutput values.
// You can construct a concrete instance of `BuildDefinitionCiTriggerOverrideBranchFilterArrayInput` via:
//
//          BuildDefinitionCiTriggerOverrideBranchFilterArray{ BuildDefinitionCiTriggerOverrideBranchFilterArgs{...} }
type BuildDefinitionCiTriggerOverrideBranchFilterArrayInput interface {
	pulumi.Input

	ToBuildDefinitionCiTriggerOverrideBranchFilterArrayOutput() BuildDefinitionCiTriggerOverrideBranchFilterArrayOutput
	ToBuildDefinitionCiTriggerOverrideBranchFilterArrayOutputWithContext(context.Context) BuildDefinitionCiTriggerOverrideBranchFilterArrayOutput
}

type BuildDefinitionCiTriggerOverrideBranchFilterArray []BuildDefinitionCiTriggerOverrideBranchFilterInput

func (BuildDefinitionCiTriggerOverrideBranchFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuildDefinitionCiTriggerOverrideBranchFilter)(nil)).Elem()
}

func (i BuildDefinitionCiTriggerOverrideBranchFilterArray) ToBuildDefinitionCiTriggerOverrideBranchFilterArrayOutput() BuildDefinitionCiTriggerOverrideBranchFilterArrayOutput {
	return i.ToBuildDefinitionCiTriggerOverrideBranchFilterArrayOutputWithContext(context.Background())
}

func (i BuildDefinitionCiTriggerOverrideBranchFilterArray) ToBuildDefinitionCiTriggerOverrideBranchFilterArrayOutputWithContext(ctx context.Context) BuildDefinitionCiTriggerOverrideBranchFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionCiTriggerOverrideBranchFilterArrayOutput)
}

type BuildDefinitionCiTriggerOverrideBranchFilterOutput struct{ *pulumi.OutputState }

func (BuildDefinitionCiTriggerOverrideBranchFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDefinitionCiTriggerOverrideBranchFilter)(nil)).Elem()
}

func (o BuildDefinitionCiTriggerOverrideBranchFilterOutput) ToBuildDefinitionCiTriggerOverrideBranchFilterOutput() BuildDefinitionCiTriggerOverrideBranchFilterOutput {
	return o
}

func (o BuildDefinitionCiTriggerOverrideBranchFilterOutput) ToBuildDefinitionCiTriggerOverrideBranchFilterOutputWithContext(ctx context.Context) BuildDefinitionCiTriggerOverrideBranchFilterOutput {
	return o
}

// List of branch patterns to exclude.
func (o BuildDefinitionCiTriggerOverrideBranchFilterOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildDefinitionCiTriggerOverrideBranchFilter) []string { return v.Excludes }).(pulumi.StringArrayOutput)
}

// List of branch patterns to include.
func (o BuildDefinitionCiTriggerOverrideBranchFilterOutput) Includes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildDefinitionCiTriggerOverrideBranchFilter) []string { return v.Includes }).(pulumi.StringArrayOutput)
}

type BuildDefinitionCiTriggerOverrideBranchFilterArrayOutput struct{ *pulumi.OutputState }

func (BuildDefinitionCiTriggerOverrideBranchFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuildDefinitionCiTriggerOverrideBranchFilter)(nil)).Elem()
}

func (o BuildDefinitionCiTriggerOverrideBranchFilterArrayOutput) ToBuildDefinitionCiTriggerOverrideBranchFilterArrayOutput() BuildDefinitionCiTriggerOverrideBranchFilterArrayOutput {
	return o
}

func (o BuildDefinitionCiTriggerOverrideBranchFilterArrayOutput) ToBuildDefinitionCiTriggerOverrideBranchFilterArrayOutputWithContext(ctx context.Context) BuildDefinitionCiTriggerOverrideBranchFilterArrayOutput {
	return o
}

func (o BuildDefinitionCiTriggerOverrideBranchFilterArrayOutput) Index(i pulumi.IntInput) BuildDefinitionCiTriggerOverrideBranchFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BuildDefinitionCiTriggerOverrideBranchFilter {
		return vs[0].([]BuildDefinitionCiTriggerOverrideBranchFilter)[vs[1].(int)]
	}).(BuildDefinitionCiTriggerOverrideBranchFilterOutput)
}

type BuildDefinitionCiTriggerOverridePathFilter struct {
	// List of branch patterns to exclude.
	Excludes []string `pulumi:"excludes"`
	// List of branch patterns to include.
	Includes []string `pulumi:"includes"`
}

// BuildDefinitionCiTriggerOverridePathFilterInput is an input type that accepts BuildDefinitionCiTriggerOverridePathFilterArgs and BuildDefinitionCiTriggerOverridePathFilterOutput values.
// You can construct a concrete instance of `BuildDefinitionCiTriggerOverridePathFilterInput` via:
//
//          BuildDefinitionCiTriggerOverridePathFilterArgs{...}
type BuildDefinitionCiTriggerOverridePathFilterInput interface {
	pulumi.Input

	ToBuildDefinitionCiTriggerOverridePathFilterOutput() BuildDefinitionCiTriggerOverridePathFilterOutput
	ToBuildDefinitionCiTriggerOverridePathFilterOutputWithContext(context.Context) BuildDefinitionCiTriggerOverridePathFilterOutput
}

type BuildDefinitionCiTriggerOverridePathFilterArgs struct {
	// List of branch patterns to exclude.
	Excludes pulumi.StringArrayInput `pulumi:"excludes"`
	// List of branch patterns to include.
	Includes pulumi.StringArrayInput `pulumi:"includes"`
}

func (BuildDefinitionCiTriggerOverridePathFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDefinitionCiTriggerOverridePathFilter)(nil)).Elem()
}

func (i BuildDefinitionCiTriggerOverridePathFilterArgs) ToBuildDefinitionCiTriggerOverridePathFilterOutput() BuildDefinitionCiTriggerOverridePathFilterOutput {
	return i.ToBuildDefinitionCiTriggerOverridePathFilterOutputWithContext(context.Background())
}

func (i BuildDefinitionCiTriggerOverridePathFilterArgs) ToBuildDefinitionCiTriggerOverridePathFilterOutputWithContext(ctx context.Context) BuildDefinitionCiTriggerOverridePathFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionCiTriggerOverridePathFilterOutput)
}

// BuildDefinitionCiTriggerOverridePathFilterArrayInput is an input type that accepts BuildDefinitionCiTriggerOverridePathFilterArray and BuildDefinitionCiTriggerOverridePathFilterArrayOutput values.
// You can construct a concrete instance of `BuildDefinitionCiTriggerOverridePathFilterArrayInput` via:
//
//          BuildDefinitionCiTriggerOverridePathFilterArray{ BuildDefinitionCiTriggerOverridePathFilterArgs{...} }
type BuildDefinitionCiTriggerOverridePathFilterArrayInput interface {
	pulumi.Input

	ToBuildDefinitionCiTriggerOverridePathFilterArrayOutput() BuildDefinitionCiTriggerOverridePathFilterArrayOutput
	ToBuildDefinitionCiTriggerOverridePathFilterArrayOutputWithContext(context.Context) BuildDefinitionCiTriggerOverridePathFilterArrayOutput
}

type BuildDefinitionCiTriggerOverridePathFilterArray []BuildDefinitionCiTriggerOverridePathFilterInput

func (BuildDefinitionCiTriggerOverridePathFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuildDefinitionCiTriggerOverridePathFilter)(nil)).Elem()
}

func (i BuildDefinitionCiTriggerOverridePathFilterArray) ToBuildDefinitionCiTriggerOverridePathFilterArrayOutput() BuildDefinitionCiTriggerOverridePathFilterArrayOutput {
	return i.ToBuildDefinitionCiTriggerOverridePathFilterArrayOutputWithContext(context.Background())
}

func (i BuildDefinitionCiTriggerOverridePathFilterArray) ToBuildDefinitionCiTriggerOverridePathFilterArrayOutputWithContext(ctx context.Context) BuildDefinitionCiTriggerOverridePathFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionCiTriggerOverridePathFilterArrayOutput)
}

type BuildDefinitionCiTriggerOverridePathFilterOutput struct{ *pulumi.OutputState }

func (BuildDefinitionCiTriggerOverridePathFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDefinitionCiTriggerOverridePathFilter)(nil)).Elem()
}

func (o BuildDefinitionCiTriggerOverridePathFilterOutput) ToBuildDefinitionCiTriggerOverridePathFilterOutput() BuildDefinitionCiTriggerOverridePathFilterOutput {
	return o
}

func (o BuildDefinitionCiTriggerOverridePathFilterOutput) ToBuildDefinitionCiTriggerOverridePathFilterOutputWithContext(ctx context.Context) BuildDefinitionCiTriggerOverridePathFilterOutput {
	return o
}

// List of branch patterns to exclude.
func (o BuildDefinitionCiTriggerOverridePathFilterOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildDefinitionCiTriggerOverridePathFilter) []string { return v.Excludes }).(pulumi.StringArrayOutput)
}

// List of branch patterns to include.
func (o BuildDefinitionCiTriggerOverridePathFilterOutput) Includes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildDefinitionCiTriggerOverridePathFilter) []string { return v.Includes }).(pulumi.StringArrayOutput)
}

type BuildDefinitionCiTriggerOverridePathFilterArrayOutput struct{ *pulumi.OutputState }

func (BuildDefinitionCiTriggerOverridePathFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuildDefinitionCiTriggerOverridePathFilter)(nil)).Elem()
}

func (o BuildDefinitionCiTriggerOverridePathFilterArrayOutput) ToBuildDefinitionCiTriggerOverridePathFilterArrayOutput() BuildDefinitionCiTriggerOverridePathFilterArrayOutput {
	return o
}

func (o BuildDefinitionCiTriggerOverridePathFilterArrayOutput) ToBuildDefinitionCiTriggerOverridePathFilterArrayOutputWithContext(ctx context.Context) BuildDefinitionCiTriggerOverridePathFilterArrayOutput {
	return o
}

func (o BuildDefinitionCiTriggerOverridePathFilterArrayOutput) Index(i pulumi.IntInput) BuildDefinitionCiTriggerOverridePathFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BuildDefinitionCiTriggerOverridePathFilter {
		return vs[0].([]BuildDefinitionCiTriggerOverridePathFilter)[vs[1].(int)]
	}).(BuildDefinitionCiTriggerOverridePathFilterOutput)
}

type BuildDefinitionPullRequestTrigger struct {
	CommentRequired *string `pulumi:"commentRequired"`
	// Set permissions for Forked repositories.
	Forks         BuildDefinitionPullRequestTriggerForks `pulumi:"forks"`
	InitialBranch *string                                `pulumi:"initialBranch"`
	// Override the azure-pipeline file and use this configuration for all builds.
	Override *BuildDefinitionPullRequestTriggerOverride `pulumi:"override"`
	// Use the azure-pipeline file for the build configuration. Defaults to `false`.
	UseYaml *bool `pulumi:"useYaml"`
}

// BuildDefinitionPullRequestTriggerInput is an input type that accepts BuildDefinitionPullRequestTriggerArgs and BuildDefinitionPullRequestTriggerOutput values.
// You can construct a concrete instance of `BuildDefinitionPullRequestTriggerInput` via:
//
//          BuildDefinitionPullRequestTriggerArgs{...}
type BuildDefinitionPullRequestTriggerInput interface {
	pulumi.Input

	ToBuildDefinitionPullRequestTriggerOutput() BuildDefinitionPullRequestTriggerOutput
	ToBuildDefinitionPullRequestTriggerOutputWithContext(context.Context) BuildDefinitionPullRequestTriggerOutput
}

type BuildDefinitionPullRequestTriggerArgs struct {
	CommentRequired pulumi.StringPtrInput `pulumi:"commentRequired"`
	// Set permissions for Forked repositories.
	Forks         BuildDefinitionPullRequestTriggerForksInput `pulumi:"forks"`
	InitialBranch pulumi.StringPtrInput                       `pulumi:"initialBranch"`
	// Override the azure-pipeline file and use this configuration for all builds.
	Override BuildDefinitionPullRequestTriggerOverridePtrInput `pulumi:"override"`
	// Use the azure-pipeline file for the build configuration. Defaults to `false`.
	UseYaml pulumi.BoolPtrInput `pulumi:"useYaml"`
}

func (BuildDefinitionPullRequestTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDefinitionPullRequestTrigger)(nil)).Elem()
}

func (i BuildDefinitionPullRequestTriggerArgs) ToBuildDefinitionPullRequestTriggerOutput() BuildDefinitionPullRequestTriggerOutput {
	return i.ToBuildDefinitionPullRequestTriggerOutputWithContext(context.Background())
}

func (i BuildDefinitionPullRequestTriggerArgs) ToBuildDefinitionPullRequestTriggerOutputWithContext(ctx context.Context) BuildDefinitionPullRequestTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionPullRequestTriggerOutput)
}

func (i BuildDefinitionPullRequestTriggerArgs) ToBuildDefinitionPullRequestTriggerPtrOutput() BuildDefinitionPullRequestTriggerPtrOutput {
	return i.ToBuildDefinitionPullRequestTriggerPtrOutputWithContext(context.Background())
}

func (i BuildDefinitionPullRequestTriggerArgs) ToBuildDefinitionPullRequestTriggerPtrOutputWithContext(ctx context.Context) BuildDefinitionPullRequestTriggerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionPullRequestTriggerOutput).ToBuildDefinitionPullRequestTriggerPtrOutputWithContext(ctx)
}

// BuildDefinitionPullRequestTriggerPtrInput is an input type that accepts BuildDefinitionPullRequestTriggerArgs, BuildDefinitionPullRequestTriggerPtr and BuildDefinitionPullRequestTriggerPtrOutput values.
// You can construct a concrete instance of `BuildDefinitionPullRequestTriggerPtrInput` via:
//
//          BuildDefinitionPullRequestTriggerArgs{...}
//
//  or:
//
//          nil
type BuildDefinitionPullRequestTriggerPtrInput interface {
	pulumi.Input

	ToBuildDefinitionPullRequestTriggerPtrOutput() BuildDefinitionPullRequestTriggerPtrOutput
	ToBuildDefinitionPullRequestTriggerPtrOutputWithContext(context.Context) BuildDefinitionPullRequestTriggerPtrOutput
}

type buildDefinitionPullRequestTriggerPtrType BuildDefinitionPullRequestTriggerArgs

func BuildDefinitionPullRequestTriggerPtr(v *BuildDefinitionPullRequestTriggerArgs) BuildDefinitionPullRequestTriggerPtrInput {
	return (*buildDefinitionPullRequestTriggerPtrType)(v)
}

func (*buildDefinitionPullRequestTriggerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildDefinitionPullRequestTrigger)(nil)).Elem()
}

func (i *buildDefinitionPullRequestTriggerPtrType) ToBuildDefinitionPullRequestTriggerPtrOutput() BuildDefinitionPullRequestTriggerPtrOutput {
	return i.ToBuildDefinitionPullRequestTriggerPtrOutputWithContext(context.Background())
}

func (i *buildDefinitionPullRequestTriggerPtrType) ToBuildDefinitionPullRequestTriggerPtrOutputWithContext(ctx context.Context) BuildDefinitionPullRequestTriggerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionPullRequestTriggerPtrOutput)
}

type BuildDefinitionPullRequestTriggerOutput struct{ *pulumi.OutputState }

func (BuildDefinitionPullRequestTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDefinitionPullRequestTrigger)(nil)).Elem()
}

func (o BuildDefinitionPullRequestTriggerOutput) ToBuildDefinitionPullRequestTriggerOutput() BuildDefinitionPullRequestTriggerOutput {
	return o
}

func (o BuildDefinitionPullRequestTriggerOutput) ToBuildDefinitionPullRequestTriggerOutputWithContext(ctx context.Context) BuildDefinitionPullRequestTriggerOutput {
	return o
}

func (o BuildDefinitionPullRequestTriggerOutput) ToBuildDefinitionPullRequestTriggerPtrOutput() BuildDefinitionPullRequestTriggerPtrOutput {
	return o.ToBuildDefinitionPullRequestTriggerPtrOutputWithContext(context.Background())
}

func (o BuildDefinitionPullRequestTriggerOutput) ToBuildDefinitionPullRequestTriggerPtrOutputWithContext(ctx context.Context) BuildDefinitionPullRequestTriggerPtrOutput {
	return o.ApplyT(func(v BuildDefinitionPullRequestTrigger) *BuildDefinitionPullRequestTrigger {
		return &v
	}).(BuildDefinitionPullRequestTriggerPtrOutput)
}
func (o BuildDefinitionPullRequestTriggerOutput) CommentRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildDefinitionPullRequestTrigger) *string { return v.CommentRequired }).(pulumi.StringPtrOutput)
}

// Set permissions for Forked repositories.
func (o BuildDefinitionPullRequestTriggerOutput) Forks() BuildDefinitionPullRequestTriggerForksOutput {
	return o.ApplyT(func(v BuildDefinitionPullRequestTrigger) BuildDefinitionPullRequestTriggerForks { return v.Forks }).(BuildDefinitionPullRequestTriggerForksOutput)
}

func (o BuildDefinitionPullRequestTriggerOutput) InitialBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildDefinitionPullRequestTrigger) *string { return v.InitialBranch }).(pulumi.StringPtrOutput)
}

// Override the azure-pipeline file and use this configuration for all builds.
func (o BuildDefinitionPullRequestTriggerOutput) Override() BuildDefinitionPullRequestTriggerOverridePtrOutput {
	return o.ApplyT(func(v BuildDefinitionPullRequestTrigger) *BuildDefinitionPullRequestTriggerOverride {
		return v.Override
	}).(BuildDefinitionPullRequestTriggerOverridePtrOutput)
}

// Use the azure-pipeline file for the build configuration. Defaults to `false`.
func (o BuildDefinitionPullRequestTriggerOutput) UseYaml() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BuildDefinitionPullRequestTrigger) *bool { return v.UseYaml }).(pulumi.BoolPtrOutput)
}

type BuildDefinitionPullRequestTriggerPtrOutput struct{ *pulumi.OutputState }

func (BuildDefinitionPullRequestTriggerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildDefinitionPullRequestTrigger)(nil)).Elem()
}

func (o BuildDefinitionPullRequestTriggerPtrOutput) ToBuildDefinitionPullRequestTriggerPtrOutput() BuildDefinitionPullRequestTriggerPtrOutput {
	return o
}

func (o BuildDefinitionPullRequestTriggerPtrOutput) ToBuildDefinitionPullRequestTriggerPtrOutputWithContext(ctx context.Context) BuildDefinitionPullRequestTriggerPtrOutput {
	return o
}

func (o BuildDefinitionPullRequestTriggerPtrOutput) Elem() BuildDefinitionPullRequestTriggerOutput {
	return o.ApplyT(func(v *BuildDefinitionPullRequestTrigger) BuildDefinitionPullRequestTrigger { return *v }).(BuildDefinitionPullRequestTriggerOutput)
}

func (o BuildDefinitionPullRequestTriggerPtrOutput) CommentRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildDefinitionPullRequestTrigger) *string {
		if v == nil {
			return nil
		}
		return v.CommentRequired
	}).(pulumi.StringPtrOutput)
}

// Set permissions for Forked repositories.
func (o BuildDefinitionPullRequestTriggerPtrOutput) Forks() BuildDefinitionPullRequestTriggerForksPtrOutput {
	return o.ApplyT(func(v *BuildDefinitionPullRequestTrigger) *BuildDefinitionPullRequestTriggerForks {
		if v == nil {
			return nil
		}
		return &v.Forks
	}).(BuildDefinitionPullRequestTriggerForksPtrOutput)
}

func (o BuildDefinitionPullRequestTriggerPtrOutput) InitialBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildDefinitionPullRequestTrigger) *string {
		if v == nil {
			return nil
		}
		return v.InitialBranch
	}).(pulumi.StringPtrOutput)
}

// Override the azure-pipeline file and use this configuration for all builds.
func (o BuildDefinitionPullRequestTriggerPtrOutput) Override() BuildDefinitionPullRequestTriggerOverridePtrOutput {
	return o.ApplyT(func(v *BuildDefinitionPullRequestTrigger) *BuildDefinitionPullRequestTriggerOverride {
		if v == nil {
			return nil
		}
		return v.Override
	}).(BuildDefinitionPullRequestTriggerOverridePtrOutput)
}

// Use the azure-pipeline file for the build configuration. Defaults to `false`.
func (o BuildDefinitionPullRequestTriggerPtrOutput) UseYaml() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BuildDefinitionPullRequestTrigger) *bool {
		if v == nil {
			return nil
		}
		return v.UseYaml
	}).(pulumi.BoolPtrOutput)
}

type BuildDefinitionPullRequestTriggerForks struct {
	// Build pull requests form forms of this repository.
	Enabled bool `pulumi:"enabled"`
	// Make secrets available to builds of forks.
	ShareSecrets bool `pulumi:"shareSecrets"`
}

// BuildDefinitionPullRequestTriggerForksInput is an input type that accepts BuildDefinitionPullRequestTriggerForksArgs and BuildDefinitionPullRequestTriggerForksOutput values.
// You can construct a concrete instance of `BuildDefinitionPullRequestTriggerForksInput` via:
//
//          BuildDefinitionPullRequestTriggerForksArgs{...}
type BuildDefinitionPullRequestTriggerForksInput interface {
	pulumi.Input

	ToBuildDefinitionPullRequestTriggerForksOutput() BuildDefinitionPullRequestTriggerForksOutput
	ToBuildDefinitionPullRequestTriggerForksOutputWithContext(context.Context) BuildDefinitionPullRequestTriggerForksOutput
}

type BuildDefinitionPullRequestTriggerForksArgs struct {
	// Build pull requests form forms of this repository.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Make secrets available to builds of forks.
	ShareSecrets pulumi.BoolInput `pulumi:"shareSecrets"`
}

func (BuildDefinitionPullRequestTriggerForksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDefinitionPullRequestTriggerForks)(nil)).Elem()
}

func (i BuildDefinitionPullRequestTriggerForksArgs) ToBuildDefinitionPullRequestTriggerForksOutput() BuildDefinitionPullRequestTriggerForksOutput {
	return i.ToBuildDefinitionPullRequestTriggerForksOutputWithContext(context.Background())
}

func (i BuildDefinitionPullRequestTriggerForksArgs) ToBuildDefinitionPullRequestTriggerForksOutputWithContext(ctx context.Context) BuildDefinitionPullRequestTriggerForksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionPullRequestTriggerForksOutput)
}

func (i BuildDefinitionPullRequestTriggerForksArgs) ToBuildDefinitionPullRequestTriggerForksPtrOutput() BuildDefinitionPullRequestTriggerForksPtrOutput {
	return i.ToBuildDefinitionPullRequestTriggerForksPtrOutputWithContext(context.Background())
}

func (i BuildDefinitionPullRequestTriggerForksArgs) ToBuildDefinitionPullRequestTriggerForksPtrOutputWithContext(ctx context.Context) BuildDefinitionPullRequestTriggerForksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionPullRequestTriggerForksOutput).ToBuildDefinitionPullRequestTriggerForksPtrOutputWithContext(ctx)
}

// BuildDefinitionPullRequestTriggerForksPtrInput is an input type that accepts BuildDefinitionPullRequestTriggerForksArgs, BuildDefinitionPullRequestTriggerForksPtr and BuildDefinitionPullRequestTriggerForksPtrOutput values.
// You can construct a concrete instance of `BuildDefinitionPullRequestTriggerForksPtrInput` via:
//
//          BuildDefinitionPullRequestTriggerForksArgs{...}
//
//  or:
//
//          nil
type BuildDefinitionPullRequestTriggerForksPtrInput interface {
	pulumi.Input

	ToBuildDefinitionPullRequestTriggerForksPtrOutput() BuildDefinitionPullRequestTriggerForksPtrOutput
	ToBuildDefinitionPullRequestTriggerForksPtrOutputWithContext(context.Context) BuildDefinitionPullRequestTriggerForksPtrOutput
}

type buildDefinitionPullRequestTriggerForksPtrType BuildDefinitionPullRequestTriggerForksArgs

func BuildDefinitionPullRequestTriggerForksPtr(v *BuildDefinitionPullRequestTriggerForksArgs) BuildDefinitionPullRequestTriggerForksPtrInput {
	return (*buildDefinitionPullRequestTriggerForksPtrType)(v)
}

func (*buildDefinitionPullRequestTriggerForksPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildDefinitionPullRequestTriggerForks)(nil)).Elem()
}

func (i *buildDefinitionPullRequestTriggerForksPtrType) ToBuildDefinitionPullRequestTriggerForksPtrOutput() BuildDefinitionPullRequestTriggerForksPtrOutput {
	return i.ToBuildDefinitionPullRequestTriggerForksPtrOutputWithContext(context.Background())
}

func (i *buildDefinitionPullRequestTriggerForksPtrType) ToBuildDefinitionPullRequestTriggerForksPtrOutputWithContext(ctx context.Context) BuildDefinitionPullRequestTriggerForksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionPullRequestTriggerForksPtrOutput)
}

type BuildDefinitionPullRequestTriggerForksOutput struct{ *pulumi.OutputState }

func (BuildDefinitionPullRequestTriggerForksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDefinitionPullRequestTriggerForks)(nil)).Elem()
}

func (o BuildDefinitionPullRequestTriggerForksOutput) ToBuildDefinitionPullRequestTriggerForksOutput() BuildDefinitionPullRequestTriggerForksOutput {
	return o
}

func (o BuildDefinitionPullRequestTriggerForksOutput) ToBuildDefinitionPullRequestTriggerForksOutputWithContext(ctx context.Context) BuildDefinitionPullRequestTriggerForksOutput {
	return o
}

func (o BuildDefinitionPullRequestTriggerForksOutput) ToBuildDefinitionPullRequestTriggerForksPtrOutput() BuildDefinitionPullRequestTriggerForksPtrOutput {
	return o.ToBuildDefinitionPullRequestTriggerForksPtrOutputWithContext(context.Background())
}

func (o BuildDefinitionPullRequestTriggerForksOutput) ToBuildDefinitionPullRequestTriggerForksPtrOutputWithContext(ctx context.Context) BuildDefinitionPullRequestTriggerForksPtrOutput {
	return o.ApplyT(func(v BuildDefinitionPullRequestTriggerForks) *BuildDefinitionPullRequestTriggerForks {
		return &v
	}).(BuildDefinitionPullRequestTriggerForksPtrOutput)
}

// Build pull requests form forms of this repository.
func (o BuildDefinitionPullRequestTriggerForksOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v BuildDefinitionPullRequestTriggerForks) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Make secrets available to builds of forks.
func (o BuildDefinitionPullRequestTriggerForksOutput) ShareSecrets() pulumi.BoolOutput {
	return o.ApplyT(func(v BuildDefinitionPullRequestTriggerForks) bool { return v.ShareSecrets }).(pulumi.BoolOutput)
}

type BuildDefinitionPullRequestTriggerForksPtrOutput struct{ *pulumi.OutputState }

func (BuildDefinitionPullRequestTriggerForksPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildDefinitionPullRequestTriggerForks)(nil)).Elem()
}

func (o BuildDefinitionPullRequestTriggerForksPtrOutput) ToBuildDefinitionPullRequestTriggerForksPtrOutput() BuildDefinitionPullRequestTriggerForksPtrOutput {
	return o
}

func (o BuildDefinitionPullRequestTriggerForksPtrOutput) ToBuildDefinitionPullRequestTriggerForksPtrOutputWithContext(ctx context.Context) BuildDefinitionPullRequestTriggerForksPtrOutput {
	return o
}

func (o BuildDefinitionPullRequestTriggerForksPtrOutput) Elem() BuildDefinitionPullRequestTriggerForksOutput {
	return o.ApplyT(func(v *BuildDefinitionPullRequestTriggerForks) BuildDefinitionPullRequestTriggerForks { return *v }).(BuildDefinitionPullRequestTriggerForksOutput)
}

// Build pull requests form forms of this repository.
func (o BuildDefinitionPullRequestTriggerForksPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BuildDefinitionPullRequestTriggerForks) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Make secrets available to builds of forks.
func (o BuildDefinitionPullRequestTriggerForksPtrOutput) ShareSecrets() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BuildDefinitionPullRequestTriggerForks) *bool {
		if v == nil {
			return nil
		}
		return &v.ShareSecrets
	}).(pulumi.BoolPtrOutput)
}

type BuildDefinitionPullRequestTriggerOverride struct {
	// . Defaults to `true`.
	AutoCancel *bool `pulumi:"autoCancel"`
	// The branches to include and exclude from the trigger.
	BranchFilters []BuildDefinitionPullRequestTriggerOverrideBranchFilter `pulumi:"branchFilters"`
	// Specify file paths to include or exclude. Note that the wildcard syntax is different between branches/tags and file paths.
	PathFilters []BuildDefinitionPullRequestTriggerOverridePathFilter `pulumi:"pathFilters"`
}

// BuildDefinitionPullRequestTriggerOverrideInput is an input type that accepts BuildDefinitionPullRequestTriggerOverrideArgs and BuildDefinitionPullRequestTriggerOverrideOutput values.
// You can construct a concrete instance of `BuildDefinitionPullRequestTriggerOverrideInput` via:
//
//          BuildDefinitionPullRequestTriggerOverrideArgs{...}
type BuildDefinitionPullRequestTriggerOverrideInput interface {
	pulumi.Input

	ToBuildDefinitionPullRequestTriggerOverrideOutput() BuildDefinitionPullRequestTriggerOverrideOutput
	ToBuildDefinitionPullRequestTriggerOverrideOutputWithContext(context.Context) BuildDefinitionPullRequestTriggerOverrideOutput
}

type BuildDefinitionPullRequestTriggerOverrideArgs struct {
	// . Defaults to `true`.
	AutoCancel pulumi.BoolPtrInput `pulumi:"autoCancel"`
	// The branches to include and exclude from the trigger.
	BranchFilters BuildDefinitionPullRequestTriggerOverrideBranchFilterArrayInput `pulumi:"branchFilters"`
	// Specify file paths to include or exclude. Note that the wildcard syntax is different between branches/tags and file paths.
	PathFilters BuildDefinitionPullRequestTriggerOverridePathFilterArrayInput `pulumi:"pathFilters"`
}

func (BuildDefinitionPullRequestTriggerOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDefinitionPullRequestTriggerOverride)(nil)).Elem()
}

func (i BuildDefinitionPullRequestTriggerOverrideArgs) ToBuildDefinitionPullRequestTriggerOverrideOutput() BuildDefinitionPullRequestTriggerOverrideOutput {
	return i.ToBuildDefinitionPullRequestTriggerOverrideOutputWithContext(context.Background())
}

func (i BuildDefinitionPullRequestTriggerOverrideArgs) ToBuildDefinitionPullRequestTriggerOverrideOutputWithContext(ctx context.Context) BuildDefinitionPullRequestTriggerOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionPullRequestTriggerOverrideOutput)
}

func (i BuildDefinitionPullRequestTriggerOverrideArgs) ToBuildDefinitionPullRequestTriggerOverridePtrOutput() BuildDefinitionPullRequestTriggerOverridePtrOutput {
	return i.ToBuildDefinitionPullRequestTriggerOverridePtrOutputWithContext(context.Background())
}

func (i BuildDefinitionPullRequestTriggerOverrideArgs) ToBuildDefinitionPullRequestTriggerOverridePtrOutputWithContext(ctx context.Context) BuildDefinitionPullRequestTriggerOverridePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionPullRequestTriggerOverrideOutput).ToBuildDefinitionPullRequestTriggerOverridePtrOutputWithContext(ctx)
}

// BuildDefinitionPullRequestTriggerOverridePtrInput is an input type that accepts BuildDefinitionPullRequestTriggerOverrideArgs, BuildDefinitionPullRequestTriggerOverridePtr and BuildDefinitionPullRequestTriggerOverridePtrOutput values.
// You can construct a concrete instance of `BuildDefinitionPullRequestTriggerOverridePtrInput` via:
//
//          BuildDefinitionPullRequestTriggerOverrideArgs{...}
//
//  or:
//
//          nil
type BuildDefinitionPullRequestTriggerOverridePtrInput interface {
	pulumi.Input

	ToBuildDefinitionPullRequestTriggerOverridePtrOutput() BuildDefinitionPullRequestTriggerOverridePtrOutput
	ToBuildDefinitionPullRequestTriggerOverridePtrOutputWithContext(context.Context) BuildDefinitionPullRequestTriggerOverridePtrOutput
}

type buildDefinitionPullRequestTriggerOverridePtrType BuildDefinitionPullRequestTriggerOverrideArgs

func BuildDefinitionPullRequestTriggerOverridePtr(v *BuildDefinitionPullRequestTriggerOverrideArgs) BuildDefinitionPullRequestTriggerOverridePtrInput {
	return (*buildDefinitionPullRequestTriggerOverridePtrType)(v)
}

func (*buildDefinitionPullRequestTriggerOverridePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildDefinitionPullRequestTriggerOverride)(nil)).Elem()
}

func (i *buildDefinitionPullRequestTriggerOverridePtrType) ToBuildDefinitionPullRequestTriggerOverridePtrOutput() BuildDefinitionPullRequestTriggerOverridePtrOutput {
	return i.ToBuildDefinitionPullRequestTriggerOverridePtrOutputWithContext(context.Background())
}

func (i *buildDefinitionPullRequestTriggerOverridePtrType) ToBuildDefinitionPullRequestTriggerOverridePtrOutputWithContext(ctx context.Context) BuildDefinitionPullRequestTriggerOverridePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionPullRequestTriggerOverridePtrOutput)
}

type BuildDefinitionPullRequestTriggerOverrideOutput struct{ *pulumi.OutputState }

func (BuildDefinitionPullRequestTriggerOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDefinitionPullRequestTriggerOverride)(nil)).Elem()
}

func (o BuildDefinitionPullRequestTriggerOverrideOutput) ToBuildDefinitionPullRequestTriggerOverrideOutput() BuildDefinitionPullRequestTriggerOverrideOutput {
	return o
}

func (o BuildDefinitionPullRequestTriggerOverrideOutput) ToBuildDefinitionPullRequestTriggerOverrideOutputWithContext(ctx context.Context) BuildDefinitionPullRequestTriggerOverrideOutput {
	return o
}

func (o BuildDefinitionPullRequestTriggerOverrideOutput) ToBuildDefinitionPullRequestTriggerOverridePtrOutput() BuildDefinitionPullRequestTriggerOverridePtrOutput {
	return o.ToBuildDefinitionPullRequestTriggerOverridePtrOutputWithContext(context.Background())
}

func (o BuildDefinitionPullRequestTriggerOverrideOutput) ToBuildDefinitionPullRequestTriggerOverridePtrOutputWithContext(ctx context.Context) BuildDefinitionPullRequestTriggerOverridePtrOutput {
	return o.ApplyT(func(v BuildDefinitionPullRequestTriggerOverride) *BuildDefinitionPullRequestTriggerOverride {
		return &v
	}).(BuildDefinitionPullRequestTriggerOverridePtrOutput)
}

// . Defaults to `true`.
func (o BuildDefinitionPullRequestTriggerOverrideOutput) AutoCancel() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BuildDefinitionPullRequestTriggerOverride) *bool { return v.AutoCancel }).(pulumi.BoolPtrOutput)
}

// The branches to include and exclude from the trigger.
func (o BuildDefinitionPullRequestTriggerOverrideOutput) BranchFilters() BuildDefinitionPullRequestTriggerOverrideBranchFilterArrayOutput {
	return o.ApplyT(func(v BuildDefinitionPullRequestTriggerOverride) []BuildDefinitionPullRequestTriggerOverrideBranchFilter {
		return v.BranchFilters
	}).(BuildDefinitionPullRequestTriggerOverrideBranchFilterArrayOutput)
}

// Specify file paths to include or exclude. Note that the wildcard syntax is different between branches/tags and file paths.
func (o BuildDefinitionPullRequestTriggerOverrideOutput) PathFilters() BuildDefinitionPullRequestTriggerOverridePathFilterArrayOutput {
	return o.ApplyT(func(v BuildDefinitionPullRequestTriggerOverride) []BuildDefinitionPullRequestTriggerOverridePathFilter {
		return v.PathFilters
	}).(BuildDefinitionPullRequestTriggerOverridePathFilterArrayOutput)
}

type BuildDefinitionPullRequestTriggerOverridePtrOutput struct{ *pulumi.OutputState }

func (BuildDefinitionPullRequestTriggerOverridePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildDefinitionPullRequestTriggerOverride)(nil)).Elem()
}

func (o BuildDefinitionPullRequestTriggerOverridePtrOutput) ToBuildDefinitionPullRequestTriggerOverridePtrOutput() BuildDefinitionPullRequestTriggerOverridePtrOutput {
	return o
}

func (o BuildDefinitionPullRequestTriggerOverridePtrOutput) ToBuildDefinitionPullRequestTriggerOverridePtrOutputWithContext(ctx context.Context) BuildDefinitionPullRequestTriggerOverridePtrOutput {
	return o
}

func (o BuildDefinitionPullRequestTriggerOverridePtrOutput) Elem() BuildDefinitionPullRequestTriggerOverrideOutput {
	return o.ApplyT(func(v *BuildDefinitionPullRequestTriggerOverride) BuildDefinitionPullRequestTriggerOverride {
		return *v
	}).(BuildDefinitionPullRequestTriggerOverrideOutput)
}

// . Defaults to `true`.
func (o BuildDefinitionPullRequestTriggerOverridePtrOutput) AutoCancel() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BuildDefinitionPullRequestTriggerOverride) *bool {
		if v == nil {
			return nil
		}
		return v.AutoCancel
	}).(pulumi.BoolPtrOutput)
}

// The branches to include and exclude from the trigger.
func (o BuildDefinitionPullRequestTriggerOverridePtrOutput) BranchFilters() BuildDefinitionPullRequestTriggerOverrideBranchFilterArrayOutput {
	return o.ApplyT(func(v *BuildDefinitionPullRequestTriggerOverride) []BuildDefinitionPullRequestTriggerOverrideBranchFilter {
		if v == nil {
			return nil
		}
		return v.BranchFilters
	}).(BuildDefinitionPullRequestTriggerOverrideBranchFilterArrayOutput)
}

// Specify file paths to include or exclude. Note that the wildcard syntax is different between branches/tags and file paths.
func (o BuildDefinitionPullRequestTriggerOverridePtrOutput) PathFilters() BuildDefinitionPullRequestTriggerOverridePathFilterArrayOutput {
	return o.ApplyT(func(v *BuildDefinitionPullRequestTriggerOverride) []BuildDefinitionPullRequestTriggerOverridePathFilter {
		if v == nil {
			return nil
		}
		return v.PathFilters
	}).(BuildDefinitionPullRequestTriggerOverridePathFilterArrayOutput)
}

type BuildDefinitionPullRequestTriggerOverrideBranchFilter struct {
	// List of branch patterns to exclude.
	Excludes []string `pulumi:"excludes"`
	// List of branch patterns to include.
	Includes []string `pulumi:"includes"`
}

// BuildDefinitionPullRequestTriggerOverrideBranchFilterInput is an input type that accepts BuildDefinitionPullRequestTriggerOverrideBranchFilterArgs and BuildDefinitionPullRequestTriggerOverrideBranchFilterOutput values.
// You can construct a concrete instance of `BuildDefinitionPullRequestTriggerOverrideBranchFilterInput` via:
//
//          BuildDefinitionPullRequestTriggerOverrideBranchFilterArgs{...}
type BuildDefinitionPullRequestTriggerOverrideBranchFilterInput interface {
	pulumi.Input

	ToBuildDefinitionPullRequestTriggerOverrideBranchFilterOutput() BuildDefinitionPullRequestTriggerOverrideBranchFilterOutput
	ToBuildDefinitionPullRequestTriggerOverrideBranchFilterOutputWithContext(context.Context) BuildDefinitionPullRequestTriggerOverrideBranchFilterOutput
}

type BuildDefinitionPullRequestTriggerOverrideBranchFilterArgs struct {
	// List of branch patterns to exclude.
	Excludes pulumi.StringArrayInput `pulumi:"excludes"`
	// List of branch patterns to include.
	Includes pulumi.StringArrayInput `pulumi:"includes"`
}

func (BuildDefinitionPullRequestTriggerOverrideBranchFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDefinitionPullRequestTriggerOverrideBranchFilter)(nil)).Elem()
}

func (i BuildDefinitionPullRequestTriggerOverrideBranchFilterArgs) ToBuildDefinitionPullRequestTriggerOverrideBranchFilterOutput() BuildDefinitionPullRequestTriggerOverrideBranchFilterOutput {
	return i.ToBuildDefinitionPullRequestTriggerOverrideBranchFilterOutputWithContext(context.Background())
}

func (i BuildDefinitionPullRequestTriggerOverrideBranchFilterArgs) ToBuildDefinitionPullRequestTriggerOverrideBranchFilterOutputWithContext(ctx context.Context) BuildDefinitionPullRequestTriggerOverrideBranchFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionPullRequestTriggerOverrideBranchFilterOutput)
}

// BuildDefinitionPullRequestTriggerOverrideBranchFilterArrayInput is an input type that accepts BuildDefinitionPullRequestTriggerOverrideBranchFilterArray and BuildDefinitionPullRequestTriggerOverrideBranchFilterArrayOutput values.
// You can construct a concrete instance of `BuildDefinitionPullRequestTriggerOverrideBranchFilterArrayInput` via:
//
//          BuildDefinitionPullRequestTriggerOverrideBranchFilterArray{ BuildDefinitionPullRequestTriggerOverrideBranchFilterArgs{...} }
type BuildDefinitionPullRequestTriggerOverrideBranchFilterArrayInput interface {
	pulumi.Input

	ToBuildDefinitionPullRequestTriggerOverrideBranchFilterArrayOutput() BuildDefinitionPullRequestTriggerOverrideBranchFilterArrayOutput
	ToBuildDefinitionPullRequestTriggerOverrideBranchFilterArrayOutputWithContext(context.Context) BuildDefinitionPullRequestTriggerOverrideBranchFilterArrayOutput
}

type BuildDefinitionPullRequestTriggerOverrideBranchFilterArray []BuildDefinitionPullRequestTriggerOverrideBranchFilterInput

func (BuildDefinitionPullRequestTriggerOverrideBranchFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuildDefinitionPullRequestTriggerOverrideBranchFilter)(nil)).Elem()
}

func (i BuildDefinitionPullRequestTriggerOverrideBranchFilterArray) ToBuildDefinitionPullRequestTriggerOverrideBranchFilterArrayOutput() BuildDefinitionPullRequestTriggerOverrideBranchFilterArrayOutput {
	return i.ToBuildDefinitionPullRequestTriggerOverrideBranchFilterArrayOutputWithContext(context.Background())
}

func (i BuildDefinitionPullRequestTriggerOverrideBranchFilterArray) ToBuildDefinitionPullRequestTriggerOverrideBranchFilterArrayOutputWithContext(ctx context.Context) BuildDefinitionPullRequestTriggerOverrideBranchFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionPullRequestTriggerOverrideBranchFilterArrayOutput)
}

type BuildDefinitionPullRequestTriggerOverrideBranchFilterOutput struct{ *pulumi.OutputState }

func (BuildDefinitionPullRequestTriggerOverrideBranchFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDefinitionPullRequestTriggerOverrideBranchFilter)(nil)).Elem()
}

func (o BuildDefinitionPullRequestTriggerOverrideBranchFilterOutput) ToBuildDefinitionPullRequestTriggerOverrideBranchFilterOutput() BuildDefinitionPullRequestTriggerOverrideBranchFilterOutput {
	return o
}

func (o BuildDefinitionPullRequestTriggerOverrideBranchFilterOutput) ToBuildDefinitionPullRequestTriggerOverrideBranchFilterOutputWithContext(ctx context.Context) BuildDefinitionPullRequestTriggerOverrideBranchFilterOutput {
	return o
}

// List of branch patterns to exclude.
func (o BuildDefinitionPullRequestTriggerOverrideBranchFilterOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildDefinitionPullRequestTriggerOverrideBranchFilter) []string { return v.Excludes }).(pulumi.StringArrayOutput)
}

// List of branch patterns to include.
func (o BuildDefinitionPullRequestTriggerOverrideBranchFilterOutput) Includes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildDefinitionPullRequestTriggerOverrideBranchFilter) []string { return v.Includes }).(pulumi.StringArrayOutput)
}

type BuildDefinitionPullRequestTriggerOverrideBranchFilterArrayOutput struct{ *pulumi.OutputState }

func (BuildDefinitionPullRequestTriggerOverrideBranchFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuildDefinitionPullRequestTriggerOverrideBranchFilter)(nil)).Elem()
}

func (o BuildDefinitionPullRequestTriggerOverrideBranchFilterArrayOutput) ToBuildDefinitionPullRequestTriggerOverrideBranchFilterArrayOutput() BuildDefinitionPullRequestTriggerOverrideBranchFilterArrayOutput {
	return o
}

func (o BuildDefinitionPullRequestTriggerOverrideBranchFilterArrayOutput) ToBuildDefinitionPullRequestTriggerOverrideBranchFilterArrayOutputWithContext(ctx context.Context) BuildDefinitionPullRequestTriggerOverrideBranchFilterArrayOutput {
	return o
}

func (o BuildDefinitionPullRequestTriggerOverrideBranchFilterArrayOutput) Index(i pulumi.IntInput) BuildDefinitionPullRequestTriggerOverrideBranchFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BuildDefinitionPullRequestTriggerOverrideBranchFilter {
		return vs[0].([]BuildDefinitionPullRequestTriggerOverrideBranchFilter)[vs[1].(int)]
	}).(BuildDefinitionPullRequestTriggerOverrideBranchFilterOutput)
}

type BuildDefinitionPullRequestTriggerOverridePathFilter struct {
	// List of branch patterns to exclude.
	Excludes []string `pulumi:"excludes"`
	// List of branch patterns to include.
	Includes []string `pulumi:"includes"`
}

// BuildDefinitionPullRequestTriggerOverridePathFilterInput is an input type that accepts BuildDefinitionPullRequestTriggerOverridePathFilterArgs and BuildDefinitionPullRequestTriggerOverridePathFilterOutput values.
// You can construct a concrete instance of `BuildDefinitionPullRequestTriggerOverridePathFilterInput` via:
//
//          BuildDefinitionPullRequestTriggerOverridePathFilterArgs{...}
type BuildDefinitionPullRequestTriggerOverridePathFilterInput interface {
	pulumi.Input

	ToBuildDefinitionPullRequestTriggerOverridePathFilterOutput() BuildDefinitionPullRequestTriggerOverridePathFilterOutput
	ToBuildDefinitionPullRequestTriggerOverridePathFilterOutputWithContext(context.Context) BuildDefinitionPullRequestTriggerOverridePathFilterOutput
}

type BuildDefinitionPullRequestTriggerOverridePathFilterArgs struct {
	// List of branch patterns to exclude.
	Excludes pulumi.StringArrayInput `pulumi:"excludes"`
	// List of branch patterns to include.
	Includes pulumi.StringArrayInput `pulumi:"includes"`
}

func (BuildDefinitionPullRequestTriggerOverridePathFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDefinitionPullRequestTriggerOverridePathFilter)(nil)).Elem()
}

func (i BuildDefinitionPullRequestTriggerOverridePathFilterArgs) ToBuildDefinitionPullRequestTriggerOverridePathFilterOutput() BuildDefinitionPullRequestTriggerOverridePathFilterOutput {
	return i.ToBuildDefinitionPullRequestTriggerOverridePathFilterOutputWithContext(context.Background())
}

func (i BuildDefinitionPullRequestTriggerOverridePathFilterArgs) ToBuildDefinitionPullRequestTriggerOverridePathFilterOutputWithContext(ctx context.Context) BuildDefinitionPullRequestTriggerOverridePathFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionPullRequestTriggerOverridePathFilterOutput)
}

// BuildDefinitionPullRequestTriggerOverridePathFilterArrayInput is an input type that accepts BuildDefinitionPullRequestTriggerOverridePathFilterArray and BuildDefinitionPullRequestTriggerOverridePathFilterArrayOutput values.
// You can construct a concrete instance of `BuildDefinitionPullRequestTriggerOverridePathFilterArrayInput` via:
//
//          BuildDefinitionPullRequestTriggerOverridePathFilterArray{ BuildDefinitionPullRequestTriggerOverridePathFilterArgs{...} }
type BuildDefinitionPullRequestTriggerOverridePathFilterArrayInput interface {
	pulumi.Input

	ToBuildDefinitionPullRequestTriggerOverridePathFilterArrayOutput() BuildDefinitionPullRequestTriggerOverridePathFilterArrayOutput
	ToBuildDefinitionPullRequestTriggerOverridePathFilterArrayOutputWithContext(context.Context) BuildDefinitionPullRequestTriggerOverridePathFilterArrayOutput
}

type BuildDefinitionPullRequestTriggerOverridePathFilterArray []BuildDefinitionPullRequestTriggerOverridePathFilterInput

func (BuildDefinitionPullRequestTriggerOverridePathFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuildDefinitionPullRequestTriggerOverridePathFilter)(nil)).Elem()
}

func (i BuildDefinitionPullRequestTriggerOverridePathFilterArray) ToBuildDefinitionPullRequestTriggerOverridePathFilterArrayOutput() BuildDefinitionPullRequestTriggerOverridePathFilterArrayOutput {
	return i.ToBuildDefinitionPullRequestTriggerOverridePathFilterArrayOutputWithContext(context.Background())
}

func (i BuildDefinitionPullRequestTriggerOverridePathFilterArray) ToBuildDefinitionPullRequestTriggerOverridePathFilterArrayOutputWithContext(ctx context.Context) BuildDefinitionPullRequestTriggerOverridePathFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionPullRequestTriggerOverridePathFilterArrayOutput)
}

type BuildDefinitionPullRequestTriggerOverridePathFilterOutput struct{ *pulumi.OutputState }

func (BuildDefinitionPullRequestTriggerOverridePathFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDefinitionPullRequestTriggerOverridePathFilter)(nil)).Elem()
}

func (o BuildDefinitionPullRequestTriggerOverridePathFilterOutput) ToBuildDefinitionPullRequestTriggerOverridePathFilterOutput() BuildDefinitionPullRequestTriggerOverridePathFilterOutput {
	return o
}

func (o BuildDefinitionPullRequestTriggerOverridePathFilterOutput) ToBuildDefinitionPullRequestTriggerOverridePathFilterOutputWithContext(ctx context.Context) BuildDefinitionPullRequestTriggerOverridePathFilterOutput {
	return o
}

// List of branch patterns to exclude.
func (o BuildDefinitionPullRequestTriggerOverridePathFilterOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildDefinitionPullRequestTriggerOverridePathFilter) []string { return v.Excludes }).(pulumi.StringArrayOutput)
}

// List of branch patterns to include.
func (o BuildDefinitionPullRequestTriggerOverridePathFilterOutput) Includes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildDefinitionPullRequestTriggerOverridePathFilter) []string { return v.Includes }).(pulumi.StringArrayOutput)
}

type BuildDefinitionPullRequestTriggerOverridePathFilterArrayOutput struct{ *pulumi.OutputState }

func (BuildDefinitionPullRequestTriggerOverridePathFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuildDefinitionPullRequestTriggerOverridePathFilter)(nil)).Elem()
}

func (o BuildDefinitionPullRequestTriggerOverridePathFilterArrayOutput) ToBuildDefinitionPullRequestTriggerOverridePathFilterArrayOutput() BuildDefinitionPullRequestTriggerOverridePathFilterArrayOutput {
	return o
}

func (o BuildDefinitionPullRequestTriggerOverridePathFilterArrayOutput) ToBuildDefinitionPullRequestTriggerOverridePathFilterArrayOutputWithContext(ctx context.Context) BuildDefinitionPullRequestTriggerOverridePathFilterArrayOutput {
	return o
}

func (o BuildDefinitionPullRequestTriggerOverridePathFilterArrayOutput) Index(i pulumi.IntInput) BuildDefinitionPullRequestTriggerOverridePathFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BuildDefinitionPullRequestTriggerOverridePathFilter {
		return vs[0].([]BuildDefinitionPullRequestTriggerOverridePathFilter)[vs[1].(int)]
	}).(BuildDefinitionPullRequestTriggerOverridePathFilterOutput)
}

type BuildDefinitionRepository struct {
	// The branch name for which builds are triggered. Defaults to `master`.
	BranchName *string `pulumi:"branchName"`
	// The Github Enterprise URL. Used if `repoType` is `GithubEnterprise`.
	GithubEnterpriseUrl *string `pulumi:"githubEnterpriseUrl"`
	// The id of the repository. For `TfsGit` repos, this is simply the ID of the repository. For `Github` repos, this will take the form of `<GitHub Org>/<Repo Name>`. For `Bitbucket` repos, this will take the form of `<Workspace ID>/<Repo Name>`.
	RepoId string `pulumi:"repoId"`
	// The repository type. Valid values: `GitHub` or `TfsGit` or `Bitbucket` or `GitHub Enterprise`. Defaults to `Github`. If `repoType` is `GitHubEnterprise`, must use existing project and GitHub Enterprise service connection.
	RepoType string `pulumi:"repoType"`
	// Report build status. Default is true.
	ReportBuildStatus *bool `pulumi:"reportBuildStatus"`
	// The service connection ID. Used if the `repoType` is `GitHub` or `GitHubEnterprise`.
	ServiceConnectionId *string `pulumi:"serviceConnectionId"`
	// The path of the Yaml file describing the build definition.
	YmlPath string `pulumi:"ymlPath"`
}

// BuildDefinitionRepositoryInput is an input type that accepts BuildDefinitionRepositoryArgs and BuildDefinitionRepositoryOutput values.
// You can construct a concrete instance of `BuildDefinitionRepositoryInput` via:
//
//          BuildDefinitionRepositoryArgs{...}
type BuildDefinitionRepositoryInput interface {
	pulumi.Input

	ToBuildDefinitionRepositoryOutput() BuildDefinitionRepositoryOutput
	ToBuildDefinitionRepositoryOutputWithContext(context.Context) BuildDefinitionRepositoryOutput
}

type BuildDefinitionRepositoryArgs struct {
	// The branch name for which builds are triggered. Defaults to `master`.
	BranchName pulumi.StringPtrInput `pulumi:"branchName"`
	// The Github Enterprise URL. Used if `repoType` is `GithubEnterprise`.
	GithubEnterpriseUrl pulumi.StringPtrInput `pulumi:"githubEnterpriseUrl"`
	// The id of the repository. For `TfsGit` repos, this is simply the ID of the repository. For `Github` repos, this will take the form of `<GitHub Org>/<Repo Name>`. For `Bitbucket` repos, this will take the form of `<Workspace ID>/<Repo Name>`.
	RepoId pulumi.StringInput `pulumi:"repoId"`
	// The repository type. Valid values: `GitHub` or `TfsGit` or `Bitbucket` or `GitHub Enterprise`. Defaults to `Github`. If `repoType` is `GitHubEnterprise`, must use existing project and GitHub Enterprise service connection.
	RepoType pulumi.StringInput `pulumi:"repoType"`
	// Report build status. Default is true.
	ReportBuildStatus pulumi.BoolPtrInput `pulumi:"reportBuildStatus"`
	// The service connection ID. Used if the `repoType` is `GitHub` or `GitHubEnterprise`.
	ServiceConnectionId pulumi.StringPtrInput `pulumi:"serviceConnectionId"`
	// The path of the Yaml file describing the build definition.
	YmlPath pulumi.StringInput `pulumi:"ymlPath"`
}

func (BuildDefinitionRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDefinitionRepository)(nil)).Elem()
}

func (i BuildDefinitionRepositoryArgs) ToBuildDefinitionRepositoryOutput() BuildDefinitionRepositoryOutput {
	return i.ToBuildDefinitionRepositoryOutputWithContext(context.Background())
}

func (i BuildDefinitionRepositoryArgs) ToBuildDefinitionRepositoryOutputWithContext(ctx context.Context) BuildDefinitionRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionRepositoryOutput)
}

func (i BuildDefinitionRepositoryArgs) ToBuildDefinitionRepositoryPtrOutput() BuildDefinitionRepositoryPtrOutput {
	return i.ToBuildDefinitionRepositoryPtrOutputWithContext(context.Background())
}

func (i BuildDefinitionRepositoryArgs) ToBuildDefinitionRepositoryPtrOutputWithContext(ctx context.Context) BuildDefinitionRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionRepositoryOutput).ToBuildDefinitionRepositoryPtrOutputWithContext(ctx)
}

// BuildDefinitionRepositoryPtrInput is an input type that accepts BuildDefinitionRepositoryArgs, BuildDefinitionRepositoryPtr and BuildDefinitionRepositoryPtrOutput values.
// You can construct a concrete instance of `BuildDefinitionRepositoryPtrInput` via:
//
//          BuildDefinitionRepositoryArgs{...}
//
//  or:
//
//          nil
type BuildDefinitionRepositoryPtrInput interface {
	pulumi.Input

	ToBuildDefinitionRepositoryPtrOutput() BuildDefinitionRepositoryPtrOutput
	ToBuildDefinitionRepositoryPtrOutputWithContext(context.Context) BuildDefinitionRepositoryPtrOutput
}

type buildDefinitionRepositoryPtrType BuildDefinitionRepositoryArgs

func BuildDefinitionRepositoryPtr(v *BuildDefinitionRepositoryArgs) BuildDefinitionRepositoryPtrInput {
	return (*buildDefinitionRepositoryPtrType)(v)
}

func (*buildDefinitionRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildDefinitionRepository)(nil)).Elem()
}

func (i *buildDefinitionRepositoryPtrType) ToBuildDefinitionRepositoryPtrOutput() BuildDefinitionRepositoryPtrOutput {
	return i.ToBuildDefinitionRepositoryPtrOutputWithContext(context.Background())
}

func (i *buildDefinitionRepositoryPtrType) ToBuildDefinitionRepositoryPtrOutputWithContext(ctx context.Context) BuildDefinitionRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionRepositoryPtrOutput)
}

type BuildDefinitionRepositoryOutput struct{ *pulumi.OutputState }

func (BuildDefinitionRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDefinitionRepository)(nil)).Elem()
}

func (o BuildDefinitionRepositoryOutput) ToBuildDefinitionRepositoryOutput() BuildDefinitionRepositoryOutput {
	return o
}

func (o BuildDefinitionRepositoryOutput) ToBuildDefinitionRepositoryOutputWithContext(ctx context.Context) BuildDefinitionRepositoryOutput {
	return o
}

func (o BuildDefinitionRepositoryOutput) ToBuildDefinitionRepositoryPtrOutput() BuildDefinitionRepositoryPtrOutput {
	return o.ToBuildDefinitionRepositoryPtrOutputWithContext(context.Background())
}

func (o BuildDefinitionRepositoryOutput) ToBuildDefinitionRepositoryPtrOutputWithContext(ctx context.Context) BuildDefinitionRepositoryPtrOutput {
	return o.ApplyT(func(v BuildDefinitionRepository) *BuildDefinitionRepository {
		return &v
	}).(BuildDefinitionRepositoryPtrOutput)
}

// The branch name for which builds are triggered. Defaults to `master`.
func (o BuildDefinitionRepositoryOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildDefinitionRepository) *string { return v.BranchName }).(pulumi.StringPtrOutput)
}

// The Github Enterprise URL. Used if `repoType` is `GithubEnterprise`.
func (o BuildDefinitionRepositoryOutput) GithubEnterpriseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildDefinitionRepository) *string { return v.GithubEnterpriseUrl }).(pulumi.StringPtrOutput)
}

// The id of the repository. For `TfsGit` repos, this is simply the ID of the repository. For `Github` repos, this will take the form of `<GitHub Org>/<Repo Name>`. For `Bitbucket` repos, this will take the form of `<Workspace ID>/<Repo Name>`.
func (o BuildDefinitionRepositoryOutput) RepoId() pulumi.StringOutput {
	return o.ApplyT(func(v BuildDefinitionRepository) string { return v.RepoId }).(pulumi.StringOutput)
}

// The repository type. Valid values: `GitHub` or `TfsGit` or `Bitbucket` or `GitHub Enterprise`. Defaults to `Github`. If `repoType` is `GitHubEnterprise`, must use existing project and GitHub Enterprise service connection.
func (o BuildDefinitionRepositoryOutput) RepoType() pulumi.StringOutput {
	return o.ApplyT(func(v BuildDefinitionRepository) string { return v.RepoType }).(pulumi.StringOutput)
}

// Report build status. Default is true.
func (o BuildDefinitionRepositoryOutput) ReportBuildStatus() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BuildDefinitionRepository) *bool { return v.ReportBuildStatus }).(pulumi.BoolPtrOutput)
}

// The service connection ID. Used if the `repoType` is `GitHub` or `GitHubEnterprise`.
func (o BuildDefinitionRepositoryOutput) ServiceConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildDefinitionRepository) *string { return v.ServiceConnectionId }).(pulumi.StringPtrOutput)
}

// The path of the Yaml file describing the build definition.
func (o BuildDefinitionRepositoryOutput) YmlPath() pulumi.StringOutput {
	return o.ApplyT(func(v BuildDefinitionRepository) string { return v.YmlPath }).(pulumi.StringOutput)
}

type BuildDefinitionRepositoryPtrOutput struct{ *pulumi.OutputState }

func (BuildDefinitionRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildDefinitionRepository)(nil)).Elem()
}

func (o BuildDefinitionRepositoryPtrOutput) ToBuildDefinitionRepositoryPtrOutput() BuildDefinitionRepositoryPtrOutput {
	return o
}

func (o BuildDefinitionRepositoryPtrOutput) ToBuildDefinitionRepositoryPtrOutputWithContext(ctx context.Context) BuildDefinitionRepositoryPtrOutput {
	return o
}

func (o BuildDefinitionRepositoryPtrOutput) Elem() BuildDefinitionRepositoryOutput {
	return o.ApplyT(func(v *BuildDefinitionRepository) BuildDefinitionRepository { return *v }).(BuildDefinitionRepositoryOutput)
}

// The branch name for which builds are triggered. Defaults to `master`.
func (o BuildDefinitionRepositoryPtrOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildDefinitionRepository) *string {
		if v == nil {
			return nil
		}
		return v.BranchName
	}).(pulumi.StringPtrOutput)
}

// The Github Enterprise URL. Used if `repoType` is `GithubEnterprise`.
func (o BuildDefinitionRepositoryPtrOutput) GithubEnterpriseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildDefinitionRepository) *string {
		if v == nil {
			return nil
		}
		return v.GithubEnterpriseUrl
	}).(pulumi.StringPtrOutput)
}

// The id of the repository. For `TfsGit` repos, this is simply the ID of the repository. For `Github` repos, this will take the form of `<GitHub Org>/<Repo Name>`. For `Bitbucket` repos, this will take the form of `<Workspace ID>/<Repo Name>`.
func (o BuildDefinitionRepositoryPtrOutput) RepoId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildDefinitionRepository) *string {
		if v == nil {
			return nil
		}
		return &v.RepoId
	}).(pulumi.StringPtrOutput)
}

// The repository type. Valid values: `GitHub` or `TfsGit` or `Bitbucket` or `GitHub Enterprise`. Defaults to `Github`. If `repoType` is `GitHubEnterprise`, must use existing project and GitHub Enterprise service connection.
func (o BuildDefinitionRepositoryPtrOutput) RepoType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildDefinitionRepository) *string {
		if v == nil {
			return nil
		}
		return &v.RepoType
	}).(pulumi.StringPtrOutput)
}

// Report build status. Default is true.
func (o BuildDefinitionRepositoryPtrOutput) ReportBuildStatus() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BuildDefinitionRepository) *bool {
		if v == nil {
			return nil
		}
		return v.ReportBuildStatus
	}).(pulumi.BoolPtrOutput)
}

// The service connection ID. Used if the `repoType` is `GitHub` or `GitHubEnterprise`.
func (o BuildDefinitionRepositoryPtrOutput) ServiceConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildDefinitionRepository) *string {
		if v == nil {
			return nil
		}
		return v.ServiceConnectionId
	}).(pulumi.StringPtrOutput)
}

// The path of the Yaml file describing the build definition.
func (o BuildDefinitionRepositoryPtrOutput) YmlPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildDefinitionRepository) *string {
		if v == nil {
			return nil
		}
		return &v.YmlPath
	}).(pulumi.StringPtrOutput)
}

type BuildDefinitionVariable struct {
	// True if the variable can be overridden. Defaults to `true`.
	AllowOverride *bool `pulumi:"allowOverride"`
	// True if the variable is a secret. Defaults to `false`.
	IsSecret *bool `pulumi:"isSecret"`
	// The name of the variable.
	Name string `pulumi:"name"`
	// The secret value of the variable. Used when `isSecret` set to `true`.
	SecretValue *string `pulumi:"secretValue"`
	// The value of the variable.
	Value *string `pulumi:"value"`
}

// BuildDefinitionVariableInput is an input type that accepts BuildDefinitionVariableArgs and BuildDefinitionVariableOutput values.
// You can construct a concrete instance of `BuildDefinitionVariableInput` via:
//
//          BuildDefinitionVariableArgs{...}
type BuildDefinitionVariableInput interface {
	pulumi.Input

	ToBuildDefinitionVariableOutput() BuildDefinitionVariableOutput
	ToBuildDefinitionVariableOutputWithContext(context.Context) BuildDefinitionVariableOutput
}

type BuildDefinitionVariableArgs struct {
	// True if the variable can be overridden. Defaults to `true`.
	AllowOverride pulumi.BoolPtrInput `pulumi:"allowOverride"`
	// True if the variable is a secret. Defaults to `false`.
	IsSecret pulumi.BoolPtrInput `pulumi:"isSecret"`
	// The name of the variable.
	Name pulumi.StringInput `pulumi:"name"`
	// The secret value of the variable. Used when `isSecret` set to `true`.
	SecretValue pulumi.StringPtrInput `pulumi:"secretValue"`
	// The value of the variable.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (BuildDefinitionVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDefinitionVariable)(nil)).Elem()
}

func (i BuildDefinitionVariableArgs) ToBuildDefinitionVariableOutput() BuildDefinitionVariableOutput {
	return i.ToBuildDefinitionVariableOutputWithContext(context.Background())
}

func (i BuildDefinitionVariableArgs) ToBuildDefinitionVariableOutputWithContext(ctx context.Context) BuildDefinitionVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionVariableOutput)
}

// BuildDefinitionVariableArrayInput is an input type that accepts BuildDefinitionVariableArray and BuildDefinitionVariableArrayOutput values.
// You can construct a concrete instance of `BuildDefinitionVariableArrayInput` via:
//
//          BuildDefinitionVariableArray{ BuildDefinitionVariableArgs{...} }
type BuildDefinitionVariableArrayInput interface {
	pulumi.Input

	ToBuildDefinitionVariableArrayOutput() BuildDefinitionVariableArrayOutput
	ToBuildDefinitionVariableArrayOutputWithContext(context.Context) BuildDefinitionVariableArrayOutput
}

type BuildDefinitionVariableArray []BuildDefinitionVariableInput

func (BuildDefinitionVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuildDefinitionVariable)(nil)).Elem()
}

func (i BuildDefinitionVariableArray) ToBuildDefinitionVariableArrayOutput() BuildDefinitionVariableArrayOutput {
	return i.ToBuildDefinitionVariableArrayOutputWithContext(context.Background())
}

func (i BuildDefinitionVariableArray) ToBuildDefinitionVariableArrayOutputWithContext(ctx context.Context) BuildDefinitionVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionVariableArrayOutput)
}

type BuildDefinitionVariableOutput struct{ *pulumi.OutputState }

func (BuildDefinitionVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDefinitionVariable)(nil)).Elem()
}

func (o BuildDefinitionVariableOutput) ToBuildDefinitionVariableOutput() BuildDefinitionVariableOutput {
	return o
}

func (o BuildDefinitionVariableOutput) ToBuildDefinitionVariableOutputWithContext(ctx context.Context) BuildDefinitionVariableOutput {
	return o
}

// True if the variable can be overridden. Defaults to `true`.
func (o BuildDefinitionVariableOutput) AllowOverride() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BuildDefinitionVariable) *bool { return v.AllowOverride }).(pulumi.BoolPtrOutput)
}

// True if the variable is a secret. Defaults to `false`.
func (o BuildDefinitionVariableOutput) IsSecret() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BuildDefinitionVariable) *bool { return v.IsSecret }).(pulumi.BoolPtrOutput)
}

// The name of the variable.
func (o BuildDefinitionVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BuildDefinitionVariable) string { return v.Name }).(pulumi.StringOutput)
}

// The secret value of the variable. Used when `isSecret` set to `true`.
func (o BuildDefinitionVariableOutput) SecretValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildDefinitionVariable) *string { return v.SecretValue }).(pulumi.StringPtrOutput)
}

// The value of the variable.
func (o BuildDefinitionVariableOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildDefinitionVariable) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type BuildDefinitionVariableArrayOutput struct{ *pulumi.OutputState }

func (BuildDefinitionVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuildDefinitionVariable)(nil)).Elem()
}

func (o BuildDefinitionVariableArrayOutput) ToBuildDefinitionVariableArrayOutput() BuildDefinitionVariableArrayOutput {
	return o
}

func (o BuildDefinitionVariableArrayOutput) ToBuildDefinitionVariableArrayOutputWithContext(ctx context.Context) BuildDefinitionVariableArrayOutput {
	return o
}

func (o BuildDefinitionVariableArrayOutput) Index(i pulumi.IntInput) BuildDefinitionVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BuildDefinitionVariable {
		return vs[0].([]BuildDefinitionVariable)[vs[1].(int)]
	}).(BuildDefinitionVariableOutput)
}

type GitInitialization struct {
	// The type of repository to create. Valid values: `Uninitialized`, `Clean` or `Import`. Defaults to `Uninitialized`.
	InitType string `pulumi:"initType"`
	// Type of the source repository. Used if the `initType` is `Import`. Valid values: `Git`. Defaults to `Git`.
	SourceType *string `pulumi:"sourceType"`
	// The URL of the source repository. Used if the `initType` is `Import`.
	SourceUrl *string `pulumi:"sourceUrl"`
}

// GitInitializationInput is an input type that accepts GitInitializationArgs and GitInitializationOutput values.
// You can construct a concrete instance of `GitInitializationInput` via:
//
//          GitInitializationArgs{...}
type GitInitializationInput interface {
	pulumi.Input

	ToGitInitializationOutput() GitInitializationOutput
	ToGitInitializationOutputWithContext(context.Context) GitInitializationOutput
}

type GitInitializationArgs struct {
	// The type of repository to create. Valid values: `Uninitialized`, `Clean` or `Import`. Defaults to `Uninitialized`.
	InitType pulumi.StringInput `pulumi:"initType"`
	// Type of the source repository. Used if the `initType` is `Import`. Valid values: `Git`. Defaults to `Git`.
	SourceType pulumi.StringPtrInput `pulumi:"sourceType"`
	// The URL of the source repository. Used if the `initType` is `Import`.
	SourceUrl pulumi.StringPtrInput `pulumi:"sourceUrl"`
}

func (GitInitializationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitInitialization)(nil)).Elem()
}

func (i GitInitializationArgs) ToGitInitializationOutput() GitInitializationOutput {
	return i.ToGitInitializationOutputWithContext(context.Background())
}

func (i GitInitializationArgs) ToGitInitializationOutputWithContext(ctx context.Context) GitInitializationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitInitializationOutput)
}

func (i GitInitializationArgs) ToGitInitializationPtrOutput() GitInitializationPtrOutput {
	return i.ToGitInitializationPtrOutputWithContext(context.Background())
}

func (i GitInitializationArgs) ToGitInitializationPtrOutputWithContext(ctx context.Context) GitInitializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitInitializationOutput).ToGitInitializationPtrOutputWithContext(ctx)
}

// GitInitializationPtrInput is an input type that accepts GitInitializationArgs, GitInitializationPtr and GitInitializationPtrOutput values.
// You can construct a concrete instance of `GitInitializationPtrInput` via:
//
//          GitInitializationArgs{...}
//
//  or:
//
//          nil
type GitInitializationPtrInput interface {
	pulumi.Input

	ToGitInitializationPtrOutput() GitInitializationPtrOutput
	ToGitInitializationPtrOutputWithContext(context.Context) GitInitializationPtrOutput
}

type gitInitializationPtrType GitInitializationArgs

func GitInitializationPtr(v *GitInitializationArgs) GitInitializationPtrInput {
	return (*gitInitializationPtrType)(v)
}

func (*gitInitializationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitInitialization)(nil)).Elem()
}

func (i *gitInitializationPtrType) ToGitInitializationPtrOutput() GitInitializationPtrOutput {
	return i.ToGitInitializationPtrOutputWithContext(context.Background())
}

func (i *gitInitializationPtrType) ToGitInitializationPtrOutputWithContext(ctx context.Context) GitInitializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitInitializationPtrOutput)
}

type GitInitializationOutput struct{ *pulumi.OutputState }

func (GitInitializationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitInitialization)(nil)).Elem()
}

func (o GitInitializationOutput) ToGitInitializationOutput() GitInitializationOutput {
	return o
}

func (o GitInitializationOutput) ToGitInitializationOutputWithContext(ctx context.Context) GitInitializationOutput {
	return o
}

func (o GitInitializationOutput) ToGitInitializationPtrOutput() GitInitializationPtrOutput {
	return o.ToGitInitializationPtrOutputWithContext(context.Background())
}

func (o GitInitializationOutput) ToGitInitializationPtrOutputWithContext(ctx context.Context) GitInitializationPtrOutput {
	return o.ApplyT(func(v GitInitialization) *GitInitialization {
		return &v
	}).(GitInitializationPtrOutput)
}

// The type of repository to create. Valid values: `Uninitialized`, `Clean` or `Import`. Defaults to `Uninitialized`.
func (o GitInitializationOutput) InitType() pulumi.StringOutput {
	return o.ApplyT(func(v GitInitialization) string { return v.InitType }).(pulumi.StringOutput)
}

// Type of the source repository. Used if the `initType` is `Import`. Valid values: `Git`. Defaults to `Git`.
func (o GitInitializationOutput) SourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitInitialization) *string { return v.SourceType }).(pulumi.StringPtrOutput)
}

// The URL of the source repository. Used if the `initType` is `Import`.
func (o GitInitializationOutput) SourceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitInitialization) *string { return v.SourceUrl }).(pulumi.StringPtrOutput)
}

type GitInitializationPtrOutput struct{ *pulumi.OutputState }

func (GitInitializationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitInitialization)(nil)).Elem()
}

func (o GitInitializationPtrOutput) ToGitInitializationPtrOutput() GitInitializationPtrOutput {
	return o
}

func (o GitInitializationPtrOutput) ToGitInitializationPtrOutputWithContext(ctx context.Context) GitInitializationPtrOutput {
	return o
}

func (o GitInitializationPtrOutput) Elem() GitInitializationOutput {
	return o.ApplyT(func(v *GitInitialization) GitInitialization { return *v }).(GitInitializationOutput)
}

// The type of repository to create. Valid values: `Uninitialized`, `Clean` or `Import`. Defaults to `Uninitialized`.
func (o GitInitializationPtrOutput) InitType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitInitialization) *string {
		if v == nil {
			return nil
		}
		return &v.InitType
	}).(pulumi.StringPtrOutput)
}

// Type of the source repository. Used if the `initType` is `Import`. Valid values: `Git`. Defaults to `Git`.
func (o GitInitializationPtrOutput) SourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitInitialization) *string {
		if v == nil {
			return nil
		}
		return v.SourceType
	}).(pulumi.StringPtrOutput)
}

// The URL of the source repository. Used if the `initType` is `Import`.
func (o GitInitializationPtrOutput) SourceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitInitialization) *string {
		if v == nil {
			return nil
		}
		return v.SourceUrl
	}).(pulumi.StringPtrOutput)
}

type ServiceEndpointAzureRMCredentials struct {
	// The service principal application Id
	Serviceprincipalid string `pulumi:"serviceprincipalid"`
	// The service principal secret.
	Serviceprincipalkey     string  `pulumi:"serviceprincipalkey"`
	ServiceprincipalkeyHash *string `pulumi:"serviceprincipalkeyHash"`
}

// ServiceEndpointAzureRMCredentialsInput is an input type that accepts ServiceEndpointAzureRMCredentialsArgs and ServiceEndpointAzureRMCredentialsOutput values.
// You can construct a concrete instance of `ServiceEndpointAzureRMCredentialsInput` via:
//
//          ServiceEndpointAzureRMCredentialsArgs{...}
type ServiceEndpointAzureRMCredentialsInput interface {
	pulumi.Input

	ToServiceEndpointAzureRMCredentialsOutput() ServiceEndpointAzureRMCredentialsOutput
	ToServiceEndpointAzureRMCredentialsOutputWithContext(context.Context) ServiceEndpointAzureRMCredentialsOutput
}

type ServiceEndpointAzureRMCredentialsArgs struct {
	// The service principal application Id
	Serviceprincipalid pulumi.StringInput `pulumi:"serviceprincipalid"`
	// The service principal secret.
	Serviceprincipalkey     pulumi.StringInput    `pulumi:"serviceprincipalkey"`
	ServiceprincipalkeyHash pulumi.StringPtrInput `pulumi:"serviceprincipalkeyHash"`
}

func (ServiceEndpointAzureRMCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEndpointAzureRMCredentials)(nil)).Elem()
}

func (i ServiceEndpointAzureRMCredentialsArgs) ToServiceEndpointAzureRMCredentialsOutput() ServiceEndpointAzureRMCredentialsOutput {
	return i.ToServiceEndpointAzureRMCredentialsOutputWithContext(context.Background())
}

func (i ServiceEndpointAzureRMCredentialsArgs) ToServiceEndpointAzureRMCredentialsOutputWithContext(ctx context.Context) ServiceEndpointAzureRMCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEndpointAzureRMCredentialsOutput)
}

func (i ServiceEndpointAzureRMCredentialsArgs) ToServiceEndpointAzureRMCredentialsPtrOutput() ServiceEndpointAzureRMCredentialsPtrOutput {
	return i.ToServiceEndpointAzureRMCredentialsPtrOutputWithContext(context.Background())
}

func (i ServiceEndpointAzureRMCredentialsArgs) ToServiceEndpointAzureRMCredentialsPtrOutputWithContext(ctx context.Context) ServiceEndpointAzureRMCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEndpointAzureRMCredentialsOutput).ToServiceEndpointAzureRMCredentialsPtrOutputWithContext(ctx)
}

// ServiceEndpointAzureRMCredentialsPtrInput is an input type that accepts ServiceEndpointAzureRMCredentialsArgs, ServiceEndpointAzureRMCredentialsPtr and ServiceEndpointAzureRMCredentialsPtrOutput values.
// You can construct a concrete instance of `ServiceEndpointAzureRMCredentialsPtrInput` via:
//
//          ServiceEndpointAzureRMCredentialsArgs{...}
//
//  or:
//
//          nil
type ServiceEndpointAzureRMCredentialsPtrInput interface {
	pulumi.Input

	ToServiceEndpointAzureRMCredentialsPtrOutput() ServiceEndpointAzureRMCredentialsPtrOutput
	ToServiceEndpointAzureRMCredentialsPtrOutputWithContext(context.Context) ServiceEndpointAzureRMCredentialsPtrOutput
}

type serviceEndpointAzureRMCredentialsPtrType ServiceEndpointAzureRMCredentialsArgs

func ServiceEndpointAzureRMCredentialsPtr(v *ServiceEndpointAzureRMCredentialsArgs) ServiceEndpointAzureRMCredentialsPtrInput {
	return (*serviceEndpointAzureRMCredentialsPtrType)(v)
}

func (*serviceEndpointAzureRMCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceEndpointAzureRMCredentials)(nil)).Elem()
}

func (i *serviceEndpointAzureRMCredentialsPtrType) ToServiceEndpointAzureRMCredentialsPtrOutput() ServiceEndpointAzureRMCredentialsPtrOutput {
	return i.ToServiceEndpointAzureRMCredentialsPtrOutputWithContext(context.Background())
}

func (i *serviceEndpointAzureRMCredentialsPtrType) ToServiceEndpointAzureRMCredentialsPtrOutputWithContext(ctx context.Context) ServiceEndpointAzureRMCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEndpointAzureRMCredentialsPtrOutput)
}

type ServiceEndpointAzureRMCredentialsOutput struct{ *pulumi.OutputState }

func (ServiceEndpointAzureRMCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEndpointAzureRMCredentials)(nil)).Elem()
}

func (o ServiceEndpointAzureRMCredentialsOutput) ToServiceEndpointAzureRMCredentialsOutput() ServiceEndpointAzureRMCredentialsOutput {
	return o
}

func (o ServiceEndpointAzureRMCredentialsOutput) ToServiceEndpointAzureRMCredentialsOutputWithContext(ctx context.Context) ServiceEndpointAzureRMCredentialsOutput {
	return o
}

func (o ServiceEndpointAzureRMCredentialsOutput) ToServiceEndpointAzureRMCredentialsPtrOutput() ServiceEndpointAzureRMCredentialsPtrOutput {
	return o.ToServiceEndpointAzureRMCredentialsPtrOutputWithContext(context.Background())
}

func (o ServiceEndpointAzureRMCredentialsOutput) ToServiceEndpointAzureRMCredentialsPtrOutputWithContext(ctx context.Context) ServiceEndpointAzureRMCredentialsPtrOutput {
	return o.ApplyT(func(v ServiceEndpointAzureRMCredentials) *ServiceEndpointAzureRMCredentials {
		return &v
	}).(ServiceEndpointAzureRMCredentialsPtrOutput)
}

// The service principal application Id
func (o ServiceEndpointAzureRMCredentialsOutput) Serviceprincipalid() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceEndpointAzureRMCredentials) string { return v.Serviceprincipalid }).(pulumi.StringOutput)
}

// The service principal secret.
func (o ServiceEndpointAzureRMCredentialsOutput) Serviceprincipalkey() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceEndpointAzureRMCredentials) string { return v.Serviceprincipalkey }).(pulumi.StringOutput)
}

func (o ServiceEndpointAzureRMCredentialsOutput) ServiceprincipalkeyHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEndpointAzureRMCredentials) *string { return v.ServiceprincipalkeyHash }).(pulumi.StringPtrOutput)
}

type ServiceEndpointAzureRMCredentialsPtrOutput struct{ *pulumi.OutputState }

func (ServiceEndpointAzureRMCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceEndpointAzureRMCredentials)(nil)).Elem()
}

func (o ServiceEndpointAzureRMCredentialsPtrOutput) ToServiceEndpointAzureRMCredentialsPtrOutput() ServiceEndpointAzureRMCredentialsPtrOutput {
	return o
}

func (o ServiceEndpointAzureRMCredentialsPtrOutput) ToServiceEndpointAzureRMCredentialsPtrOutputWithContext(ctx context.Context) ServiceEndpointAzureRMCredentialsPtrOutput {
	return o
}

func (o ServiceEndpointAzureRMCredentialsPtrOutput) Elem() ServiceEndpointAzureRMCredentialsOutput {
	return o.ApplyT(func(v *ServiceEndpointAzureRMCredentials) ServiceEndpointAzureRMCredentials { return *v }).(ServiceEndpointAzureRMCredentialsOutput)
}

// The service principal application Id
func (o ServiceEndpointAzureRMCredentialsPtrOutput) Serviceprincipalid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceEndpointAzureRMCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Serviceprincipalid
	}).(pulumi.StringPtrOutput)
}

// The service principal secret.
func (o ServiceEndpointAzureRMCredentialsPtrOutput) Serviceprincipalkey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceEndpointAzureRMCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Serviceprincipalkey
	}).(pulumi.StringPtrOutput)
}

func (o ServiceEndpointAzureRMCredentialsPtrOutput) ServiceprincipalkeyHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceEndpointAzureRMCredentials) *string {
		if v == nil {
			return nil
		}
		return v.ServiceprincipalkeyHash
	}).(pulumi.StringPtrOutput)
}

type ServiceEndpointGitHubAuthOauth struct {
	OauthConfigurationId string `pulumi:"oauthConfigurationId"`
}

// ServiceEndpointGitHubAuthOauthInput is an input type that accepts ServiceEndpointGitHubAuthOauthArgs and ServiceEndpointGitHubAuthOauthOutput values.
// You can construct a concrete instance of `ServiceEndpointGitHubAuthOauthInput` via:
//
//          ServiceEndpointGitHubAuthOauthArgs{...}
type ServiceEndpointGitHubAuthOauthInput interface {
	pulumi.Input

	ToServiceEndpointGitHubAuthOauthOutput() ServiceEndpointGitHubAuthOauthOutput
	ToServiceEndpointGitHubAuthOauthOutputWithContext(context.Context) ServiceEndpointGitHubAuthOauthOutput
}

type ServiceEndpointGitHubAuthOauthArgs struct {
	OauthConfigurationId pulumi.StringInput `pulumi:"oauthConfigurationId"`
}

func (ServiceEndpointGitHubAuthOauthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEndpointGitHubAuthOauth)(nil)).Elem()
}

func (i ServiceEndpointGitHubAuthOauthArgs) ToServiceEndpointGitHubAuthOauthOutput() ServiceEndpointGitHubAuthOauthOutput {
	return i.ToServiceEndpointGitHubAuthOauthOutputWithContext(context.Background())
}

func (i ServiceEndpointGitHubAuthOauthArgs) ToServiceEndpointGitHubAuthOauthOutputWithContext(ctx context.Context) ServiceEndpointGitHubAuthOauthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEndpointGitHubAuthOauthOutput)
}

func (i ServiceEndpointGitHubAuthOauthArgs) ToServiceEndpointGitHubAuthOauthPtrOutput() ServiceEndpointGitHubAuthOauthPtrOutput {
	return i.ToServiceEndpointGitHubAuthOauthPtrOutputWithContext(context.Background())
}

func (i ServiceEndpointGitHubAuthOauthArgs) ToServiceEndpointGitHubAuthOauthPtrOutputWithContext(ctx context.Context) ServiceEndpointGitHubAuthOauthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEndpointGitHubAuthOauthOutput).ToServiceEndpointGitHubAuthOauthPtrOutputWithContext(ctx)
}

// ServiceEndpointGitHubAuthOauthPtrInput is an input type that accepts ServiceEndpointGitHubAuthOauthArgs, ServiceEndpointGitHubAuthOauthPtr and ServiceEndpointGitHubAuthOauthPtrOutput values.
// You can construct a concrete instance of `ServiceEndpointGitHubAuthOauthPtrInput` via:
//
//          ServiceEndpointGitHubAuthOauthArgs{...}
//
//  or:
//
//          nil
type ServiceEndpointGitHubAuthOauthPtrInput interface {
	pulumi.Input

	ToServiceEndpointGitHubAuthOauthPtrOutput() ServiceEndpointGitHubAuthOauthPtrOutput
	ToServiceEndpointGitHubAuthOauthPtrOutputWithContext(context.Context) ServiceEndpointGitHubAuthOauthPtrOutput
}

type serviceEndpointGitHubAuthOauthPtrType ServiceEndpointGitHubAuthOauthArgs

func ServiceEndpointGitHubAuthOauthPtr(v *ServiceEndpointGitHubAuthOauthArgs) ServiceEndpointGitHubAuthOauthPtrInput {
	return (*serviceEndpointGitHubAuthOauthPtrType)(v)
}

func (*serviceEndpointGitHubAuthOauthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceEndpointGitHubAuthOauth)(nil)).Elem()
}

func (i *serviceEndpointGitHubAuthOauthPtrType) ToServiceEndpointGitHubAuthOauthPtrOutput() ServiceEndpointGitHubAuthOauthPtrOutput {
	return i.ToServiceEndpointGitHubAuthOauthPtrOutputWithContext(context.Background())
}

func (i *serviceEndpointGitHubAuthOauthPtrType) ToServiceEndpointGitHubAuthOauthPtrOutputWithContext(ctx context.Context) ServiceEndpointGitHubAuthOauthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEndpointGitHubAuthOauthPtrOutput)
}

type ServiceEndpointGitHubAuthOauthOutput struct{ *pulumi.OutputState }

func (ServiceEndpointGitHubAuthOauthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEndpointGitHubAuthOauth)(nil)).Elem()
}

func (o ServiceEndpointGitHubAuthOauthOutput) ToServiceEndpointGitHubAuthOauthOutput() ServiceEndpointGitHubAuthOauthOutput {
	return o
}

func (o ServiceEndpointGitHubAuthOauthOutput) ToServiceEndpointGitHubAuthOauthOutputWithContext(ctx context.Context) ServiceEndpointGitHubAuthOauthOutput {
	return o
}

func (o ServiceEndpointGitHubAuthOauthOutput) ToServiceEndpointGitHubAuthOauthPtrOutput() ServiceEndpointGitHubAuthOauthPtrOutput {
	return o.ToServiceEndpointGitHubAuthOauthPtrOutputWithContext(context.Background())
}

func (o ServiceEndpointGitHubAuthOauthOutput) ToServiceEndpointGitHubAuthOauthPtrOutputWithContext(ctx context.Context) ServiceEndpointGitHubAuthOauthPtrOutput {
	return o.ApplyT(func(v ServiceEndpointGitHubAuthOauth) *ServiceEndpointGitHubAuthOauth {
		return &v
	}).(ServiceEndpointGitHubAuthOauthPtrOutput)
}
func (o ServiceEndpointGitHubAuthOauthOutput) OauthConfigurationId() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceEndpointGitHubAuthOauth) string { return v.OauthConfigurationId }).(pulumi.StringOutput)
}

type ServiceEndpointGitHubAuthOauthPtrOutput struct{ *pulumi.OutputState }

func (ServiceEndpointGitHubAuthOauthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceEndpointGitHubAuthOauth)(nil)).Elem()
}

func (o ServiceEndpointGitHubAuthOauthPtrOutput) ToServiceEndpointGitHubAuthOauthPtrOutput() ServiceEndpointGitHubAuthOauthPtrOutput {
	return o
}

func (o ServiceEndpointGitHubAuthOauthPtrOutput) ToServiceEndpointGitHubAuthOauthPtrOutputWithContext(ctx context.Context) ServiceEndpointGitHubAuthOauthPtrOutput {
	return o
}

func (o ServiceEndpointGitHubAuthOauthPtrOutput) Elem() ServiceEndpointGitHubAuthOauthOutput {
	return o.ApplyT(func(v *ServiceEndpointGitHubAuthOauth) ServiceEndpointGitHubAuthOauth { return *v }).(ServiceEndpointGitHubAuthOauthOutput)
}

func (o ServiceEndpointGitHubAuthOauthPtrOutput) OauthConfigurationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceEndpointGitHubAuthOauth) *string {
		if v == nil {
			return nil
		}
		return &v.OauthConfigurationId
	}).(pulumi.StringPtrOutput)
}

type ServiceEndpointGitHubAuthPersonal struct {
	// The Personal Access Token for Github.
	PersonalAccessToken     string  `pulumi:"personalAccessToken"`
	PersonalAccessTokenHash *string `pulumi:"personalAccessTokenHash"`
}

// ServiceEndpointGitHubAuthPersonalInput is an input type that accepts ServiceEndpointGitHubAuthPersonalArgs and ServiceEndpointGitHubAuthPersonalOutput values.
// You can construct a concrete instance of `ServiceEndpointGitHubAuthPersonalInput` via:
//
//          ServiceEndpointGitHubAuthPersonalArgs{...}
type ServiceEndpointGitHubAuthPersonalInput interface {
	pulumi.Input

	ToServiceEndpointGitHubAuthPersonalOutput() ServiceEndpointGitHubAuthPersonalOutput
	ToServiceEndpointGitHubAuthPersonalOutputWithContext(context.Context) ServiceEndpointGitHubAuthPersonalOutput
}

type ServiceEndpointGitHubAuthPersonalArgs struct {
	// The Personal Access Token for Github.
	PersonalAccessToken     pulumi.StringInput    `pulumi:"personalAccessToken"`
	PersonalAccessTokenHash pulumi.StringPtrInput `pulumi:"personalAccessTokenHash"`
}

func (ServiceEndpointGitHubAuthPersonalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEndpointGitHubAuthPersonal)(nil)).Elem()
}

func (i ServiceEndpointGitHubAuthPersonalArgs) ToServiceEndpointGitHubAuthPersonalOutput() ServiceEndpointGitHubAuthPersonalOutput {
	return i.ToServiceEndpointGitHubAuthPersonalOutputWithContext(context.Background())
}

func (i ServiceEndpointGitHubAuthPersonalArgs) ToServiceEndpointGitHubAuthPersonalOutputWithContext(ctx context.Context) ServiceEndpointGitHubAuthPersonalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEndpointGitHubAuthPersonalOutput)
}

func (i ServiceEndpointGitHubAuthPersonalArgs) ToServiceEndpointGitHubAuthPersonalPtrOutput() ServiceEndpointGitHubAuthPersonalPtrOutput {
	return i.ToServiceEndpointGitHubAuthPersonalPtrOutputWithContext(context.Background())
}

func (i ServiceEndpointGitHubAuthPersonalArgs) ToServiceEndpointGitHubAuthPersonalPtrOutputWithContext(ctx context.Context) ServiceEndpointGitHubAuthPersonalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEndpointGitHubAuthPersonalOutput).ToServiceEndpointGitHubAuthPersonalPtrOutputWithContext(ctx)
}

// ServiceEndpointGitHubAuthPersonalPtrInput is an input type that accepts ServiceEndpointGitHubAuthPersonalArgs, ServiceEndpointGitHubAuthPersonalPtr and ServiceEndpointGitHubAuthPersonalPtrOutput values.
// You can construct a concrete instance of `ServiceEndpointGitHubAuthPersonalPtrInput` via:
//
//          ServiceEndpointGitHubAuthPersonalArgs{...}
//
//  or:
//
//          nil
type ServiceEndpointGitHubAuthPersonalPtrInput interface {
	pulumi.Input

	ToServiceEndpointGitHubAuthPersonalPtrOutput() ServiceEndpointGitHubAuthPersonalPtrOutput
	ToServiceEndpointGitHubAuthPersonalPtrOutputWithContext(context.Context) ServiceEndpointGitHubAuthPersonalPtrOutput
}

type serviceEndpointGitHubAuthPersonalPtrType ServiceEndpointGitHubAuthPersonalArgs

func ServiceEndpointGitHubAuthPersonalPtr(v *ServiceEndpointGitHubAuthPersonalArgs) ServiceEndpointGitHubAuthPersonalPtrInput {
	return (*serviceEndpointGitHubAuthPersonalPtrType)(v)
}

func (*serviceEndpointGitHubAuthPersonalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceEndpointGitHubAuthPersonal)(nil)).Elem()
}

func (i *serviceEndpointGitHubAuthPersonalPtrType) ToServiceEndpointGitHubAuthPersonalPtrOutput() ServiceEndpointGitHubAuthPersonalPtrOutput {
	return i.ToServiceEndpointGitHubAuthPersonalPtrOutputWithContext(context.Background())
}

func (i *serviceEndpointGitHubAuthPersonalPtrType) ToServiceEndpointGitHubAuthPersonalPtrOutputWithContext(ctx context.Context) ServiceEndpointGitHubAuthPersonalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEndpointGitHubAuthPersonalPtrOutput)
}

type ServiceEndpointGitHubAuthPersonalOutput struct{ *pulumi.OutputState }

func (ServiceEndpointGitHubAuthPersonalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEndpointGitHubAuthPersonal)(nil)).Elem()
}

func (o ServiceEndpointGitHubAuthPersonalOutput) ToServiceEndpointGitHubAuthPersonalOutput() ServiceEndpointGitHubAuthPersonalOutput {
	return o
}

func (o ServiceEndpointGitHubAuthPersonalOutput) ToServiceEndpointGitHubAuthPersonalOutputWithContext(ctx context.Context) ServiceEndpointGitHubAuthPersonalOutput {
	return o
}

func (o ServiceEndpointGitHubAuthPersonalOutput) ToServiceEndpointGitHubAuthPersonalPtrOutput() ServiceEndpointGitHubAuthPersonalPtrOutput {
	return o.ToServiceEndpointGitHubAuthPersonalPtrOutputWithContext(context.Background())
}

func (o ServiceEndpointGitHubAuthPersonalOutput) ToServiceEndpointGitHubAuthPersonalPtrOutputWithContext(ctx context.Context) ServiceEndpointGitHubAuthPersonalPtrOutput {
	return o.ApplyT(func(v ServiceEndpointGitHubAuthPersonal) *ServiceEndpointGitHubAuthPersonal {
		return &v
	}).(ServiceEndpointGitHubAuthPersonalPtrOutput)
}

// The Personal Access Token for Github.
func (o ServiceEndpointGitHubAuthPersonalOutput) PersonalAccessToken() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceEndpointGitHubAuthPersonal) string { return v.PersonalAccessToken }).(pulumi.StringOutput)
}

func (o ServiceEndpointGitHubAuthPersonalOutput) PersonalAccessTokenHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEndpointGitHubAuthPersonal) *string { return v.PersonalAccessTokenHash }).(pulumi.StringPtrOutput)
}

type ServiceEndpointGitHubAuthPersonalPtrOutput struct{ *pulumi.OutputState }

func (ServiceEndpointGitHubAuthPersonalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceEndpointGitHubAuthPersonal)(nil)).Elem()
}

func (o ServiceEndpointGitHubAuthPersonalPtrOutput) ToServiceEndpointGitHubAuthPersonalPtrOutput() ServiceEndpointGitHubAuthPersonalPtrOutput {
	return o
}

func (o ServiceEndpointGitHubAuthPersonalPtrOutput) ToServiceEndpointGitHubAuthPersonalPtrOutputWithContext(ctx context.Context) ServiceEndpointGitHubAuthPersonalPtrOutput {
	return o
}

func (o ServiceEndpointGitHubAuthPersonalPtrOutput) Elem() ServiceEndpointGitHubAuthPersonalOutput {
	return o.ApplyT(func(v *ServiceEndpointGitHubAuthPersonal) ServiceEndpointGitHubAuthPersonal { return *v }).(ServiceEndpointGitHubAuthPersonalOutput)
}

// The Personal Access Token for Github.
func (o ServiceEndpointGitHubAuthPersonalPtrOutput) PersonalAccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceEndpointGitHubAuthPersonal) *string {
		if v == nil {
			return nil
		}
		return &v.PersonalAccessToken
	}).(pulumi.StringPtrOutput)
}

func (o ServiceEndpointGitHubAuthPersonalPtrOutput) PersonalAccessTokenHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceEndpointGitHubAuthPersonal) *string {
		if v == nil {
			return nil
		}
		return v.PersonalAccessTokenHash
	}).(pulumi.StringPtrOutput)
}

type ServiceEndpointKubernetesAzureSubscription struct {
	// Azure environment refers to whether the public cloud offering or domestic (government) clouds are being used. Currently, only the public cloud is supported. The value must be AzureCloud. This is also the default-value.
	AzureEnvironment *string `pulumi:"azureEnvironment"`
	// The name of the Kubernetes cluster.
	ClusterName string `pulumi:"clusterName"`
	// The Kubernetes namespace. Default value is "default".
	Namespace *string `pulumi:"namespace"`
	// The resource group name, to which the Kubernetes cluster is deployed.
	ResourcegroupId string `pulumi:"resourcegroupId"`
	// The id of the Azure subscription.
	SubscriptionId string `pulumi:"subscriptionId"`
	// The name of the Azure subscription.
	SubscriptionName string `pulumi:"subscriptionName"`
	// The id of the tenant used by the subscription.
	TenantId string `pulumi:"tenantId"`
}

// ServiceEndpointKubernetesAzureSubscriptionInput is an input type that accepts ServiceEndpointKubernetesAzureSubscriptionArgs and ServiceEndpointKubernetesAzureSubscriptionOutput values.
// You can construct a concrete instance of `ServiceEndpointKubernetesAzureSubscriptionInput` via:
//
//          ServiceEndpointKubernetesAzureSubscriptionArgs{...}
type ServiceEndpointKubernetesAzureSubscriptionInput interface {
	pulumi.Input

	ToServiceEndpointKubernetesAzureSubscriptionOutput() ServiceEndpointKubernetesAzureSubscriptionOutput
	ToServiceEndpointKubernetesAzureSubscriptionOutputWithContext(context.Context) ServiceEndpointKubernetesAzureSubscriptionOutput
}

type ServiceEndpointKubernetesAzureSubscriptionArgs struct {
	// Azure environment refers to whether the public cloud offering or domestic (government) clouds are being used. Currently, only the public cloud is supported. The value must be AzureCloud. This is also the default-value.
	AzureEnvironment pulumi.StringPtrInput `pulumi:"azureEnvironment"`
	// The name of the Kubernetes cluster.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// The Kubernetes namespace. Default value is "default".
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The resource group name, to which the Kubernetes cluster is deployed.
	ResourcegroupId pulumi.StringInput `pulumi:"resourcegroupId"`
	// The id of the Azure subscription.
	SubscriptionId pulumi.StringInput `pulumi:"subscriptionId"`
	// The name of the Azure subscription.
	SubscriptionName pulumi.StringInput `pulumi:"subscriptionName"`
	// The id of the tenant used by the subscription.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (ServiceEndpointKubernetesAzureSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEndpointKubernetesAzureSubscription)(nil)).Elem()
}

func (i ServiceEndpointKubernetesAzureSubscriptionArgs) ToServiceEndpointKubernetesAzureSubscriptionOutput() ServiceEndpointKubernetesAzureSubscriptionOutput {
	return i.ToServiceEndpointKubernetesAzureSubscriptionOutputWithContext(context.Background())
}

func (i ServiceEndpointKubernetesAzureSubscriptionArgs) ToServiceEndpointKubernetesAzureSubscriptionOutputWithContext(ctx context.Context) ServiceEndpointKubernetesAzureSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEndpointKubernetesAzureSubscriptionOutput)
}

// ServiceEndpointKubernetesAzureSubscriptionArrayInput is an input type that accepts ServiceEndpointKubernetesAzureSubscriptionArray and ServiceEndpointKubernetesAzureSubscriptionArrayOutput values.
// You can construct a concrete instance of `ServiceEndpointKubernetesAzureSubscriptionArrayInput` via:
//
//          ServiceEndpointKubernetesAzureSubscriptionArray{ ServiceEndpointKubernetesAzureSubscriptionArgs{...} }
type ServiceEndpointKubernetesAzureSubscriptionArrayInput interface {
	pulumi.Input

	ToServiceEndpointKubernetesAzureSubscriptionArrayOutput() ServiceEndpointKubernetesAzureSubscriptionArrayOutput
	ToServiceEndpointKubernetesAzureSubscriptionArrayOutputWithContext(context.Context) ServiceEndpointKubernetesAzureSubscriptionArrayOutput
}

type ServiceEndpointKubernetesAzureSubscriptionArray []ServiceEndpointKubernetesAzureSubscriptionInput

func (ServiceEndpointKubernetesAzureSubscriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEndpointKubernetesAzureSubscription)(nil)).Elem()
}

func (i ServiceEndpointKubernetesAzureSubscriptionArray) ToServiceEndpointKubernetesAzureSubscriptionArrayOutput() ServiceEndpointKubernetesAzureSubscriptionArrayOutput {
	return i.ToServiceEndpointKubernetesAzureSubscriptionArrayOutputWithContext(context.Background())
}

func (i ServiceEndpointKubernetesAzureSubscriptionArray) ToServiceEndpointKubernetesAzureSubscriptionArrayOutputWithContext(ctx context.Context) ServiceEndpointKubernetesAzureSubscriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEndpointKubernetesAzureSubscriptionArrayOutput)
}

type ServiceEndpointKubernetesAzureSubscriptionOutput struct{ *pulumi.OutputState }

func (ServiceEndpointKubernetesAzureSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEndpointKubernetesAzureSubscription)(nil)).Elem()
}

func (o ServiceEndpointKubernetesAzureSubscriptionOutput) ToServiceEndpointKubernetesAzureSubscriptionOutput() ServiceEndpointKubernetesAzureSubscriptionOutput {
	return o
}

func (o ServiceEndpointKubernetesAzureSubscriptionOutput) ToServiceEndpointKubernetesAzureSubscriptionOutputWithContext(ctx context.Context) ServiceEndpointKubernetesAzureSubscriptionOutput {
	return o
}

// Azure environment refers to whether the public cloud offering or domestic (government) clouds are being used. Currently, only the public cloud is supported. The value must be AzureCloud. This is also the default-value.
func (o ServiceEndpointKubernetesAzureSubscriptionOutput) AzureEnvironment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEndpointKubernetesAzureSubscription) *string { return v.AzureEnvironment }).(pulumi.StringPtrOutput)
}

// The name of the Kubernetes cluster.
func (o ServiceEndpointKubernetesAzureSubscriptionOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceEndpointKubernetesAzureSubscription) string { return v.ClusterName }).(pulumi.StringOutput)
}

// The Kubernetes namespace. Default value is "default".
func (o ServiceEndpointKubernetesAzureSubscriptionOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEndpointKubernetesAzureSubscription) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The resource group name, to which the Kubernetes cluster is deployed.
func (o ServiceEndpointKubernetesAzureSubscriptionOutput) ResourcegroupId() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceEndpointKubernetesAzureSubscription) string { return v.ResourcegroupId }).(pulumi.StringOutput)
}

// The id of the Azure subscription.
func (o ServiceEndpointKubernetesAzureSubscriptionOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceEndpointKubernetesAzureSubscription) string { return v.SubscriptionId }).(pulumi.StringOutput)
}

// The name of the Azure subscription.
func (o ServiceEndpointKubernetesAzureSubscriptionOutput) SubscriptionName() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceEndpointKubernetesAzureSubscription) string { return v.SubscriptionName }).(pulumi.StringOutput)
}

// The id of the tenant used by the subscription.
func (o ServiceEndpointKubernetesAzureSubscriptionOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceEndpointKubernetesAzureSubscription) string { return v.TenantId }).(pulumi.StringOutput)
}

type ServiceEndpointKubernetesAzureSubscriptionArrayOutput struct{ *pulumi.OutputState }

func (ServiceEndpointKubernetesAzureSubscriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEndpointKubernetesAzureSubscription)(nil)).Elem()
}

func (o ServiceEndpointKubernetesAzureSubscriptionArrayOutput) ToServiceEndpointKubernetesAzureSubscriptionArrayOutput() ServiceEndpointKubernetesAzureSubscriptionArrayOutput {
	return o
}

func (o ServiceEndpointKubernetesAzureSubscriptionArrayOutput) ToServiceEndpointKubernetesAzureSubscriptionArrayOutputWithContext(ctx context.Context) ServiceEndpointKubernetesAzureSubscriptionArrayOutput {
	return o
}

func (o ServiceEndpointKubernetesAzureSubscriptionArrayOutput) Index(i pulumi.IntInput) ServiceEndpointKubernetesAzureSubscriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceEndpointKubernetesAzureSubscription {
		return vs[0].([]ServiceEndpointKubernetesAzureSubscription)[vs[1].(int)]
	}).(ServiceEndpointKubernetesAzureSubscriptionOutput)
}

type ServiceEndpointKubernetesKubeconfig struct {
	// Set this option to allow clients to accept a self-signed certificate.
	AcceptUntrustedCerts *bool `pulumi:"acceptUntrustedCerts"`
	// Context within the kubeconfig file that is to be used for identifying the cluster. Default value is the current-context set in kubeconfig.
	ClusterContext *string `pulumi:"clusterContext"`
	// The content of the kubeconfig in yaml notation to be used to communicate with the API-Server of Kubernetes.
	KubeConfig     string  `pulumi:"kubeConfig"`
	KubeConfigHash *string `pulumi:"kubeConfigHash"`
}

// ServiceEndpointKubernetesKubeconfigInput is an input type that accepts ServiceEndpointKubernetesKubeconfigArgs and ServiceEndpointKubernetesKubeconfigOutput values.
// You can construct a concrete instance of `ServiceEndpointKubernetesKubeconfigInput` via:
//
//          ServiceEndpointKubernetesKubeconfigArgs{...}
type ServiceEndpointKubernetesKubeconfigInput interface {
	pulumi.Input

	ToServiceEndpointKubernetesKubeconfigOutput() ServiceEndpointKubernetesKubeconfigOutput
	ToServiceEndpointKubernetesKubeconfigOutputWithContext(context.Context) ServiceEndpointKubernetesKubeconfigOutput
}

type ServiceEndpointKubernetesKubeconfigArgs struct {
	// Set this option to allow clients to accept a self-signed certificate.
	AcceptUntrustedCerts pulumi.BoolPtrInput `pulumi:"acceptUntrustedCerts"`
	// Context within the kubeconfig file that is to be used for identifying the cluster. Default value is the current-context set in kubeconfig.
	ClusterContext pulumi.StringPtrInput `pulumi:"clusterContext"`
	// The content of the kubeconfig in yaml notation to be used to communicate with the API-Server of Kubernetes.
	KubeConfig     pulumi.StringInput    `pulumi:"kubeConfig"`
	KubeConfigHash pulumi.StringPtrInput `pulumi:"kubeConfigHash"`
}

func (ServiceEndpointKubernetesKubeconfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEndpointKubernetesKubeconfig)(nil)).Elem()
}

func (i ServiceEndpointKubernetesKubeconfigArgs) ToServiceEndpointKubernetesKubeconfigOutput() ServiceEndpointKubernetesKubeconfigOutput {
	return i.ToServiceEndpointKubernetesKubeconfigOutputWithContext(context.Background())
}

func (i ServiceEndpointKubernetesKubeconfigArgs) ToServiceEndpointKubernetesKubeconfigOutputWithContext(ctx context.Context) ServiceEndpointKubernetesKubeconfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEndpointKubernetesKubeconfigOutput)
}

// ServiceEndpointKubernetesKubeconfigArrayInput is an input type that accepts ServiceEndpointKubernetesKubeconfigArray and ServiceEndpointKubernetesKubeconfigArrayOutput values.
// You can construct a concrete instance of `ServiceEndpointKubernetesKubeconfigArrayInput` via:
//
//          ServiceEndpointKubernetesKubeconfigArray{ ServiceEndpointKubernetesKubeconfigArgs{...} }
type ServiceEndpointKubernetesKubeconfigArrayInput interface {
	pulumi.Input

	ToServiceEndpointKubernetesKubeconfigArrayOutput() ServiceEndpointKubernetesKubeconfigArrayOutput
	ToServiceEndpointKubernetesKubeconfigArrayOutputWithContext(context.Context) ServiceEndpointKubernetesKubeconfigArrayOutput
}

type ServiceEndpointKubernetesKubeconfigArray []ServiceEndpointKubernetesKubeconfigInput

func (ServiceEndpointKubernetesKubeconfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEndpointKubernetesKubeconfig)(nil)).Elem()
}

func (i ServiceEndpointKubernetesKubeconfigArray) ToServiceEndpointKubernetesKubeconfigArrayOutput() ServiceEndpointKubernetesKubeconfigArrayOutput {
	return i.ToServiceEndpointKubernetesKubeconfigArrayOutputWithContext(context.Background())
}

func (i ServiceEndpointKubernetesKubeconfigArray) ToServiceEndpointKubernetesKubeconfigArrayOutputWithContext(ctx context.Context) ServiceEndpointKubernetesKubeconfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEndpointKubernetesKubeconfigArrayOutput)
}

type ServiceEndpointKubernetesKubeconfigOutput struct{ *pulumi.OutputState }

func (ServiceEndpointKubernetesKubeconfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEndpointKubernetesKubeconfig)(nil)).Elem()
}

func (o ServiceEndpointKubernetesKubeconfigOutput) ToServiceEndpointKubernetesKubeconfigOutput() ServiceEndpointKubernetesKubeconfigOutput {
	return o
}

func (o ServiceEndpointKubernetesKubeconfigOutput) ToServiceEndpointKubernetesKubeconfigOutputWithContext(ctx context.Context) ServiceEndpointKubernetesKubeconfigOutput {
	return o
}

// Set this option to allow clients to accept a self-signed certificate.
func (o ServiceEndpointKubernetesKubeconfigOutput) AcceptUntrustedCerts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceEndpointKubernetesKubeconfig) *bool { return v.AcceptUntrustedCerts }).(pulumi.BoolPtrOutput)
}

// Context within the kubeconfig file that is to be used for identifying the cluster. Default value is the current-context set in kubeconfig.
func (o ServiceEndpointKubernetesKubeconfigOutput) ClusterContext() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEndpointKubernetesKubeconfig) *string { return v.ClusterContext }).(pulumi.StringPtrOutput)
}

// The content of the kubeconfig in yaml notation to be used to communicate with the API-Server of Kubernetes.
func (o ServiceEndpointKubernetesKubeconfigOutput) KubeConfig() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceEndpointKubernetesKubeconfig) string { return v.KubeConfig }).(pulumi.StringOutput)
}

func (o ServiceEndpointKubernetesKubeconfigOutput) KubeConfigHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEndpointKubernetesKubeconfig) *string { return v.KubeConfigHash }).(pulumi.StringPtrOutput)
}

type ServiceEndpointKubernetesKubeconfigArrayOutput struct{ *pulumi.OutputState }

func (ServiceEndpointKubernetesKubeconfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEndpointKubernetesKubeconfig)(nil)).Elem()
}

func (o ServiceEndpointKubernetesKubeconfigArrayOutput) ToServiceEndpointKubernetesKubeconfigArrayOutput() ServiceEndpointKubernetesKubeconfigArrayOutput {
	return o
}

func (o ServiceEndpointKubernetesKubeconfigArrayOutput) ToServiceEndpointKubernetesKubeconfigArrayOutputWithContext(ctx context.Context) ServiceEndpointKubernetesKubeconfigArrayOutput {
	return o
}

func (o ServiceEndpointKubernetesKubeconfigArrayOutput) Index(i pulumi.IntInput) ServiceEndpointKubernetesKubeconfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceEndpointKubernetesKubeconfig {
		return vs[0].([]ServiceEndpointKubernetesKubeconfig)[vs[1].(int)]
	}).(ServiceEndpointKubernetesKubeconfigOutput)
}

type ServiceEndpointKubernetesServiceAccount struct {
	// The certificate from a Kubernetes secret object.
	CaCert     string  `pulumi:"caCert"`
	CaCertHash *string `pulumi:"caCertHash"`
	// The token from a Kubernetes secret object.
	Token     string  `pulumi:"token"`
	TokenHash *string `pulumi:"tokenHash"`
}

// ServiceEndpointKubernetesServiceAccountInput is an input type that accepts ServiceEndpointKubernetesServiceAccountArgs and ServiceEndpointKubernetesServiceAccountOutput values.
// You can construct a concrete instance of `ServiceEndpointKubernetesServiceAccountInput` via:
//
//          ServiceEndpointKubernetesServiceAccountArgs{...}
type ServiceEndpointKubernetesServiceAccountInput interface {
	pulumi.Input

	ToServiceEndpointKubernetesServiceAccountOutput() ServiceEndpointKubernetesServiceAccountOutput
	ToServiceEndpointKubernetesServiceAccountOutputWithContext(context.Context) ServiceEndpointKubernetesServiceAccountOutput
}

type ServiceEndpointKubernetesServiceAccountArgs struct {
	// The certificate from a Kubernetes secret object.
	CaCert     pulumi.StringInput    `pulumi:"caCert"`
	CaCertHash pulumi.StringPtrInput `pulumi:"caCertHash"`
	// The token from a Kubernetes secret object.
	Token     pulumi.StringInput    `pulumi:"token"`
	TokenHash pulumi.StringPtrInput `pulumi:"tokenHash"`
}

func (ServiceEndpointKubernetesServiceAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEndpointKubernetesServiceAccount)(nil)).Elem()
}

func (i ServiceEndpointKubernetesServiceAccountArgs) ToServiceEndpointKubernetesServiceAccountOutput() ServiceEndpointKubernetesServiceAccountOutput {
	return i.ToServiceEndpointKubernetesServiceAccountOutputWithContext(context.Background())
}

func (i ServiceEndpointKubernetesServiceAccountArgs) ToServiceEndpointKubernetesServiceAccountOutputWithContext(ctx context.Context) ServiceEndpointKubernetesServiceAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEndpointKubernetesServiceAccountOutput)
}

// ServiceEndpointKubernetesServiceAccountArrayInput is an input type that accepts ServiceEndpointKubernetesServiceAccountArray and ServiceEndpointKubernetesServiceAccountArrayOutput values.
// You can construct a concrete instance of `ServiceEndpointKubernetesServiceAccountArrayInput` via:
//
//          ServiceEndpointKubernetesServiceAccountArray{ ServiceEndpointKubernetesServiceAccountArgs{...} }
type ServiceEndpointKubernetesServiceAccountArrayInput interface {
	pulumi.Input

	ToServiceEndpointKubernetesServiceAccountArrayOutput() ServiceEndpointKubernetesServiceAccountArrayOutput
	ToServiceEndpointKubernetesServiceAccountArrayOutputWithContext(context.Context) ServiceEndpointKubernetesServiceAccountArrayOutput
}

type ServiceEndpointKubernetesServiceAccountArray []ServiceEndpointKubernetesServiceAccountInput

func (ServiceEndpointKubernetesServiceAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEndpointKubernetesServiceAccount)(nil)).Elem()
}

func (i ServiceEndpointKubernetesServiceAccountArray) ToServiceEndpointKubernetesServiceAccountArrayOutput() ServiceEndpointKubernetesServiceAccountArrayOutput {
	return i.ToServiceEndpointKubernetesServiceAccountArrayOutputWithContext(context.Background())
}

func (i ServiceEndpointKubernetesServiceAccountArray) ToServiceEndpointKubernetesServiceAccountArrayOutputWithContext(ctx context.Context) ServiceEndpointKubernetesServiceAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEndpointKubernetesServiceAccountArrayOutput)
}

type ServiceEndpointKubernetesServiceAccountOutput struct{ *pulumi.OutputState }

func (ServiceEndpointKubernetesServiceAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEndpointKubernetesServiceAccount)(nil)).Elem()
}

func (o ServiceEndpointKubernetesServiceAccountOutput) ToServiceEndpointKubernetesServiceAccountOutput() ServiceEndpointKubernetesServiceAccountOutput {
	return o
}

func (o ServiceEndpointKubernetesServiceAccountOutput) ToServiceEndpointKubernetesServiceAccountOutputWithContext(ctx context.Context) ServiceEndpointKubernetesServiceAccountOutput {
	return o
}

// The certificate from a Kubernetes secret object.
func (o ServiceEndpointKubernetesServiceAccountOutput) CaCert() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceEndpointKubernetesServiceAccount) string { return v.CaCert }).(pulumi.StringOutput)
}

func (o ServiceEndpointKubernetesServiceAccountOutput) CaCertHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEndpointKubernetesServiceAccount) *string { return v.CaCertHash }).(pulumi.StringPtrOutput)
}

// The token from a Kubernetes secret object.
func (o ServiceEndpointKubernetesServiceAccountOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceEndpointKubernetesServiceAccount) string { return v.Token }).(pulumi.StringOutput)
}

func (o ServiceEndpointKubernetesServiceAccountOutput) TokenHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEndpointKubernetesServiceAccount) *string { return v.TokenHash }).(pulumi.StringPtrOutput)
}

type ServiceEndpointKubernetesServiceAccountArrayOutput struct{ *pulumi.OutputState }

func (ServiceEndpointKubernetesServiceAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEndpointKubernetesServiceAccount)(nil)).Elem()
}

func (o ServiceEndpointKubernetesServiceAccountArrayOutput) ToServiceEndpointKubernetesServiceAccountArrayOutput() ServiceEndpointKubernetesServiceAccountArrayOutput {
	return o
}

func (o ServiceEndpointKubernetesServiceAccountArrayOutput) ToServiceEndpointKubernetesServiceAccountArrayOutputWithContext(ctx context.Context) ServiceEndpointKubernetesServiceAccountArrayOutput {
	return o
}

func (o ServiceEndpointKubernetesServiceAccountArrayOutput) Index(i pulumi.IntInput) ServiceEndpointKubernetesServiceAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceEndpointKubernetesServiceAccount {
		return vs[0].([]ServiceEndpointKubernetesServiceAccount)[vs[1].(int)]
	}).(ServiceEndpointKubernetesServiceAccountOutput)
}

type VariableGroupKeyVault struct {
	// The name of the Variable Group.
	Name              string `pulumi:"name"`
	ServiceEndpointId string `pulumi:"serviceEndpointId"`
}

// VariableGroupKeyVaultInput is an input type that accepts VariableGroupKeyVaultArgs and VariableGroupKeyVaultOutput values.
// You can construct a concrete instance of `VariableGroupKeyVaultInput` via:
//
//          VariableGroupKeyVaultArgs{...}
type VariableGroupKeyVaultInput interface {
	pulumi.Input

	ToVariableGroupKeyVaultOutput() VariableGroupKeyVaultOutput
	ToVariableGroupKeyVaultOutputWithContext(context.Context) VariableGroupKeyVaultOutput
}

type VariableGroupKeyVaultArgs struct {
	// The name of the Variable Group.
	Name              pulumi.StringInput `pulumi:"name"`
	ServiceEndpointId pulumi.StringInput `pulumi:"serviceEndpointId"`
}

func (VariableGroupKeyVaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VariableGroupKeyVault)(nil)).Elem()
}

func (i VariableGroupKeyVaultArgs) ToVariableGroupKeyVaultOutput() VariableGroupKeyVaultOutput {
	return i.ToVariableGroupKeyVaultOutputWithContext(context.Background())
}

func (i VariableGroupKeyVaultArgs) ToVariableGroupKeyVaultOutputWithContext(ctx context.Context) VariableGroupKeyVaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariableGroupKeyVaultOutput)
}

func (i VariableGroupKeyVaultArgs) ToVariableGroupKeyVaultPtrOutput() VariableGroupKeyVaultPtrOutput {
	return i.ToVariableGroupKeyVaultPtrOutputWithContext(context.Background())
}

func (i VariableGroupKeyVaultArgs) ToVariableGroupKeyVaultPtrOutputWithContext(ctx context.Context) VariableGroupKeyVaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariableGroupKeyVaultOutput).ToVariableGroupKeyVaultPtrOutputWithContext(ctx)
}

// VariableGroupKeyVaultPtrInput is an input type that accepts VariableGroupKeyVaultArgs, VariableGroupKeyVaultPtr and VariableGroupKeyVaultPtrOutput values.
// You can construct a concrete instance of `VariableGroupKeyVaultPtrInput` via:
//
//          VariableGroupKeyVaultArgs{...}
//
//  or:
//
//          nil
type VariableGroupKeyVaultPtrInput interface {
	pulumi.Input

	ToVariableGroupKeyVaultPtrOutput() VariableGroupKeyVaultPtrOutput
	ToVariableGroupKeyVaultPtrOutputWithContext(context.Context) VariableGroupKeyVaultPtrOutput
}

type variableGroupKeyVaultPtrType VariableGroupKeyVaultArgs

func VariableGroupKeyVaultPtr(v *VariableGroupKeyVaultArgs) VariableGroupKeyVaultPtrInput {
	return (*variableGroupKeyVaultPtrType)(v)
}

func (*variableGroupKeyVaultPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VariableGroupKeyVault)(nil)).Elem()
}

func (i *variableGroupKeyVaultPtrType) ToVariableGroupKeyVaultPtrOutput() VariableGroupKeyVaultPtrOutput {
	return i.ToVariableGroupKeyVaultPtrOutputWithContext(context.Background())
}

func (i *variableGroupKeyVaultPtrType) ToVariableGroupKeyVaultPtrOutputWithContext(ctx context.Context) VariableGroupKeyVaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariableGroupKeyVaultPtrOutput)
}

type VariableGroupKeyVaultOutput struct{ *pulumi.OutputState }

func (VariableGroupKeyVaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VariableGroupKeyVault)(nil)).Elem()
}

func (o VariableGroupKeyVaultOutput) ToVariableGroupKeyVaultOutput() VariableGroupKeyVaultOutput {
	return o
}

func (o VariableGroupKeyVaultOutput) ToVariableGroupKeyVaultOutputWithContext(ctx context.Context) VariableGroupKeyVaultOutput {
	return o
}

func (o VariableGroupKeyVaultOutput) ToVariableGroupKeyVaultPtrOutput() VariableGroupKeyVaultPtrOutput {
	return o.ToVariableGroupKeyVaultPtrOutputWithContext(context.Background())
}

func (o VariableGroupKeyVaultOutput) ToVariableGroupKeyVaultPtrOutputWithContext(ctx context.Context) VariableGroupKeyVaultPtrOutput {
	return o.ApplyT(func(v VariableGroupKeyVault) *VariableGroupKeyVault {
		return &v
	}).(VariableGroupKeyVaultPtrOutput)
}

// The name of the Variable Group.
func (o VariableGroupKeyVaultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VariableGroupKeyVault) string { return v.Name }).(pulumi.StringOutput)
}

func (o VariableGroupKeyVaultOutput) ServiceEndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v VariableGroupKeyVault) string { return v.ServiceEndpointId }).(pulumi.StringOutput)
}

type VariableGroupKeyVaultPtrOutput struct{ *pulumi.OutputState }

func (VariableGroupKeyVaultPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VariableGroupKeyVault)(nil)).Elem()
}

func (o VariableGroupKeyVaultPtrOutput) ToVariableGroupKeyVaultPtrOutput() VariableGroupKeyVaultPtrOutput {
	return o
}

func (o VariableGroupKeyVaultPtrOutput) ToVariableGroupKeyVaultPtrOutputWithContext(ctx context.Context) VariableGroupKeyVaultPtrOutput {
	return o
}

func (o VariableGroupKeyVaultPtrOutput) Elem() VariableGroupKeyVaultOutput {
	return o.ApplyT(func(v *VariableGroupKeyVault) VariableGroupKeyVault { return *v }).(VariableGroupKeyVaultOutput)
}

// The name of the Variable Group.
func (o VariableGroupKeyVaultPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VariableGroupKeyVault) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

func (o VariableGroupKeyVaultPtrOutput) ServiceEndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VariableGroupKeyVault) *string {
		if v == nil {
			return nil
		}
		return &v.ServiceEndpointId
	}).(pulumi.StringPtrOutput)
}

type VariableGroupVariable struct {
	ContentType *string `pulumi:"contentType"`
	Enabled     *bool   `pulumi:"enabled"`
	Expires     *string `pulumi:"expires"`
	// A boolean flag describing if the variable value is sensitive. Defaults to `false`.
	IsSecret *bool `pulumi:"isSecret"`
	// The key value used for the variable. Must be unique within the Variable Group.
	Name string `pulumi:"name"`
	// The secret value of the variable. If omitted, it will default to empty string. Used when `isSecret` set to `true`.
	SecretValue *string `pulumi:"secretValue"`
	// The value of the variable. If omitted, it will default to empty string.
	Value *string `pulumi:"value"`
}

// VariableGroupVariableInput is an input type that accepts VariableGroupVariableArgs and VariableGroupVariableOutput values.
// You can construct a concrete instance of `VariableGroupVariableInput` via:
//
//          VariableGroupVariableArgs{...}
type VariableGroupVariableInput interface {
	pulumi.Input

	ToVariableGroupVariableOutput() VariableGroupVariableOutput
	ToVariableGroupVariableOutputWithContext(context.Context) VariableGroupVariableOutput
}

type VariableGroupVariableArgs struct {
	ContentType pulumi.StringPtrInput `pulumi:"contentType"`
	Enabled     pulumi.BoolPtrInput   `pulumi:"enabled"`
	Expires     pulumi.StringPtrInput `pulumi:"expires"`
	// A boolean flag describing if the variable value is sensitive. Defaults to `false`.
	IsSecret pulumi.BoolPtrInput `pulumi:"isSecret"`
	// The key value used for the variable. Must be unique within the Variable Group.
	Name pulumi.StringInput `pulumi:"name"`
	// The secret value of the variable. If omitted, it will default to empty string. Used when `isSecret` set to `true`.
	SecretValue pulumi.StringPtrInput `pulumi:"secretValue"`
	// The value of the variable. If omitted, it will default to empty string.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (VariableGroupVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VariableGroupVariable)(nil)).Elem()
}

func (i VariableGroupVariableArgs) ToVariableGroupVariableOutput() VariableGroupVariableOutput {
	return i.ToVariableGroupVariableOutputWithContext(context.Background())
}

func (i VariableGroupVariableArgs) ToVariableGroupVariableOutputWithContext(ctx context.Context) VariableGroupVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariableGroupVariableOutput)
}

// VariableGroupVariableArrayInput is an input type that accepts VariableGroupVariableArray and VariableGroupVariableArrayOutput values.
// You can construct a concrete instance of `VariableGroupVariableArrayInput` via:
//
//          VariableGroupVariableArray{ VariableGroupVariableArgs{...} }
type VariableGroupVariableArrayInput interface {
	pulumi.Input

	ToVariableGroupVariableArrayOutput() VariableGroupVariableArrayOutput
	ToVariableGroupVariableArrayOutputWithContext(context.Context) VariableGroupVariableArrayOutput
}

type VariableGroupVariableArray []VariableGroupVariableInput

func (VariableGroupVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VariableGroupVariable)(nil)).Elem()
}

func (i VariableGroupVariableArray) ToVariableGroupVariableArrayOutput() VariableGroupVariableArrayOutput {
	return i.ToVariableGroupVariableArrayOutputWithContext(context.Background())
}

func (i VariableGroupVariableArray) ToVariableGroupVariableArrayOutputWithContext(ctx context.Context) VariableGroupVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariableGroupVariableArrayOutput)
}

type VariableGroupVariableOutput struct{ *pulumi.OutputState }

func (VariableGroupVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VariableGroupVariable)(nil)).Elem()
}

func (o VariableGroupVariableOutput) ToVariableGroupVariableOutput() VariableGroupVariableOutput {
	return o
}

func (o VariableGroupVariableOutput) ToVariableGroupVariableOutputWithContext(ctx context.Context) VariableGroupVariableOutput {
	return o
}

func (o VariableGroupVariableOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VariableGroupVariable) *string { return v.ContentType }).(pulumi.StringPtrOutput)
}

func (o VariableGroupVariableOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VariableGroupVariable) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o VariableGroupVariableOutput) Expires() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VariableGroupVariable) *string { return v.Expires }).(pulumi.StringPtrOutput)
}

// A boolean flag describing if the variable value is sensitive. Defaults to `false`.
func (o VariableGroupVariableOutput) IsSecret() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VariableGroupVariable) *bool { return v.IsSecret }).(pulumi.BoolPtrOutput)
}

// The key value used for the variable. Must be unique within the Variable Group.
func (o VariableGroupVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VariableGroupVariable) string { return v.Name }).(pulumi.StringOutput)
}

// The secret value of the variable. If omitted, it will default to empty string. Used when `isSecret` set to `true`.
func (o VariableGroupVariableOutput) SecretValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VariableGroupVariable) *string { return v.SecretValue }).(pulumi.StringPtrOutput)
}

// The value of the variable. If omitted, it will default to empty string.
func (o VariableGroupVariableOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VariableGroupVariable) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type VariableGroupVariableArrayOutput struct{ *pulumi.OutputState }

func (VariableGroupVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VariableGroupVariable)(nil)).Elem()
}

func (o VariableGroupVariableArrayOutput) ToVariableGroupVariableArrayOutput() VariableGroupVariableArrayOutput {
	return o
}

func (o VariableGroupVariableArrayOutput) ToVariableGroupVariableArrayOutputWithContext(ctx context.Context) VariableGroupVariableArrayOutput {
	return o
}

func (o VariableGroupVariableArrayOutput) Index(i pulumi.IntInput) VariableGroupVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VariableGroupVariable {
		return vs[0].([]VariableGroupVariable)[vs[1].(int)]
	}).(VariableGroupVariableOutput)
}

type GetAreaChildren struct {
	// Indicator if the child Area node has child nodes
	HasChildren bool `pulumi:"hasChildren"`
	// The id of the child Area node
	Id string `pulumi:"id"`
	// The name of the child Area node
	Name string `pulumi:"name"`
	// The path to the Area; _Format_: URL relative; if omitted, or value `"/"` is used, the root Area will be returned
	Path string `pulumi:"path"`
	// The project ID.
	ProjectId string `pulumi:"projectId"`
}

// GetAreaChildrenInput is an input type that accepts GetAreaChildrenArgs and GetAreaChildrenOutput values.
// You can construct a concrete instance of `GetAreaChildrenInput` via:
//
//          GetAreaChildrenArgs{...}
type GetAreaChildrenInput interface {
	pulumi.Input

	ToGetAreaChildrenOutput() GetAreaChildrenOutput
	ToGetAreaChildrenOutputWithContext(context.Context) GetAreaChildrenOutput
}

type GetAreaChildrenArgs struct {
	// Indicator if the child Area node has child nodes
	HasChildren pulumi.BoolInput `pulumi:"hasChildren"`
	// The id of the child Area node
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the child Area node
	Name pulumi.StringInput `pulumi:"name"`
	// The path to the Area; _Format_: URL relative; if omitted, or value `"/"` is used, the root Area will be returned
	Path pulumi.StringInput `pulumi:"path"`
	// The project ID.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (GetAreaChildrenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAreaChildren)(nil)).Elem()
}

func (i GetAreaChildrenArgs) ToGetAreaChildrenOutput() GetAreaChildrenOutput {
	return i.ToGetAreaChildrenOutputWithContext(context.Background())
}

func (i GetAreaChildrenArgs) ToGetAreaChildrenOutputWithContext(ctx context.Context) GetAreaChildrenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAreaChildrenOutput)
}

// GetAreaChildrenArrayInput is an input type that accepts GetAreaChildrenArray and GetAreaChildrenArrayOutput values.
// You can construct a concrete instance of `GetAreaChildrenArrayInput` via:
//
//          GetAreaChildrenArray{ GetAreaChildrenArgs{...} }
type GetAreaChildrenArrayInput interface {
	pulumi.Input

	ToGetAreaChildrenArrayOutput() GetAreaChildrenArrayOutput
	ToGetAreaChildrenArrayOutputWithContext(context.Context) GetAreaChildrenArrayOutput
}

type GetAreaChildrenArray []GetAreaChildrenInput

func (GetAreaChildrenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAreaChildren)(nil)).Elem()
}

func (i GetAreaChildrenArray) ToGetAreaChildrenArrayOutput() GetAreaChildrenArrayOutput {
	return i.ToGetAreaChildrenArrayOutputWithContext(context.Background())
}

func (i GetAreaChildrenArray) ToGetAreaChildrenArrayOutputWithContext(ctx context.Context) GetAreaChildrenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAreaChildrenArrayOutput)
}

type GetAreaChildrenOutput struct{ *pulumi.OutputState }

func (GetAreaChildrenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAreaChildren)(nil)).Elem()
}

func (o GetAreaChildrenOutput) ToGetAreaChildrenOutput() GetAreaChildrenOutput {
	return o
}

func (o GetAreaChildrenOutput) ToGetAreaChildrenOutputWithContext(ctx context.Context) GetAreaChildrenOutput {
	return o
}

// Indicator if the child Area node has child nodes
func (o GetAreaChildrenOutput) HasChildren() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAreaChildren) bool { return v.HasChildren }).(pulumi.BoolOutput)
}

// The id of the child Area node
func (o GetAreaChildrenOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAreaChildren) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the child Area node
func (o GetAreaChildrenOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAreaChildren) string { return v.Name }).(pulumi.StringOutput)
}

// The path to the Area; _Format_: URL relative; if omitted, or value `"/"` is used, the root Area will be returned
func (o GetAreaChildrenOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetAreaChildren) string { return v.Path }).(pulumi.StringOutput)
}

// The project ID.
func (o GetAreaChildrenOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAreaChildren) string { return v.ProjectId }).(pulumi.StringOutput)
}

type GetAreaChildrenArrayOutput struct{ *pulumi.OutputState }

func (GetAreaChildrenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAreaChildren)(nil)).Elem()
}

func (o GetAreaChildrenArrayOutput) ToGetAreaChildrenArrayOutput() GetAreaChildrenArrayOutput {
	return o
}

func (o GetAreaChildrenArrayOutput) ToGetAreaChildrenArrayOutputWithContext(ctx context.Context) GetAreaChildrenArrayOutput {
	return o
}

func (o GetAreaChildrenArrayOutput) Index(i pulumi.IntInput) GetAreaChildrenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAreaChildren {
		return vs[0].([]GetAreaChildren)[vs[1].(int)]
	}).(GetAreaChildrenOutput)
}

type GetIterationChildren struct {
	// Indicator if the child Iteration node has child nodes
	HasChildren bool `pulumi:"hasChildren"`
	// The id of the child Iteration node
	Id string `pulumi:"id"`
	// The name of the child Iteration node
	Name string `pulumi:"name"`
	// The path to the Iteration, _Format_: URL relative; if omitted, or value `"/"` is used, the root Iteration will be returned
	Path string `pulumi:"path"`
	// The project ID.
	ProjectId string `pulumi:"projectId"`
}

// GetIterationChildrenInput is an input type that accepts GetIterationChildrenArgs and GetIterationChildrenOutput values.
// You can construct a concrete instance of `GetIterationChildrenInput` via:
//
//          GetIterationChildrenArgs{...}
type GetIterationChildrenInput interface {
	pulumi.Input

	ToGetIterationChildrenOutput() GetIterationChildrenOutput
	ToGetIterationChildrenOutputWithContext(context.Context) GetIterationChildrenOutput
}

type GetIterationChildrenArgs struct {
	// Indicator if the child Iteration node has child nodes
	HasChildren pulumi.BoolInput `pulumi:"hasChildren"`
	// The id of the child Iteration node
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the child Iteration node
	Name pulumi.StringInput `pulumi:"name"`
	// The path to the Iteration, _Format_: URL relative; if omitted, or value `"/"` is used, the root Iteration will be returned
	Path pulumi.StringInput `pulumi:"path"`
	// The project ID.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (GetIterationChildrenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIterationChildren)(nil)).Elem()
}

func (i GetIterationChildrenArgs) ToGetIterationChildrenOutput() GetIterationChildrenOutput {
	return i.ToGetIterationChildrenOutputWithContext(context.Background())
}

func (i GetIterationChildrenArgs) ToGetIterationChildrenOutputWithContext(ctx context.Context) GetIterationChildrenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIterationChildrenOutput)
}

// GetIterationChildrenArrayInput is an input type that accepts GetIterationChildrenArray and GetIterationChildrenArrayOutput values.
// You can construct a concrete instance of `GetIterationChildrenArrayInput` via:
//
//          GetIterationChildrenArray{ GetIterationChildrenArgs{...} }
type GetIterationChildrenArrayInput interface {
	pulumi.Input

	ToGetIterationChildrenArrayOutput() GetIterationChildrenArrayOutput
	ToGetIterationChildrenArrayOutputWithContext(context.Context) GetIterationChildrenArrayOutput
}

type GetIterationChildrenArray []GetIterationChildrenInput

func (GetIterationChildrenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIterationChildren)(nil)).Elem()
}

func (i GetIterationChildrenArray) ToGetIterationChildrenArrayOutput() GetIterationChildrenArrayOutput {
	return i.ToGetIterationChildrenArrayOutputWithContext(context.Background())
}

func (i GetIterationChildrenArray) ToGetIterationChildrenArrayOutputWithContext(ctx context.Context) GetIterationChildrenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIterationChildrenArrayOutput)
}

type GetIterationChildrenOutput struct{ *pulumi.OutputState }

func (GetIterationChildrenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIterationChildren)(nil)).Elem()
}

func (o GetIterationChildrenOutput) ToGetIterationChildrenOutput() GetIterationChildrenOutput {
	return o
}

func (o GetIterationChildrenOutput) ToGetIterationChildrenOutputWithContext(ctx context.Context) GetIterationChildrenOutput {
	return o
}

// Indicator if the child Iteration node has child nodes
func (o GetIterationChildrenOutput) HasChildren() pulumi.BoolOutput {
	return o.ApplyT(func(v GetIterationChildren) bool { return v.HasChildren }).(pulumi.BoolOutput)
}

// The id of the child Iteration node
func (o GetIterationChildrenOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetIterationChildren) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the child Iteration node
func (o GetIterationChildrenOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetIterationChildren) string { return v.Name }).(pulumi.StringOutput)
}

// The path to the Iteration, _Format_: URL relative; if omitted, or value `"/"` is used, the root Iteration will be returned
func (o GetIterationChildrenOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetIterationChildren) string { return v.Path }).(pulumi.StringOutput)
}

// The project ID.
func (o GetIterationChildrenOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetIterationChildren) string { return v.ProjectId }).(pulumi.StringOutput)
}

type GetIterationChildrenArrayOutput struct{ *pulumi.OutputState }

func (GetIterationChildrenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIterationChildren)(nil)).Elem()
}

func (o GetIterationChildrenArrayOutput) ToGetIterationChildrenArrayOutput() GetIterationChildrenArrayOutput {
	return o
}

func (o GetIterationChildrenArrayOutput) ToGetIterationChildrenArrayOutputWithContext(ctx context.Context) GetIterationChildrenArrayOutput {
	return o
}

func (o GetIterationChildrenArrayOutput) Index(i pulumi.IntInput) GetIterationChildrenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetIterationChildren {
		return vs[0].([]GetIterationChildren)[vs[1].(int)]
	}).(GetIterationChildrenOutput)
}

type GetPoolsAgentPool struct {
	// Specifies whether or not a queue should be automatically provisioned for each project collection.
	AutoProvision bool `pulumi:"autoProvision"`
	Id            int  `pulumi:"id"`
	// The name of the agent pool
	Name string `pulumi:"name"`
	// Specifies whether the agent pool type is Automation or Deployment.
	PoolType string `pulumi:"poolType"`
}

// GetPoolsAgentPoolInput is an input type that accepts GetPoolsAgentPoolArgs and GetPoolsAgentPoolOutput values.
// You can construct a concrete instance of `GetPoolsAgentPoolInput` via:
//
//          GetPoolsAgentPoolArgs{...}
type GetPoolsAgentPoolInput interface {
	pulumi.Input

	ToGetPoolsAgentPoolOutput() GetPoolsAgentPoolOutput
	ToGetPoolsAgentPoolOutputWithContext(context.Context) GetPoolsAgentPoolOutput
}

type GetPoolsAgentPoolArgs struct {
	// Specifies whether or not a queue should be automatically provisioned for each project collection.
	AutoProvision pulumi.BoolInput `pulumi:"autoProvision"`
	Id            pulumi.IntInput  `pulumi:"id"`
	// The name of the agent pool
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies whether the agent pool type is Automation or Deployment.
	PoolType pulumi.StringInput `pulumi:"poolType"`
}

func (GetPoolsAgentPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPoolsAgentPool)(nil)).Elem()
}

func (i GetPoolsAgentPoolArgs) ToGetPoolsAgentPoolOutput() GetPoolsAgentPoolOutput {
	return i.ToGetPoolsAgentPoolOutputWithContext(context.Background())
}

func (i GetPoolsAgentPoolArgs) ToGetPoolsAgentPoolOutputWithContext(ctx context.Context) GetPoolsAgentPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPoolsAgentPoolOutput)
}

// GetPoolsAgentPoolArrayInput is an input type that accepts GetPoolsAgentPoolArray and GetPoolsAgentPoolArrayOutput values.
// You can construct a concrete instance of `GetPoolsAgentPoolArrayInput` via:
//
//          GetPoolsAgentPoolArray{ GetPoolsAgentPoolArgs{...} }
type GetPoolsAgentPoolArrayInput interface {
	pulumi.Input

	ToGetPoolsAgentPoolArrayOutput() GetPoolsAgentPoolArrayOutput
	ToGetPoolsAgentPoolArrayOutputWithContext(context.Context) GetPoolsAgentPoolArrayOutput
}

type GetPoolsAgentPoolArray []GetPoolsAgentPoolInput

func (GetPoolsAgentPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPoolsAgentPool)(nil)).Elem()
}

func (i GetPoolsAgentPoolArray) ToGetPoolsAgentPoolArrayOutput() GetPoolsAgentPoolArrayOutput {
	return i.ToGetPoolsAgentPoolArrayOutputWithContext(context.Background())
}

func (i GetPoolsAgentPoolArray) ToGetPoolsAgentPoolArrayOutputWithContext(ctx context.Context) GetPoolsAgentPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPoolsAgentPoolArrayOutput)
}

type GetPoolsAgentPoolOutput struct{ *pulumi.OutputState }

func (GetPoolsAgentPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPoolsAgentPool)(nil)).Elem()
}

func (o GetPoolsAgentPoolOutput) ToGetPoolsAgentPoolOutput() GetPoolsAgentPoolOutput {
	return o
}

func (o GetPoolsAgentPoolOutput) ToGetPoolsAgentPoolOutputWithContext(ctx context.Context) GetPoolsAgentPoolOutput {
	return o
}

// Specifies whether or not a queue should be automatically provisioned for each project collection.
func (o GetPoolsAgentPoolOutput) AutoProvision() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPoolsAgentPool) bool { return v.AutoProvision }).(pulumi.BoolOutput)
}

func (o GetPoolsAgentPoolOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetPoolsAgentPool) int { return v.Id }).(pulumi.IntOutput)
}

// The name of the agent pool
func (o GetPoolsAgentPoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPoolsAgentPool) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies whether the agent pool type is Automation or Deployment.
func (o GetPoolsAgentPoolOutput) PoolType() pulumi.StringOutput {
	return o.ApplyT(func(v GetPoolsAgentPool) string { return v.PoolType }).(pulumi.StringOutput)
}

type GetPoolsAgentPoolArrayOutput struct{ *pulumi.OutputState }

func (GetPoolsAgentPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPoolsAgentPool)(nil)).Elem()
}

func (o GetPoolsAgentPoolArrayOutput) ToGetPoolsAgentPoolArrayOutput() GetPoolsAgentPoolArrayOutput {
	return o
}

func (o GetPoolsAgentPoolArrayOutput) ToGetPoolsAgentPoolArrayOutputWithContext(ctx context.Context) GetPoolsAgentPoolArrayOutput {
	return o
}

func (o GetPoolsAgentPoolArrayOutput) Index(i pulumi.IntInput) GetPoolsAgentPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPoolsAgentPool {
		return vs[0].([]GetPoolsAgentPool)[vs[1].(int)]
	}).(GetPoolsAgentPoolOutput)
}

type GetProjectsProject struct {
	// Name of the Project, if not specified all projects will be returned.
	Name string `pulumi:"name"`
	// Project identifier.
	ProjectId string `pulumi:"projectId"`
	// Url to the full version of the object.
	ProjectUrl string `pulumi:"projectUrl"`
	// State of the Project, if not specified all projects will be returned. Valid values are `all`, `deleting`, `new`, `wellFormed`, `createPending`, `unchanged`,`deleted`.
	State string `pulumi:"state"`
}

// GetProjectsProjectInput is an input type that accepts GetProjectsProjectArgs and GetProjectsProjectOutput values.
// You can construct a concrete instance of `GetProjectsProjectInput` via:
//
//          GetProjectsProjectArgs{...}
type GetProjectsProjectInput interface {
	pulumi.Input

	ToGetProjectsProjectOutput() GetProjectsProjectOutput
	ToGetProjectsProjectOutputWithContext(context.Context) GetProjectsProjectOutput
}

type GetProjectsProjectArgs struct {
	// Name of the Project, if not specified all projects will be returned.
	Name pulumi.StringInput `pulumi:"name"`
	// Project identifier.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// Url to the full version of the object.
	ProjectUrl pulumi.StringInput `pulumi:"projectUrl"`
	// State of the Project, if not specified all projects will be returned. Valid values are `all`, `deleting`, `new`, `wellFormed`, `createPending`, `unchanged`,`deleted`.
	State pulumi.StringInput `pulumi:"state"`
}

func (GetProjectsProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProject)(nil)).Elem()
}

func (i GetProjectsProjectArgs) ToGetProjectsProjectOutput() GetProjectsProjectOutput {
	return i.ToGetProjectsProjectOutputWithContext(context.Background())
}

func (i GetProjectsProjectArgs) ToGetProjectsProjectOutputWithContext(ctx context.Context) GetProjectsProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectOutput)
}

// GetProjectsProjectArrayInput is an input type that accepts GetProjectsProjectArray and GetProjectsProjectArrayOutput values.
// You can construct a concrete instance of `GetProjectsProjectArrayInput` via:
//
//          GetProjectsProjectArray{ GetProjectsProjectArgs{...} }
type GetProjectsProjectArrayInput interface {
	pulumi.Input

	ToGetProjectsProjectArrayOutput() GetProjectsProjectArrayOutput
	ToGetProjectsProjectArrayOutputWithContext(context.Context) GetProjectsProjectArrayOutput
}

type GetProjectsProjectArray []GetProjectsProjectInput

func (GetProjectsProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProject)(nil)).Elem()
}

func (i GetProjectsProjectArray) ToGetProjectsProjectArrayOutput() GetProjectsProjectArrayOutput {
	return i.ToGetProjectsProjectArrayOutputWithContext(context.Background())
}

func (i GetProjectsProjectArray) ToGetProjectsProjectArrayOutputWithContext(ctx context.Context) GetProjectsProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectArrayOutput)
}

type GetProjectsProjectOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProject)(nil)).Elem()
}

func (o GetProjectsProjectOutput) ToGetProjectsProjectOutput() GetProjectsProjectOutput {
	return o
}

func (o GetProjectsProjectOutput) ToGetProjectsProjectOutputWithContext(ctx context.Context) GetProjectsProjectOutput {
	return o
}

// Name of the Project, if not specified all projects will be returned.
func (o GetProjectsProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.Name }).(pulumi.StringOutput)
}

// Project identifier.
func (o GetProjectsProjectOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Url to the full version of the object.
func (o GetProjectsProjectOutput) ProjectUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.ProjectUrl }).(pulumi.StringOutput)
}

// State of the Project, if not specified all projects will be returned. Valid values are `all`, `deleting`, `new`, `wellFormed`, `createPending`, `unchanged`,`deleted`.
func (o GetProjectsProjectOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.State }).(pulumi.StringOutput)
}

type GetProjectsProjectArrayOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProject)(nil)).Elem()
}

func (o GetProjectsProjectArrayOutput) ToGetProjectsProjectArrayOutput() GetProjectsProjectArrayOutput {
	return o
}

func (o GetProjectsProjectArrayOutput) ToGetProjectsProjectArrayOutputWithContext(ctx context.Context) GetProjectsProjectArrayOutput {
	return o
}

func (o GetProjectsProjectArrayOutput) Index(i pulumi.IntInput) GetProjectsProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectsProject {
		return vs[0].([]GetProjectsProject)[vs[1].(int)]
	}).(GetProjectsProjectOutput)
}

type GetRepositoriesRepository struct {
	// The ref of the default branch.
	DefaultBranch string `pulumi:"defaultBranch"`
	// Git repository identifier.
	Id string `pulumi:"id"`
	// Name of the Git repository to retrieve; requires `projectId` to be specified as well
	Name string `pulumi:"name"`
	// ID of project to list Git repositories
	ProjectId string `pulumi:"projectId"`
	// HTTPS Url to clone the Git repository
	RemoteUrl string `pulumi:"remoteUrl"`
	// Compressed size (bytes) of the repository.
	Size int `pulumi:"size"`
	// SSH Url to clone the Git repository
	SshUrl string `pulumi:"sshUrl"`
	// Details REST API endpoint for the Git Repository.
	Url string `pulumi:"url"`
	// Url of the Git repository web view
	WebUrl string `pulumi:"webUrl"`
}

// GetRepositoriesRepositoryInput is an input type that accepts GetRepositoriesRepositoryArgs and GetRepositoriesRepositoryOutput values.
// You can construct a concrete instance of `GetRepositoriesRepositoryInput` via:
//
//          GetRepositoriesRepositoryArgs{...}
type GetRepositoriesRepositoryInput interface {
	pulumi.Input

	ToGetRepositoriesRepositoryOutput() GetRepositoriesRepositoryOutput
	ToGetRepositoriesRepositoryOutputWithContext(context.Context) GetRepositoriesRepositoryOutput
}

type GetRepositoriesRepositoryArgs struct {
	// The ref of the default branch.
	DefaultBranch pulumi.StringInput `pulumi:"defaultBranch"`
	// Git repository identifier.
	Id pulumi.StringInput `pulumi:"id"`
	// Name of the Git repository to retrieve; requires `projectId` to be specified as well
	Name pulumi.StringInput `pulumi:"name"`
	// ID of project to list Git repositories
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// HTTPS Url to clone the Git repository
	RemoteUrl pulumi.StringInput `pulumi:"remoteUrl"`
	// Compressed size (bytes) of the repository.
	Size pulumi.IntInput `pulumi:"size"`
	// SSH Url to clone the Git repository
	SshUrl pulumi.StringInput `pulumi:"sshUrl"`
	// Details REST API endpoint for the Git Repository.
	Url pulumi.StringInput `pulumi:"url"`
	// Url of the Git repository web view
	WebUrl pulumi.StringInput `pulumi:"webUrl"`
}

func (GetRepositoriesRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoriesRepository)(nil)).Elem()
}

func (i GetRepositoriesRepositoryArgs) ToGetRepositoriesRepositoryOutput() GetRepositoriesRepositoryOutput {
	return i.ToGetRepositoriesRepositoryOutputWithContext(context.Background())
}

func (i GetRepositoriesRepositoryArgs) ToGetRepositoriesRepositoryOutputWithContext(ctx context.Context) GetRepositoriesRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoriesRepositoryOutput)
}

// GetRepositoriesRepositoryArrayInput is an input type that accepts GetRepositoriesRepositoryArray and GetRepositoriesRepositoryArrayOutput values.
// You can construct a concrete instance of `GetRepositoriesRepositoryArrayInput` via:
//
//          GetRepositoriesRepositoryArray{ GetRepositoriesRepositoryArgs{...} }
type GetRepositoriesRepositoryArrayInput interface {
	pulumi.Input

	ToGetRepositoriesRepositoryArrayOutput() GetRepositoriesRepositoryArrayOutput
	ToGetRepositoriesRepositoryArrayOutputWithContext(context.Context) GetRepositoriesRepositoryArrayOutput
}

type GetRepositoriesRepositoryArray []GetRepositoriesRepositoryInput

func (GetRepositoriesRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoriesRepository)(nil)).Elem()
}

func (i GetRepositoriesRepositoryArray) ToGetRepositoriesRepositoryArrayOutput() GetRepositoriesRepositoryArrayOutput {
	return i.ToGetRepositoriesRepositoryArrayOutputWithContext(context.Background())
}

func (i GetRepositoriesRepositoryArray) ToGetRepositoriesRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoriesRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoriesRepositoryArrayOutput)
}

type GetRepositoriesRepositoryOutput struct{ *pulumi.OutputState }

func (GetRepositoriesRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoriesRepository)(nil)).Elem()
}

func (o GetRepositoriesRepositoryOutput) ToGetRepositoriesRepositoryOutput() GetRepositoriesRepositoryOutput {
	return o
}

func (o GetRepositoriesRepositoryOutput) ToGetRepositoriesRepositoryOutputWithContext(ctx context.Context) GetRepositoriesRepositoryOutput {
	return o
}

// The ref of the default branch.
func (o GetRepositoriesRepositoryOutput) DefaultBranch() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoriesRepository) string { return v.DefaultBranch }).(pulumi.StringOutput)
}

// Git repository identifier.
func (o GetRepositoriesRepositoryOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoriesRepository) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the Git repository to retrieve; requires `projectId` to be specified as well
func (o GetRepositoriesRepositoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoriesRepository) string { return v.Name }).(pulumi.StringOutput)
}

// ID of project to list Git repositories
func (o GetRepositoriesRepositoryOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoriesRepository) string { return v.ProjectId }).(pulumi.StringOutput)
}

// HTTPS Url to clone the Git repository
func (o GetRepositoriesRepositoryOutput) RemoteUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoriesRepository) string { return v.RemoteUrl }).(pulumi.StringOutput)
}

// Compressed size (bytes) of the repository.
func (o GetRepositoriesRepositoryOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetRepositoriesRepository) int { return v.Size }).(pulumi.IntOutput)
}

// SSH Url to clone the Git repository
func (o GetRepositoriesRepositoryOutput) SshUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoriesRepository) string { return v.SshUrl }).(pulumi.StringOutput)
}

// Details REST API endpoint for the Git Repository.
func (o GetRepositoriesRepositoryOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoriesRepository) string { return v.Url }).(pulumi.StringOutput)
}

// Url of the Git repository web view
func (o GetRepositoriesRepositoryOutput) WebUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoriesRepository) string { return v.WebUrl }).(pulumi.StringOutput)
}

type GetRepositoriesRepositoryArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoriesRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoriesRepository)(nil)).Elem()
}

func (o GetRepositoriesRepositoryArrayOutput) ToGetRepositoriesRepositoryArrayOutput() GetRepositoriesRepositoryArrayOutput {
	return o
}

func (o GetRepositoriesRepositoryArrayOutput) ToGetRepositoriesRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoriesRepositoryArrayOutput {
	return o
}

func (o GetRepositoriesRepositoryArrayOutput) Index(i pulumi.IntInput) GetRepositoriesRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoriesRepository {
		return vs[0].([]GetRepositoriesRepository)[vs[1].(int)]
	}).(GetRepositoriesRepositoryOutput)
}

type GetUsersUser struct {
	// The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.
	Descriptor string `pulumi:"descriptor"`
	// This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.
	DisplayName string `pulumi:"displayName"`
	// The email address of record for a given graph member. This may be different than the principal name.
	MailAddress string `pulumi:"mailAddress"`
	// The type of source provider for the `originId` parameter (ex:AD, AAD, MSA) The supported origins are listed below.
	Origin string `pulumi:"origin"`
	// The unique identifier from the system of origin.
	OriginId *string `pulumi:"originId"`
	// The PrincipalName of this graph member from the source provider.
	PrincipalName string `pulumi:"principalName"`
}

// GetUsersUserInput is an input type that accepts GetUsersUserArgs and GetUsersUserOutput values.
// You can construct a concrete instance of `GetUsersUserInput` via:
//
//          GetUsersUserArgs{...}
type GetUsersUserInput interface {
	pulumi.Input

	ToGetUsersUserOutput() GetUsersUserOutput
	ToGetUsersUserOutputWithContext(context.Context) GetUsersUserOutput
}

type GetUsersUserArgs struct {
	// The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.
	Descriptor pulumi.StringInput `pulumi:"descriptor"`
	// This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The email address of record for a given graph member. This may be different than the principal name.
	MailAddress pulumi.StringInput `pulumi:"mailAddress"`
	// The type of source provider for the `originId` parameter (ex:AD, AAD, MSA) The supported origins are listed below.
	Origin pulumi.StringInput `pulumi:"origin"`
	// The unique identifier from the system of origin.
	OriginId pulumi.StringPtrInput `pulumi:"originId"`
	// The PrincipalName of this graph member from the source provider.
	PrincipalName pulumi.StringInput `pulumi:"principalName"`
}

func (GetUsersUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArgs) ToGetUsersUserOutput() GetUsersUserOutput {
	return i.ToGetUsersUserOutputWithContext(context.Background())
}

func (i GetUsersUserArgs) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserOutput)
}

// GetUsersUserArrayInput is an input type that accepts GetUsersUserArray and GetUsersUserArrayOutput values.
// You can construct a concrete instance of `GetUsersUserArrayInput` via:
//
//          GetUsersUserArray{ GetUsersUserArgs{...} }
type GetUsersUserArrayInput interface {
	pulumi.Input

	ToGetUsersUserArrayOutput() GetUsersUserArrayOutput
	ToGetUsersUserArrayOutputWithContext(context.Context) GetUsersUserArrayOutput
}

type GetUsersUserArray []GetUsersUserInput

func (GetUsersUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return i.ToGetUsersUserArrayOutputWithContext(context.Background())
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserArrayOutput)
}

type GetUsersUserOutput struct{ *pulumi.OutputState }

func (GetUsersUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserOutput) ToGetUsersUserOutput() GetUsersUserOutput {
	return o
}

func (o GetUsersUserOutput) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return o
}

// The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.
func (o GetUsersUserOutput) Descriptor() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Descriptor }).(pulumi.StringOutput)
}

// This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.
func (o GetUsersUserOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The email address of record for a given graph member. This may be different than the principal name.
func (o GetUsersUserOutput) MailAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.MailAddress }).(pulumi.StringOutput)
}

// The type of source provider for the `originId` parameter (ex:AD, AAD, MSA) The supported origins are listed below.
func (o GetUsersUserOutput) Origin() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Origin }).(pulumi.StringOutput)
}

// The unique identifier from the system of origin.
func (o GetUsersUserOutput) OriginId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUsersUser) *string { return v.OriginId }).(pulumi.StringPtrOutput)
}

// The PrincipalName of this graph member from the source provider.
func (o GetUsersUserOutput) PrincipalName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.PrincipalName }).(pulumi.StringOutput)
}

type GetUsersUserArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) Index(i pulumi.IntInput) GetUsersUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUser {
		return vs[0].([]GetUsersUser)[vs[1].(int)]
	}).(GetUsersUserOutput)
}

func init() {
	pulumi.RegisterOutputType(BranchPolicyAutoReviewersSettingsOutput{})
	pulumi.RegisterOutputType(BranchPolicyAutoReviewersSettingsPtrOutput{})
	pulumi.RegisterOutputType(BranchPolicyAutoReviewersSettingsScopeOutput{})
	pulumi.RegisterOutputType(BranchPolicyAutoReviewersSettingsScopeArrayOutput{})
	pulumi.RegisterOutputType(BranchPolicyBuildValidationSettingsOutput{})
	pulumi.RegisterOutputType(BranchPolicyBuildValidationSettingsPtrOutput{})
	pulumi.RegisterOutputType(BranchPolicyBuildValidationSettingsScopeOutput{})
	pulumi.RegisterOutputType(BranchPolicyBuildValidationSettingsScopeArrayOutput{})
	pulumi.RegisterOutputType(BranchPolicyCommentResolutionSettingsOutput{})
	pulumi.RegisterOutputType(BranchPolicyCommentResolutionSettingsPtrOutput{})
	pulumi.RegisterOutputType(BranchPolicyCommentResolutionSettingsScopeOutput{})
	pulumi.RegisterOutputType(BranchPolicyCommentResolutionSettingsScopeArrayOutput{})
	pulumi.RegisterOutputType(BranchPolicyMinReviewersSettingsOutput{})
	pulumi.RegisterOutputType(BranchPolicyMinReviewersSettingsPtrOutput{})
	pulumi.RegisterOutputType(BranchPolicyMinReviewersSettingsScopeOutput{})
	pulumi.RegisterOutputType(BranchPolicyMinReviewersSettingsScopeArrayOutput{})
	pulumi.RegisterOutputType(BranchPolicyWorkItemLinkingSettingsOutput{})
	pulumi.RegisterOutputType(BranchPolicyWorkItemLinkingSettingsPtrOutput{})
	pulumi.RegisterOutputType(BranchPolicyWorkItemLinkingSettingsScopeOutput{})
	pulumi.RegisterOutputType(BranchPolicyWorkItemLinkingSettingsScopeArrayOutput{})
	pulumi.RegisterOutputType(BuildDefinitionCiTriggerOutput{})
	pulumi.RegisterOutputType(BuildDefinitionCiTriggerPtrOutput{})
	pulumi.RegisterOutputType(BuildDefinitionCiTriggerOverrideOutput{})
	pulumi.RegisterOutputType(BuildDefinitionCiTriggerOverridePtrOutput{})
	pulumi.RegisterOutputType(BuildDefinitionCiTriggerOverrideBranchFilterOutput{})
	pulumi.RegisterOutputType(BuildDefinitionCiTriggerOverrideBranchFilterArrayOutput{})
	pulumi.RegisterOutputType(BuildDefinitionCiTriggerOverridePathFilterOutput{})
	pulumi.RegisterOutputType(BuildDefinitionCiTriggerOverridePathFilterArrayOutput{})
	pulumi.RegisterOutputType(BuildDefinitionPullRequestTriggerOutput{})
	pulumi.RegisterOutputType(BuildDefinitionPullRequestTriggerPtrOutput{})
	pulumi.RegisterOutputType(BuildDefinitionPullRequestTriggerForksOutput{})
	pulumi.RegisterOutputType(BuildDefinitionPullRequestTriggerForksPtrOutput{})
	pulumi.RegisterOutputType(BuildDefinitionPullRequestTriggerOverrideOutput{})
	pulumi.RegisterOutputType(BuildDefinitionPullRequestTriggerOverridePtrOutput{})
	pulumi.RegisterOutputType(BuildDefinitionPullRequestTriggerOverrideBranchFilterOutput{})
	pulumi.RegisterOutputType(BuildDefinitionPullRequestTriggerOverrideBranchFilterArrayOutput{})
	pulumi.RegisterOutputType(BuildDefinitionPullRequestTriggerOverridePathFilterOutput{})
	pulumi.RegisterOutputType(BuildDefinitionPullRequestTriggerOverridePathFilterArrayOutput{})
	pulumi.RegisterOutputType(BuildDefinitionRepositoryOutput{})
	pulumi.RegisterOutputType(BuildDefinitionRepositoryPtrOutput{})
	pulumi.RegisterOutputType(BuildDefinitionVariableOutput{})
	pulumi.RegisterOutputType(BuildDefinitionVariableArrayOutput{})
	pulumi.RegisterOutputType(GitInitializationOutput{})
	pulumi.RegisterOutputType(GitInitializationPtrOutput{})
	pulumi.RegisterOutputType(ServiceEndpointAzureRMCredentialsOutput{})
	pulumi.RegisterOutputType(ServiceEndpointAzureRMCredentialsPtrOutput{})
	pulumi.RegisterOutputType(ServiceEndpointGitHubAuthOauthOutput{})
	pulumi.RegisterOutputType(ServiceEndpointGitHubAuthOauthPtrOutput{})
	pulumi.RegisterOutputType(ServiceEndpointGitHubAuthPersonalOutput{})
	pulumi.RegisterOutputType(ServiceEndpointGitHubAuthPersonalPtrOutput{})
	pulumi.RegisterOutputType(ServiceEndpointKubernetesAzureSubscriptionOutput{})
	pulumi.RegisterOutputType(ServiceEndpointKubernetesAzureSubscriptionArrayOutput{})
	pulumi.RegisterOutputType(ServiceEndpointKubernetesKubeconfigOutput{})
	pulumi.RegisterOutputType(ServiceEndpointKubernetesKubeconfigArrayOutput{})
	pulumi.RegisterOutputType(ServiceEndpointKubernetesServiceAccountOutput{})
	pulumi.RegisterOutputType(ServiceEndpointKubernetesServiceAccountArrayOutput{})
	pulumi.RegisterOutputType(VariableGroupKeyVaultOutput{})
	pulumi.RegisterOutputType(VariableGroupKeyVaultPtrOutput{})
	pulumi.RegisterOutputType(VariableGroupVariableOutput{})
	pulumi.RegisterOutputType(VariableGroupVariableArrayOutput{})
	pulumi.RegisterOutputType(GetAreaChildrenOutput{})
	pulumi.RegisterOutputType(GetAreaChildrenArrayOutput{})
	pulumi.RegisterOutputType(GetIterationChildrenOutput{})
	pulumi.RegisterOutputType(GetIterationChildrenArrayOutput{})
	pulumi.RegisterOutputType(GetPoolsAgentPoolOutput{})
	pulumi.RegisterOutputType(GetPoolsAgentPoolArrayOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoriesRepositoryOutput{})
	pulumi.RegisterOutputType(GetRepositoriesRepositoryArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserOutput{})
	pulumi.RegisterOutputType(GetUsersUserArrayOutput{})
}
