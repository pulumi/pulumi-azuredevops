// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azuredevops

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages Wikis within Azure DevOps project.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := azuredevops.NewProject(ctx, "example", &azuredevops.ProjectArgs{
//				Name:        pulumi.String("Example Project"),
//				Description: pulumi.String("Managed by Pulumi"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleGit, err := azuredevops.NewGit(ctx, "example", &azuredevops.GitArgs{
//				ProjectId: example.ID(),
//				Name:      pulumi.String("Example Repository"),
//				Initialization: &azuredevops.GitInitializationArgs{
//					InitType: pulumi.String("Clean"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = azuredevops.NewWiki(ctx, "example", &azuredevops.WikiArgs{
//				Name:      pulumi.String("Example project wiki "),
//				ProjectId: example.ID(),
//				Type:      pulumi.String("projectWiki"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = azuredevops.NewWiki(ctx, "example2", &azuredevops.WikiArgs{
//				Name:         pulumi.String("Example wiki in repository"),
//				ProjectId:    example.ID(),
//				RepositoryId: exampleGit.ID(),
//				Version:      pulumi.String("main"),
//				Type:         pulumi.String("codeWiki"),
//				MappedPath:   pulumi.String("/"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Relevant Links
//
// - [Azure DevOps Service REST API 7.1 - Wiki ](https://learn.microsoft.com/en-us/rest/api/azure/devops/wiki/wikis?view=azure-devops-rest-7.1)
//
// ## Import
//
// Azure DevOps Wiki can be imported using the `id`
//
// ```sh
// $ pulumi import azuredevops:index/wiki:Wiki wiki 00000000-0000-0000-0000-000000000000
// ```
type Wiki struct {
	pulumi.CustomResourceState

	// Folder path inside repository which is shown as Wiki.
	MappedPath pulumi.StringOutput `pulumi:"mappedPath"`
	// The name of the Wiki.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// The remote web url to the wiki.
	RemoteUrl pulumi.StringOutput `pulumi:"remoteUrl"`
	// The ID of the repository.
	RepositoryId pulumi.StringOutput `pulumi:"repositoryId"`
	// The type of the wiki. Possible values are `codeWiki`, `projectWiki`.
	Type pulumi.StringOutput `pulumi:"type"`
	// The REST url for this wiki.
	Url pulumi.StringOutput `pulumi:"url"`
	// Version of the wiki.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewWiki registers a new resource with the given unique name, arguments, and options.
func NewWiki(ctx *pulumi.Context,
	name string, args *WikiArgs, opts ...pulumi.ResourceOption) (*Wiki, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Wiki
	err := ctx.RegisterResource("azuredevops:index/wiki:Wiki", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWiki gets an existing Wiki resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWiki(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WikiState, opts ...pulumi.ResourceOption) (*Wiki, error) {
	var resource Wiki
	err := ctx.ReadResource("azuredevops:index/wiki:Wiki", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Wiki resources.
type wikiState struct {
	// Folder path inside repository which is shown as Wiki.
	MappedPath *string `pulumi:"mappedPath"`
	// The name of the Wiki.
	Name *string `pulumi:"name"`
	// The ID of the Project.
	ProjectId *string `pulumi:"projectId"`
	// The remote web url to the wiki.
	RemoteUrl *string `pulumi:"remoteUrl"`
	// The ID of the repository.
	RepositoryId *string `pulumi:"repositoryId"`
	// The type of the wiki. Possible values are `codeWiki`, `projectWiki`.
	Type *string `pulumi:"type"`
	// The REST url for this wiki.
	Url *string `pulumi:"url"`
	// Version of the wiki.
	Version *string `pulumi:"version"`
}

type WikiState struct {
	// Folder path inside repository which is shown as Wiki.
	MappedPath pulumi.StringPtrInput
	// The name of the Wiki.
	Name pulumi.StringPtrInput
	// The ID of the Project.
	ProjectId pulumi.StringPtrInput
	// The remote web url to the wiki.
	RemoteUrl pulumi.StringPtrInput
	// The ID of the repository.
	RepositoryId pulumi.StringPtrInput
	// The type of the wiki. Possible values are `codeWiki`, `projectWiki`.
	Type pulumi.StringPtrInput
	// The REST url for this wiki.
	Url pulumi.StringPtrInput
	// Version of the wiki.
	Version pulumi.StringPtrInput
}

func (WikiState) ElementType() reflect.Type {
	return reflect.TypeOf((*wikiState)(nil)).Elem()
}

type wikiArgs struct {
	// Folder path inside repository which is shown as Wiki.
	MappedPath *string `pulumi:"mappedPath"`
	// The name of the Wiki.
	Name *string `pulumi:"name"`
	// The ID of the Project.
	ProjectId *string `pulumi:"projectId"`
	// The ID of the repository.
	RepositoryId *string `pulumi:"repositoryId"`
	// The type of the wiki. Possible values are `codeWiki`, `projectWiki`.
	Type string `pulumi:"type"`
	// Version of the wiki.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a Wiki resource.
type WikiArgs struct {
	// Folder path inside repository which is shown as Wiki.
	MappedPath pulumi.StringPtrInput
	// The name of the Wiki.
	Name pulumi.StringPtrInput
	// The ID of the Project.
	ProjectId pulumi.StringPtrInput
	// The ID of the repository.
	RepositoryId pulumi.StringPtrInput
	// The type of the wiki. Possible values are `codeWiki`, `projectWiki`.
	Type pulumi.StringInput
	// Version of the wiki.
	Version pulumi.StringPtrInput
}

func (WikiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wikiArgs)(nil)).Elem()
}

type WikiInput interface {
	pulumi.Input

	ToWikiOutput() WikiOutput
	ToWikiOutputWithContext(ctx context.Context) WikiOutput
}

func (*Wiki) ElementType() reflect.Type {
	return reflect.TypeOf((**Wiki)(nil)).Elem()
}

func (i *Wiki) ToWikiOutput() WikiOutput {
	return i.ToWikiOutputWithContext(context.Background())
}

func (i *Wiki) ToWikiOutputWithContext(ctx context.Context) WikiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WikiOutput)
}

// WikiArrayInput is an input type that accepts WikiArray and WikiArrayOutput values.
// You can construct a concrete instance of `WikiArrayInput` via:
//
//	WikiArray{ WikiArgs{...} }
type WikiArrayInput interface {
	pulumi.Input

	ToWikiArrayOutput() WikiArrayOutput
	ToWikiArrayOutputWithContext(context.Context) WikiArrayOutput
}

type WikiArray []WikiInput

func (WikiArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Wiki)(nil)).Elem()
}

func (i WikiArray) ToWikiArrayOutput() WikiArrayOutput {
	return i.ToWikiArrayOutputWithContext(context.Background())
}

func (i WikiArray) ToWikiArrayOutputWithContext(ctx context.Context) WikiArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WikiArrayOutput)
}

// WikiMapInput is an input type that accepts WikiMap and WikiMapOutput values.
// You can construct a concrete instance of `WikiMapInput` via:
//
//	WikiMap{ "key": WikiArgs{...} }
type WikiMapInput interface {
	pulumi.Input

	ToWikiMapOutput() WikiMapOutput
	ToWikiMapOutputWithContext(context.Context) WikiMapOutput
}

type WikiMap map[string]WikiInput

func (WikiMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Wiki)(nil)).Elem()
}

func (i WikiMap) ToWikiMapOutput() WikiMapOutput {
	return i.ToWikiMapOutputWithContext(context.Background())
}

func (i WikiMap) ToWikiMapOutputWithContext(ctx context.Context) WikiMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WikiMapOutput)
}

type WikiOutput struct{ *pulumi.OutputState }

func (WikiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Wiki)(nil)).Elem()
}

func (o WikiOutput) ToWikiOutput() WikiOutput {
	return o
}

func (o WikiOutput) ToWikiOutputWithContext(ctx context.Context) WikiOutput {
	return o
}

// Folder path inside repository which is shown as Wiki.
func (o WikiOutput) MappedPath() pulumi.StringOutput {
	return o.ApplyT(func(v *Wiki) pulumi.StringOutput { return v.MappedPath }).(pulumi.StringOutput)
}

// The name of the Wiki.
func (o WikiOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Wiki) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Project.
func (o WikiOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Wiki) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// The remote web url to the wiki.
func (o WikiOutput) RemoteUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Wiki) pulumi.StringOutput { return v.RemoteUrl }).(pulumi.StringOutput)
}

// The ID of the repository.
func (o WikiOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *Wiki) pulumi.StringOutput { return v.RepositoryId }).(pulumi.StringOutput)
}

// The type of the wiki. Possible values are `codeWiki`, `projectWiki`.
func (o WikiOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Wiki) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The REST url for this wiki.
func (o WikiOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Wiki) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// Version of the wiki.
func (o WikiOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Wiki) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type WikiArrayOutput struct{ *pulumi.OutputState }

func (WikiArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Wiki)(nil)).Elem()
}

func (o WikiArrayOutput) ToWikiArrayOutput() WikiArrayOutput {
	return o
}

func (o WikiArrayOutput) ToWikiArrayOutputWithContext(ctx context.Context) WikiArrayOutput {
	return o
}

func (o WikiArrayOutput) Index(i pulumi.IntInput) WikiOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Wiki {
		return vs[0].([]*Wiki)[vs[1].(int)]
	}).(WikiOutput)
}

type WikiMapOutput struct{ *pulumi.OutputState }

func (WikiMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Wiki)(nil)).Elem()
}

func (o WikiMapOutput) ToWikiMapOutput() WikiMapOutput {
	return o
}

func (o WikiMapOutput) ToWikiMapOutputWithContext(ctx context.Context) WikiMapOutput {
	return o
}

func (o WikiMapOutput) MapIndex(k pulumi.StringInput) WikiOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Wiki {
		return vs[0].(map[string]*Wiki)[vs[1].(string)]
	}).(WikiOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WikiInput)(nil)).Elem(), &Wiki{})
	pulumi.RegisterInputType(reflect.TypeOf((*WikiArrayInput)(nil)).Elem(), WikiArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WikiMapInput)(nil)).Elem(), WikiMap{})
	pulumi.RegisterOutputType(WikiOutput{})
	pulumi.RegisterOutputType(WikiArrayOutput{})
	pulumi.RegisterOutputType(WikiMapOutput{})
}
