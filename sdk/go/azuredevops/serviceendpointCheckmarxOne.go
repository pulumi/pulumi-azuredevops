// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azuredevops

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Checkmarx One service endpoint within Azure DevOps. Using this service endpoint requires you to install: [Checkmarx AST](https://marketplace.visualstudio.com/items?itemName=checkmarx.checkmarx-ast-azure-plugin)
//
// ## Example Usage
//
// ### Authorize with API Key
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := azuredevops.NewProject(ctx, "example", &azuredevops.ProjectArgs{
//				Name:             pulumi.String("Example Project"),
//				Visibility:       pulumi.String("private"),
//				VersionControl:   pulumi.String("Git"),
//				WorkItemTemplate: pulumi.String("Agile"),
//				Description:      pulumi.String("Managed by Pulumi"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = azuredevops.NewServiceendpointCheckmarxOne(ctx, "example", &azuredevops.ServiceendpointCheckmarxOneArgs{
//				ProjectId:           example.ID(),
//				ServiceEndpointName: pulumi.String("Example Checkmarx One"),
//				ServerUrl:           pulumi.String("https://server.com"),
//				ApiKey:              pulumi.String("apikey"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Authorize with Client ID and Secret
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := azuredevops.NewProject(ctx, "example", &azuredevops.ProjectArgs{
//				Name:             pulumi.String("Example Project"),
//				Visibility:       pulumi.String("private"),
//				VersionControl:   pulumi.String("Git"),
//				WorkItemTemplate: pulumi.String("Agile"),
//				Description:      pulumi.String("Managed by Pulumi"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = azuredevops.NewServiceendpointCheckmarxOne(ctx, "example", &azuredevops.ServiceendpointCheckmarxOneArgs{
//				ProjectId:           example.ID(),
//				ServiceEndpointName: pulumi.String("Example Checkmarx One"),
//				ServerUrl:           pulumi.String("https://server.com"),
//				ClientId:            pulumi.String("clientid"),
//				ClientSecret:        pulumi.String("secret"),
//				AuthorizationUrl:    pulumi.String("https://authurl.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Relevant Links
//
// - [Azure DevOps Service REST API 7.0 - Service Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-7.0)
//
// ## Import
//
// Azure DevOps Service Endpoint Check Marx One can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**
//
// ```sh
// $ pulumi import azuredevops:index/serviceendpointCheckmarxOne:ServiceendpointCheckmarxOne example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000
// ```
type ServiceendpointCheckmarxOne struct {
	pulumi.CustomResourceState

	// The account of the Checkmarx One. Conflict with `clientId` and `clientSecret`.
	ApiKey        pulumi.StringPtrOutput `pulumi:"apiKey"`
	Authorization pulumi.StringMapOutput `pulumi:"authorization"`
	// The URL of Checkmarx Authorization. Used when using `clientId` and `clientSecret` authorization.
	AuthorizationUrl pulumi.StringPtrOutput `pulumi:"authorizationUrl"`
	// The Client ID of the Checkmarx One. Conflict with `apiKey`
	ClientId pulumi.StringPtrOutput `pulumi:"clientId"`
	// The Client Secret of the Checkmarx One. Conflict with `apiKey`
	//
	// > **Note** At least one of `apiKey` and `clientId`, `clientSecret` must be set
	ClientSecret pulumi.StringPtrOutput `pulumi:"clientSecret"`
	Description  pulumi.StringPtrOutput `pulumi:"description"`
	// The ID of the project.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The Server URL of the Checkmarx One Service.
	ServerUrl pulumi.StringOutput `pulumi:"serverUrl"`
	// The Service Endpoint name.
	ServiceEndpointName pulumi.StringOutput `pulumi:"serviceEndpointName"`
}

// NewServiceendpointCheckmarxOne registers a new resource with the given unique name, arguments, and options.
func NewServiceendpointCheckmarxOne(ctx *pulumi.Context,
	name string, args *ServiceendpointCheckmarxOneArgs, opts ...pulumi.ResourceOption) (*ServiceendpointCheckmarxOne, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.ServerUrl == nil {
		return nil, errors.New("invalid value for required argument 'ServerUrl'")
	}
	if args.ServiceEndpointName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceEndpointName'")
	}
	if args.ApiKey != nil {
		args.ApiKey = pulumi.ToSecret(args.ApiKey).(pulumi.StringPtrInput)
	}
	if args.ClientSecret != nil {
		args.ClientSecret = pulumi.ToSecret(args.ClientSecret).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"apiKey",
		"clientSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceendpointCheckmarxOne
	err := ctx.RegisterResource("azuredevops:index/serviceendpointCheckmarxOne:ServiceendpointCheckmarxOne", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceendpointCheckmarxOne gets an existing ServiceendpointCheckmarxOne resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceendpointCheckmarxOne(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceendpointCheckmarxOneState, opts ...pulumi.ResourceOption) (*ServiceendpointCheckmarxOne, error) {
	var resource ServiceendpointCheckmarxOne
	err := ctx.ReadResource("azuredevops:index/serviceendpointCheckmarxOne:ServiceendpointCheckmarxOne", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceendpointCheckmarxOne resources.
type serviceendpointCheckmarxOneState struct {
	// The account of the Checkmarx One. Conflict with `clientId` and `clientSecret`.
	ApiKey        *string           `pulumi:"apiKey"`
	Authorization map[string]string `pulumi:"authorization"`
	// The URL of Checkmarx Authorization. Used when using `clientId` and `clientSecret` authorization.
	AuthorizationUrl *string `pulumi:"authorizationUrl"`
	// The Client ID of the Checkmarx One. Conflict with `apiKey`
	ClientId *string `pulumi:"clientId"`
	// The Client Secret of the Checkmarx One. Conflict with `apiKey`
	//
	// > **Note** At least one of `apiKey` and `clientId`, `clientSecret` must be set
	ClientSecret *string `pulumi:"clientSecret"`
	Description  *string `pulumi:"description"`
	// The ID of the project.
	ProjectId *string `pulumi:"projectId"`
	// The Server URL of the Checkmarx One Service.
	ServerUrl *string `pulumi:"serverUrl"`
	// The Service Endpoint name.
	ServiceEndpointName *string `pulumi:"serviceEndpointName"`
}

type ServiceendpointCheckmarxOneState struct {
	// The account of the Checkmarx One. Conflict with `clientId` and `clientSecret`.
	ApiKey        pulumi.StringPtrInput
	Authorization pulumi.StringMapInput
	// The URL of Checkmarx Authorization. Used when using `clientId` and `clientSecret` authorization.
	AuthorizationUrl pulumi.StringPtrInput
	// The Client ID of the Checkmarx One. Conflict with `apiKey`
	ClientId pulumi.StringPtrInput
	// The Client Secret of the Checkmarx One. Conflict with `apiKey`
	//
	// > **Note** At least one of `apiKey` and `clientId`, `clientSecret` must be set
	ClientSecret pulumi.StringPtrInput
	Description  pulumi.StringPtrInput
	// The ID of the project.
	ProjectId pulumi.StringPtrInput
	// The Server URL of the Checkmarx One Service.
	ServerUrl pulumi.StringPtrInput
	// The Service Endpoint name.
	ServiceEndpointName pulumi.StringPtrInput
}

func (ServiceendpointCheckmarxOneState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceendpointCheckmarxOneState)(nil)).Elem()
}

type serviceendpointCheckmarxOneArgs struct {
	// The account of the Checkmarx One. Conflict with `clientId` and `clientSecret`.
	ApiKey *string `pulumi:"apiKey"`
	// The URL of Checkmarx Authorization. Used when using `clientId` and `clientSecret` authorization.
	AuthorizationUrl *string `pulumi:"authorizationUrl"`
	// The Client ID of the Checkmarx One. Conflict with `apiKey`
	ClientId *string `pulumi:"clientId"`
	// The Client Secret of the Checkmarx One. Conflict with `apiKey`
	//
	// > **Note** At least one of `apiKey` and `clientId`, `clientSecret` must be set
	ClientSecret *string `pulumi:"clientSecret"`
	Description  *string `pulumi:"description"`
	// The ID of the project.
	ProjectId string `pulumi:"projectId"`
	// The Server URL of the Checkmarx One Service.
	ServerUrl string `pulumi:"serverUrl"`
	// The Service Endpoint name.
	ServiceEndpointName string `pulumi:"serviceEndpointName"`
}

// The set of arguments for constructing a ServiceendpointCheckmarxOne resource.
type ServiceendpointCheckmarxOneArgs struct {
	// The account of the Checkmarx One. Conflict with `clientId` and `clientSecret`.
	ApiKey pulumi.StringPtrInput
	// The URL of Checkmarx Authorization. Used when using `clientId` and `clientSecret` authorization.
	AuthorizationUrl pulumi.StringPtrInput
	// The Client ID of the Checkmarx One. Conflict with `apiKey`
	ClientId pulumi.StringPtrInput
	// The Client Secret of the Checkmarx One. Conflict with `apiKey`
	//
	// > **Note** At least one of `apiKey` and `clientId`, `clientSecret` must be set
	ClientSecret pulumi.StringPtrInput
	Description  pulumi.StringPtrInput
	// The ID of the project.
	ProjectId pulumi.StringInput
	// The Server URL of the Checkmarx One Service.
	ServerUrl pulumi.StringInput
	// The Service Endpoint name.
	ServiceEndpointName pulumi.StringInput
}

func (ServiceendpointCheckmarxOneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceendpointCheckmarxOneArgs)(nil)).Elem()
}

type ServiceendpointCheckmarxOneInput interface {
	pulumi.Input

	ToServiceendpointCheckmarxOneOutput() ServiceendpointCheckmarxOneOutput
	ToServiceendpointCheckmarxOneOutputWithContext(ctx context.Context) ServiceendpointCheckmarxOneOutput
}

func (*ServiceendpointCheckmarxOne) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceendpointCheckmarxOne)(nil)).Elem()
}

func (i *ServiceendpointCheckmarxOne) ToServiceendpointCheckmarxOneOutput() ServiceendpointCheckmarxOneOutput {
	return i.ToServiceendpointCheckmarxOneOutputWithContext(context.Background())
}

func (i *ServiceendpointCheckmarxOne) ToServiceendpointCheckmarxOneOutputWithContext(ctx context.Context) ServiceendpointCheckmarxOneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceendpointCheckmarxOneOutput)
}

// ServiceendpointCheckmarxOneArrayInput is an input type that accepts ServiceendpointCheckmarxOneArray and ServiceendpointCheckmarxOneArrayOutput values.
// You can construct a concrete instance of `ServiceendpointCheckmarxOneArrayInput` via:
//
//	ServiceendpointCheckmarxOneArray{ ServiceendpointCheckmarxOneArgs{...} }
type ServiceendpointCheckmarxOneArrayInput interface {
	pulumi.Input

	ToServiceendpointCheckmarxOneArrayOutput() ServiceendpointCheckmarxOneArrayOutput
	ToServiceendpointCheckmarxOneArrayOutputWithContext(context.Context) ServiceendpointCheckmarxOneArrayOutput
}

type ServiceendpointCheckmarxOneArray []ServiceendpointCheckmarxOneInput

func (ServiceendpointCheckmarxOneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceendpointCheckmarxOne)(nil)).Elem()
}

func (i ServiceendpointCheckmarxOneArray) ToServiceendpointCheckmarxOneArrayOutput() ServiceendpointCheckmarxOneArrayOutput {
	return i.ToServiceendpointCheckmarxOneArrayOutputWithContext(context.Background())
}

func (i ServiceendpointCheckmarxOneArray) ToServiceendpointCheckmarxOneArrayOutputWithContext(ctx context.Context) ServiceendpointCheckmarxOneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceendpointCheckmarxOneArrayOutput)
}

// ServiceendpointCheckmarxOneMapInput is an input type that accepts ServiceendpointCheckmarxOneMap and ServiceendpointCheckmarxOneMapOutput values.
// You can construct a concrete instance of `ServiceendpointCheckmarxOneMapInput` via:
//
//	ServiceendpointCheckmarxOneMap{ "key": ServiceendpointCheckmarxOneArgs{...} }
type ServiceendpointCheckmarxOneMapInput interface {
	pulumi.Input

	ToServiceendpointCheckmarxOneMapOutput() ServiceendpointCheckmarxOneMapOutput
	ToServiceendpointCheckmarxOneMapOutputWithContext(context.Context) ServiceendpointCheckmarxOneMapOutput
}

type ServiceendpointCheckmarxOneMap map[string]ServiceendpointCheckmarxOneInput

func (ServiceendpointCheckmarxOneMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceendpointCheckmarxOne)(nil)).Elem()
}

func (i ServiceendpointCheckmarxOneMap) ToServiceendpointCheckmarxOneMapOutput() ServiceendpointCheckmarxOneMapOutput {
	return i.ToServiceendpointCheckmarxOneMapOutputWithContext(context.Background())
}

func (i ServiceendpointCheckmarxOneMap) ToServiceendpointCheckmarxOneMapOutputWithContext(ctx context.Context) ServiceendpointCheckmarxOneMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceendpointCheckmarxOneMapOutput)
}

type ServiceendpointCheckmarxOneOutput struct{ *pulumi.OutputState }

func (ServiceendpointCheckmarxOneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceendpointCheckmarxOne)(nil)).Elem()
}

func (o ServiceendpointCheckmarxOneOutput) ToServiceendpointCheckmarxOneOutput() ServiceendpointCheckmarxOneOutput {
	return o
}

func (o ServiceendpointCheckmarxOneOutput) ToServiceendpointCheckmarxOneOutputWithContext(ctx context.Context) ServiceendpointCheckmarxOneOutput {
	return o
}

// The account of the Checkmarx One. Conflict with `clientId` and `clientSecret`.
func (o ServiceendpointCheckmarxOneOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceendpointCheckmarxOne) pulumi.StringPtrOutput { return v.ApiKey }).(pulumi.StringPtrOutput)
}

func (o ServiceendpointCheckmarxOneOutput) Authorization() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServiceendpointCheckmarxOne) pulumi.StringMapOutput { return v.Authorization }).(pulumi.StringMapOutput)
}

// The URL of Checkmarx Authorization. Used when using `clientId` and `clientSecret` authorization.
func (o ServiceendpointCheckmarxOneOutput) AuthorizationUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceendpointCheckmarxOne) pulumi.StringPtrOutput { return v.AuthorizationUrl }).(pulumi.StringPtrOutput)
}

// The Client ID of the Checkmarx One. Conflict with `apiKey`
func (o ServiceendpointCheckmarxOneOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceendpointCheckmarxOne) pulumi.StringPtrOutput { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The Client Secret of the Checkmarx One. Conflict with `apiKey`
//
// > **Note** At least one of `apiKey` and `clientId`, `clientSecret` must be set
func (o ServiceendpointCheckmarxOneOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceendpointCheckmarxOne) pulumi.StringPtrOutput { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

func (o ServiceendpointCheckmarxOneOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceendpointCheckmarxOne) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The ID of the project.
func (o ServiceendpointCheckmarxOneOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceendpointCheckmarxOne) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The Server URL of the Checkmarx One Service.
func (o ServiceendpointCheckmarxOneOutput) ServerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceendpointCheckmarxOne) pulumi.StringOutput { return v.ServerUrl }).(pulumi.StringOutput)
}

// The Service Endpoint name.
func (o ServiceendpointCheckmarxOneOutput) ServiceEndpointName() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceendpointCheckmarxOne) pulumi.StringOutput { return v.ServiceEndpointName }).(pulumi.StringOutput)
}

type ServiceendpointCheckmarxOneArrayOutput struct{ *pulumi.OutputState }

func (ServiceendpointCheckmarxOneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceendpointCheckmarxOne)(nil)).Elem()
}

func (o ServiceendpointCheckmarxOneArrayOutput) ToServiceendpointCheckmarxOneArrayOutput() ServiceendpointCheckmarxOneArrayOutput {
	return o
}

func (o ServiceendpointCheckmarxOneArrayOutput) ToServiceendpointCheckmarxOneArrayOutputWithContext(ctx context.Context) ServiceendpointCheckmarxOneArrayOutput {
	return o
}

func (o ServiceendpointCheckmarxOneArrayOutput) Index(i pulumi.IntInput) ServiceendpointCheckmarxOneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceendpointCheckmarxOne {
		return vs[0].([]*ServiceendpointCheckmarxOne)[vs[1].(int)]
	}).(ServiceendpointCheckmarxOneOutput)
}

type ServiceendpointCheckmarxOneMapOutput struct{ *pulumi.OutputState }

func (ServiceendpointCheckmarxOneMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceendpointCheckmarxOne)(nil)).Elem()
}

func (o ServiceendpointCheckmarxOneMapOutput) ToServiceendpointCheckmarxOneMapOutput() ServiceendpointCheckmarxOneMapOutput {
	return o
}

func (o ServiceendpointCheckmarxOneMapOutput) ToServiceendpointCheckmarxOneMapOutputWithContext(ctx context.Context) ServiceendpointCheckmarxOneMapOutput {
	return o
}

func (o ServiceendpointCheckmarxOneMapOutput) MapIndex(k pulumi.StringInput) ServiceendpointCheckmarxOneOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceendpointCheckmarxOne {
		return vs[0].(map[string]*ServiceendpointCheckmarxOne)[vs[1].(string)]
	}).(ServiceendpointCheckmarxOneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceendpointCheckmarxOneInput)(nil)).Elem(), &ServiceendpointCheckmarxOne{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceendpointCheckmarxOneArrayInput)(nil)).Elem(), ServiceendpointCheckmarxOneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceendpointCheckmarxOneMapInput)(nil)).Elem(), ServiceendpointCheckmarxOneMap{})
	pulumi.RegisterOutputType(ServiceendpointCheckmarxOneOutput{})
	pulumi.RegisterOutputType(ServiceendpointCheckmarxOneArrayOutput{})
	pulumi.RegisterOutputType(ServiceendpointCheckmarxOneMapOutput{})
}
