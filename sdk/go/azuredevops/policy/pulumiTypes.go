// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package policy

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type BranchPolicyBuildValidationSettings struct {
	// The ID of the build to monitor for the policy.
	BuildDefinitionId int `pulumi:"buildDefinitionId"`
	// The display name for the policy.
	DisplayName string `pulumi:"displayName"`
	// If set to true, the build will need to be manually queued. Defaults to `false`
	ManualQueueOnly *bool `pulumi:"manualQueueOnly"`
	// True if the build should queue on source updates only. Defaults to `true`.
	QueueOnSourceUpdateOnly *bool `pulumi:"queueOnSourceUpdateOnly"`
	// Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
	Scopes []BranchPolicyBuildValidationSettingsScope `pulumi:"scopes"`
	// The number of minutes for which the build is valid. If `0`, the build will not expire. Defaults to `720` (12 hours).
	ValidDuration *int `pulumi:"validDuration"`
}

// BranchPolicyBuildValidationSettingsInput is an input type that accepts BranchPolicyBuildValidationSettingsArgs and BranchPolicyBuildValidationSettingsOutput values.
// You can construct a concrete instance of `BranchPolicyBuildValidationSettingsInput` via:
//
//          BranchPolicyBuildValidationSettingsArgs{...}
type BranchPolicyBuildValidationSettingsInput interface {
	pulumi.Input

	ToBranchPolicyBuildValidationSettingsOutput() BranchPolicyBuildValidationSettingsOutput
	ToBranchPolicyBuildValidationSettingsOutputWithContext(context.Context) BranchPolicyBuildValidationSettingsOutput
}

type BranchPolicyBuildValidationSettingsArgs struct {
	// The ID of the build to monitor for the policy.
	BuildDefinitionId pulumi.IntInput `pulumi:"buildDefinitionId"`
	// The display name for the policy.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// If set to true, the build will need to be manually queued. Defaults to `false`
	ManualQueueOnly pulumi.BoolPtrInput `pulumi:"manualQueueOnly"`
	// True if the build should queue on source updates only. Defaults to `true`.
	QueueOnSourceUpdateOnly pulumi.BoolPtrInput `pulumi:"queueOnSourceUpdateOnly"`
	// Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
	Scopes BranchPolicyBuildValidationSettingsScopeArrayInput `pulumi:"scopes"`
	// The number of minutes for which the build is valid. If `0`, the build will not expire. Defaults to `720` (12 hours).
	ValidDuration pulumi.IntPtrInput `pulumi:"validDuration"`
}

func (BranchPolicyBuildValidationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchPolicyBuildValidationSettings)(nil)).Elem()
}

func (i BranchPolicyBuildValidationSettingsArgs) ToBranchPolicyBuildValidationSettingsOutput() BranchPolicyBuildValidationSettingsOutput {
	return i.ToBranchPolicyBuildValidationSettingsOutputWithContext(context.Background())
}

func (i BranchPolicyBuildValidationSettingsArgs) ToBranchPolicyBuildValidationSettingsOutputWithContext(ctx context.Context) BranchPolicyBuildValidationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchPolicyBuildValidationSettingsOutput)
}

func (i BranchPolicyBuildValidationSettingsArgs) ToBranchPolicyBuildValidationSettingsPtrOutput() BranchPolicyBuildValidationSettingsPtrOutput {
	return i.ToBranchPolicyBuildValidationSettingsPtrOutputWithContext(context.Background())
}

func (i BranchPolicyBuildValidationSettingsArgs) ToBranchPolicyBuildValidationSettingsPtrOutputWithContext(ctx context.Context) BranchPolicyBuildValidationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchPolicyBuildValidationSettingsOutput).ToBranchPolicyBuildValidationSettingsPtrOutputWithContext(ctx)
}

// BranchPolicyBuildValidationSettingsPtrInput is an input type that accepts BranchPolicyBuildValidationSettingsArgs, BranchPolicyBuildValidationSettingsPtr and BranchPolicyBuildValidationSettingsPtrOutput values.
// You can construct a concrete instance of `BranchPolicyBuildValidationSettingsPtrInput` via:
//
//          BranchPolicyBuildValidationSettingsArgs{...}
//
//  or:
//
//          nil
type BranchPolicyBuildValidationSettingsPtrInput interface {
	pulumi.Input

	ToBranchPolicyBuildValidationSettingsPtrOutput() BranchPolicyBuildValidationSettingsPtrOutput
	ToBranchPolicyBuildValidationSettingsPtrOutputWithContext(context.Context) BranchPolicyBuildValidationSettingsPtrOutput
}

type branchPolicyBuildValidationSettingsPtrType BranchPolicyBuildValidationSettingsArgs

func BranchPolicyBuildValidationSettingsPtr(v *BranchPolicyBuildValidationSettingsArgs) BranchPolicyBuildValidationSettingsPtrInput {
	return (*branchPolicyBuildValidationSettingsPtrType)(v)
}

func (*branchPolicyBuildValidationSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchPolicyBuildValidationSettings)(nil)).Elem()
}

func (i *branchPolicyBuildValidationSettingsPtrType) ToBranchPolicyBuildValidationSettingsPtrOutput() BranchPolicyBuildValidationSettingsPtrOutput {
	return i.ToBranchPolicyBuildValidationSettingsPtrOutputWithContext(context.Background())
}

func (i *branchPolicyBuildValidationSettingsPtrType) ToBranchPolicyBuildValidationSettingsPtrOutputWithContext(ctx context.Context) BranchPolicyBuildValidationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchPolicyBuildValidationSettingsPtrOutput)
}

type BranchPolicyBuildValidationSettingsOutput struct{ *pulumi.OutputState }

func (BranchPolicyBuildValidationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchPolicyBuildValidationSettings)(nil)).Elem()
}

func (o BranchPolicyBuildValidationSettingsOutput) ToBranchPolicyBuildValidationSettingsOutput() BranchPolicyBuildValidationSettingsOutput {
	return o
}

func (o BranchPolicyBuildValidationSettingsOutput) ToBranchPolicyBuildValidationSettingsOutputWithContext(ctx context.Context) BranchPolicyBuildValidationSettingsOutput {
	return o
}

func (o BranchPolicyBuildValidationSettingsOutput) ToBranchPolicyBuildValidationSettingsPtrOutput() BranchPolicyBuildValidationSettingsPtrOutput {
	return o.ToBranchPolicyBuildValidationSettingsPtrOutputWithContext(context.Background())
}

func (o BranchPolicyBuildValidationSettingsOutput) ToBranchPolicyBuildValidationSettingsPtrOutputWithContext(ctx context.Context) BranchPolicyBuildValidationSettingsPtrOutput {
	return o.ApplyT(func(v BranchPolicyBuildValidationSettings) *BranchPolicyBuildValidationSettings {
		return &v
	}).(BranchPolicyBuildValidationSettingsPtrOutput)
}

// The ID of the build to monitor for the policy.
func (o BranchPolicyBuildValidationSettingsOutput) BuildDefinitionId() pulumi.IntOutput {
	return o.ApplyT(func(v BranchPolicyBuildValidationSettings) int { return v.BuildDefinitionId }).(pulumi.IntOutput)
}

// The display name for the policy.
func (o BranchPolicyBuildValidationSettingsOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v BranchPolicyBuildValidationSettings) string { return v.DisplayName }).(pulumi.StringOutput)
}

// If set to true, the build will need to be manually queued. Defaults to `false`
func (o BranchPolicyBuildValidationSettingsOutput) ManualQueueOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BranchPolicyBuildValidationSettings) *bool { return v.ManualQueueOnly }).(pulumi.BoolPtrOutput)
}

// True if the build should queue on source updates only. Defaults to `true`.
func (o BranchPolicyBuildValidationSettingsOutput) QueueOnSourceUpdateOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BranchPolicyBuildValidationSettings) *bool { return v.QueueOnSourceUpdateOnly }).(pulumi.BoolPtrOutput)
}

// Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
func (o BranchPolicyBuildValidationSettingsOutput) Scopes() BranchPolicyBuildValidationSettingsScopeArrayOutput {
	return o.ApplyT(func(v BranchPolicyBuildValidationSettings) []BranchPolicyBuildValidationSettingsScope {
		return v.Scopes
	}).(BranchPolicyBuildValidationSettingsScopeArrayOutput)
}

// The number of minutes for which the build is valid. If `0`, the build will not expire. Defaults to `720` (12 hours).
func (o BranchPolicyBuildValidationSettingsOutput) ValidDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BranchPolicyBuildValidationSettings) *int { return v.ValidDuration }).(pulumi.IntPtrOutput)
}

type BranchPolicyBuildValidationSettingsPtrOutput struct{ *pulumi.OutputState }

func (BranchPolicyBuildValidationSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchPolicyBuildValidationSettings)(nil)).Elem()
}

func (o BranchPolicyBuildValidationSettingsPtrOutput) ToBranchPolicyBuildValidationSettingsPtrOutput() BranchPolicyBuildValidationSettingsPtrOutput {
	return o
}

func (o BranchPolicyBuildValidationSettingsPtrOutput) ToBranchPolicyBuildValidationSettingsPtrOutputWithContext(ctx context.Context) BranchPolicyBuildValidationSettingsPtrOutput {
	return o
}

func (o BranchPolicyBuildValidationSettingsPtrOutput) Elem() BranchPolicyBuildValidationSettingsOutput {
	return o.ApplyT(func(v *BranchPolicyBuildValidationSettings) BranchPolicyBuildValidationSettings { return *v }).(BranchPolicyBuildValidationSettingsOutput)
}

// The ID of the build to monitor for the policy.
func (o BranchPolicyBuildValidationSettingsPtrOutput) BuildDefinitionId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BranchPolicyBuildValidationSettings) *int {
		if v == nil {
			return nil
		}
		return &v.BuildDefinitionId
	}).(pulumi.IntPtrOutput)
}

// The display name for the policy.
func (o BranchPolicyBuildValidationSettingsPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BranchPolicyBuildValidationSettings) *string {
		if v == nil {
			return nil
		}
		return &v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// If set to true, the build will need to be manually queued. Defaults to `false`
func (o BranchPolicyBuildValidationSettingsPtrOutput) ManualQueueOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BranchPolicyBuildValidationSettings) *bool {
		if v == nil {
			return nil
		}
		return v.ManualQueueOnly
	}).(pulumi.BoolPtrOutput)
}

// True if the build should queue on source updates only. Defaults to `true`.
func (o BranchPolicyBuildValidationSettingsPtrOutput) QueueOnSourceUpdateOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BranchPolicyBuildValidationSettings) *bool {
		if v == nil {
			return nil
		}
		return v.QueueOnSourceUpdateOnly
	}).(pulumi.BoolPtrOutput)
}

// Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
func (o BranchPolicyBuildValidationSettingsPtrOutput) Scopes() BranchPolicyBuildValidationSettingsScopeArrayOutput {
	return o.ApplyT(func(v *BranchPolicyBuildValidationSettings) []BranchPolicyBuildValidationSettingsScope {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(BranchPolicyBuildValidationSettingsScopeArrayOutput)
}

// The number of minutes for which the build is valid. If `0`, the build will not expire. Defaults to `720` (12 hours).
func (o BranchPolicyBuildValidationSettingsPtrOutput) ValidDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BranchPolicyBuildValidationSettings) *int {
		if v == nil {
			return nil
		}
		return v.ValidDuration
	}).(pulumi.IntPtrOutput)
}

type BranchPolicyBuildValidationSettingsScope struct {
	// The match type to use when applying the policy. Supported values are `Exact` (default) or `Prefix`.
	MatchType *string `pulumi:"matchType"`
	// The repository ID. Needed only if the scope of the policy will be limited to a single repository.
	RepositoryId *string `pulumi:"repositoryId"`
	// The ref pattern to use for the match. If `matchType` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `matchType` is `Prefix`, this should be a ref path such as `refs/heads/releases`.
	RepositoryRef *string `pulumi:"repositoryRef"`
}

// BranchPolicyBuildValidationSettingsScopeInput is an input type that accepts BranchPolicyBuildValidationSettingsScopeArgs and BranchPolicyBuildValidationSettingsScopeOutput values.
// You can construct a concrete instance of `BranchPolicyBuildValidationSettingsScopeInput` via:
//
//          BranchPolicyBuildValidationSettingsScopeArgs{...}
type BranchPolicyBuildValidationSettingsScopeInput interface {
	pulumi.Input

	ToBranchPolicyBuildValidationSettingsScopeOutput() BranchPolicyBuildValidationSettingsScopeOutput
	ToBranchPolicyBuildValidationSettingsScopeOutputWithContext(context.Context) BranchPolicyBuildValidationSettingsScopeOutput
}

type BranchPolicyBuildValidationSettingsScopeArgs struct {
	// The match type to use when applying the policy. Supported values are `Exact` (default) or `Prefix`.
	MatchType pulumi.StringPtrInput `pulumi:"matchType"`
	// The repository ID. Needed only if the scope of the policy will be limited to a single repository.
	RepositoryId pulumi.StringPtrInput `pulumi:"repositoryId"`
	// The ref pattern to use for the match. If `matchType` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `matchType` is `Prefix`, this should be a ref path such as `refs/heads/releases`.
	RepositoryRef pulumi.StringPtrInput `pulumi:"repositoryRef"`
}

func (BranchPolicyBuildValidationSettingsScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchPolicyBuildValidationSettingsScope)(nil)).Elem()
}

func (i BranchPolicyBuildValidationSettingsScopeArgs) ToBranchPolicyBuildValidationSettingsScopeOutput() BranchPolicyBuildValidationSettingsScopeOutput {
	return i.ToBranchPolicyBuildValidationSettingsScopeOutputWithContext(context.Background())
}

func (i BranchPolicyBuildValidationSettingsScopeArgs) ToBranchPolicyBuildValidationSettingsScopeOutputWithContext(ctx context.Context) BranchPolicyBuildValidationSettingsScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchPolicyBuildValidationSettingsScopeOutput)
}

// BranchPolicyBuildValidationSettingsScopeArrayInput is an input type that accepts BranchPolicyBuildValidationSettingsScopeArray and BranchPolicyBuildValidationSettingsScopeArrayOutput values.
// You can construct a concrete instance of `BranchPolicyBuildValidationSettingsScopeArrayInput` via:
//
//          BranchPolicyBuildValidationSettingsScopeArray{ BranchPolicyBuildValidationSettingsScopeArgs{...} }
type BranchPolicyBuildValidationSettingsScopeArrayInput interface {
	pulumi.Input

	ToBranchPolicyBuildValidationSettingsScopeArrayOutput() BranchPolicyBuildValidationSettingsScopeArrayOutput
	ToBranchPolicyBuildValidationSettingsScopeArrayOutputWithContext(context.Context) BranchPolicyBuildValidationSettingsScopeArrayOutput
}

type BranchPolicyBuildValidationSettingsScopeArray []BranchPolicyBuildValidationSettingsScopeInput

func (BranchPolicyBuildValidationSettingsScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchPolicyBuildValidationSettingsScope)(nil)).Elem()
}

func (i BranchPolicyBuildValidationSettingsScopeArray) ToBranchPolicyBuildValidationSettingsScopeArrayOutput() BranchPolicyBuildValidationSettingsScopeArrayOutput {
	return i.ToBranchPolicyBuildValidationSettingsScopeArrayOutputWithContext(context.Background())
}

func (i BranchPolicyBuildValidationSettingsScopeArray) ToBranchPolicyBuildValidationSettingsScopeArrayOutputWithContext(ctx context.Context) BranchPolicyBuildValidationSettingsScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchPolicyBuildValidationSettingsScopeArrayOutput)
}

type BranchPolicyBuildValidationSettingsScopeOutput struct{ *pulumi.OutputState }

func (BranchPolicyBuildValidationSettingsScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchPolicyBuildValidationSettingsScope)(nil)).Elem()
}

func (o BranchPolicyBuildValidationSettingsScopeOutput) ToBranchPolicyBuildValidationSettingsScopeOutput() BranchPolicyBuildValidationSettingsScopeOutput {
	return o
}

func (o BranchPolicyBuildValidationSettingsScopeOutput) ToBranchPolicyBuildValidationSettingsScopeOutputWithContext(ctx context.Context) BranchPolicyBuildValidationSettingsScopeOutput {
	return o
}

// The match type to use when applying the policy. Supported values are `Exact` (default) or `Prefix`.
func (o BranchPolicyBuildValidationSettingsScopeOutput) MatchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchPolicyBuildValidationSettingsScope) *string { return v.MatchType }).(pulumi.StringPtrOutput)
}

// The repository ID. Needed only if the scope of the policy will be limited to a single repository.
func (o BranchPolicyBuildValidationSettingsScopeOutput) RepositoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchPolicyBuildValidationSettingsScope) *string { return v.RepositoryId }).(pulumi.StringPtrOutput)
}

// The ref pattern to use for the match. If `matchType` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `matchType` is `Prefix`, this should be a ref path such as `refs/heads/releases`.
func (o BranchPolicyBuildValidationSettingsScopeOutput) RepositoryRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchPolicyBuildValidationSettingsScope) *string { return v.RepositoryRef }).(pulumi.StringPtrOutput)
}

type BranchPolicyBuildValidationSettingsScopeArrayOutput struct{ *pulumi.OutputState }

func (BranchPolicyBuildValidationSettingsScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchPolicyBuildValidationSettingsScope)(nil)).Elem()
}

func (o BranchPolicyBuildValidationSettingsScopeArrayOutput) ToBranchPolicyBuildValidationSettingsScopeArrayOutput() BranchPolicyBuildValidationSettingsScopeArrayOutput {
	return o
}

func (o BranchPolicyBuildValidationSettingsScopeArrayOutput) ToBranchPolicyBuildValidationSettingsScopeArrayOutputWithContext(ctx context.Context) BranchPolicyBuildValidationSettingsScopeArrayOutput {
	return o
}

func (o BranchPolicyBuildValidationSettingsScopeArrayOutput) Index(i pulumi.IntInput) BranchPolicyBuildValidationSettingsScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BranchPolicyBuildValidationSettingsScope {
		return vs[0].([]BranchPolicyBuildValidationSettingsScope)[vs[1].(int)]
	}).(BranchPolicyBuildValidationSettingsScopeOutput)
}

type BranchPolicyMinReviewersSettings struct {
	// The number of reviewrs needed to approve.
	ReviewerCount int `pulumi:"reviewerCount"`
	// Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
	Scopes []BranchPolicyMinReviewersSettingsScope `pulumi:"scopes"`
	// Controls whether or not the submitter's vote counts. Defaults to `false`.
	SubmitterCanVote *bool `pulumi:"submitterCanVote"`
}

// BranchPolicyMinReviewersSettingsInput is an input type that accepts BranchPolicyMinReviewersSettingsArgs and BranchPolicyMinReviewersSettingsOutput values.
// You can construct a concrete instance of `BranchPolicyMinReviewersSettingsInput` via:
//
//          BranchPolicyMinReviewersSettingsArgs{...}
type BranchPolicyMinReviewersSettingsInput interface {
	pulumi.Input

	ToBranchPolicyMinReviewersSettingsOutput() BranchPolicyMinReviewersSettingsOutput
	ToBranchPolicyMinReviewersSettingsOutputWithContext(context.Context) BranchPolicyMinReviewersSettingsOutput
}

type BranchPolicyMinReviewersSettingsArgs struct {
	// The number of reviewrs needed to approve.
	ReviewerCount pulumi.IntInput `pulumi:"reviewerCount"`
	// Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
	Scopes BranchPolicyMinReviewersSettingsScopeArrayInput `pulumi:"scopes"`
	// Controls whether or not the submitter's vote counts. Defaults to `false`.
	SubmitterCanVote pulumi.BoolPtrInput `pulumi:"submitterCanVote"`
}

func (BranchPolicyMinReviewersSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchPolicyMinReviewersSettings)(nil)).Elem()
}

func (i BranchPolicyMinReviewersSettingsArgs) ToBranchPolicyMinReviewersSettingsOutput() BranchPolicyMinReviewersSettingsOutput {
	return i.ToBranchPolicyMinReviewersSettingsOutputWithContext(context.Background())
}

func (i BranchPolicyMinReviewersSettingsArgs) ToBranchPolicyMinReviewersSettingsOutputWithContext(ctx context.Context) BranchPolicyMinReviewersSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchPolicyMinReviewersSettingsOutput)
}

func (i BranchPolicyMinReviewersSettingsArgs) ToBranchPolicyMinReviewersSettingsPtrOutput() BranchPolicyMinReviewersSettingsPtrOutput {
	return i.ToBranchPolicyMinReviewersSettingsPtrOutputWithContext(context.Background())
}

func (i BranchPolicyMinReviewersSettingsArgs) ToBranchPolicyMinReviewersSettingsPtrOutputWithContext(ctx context.Context) BranchPolicyMinReviewersSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchPolicyMinReviewersSettingsOutput).ToBranchPolicyMinReviewersSettingsPtrOutputWithContext(ctx)
}

// BranchPolicyMinReviewersSettingsPtrInput is an input type that accepts BranchPolicyMinReviewersSettingsArgs, BranchPolicyMinReviewersSettingsPtr and BranchPolicyMinReviewersSettingsPtrOutput values.
// You can construct a concrete instance of `BranchPolicyMinReviewersSettingsPtrInput` via:
//
//          BranchPolicyMinReviewersSettingsArgs{...}
//
//  or:
//
//          nil
type BranchPolicyMinReviewersSettingsPtrInput interface {
	pulumi.Input

	ToBranchPolicyMinReviewersSettingsPtrOutput() BranchPolicyMinReviewersSettingsPtrOutput
	ToBranchPolicyMinReviewersSettingsPtrOutputWithContext(context.Context) BranchPolicyMinReviewersSettingsPtrOutput
}

type branchPolicyMinReviewersSettingsPtrType BranchPolicyMinReviewersSettingsArgs

func BranchPolicyMinReviewersSettingsPtr(v *BranchPolicyMinReviewersSettingsArgs) BranchPolicyMinReviewersSettingsPtrInput {
	return (*branchPolicyMinReviewersSettingsPtrType)(v)
}

func (*branchPolicyMinReviewersSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchPolicyMinReviewersSettings)(nil)).Elem()
}

func (i *branchPolicyMinReviewersSettingsPtrType) ToBranchPolicyMinReviewersSettingsPtrOutput() BranchPolicyMinReviewersSettingsPtrOutput {
	return i.ToBranchPolicyMinReviewersSettingsPtrOutputWithContext(context.Background())
}

func (i *branchPolicyMinReviewersSettingsPtrType) ToBranchPolicyMinReviewersSettingsPtrOutputWithContext(ctx context.Context) BranchPolicyMinReviewersSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchPolicyMinReviewersSettingsPtrOutput)
}

type BranchPolicyMinReviewersSettingsOutput struct{ *pulumi.OutputState }

func (BranchPolicyMinReviewersSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchPolicyMinReviewersSettings)(nil)).Elem()
}

func (o BranchPolicyMinReviewersSettingsOutput) ToBranchPolicyMinReviewersSettingsOutput() BranchPolicyMinReviewersSettingsOutput {
	return o
}

func (o BranchPolicyMinReviewersSettingsOutput) ToBranchPolicyMinReviewersSettingsOutputWithContext(ctx context.Context) BranchPolicyMinReviewersSettingsOutput {
	return o
}

func (o BranchPolicyMinReviewersSettingsOutput) ToBranchPolicyMinReviewersSettingsPtrOutput() BranchPolicyMinReviewersSettingsPtrOutput {
	return o.ToBranchPolicyMinReviewersSettingsPtrOutputWithContext(context.Background())
}

func (o BranchPolicyMinReviewersSettingsOutput) ToBranchPolicyMinReviewersSettingsPtrOutputWithContext(ctx context.Context) BranchPolicyMinReviewersSettingsPtrOutput {
	return o.ApplyT(func(v BranchPolicyMinReviewersSettings) *BranchPolicyMinReviewersSettings {
		return &v
	}).(BranchPolicyMinReviewersSettingsPtrOutput)
}

// The number of reviewrs needed to approve.
func (o BranchPolicyMinReviewersSettingsOutput) ReviewerCount() pulumi.IntOutput {
	return o.ApplyT(func(v BranchPolicyMinReviewersSettings) int { return v.ReviewerCount }).(pulumi.IntOutput)
}

// Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
func (o BranchPolicyMinReviewersSettingsOutput) Scopes() BranchPolicyMinReviewersSettingsScopeArrayOutput {
	return o.ApplyT(func(v BranchPolicyMinReviewersSettings) []BranchPolicyMinReviewersSettingsScope { return v.Scopes }).(BranchPolicyMinReviewersSettingsScopeArrayOutput)
}

// Controls whether or not the submitter's vote counts. Defaults to `false`.
func (o BranchPolicyMinReviewersSettingsOutput) SubmitterCanVote() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BranchPolicyMinReviewersSettings) *bool { return v.SubmitterCanVote }).(pulumi.BoolPtrOutput)
}

type BranchPolicyMinReviewersSettingsPtrOutput struct{ *pulumi.OutputState }

func (BranchPolicyMinReviewersSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchPolicyMinReviewersSettings)(nil)).Elem()
}

func (o BranchPolicyMinReviewersSettingsPtrOutput) ToBranchPolicyMinReviewersSettingsPtrOutput() BranchPolicyMinReviewersSettingsPtrOutput {
	return o
}

func (o BranchPolicyMinReviewersSettingsPtrOutput) ToBranchPolicyMinReviewersSettingsPtrOutputWithContext(ctx context.Context) BranchPolicyMinReviewersSettingsPtrOutput {
	return o
}

func (o BranchPolicyMinReviewersSettingsPtrOutput) Elem() BranchPolicyMinReviewersSettingsOutput {
	return o.ApplyT(func(v *BranchPolicyMinReviewersSettings) BranchPolicyMinReviewersSettings { return *v }).(BranchPolicyMinReviewersSettingsOutput)
}

// The number of reviewrs needed to approve.
func (o BranchPolicyMinReviewersSettingsPtrOutput) ReviewerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BranchPolicyMinReviewersSettings) *int {
		if v == nil {
			return nil
		}
		return &v.ReviewerCount
	}).(pulumi.IntPtrOutput)
}

// Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
func (o BranchPolicyMinReviewersSettingsPtrOutput) Scopes() BranchPolicyMinReviewersSettingsScopeArrayOutput {
	return o.ApplyT(func(v *BranchPolicyMinReviewersSettings) []BranchPolicyMinReviewersSettingsScope {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(BranchPolicyMinReviewersSettingsScopeArrayOutput)
}

// Controls whether or not the submitter's vote counts. Defaults to `false`.
func (o BranchPolicyMinReviewersSettingsPtrOutput) SubmitterCanVote() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BranchPolicyMinReviewersSettings) *bool {
		if v == nil {
			return nil
		}
		return v.SubmitterCanVote
	}).(pulumi.BoolPtrOutput)
}

type BranchPolicyMinReviewersSettingsScope struct {
	// The match type to use when applying the policy. Supported values are `Exact` (default) or `Prefix`.
	MatchType *string `pulumi:"matchType"`
	// The repository ID. Needed only if the scope of the policy will be limited to a single repository.
	RepositoryId *string `pulumi:"repositoryId"`
	// The ref pattern to use for the match. If `matchType` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `matchType` is `Prefix`, this should be a ref path such as `refs/heads/releases`.
	RepositoryRef *string `pulumi:"repositoryRef"`
}

// BranchPolicyMinReviewersSettingsScopeInput is an input type that accepts BranchPolicyMinReviewersSettingsScopeArgs and BranchPolicyMinReviewersSettingsScopeOutput values.
// You can construct a concrete instance of `BranchPolicyMinReviewersSettingsScopeInput` via:
//
//          BranchPolicyMinReviewersSettingsScopeArgs{...}
type BranchPolicyMinReviewersSettingsScopeInput interface {
	pulumi.Input

	ToBranchPolicyMinReviewersSettingsScopeOutput() BranchPolicyMinReviewersSettingsScopeOutput
	ToBranchPolicyMinReviewersSettingsScopeOutputWithContext(context.Context) BranchPolicyMinReviewersSettingsScopeOutput
}

type BranchPolicyMinReviewersSettingsScopeArgs struct {
	// The match type to use when applying the policy. Supported values are `Exact` (default) or `Prefix`.
	MatchType pulumi.StringPtrInput `pulumi:"matchType"`
	// The repository ID. Needed only if the scope of the policy will be limited to a single repository.
	RepositoryId pulumi.StringPtrInput `pulumi:"repositoryId"`
	// The ref pattern to use for the match. If `matchType` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `matchType` is `Prefix`, this should be a ref path such as `refs/heads/releases`.
	RepositoryRef pulumi.StringPtrInput `pulumi:"repositoryRef"`
}

func (BranchPolicyMinReviewersSettingsScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchPolicyMinReviewersSettingsScope)(nil)).Elem()
}

func (i BranchPolicyMinReviewersSettingsScopeArgs) ToBranchPolicyMinReviewersSettingsScopeOutput() BranchPolicyMinReviewersSettingsScopeOutput {
	return i.ToBranchPolicyMinReviewersSettingsScopeOutputWithContext(context.Background())
}

func (i BranchPolicyMinReviewersSettingsScopeArgs) ToBranchPolicyMinReviewersSettingsScopeOutputWithContext(ctx context.Context) BranchPolicyMinReviewersSettingsScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchPolicyMinReviewersSettingsScopeOutput)
}

// BranchPolicyMinReviewersSettingsScopeArrayInput is an input type that accepts BranchPolicyMinReviewersSettingsScopeArray and BranchPolicyMinReviewersSettingsScopeArrayOutput values.
// You can construct a concrete instance of `BranchPolicyMinReviewersSettingsScopeArrayInput` via:
//
//          BranchPolicyMinReviewersSettingsScopeArray{ BranchPolicyMinReviewersSettingsScopeArgs{...} }
type BranchPolicyMinReviewersSettingsScopeArrayInput interface {
	pulumi.Input

	ToBranchPolicyMinReviewersSettingsScopeArrayOutput() BranchPolicyMinReviewersSettingsScopeArrayOutput
	ToBranchPolicyMinReviewersSettingsScopeArrayOutputWithContext(context.Context) BranchPolicyMinReviewersSettingsScopeArrayOutput
}

type BranchPolicyMinReviewersSettingsScopeArray []BranchPolicyMinReviewersSettingsScopeInput

func (BranchPolicyMinReviewersSettingsScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchPolicyMinReviewersSettingsScope)(nil)).Elem()
}

func (i BranchPolicyMinReviewersSettingsScopeArray) ToBranchPolicyMinReviewersSettingsScopeArrayOutput() BranchPolicyMinReviewersSettingsScopeArrayOutput {
	return i.ToBranchPolicyMinReviewersSettingsScopeArrayOutputWithContext(context.Background())
}

func (i BranchPolicyMinReviewersSettingsScopeArray) ToBranchPolicyMinReviewersSettingsScopeArrayOutputWithContext(ctx context.Context) BranchPolicyMinReviewersSettingsScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchPolicyMinReviewersSettingsScopeArrayOutput)
}

type BranchPolicyMinReviewersSettingsScopeOutput struct{ *pulumi.OutputState }

func (BranchPolicyMinReviewersSettingsScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchPolicyMinReviewersSettingsScope)(nil)).Elem()
}

func (o BranchPolicyMinReviewersSettingsScopeOutput) ToBranchPolicyMinReviewersSettingsScopeOutput() BranchPolicyMinReviewersSettingsScopeOutput {
	return o
}

func (o BranchPolicyMinReviewersSettingsScopeOutput) ToBranchPolicyMinReviewersSettingsScopeOutputWithContext(ctx context.Context) BranchPolicyMinReviewersSettingsScopeOutput {
	return o
}

// The match type to use when applying the policy. Supported values are `Exact` (default) or `Prefix`.
func (o BranchPolicyMinReviewersSettingsScopeOutput) MatchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchPolicyMinReviewersSettingsScope) *string { return v.MatchType }).(pulumi.StringPtrOutput)
}

// The repository ID. Needed only if the scope of the policy will be limited to a single repository.
func (o BranchPolicyMinReviewersSettingsScopeOutput) RepositoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchPolicyMinReviewersSettingsScope) *string { return v.RepositoryId }).(pulumi.StringPtrOutput)
}

// The ref pattern to use for the match. If `matchType` is `Exact`, this should be a qualified ref such as `refs/heads/master`. If `matchType` is `Prefix`, this should be a ref path such as `refs/heads/releases`.
func (o BranchPolicyMinReviewersSettingsScopeOutput) RepositoryRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchPolicyMinReviewersSettingsScope) *string { return v.RepositoryRef }).(pulumi.StringPtrOutput)
}

type BranchPolicyMinReviewersSettingsScopeArrayOutput struct{ *pulumi.OutputState }

func (BranchPolicyMinReviewersSettingsScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchPolicyMinReviewersSettingsScope)(nil)).Elem()
}

func (o BranchPolicyMinReviewersSettingsScopeArrayOutput) ToBranchPolicyMinReviewersSettingsScopeArrayOutput() BranchPolicyMinReviewersSettingsScopeArrayOutput {
	return o
}

func (o BranchPolicyMinReviewersSettingsScopeArrayOutput) ToBranchPolicyMinReviewersSettingsScopeArrayOutputWithContext(ctx context.Context) BranchPolicyMinReviewersSettingsScopeArrayOutput {
	return o
}

func (o BranchPolicyMinReviewersSettingsScopeArrayOutput) Index(i pulumi.IntInput) BranchPolicyMinReviewersSettingsScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BranchPolicyMinReviewersSettingsScope {
		return vs[0].([]BranchPolicyMinReviewersSettingsScope)[vs[1].(int)]
	}).(BranchPolicyMinReviewersSettingsScopeOutput)
}

func init() {
	pulumi.RegisterOutputType(BranchPolicyBuildValidationSettingsOutput{})
	pulumi.RegisterOutputType(BranchPolicyBuildValidationSettingsPtrOutput{})
	pulumi.RegisterOutputType(BranchPolicyBuildValidationSettingsScopeOutput{})
	pulumi.RegisterOutputType(BranchPolicyBuildValidationSettingsScopeArrayOutput{})
	pulumi.RegisterOutputType(BranchPolicyMinReviewersSettingsOutput{})
	pulumi.RegisterOutputType(BranchPolicyMinReviewersSettingsPtrOutput{})
	pulumi.RegisterOutputType(BranchPolicyMinReviewersSettingsScopeOutput{})
	pulumi.RegisterOutputType(BranchPolicyMinReviewersSettingsScopeArrayOutput{})
}
