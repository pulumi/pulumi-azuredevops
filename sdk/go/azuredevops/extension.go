// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azuredevops

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages extension within Azure DevOps organization.
//
// ## Example Usage
//
// ### Install Extension
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := azuredevops.NewExtension(ctx, "example", &azuredevops.ExtensionArgs{
//				ExtensionId: pulumi.String("extension ID"),
//				PublisherId: pulumi.String("publisher ID"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Relevant Links
//
// - [Azure DevOps Service REST API 7.1 - Extension Management](https://learn.microsoft.com/en-us/rest/api/azure/devops/extensionmanagement/installed-extensions?view=azure-devops-rest-7.1)
//
// ## Import
//
// Azure DevOps Extension can be imported using the publisher ID and extension ID:
//
// ```sh
// $ pulumi import azuredevops:index/extension:Extension example publisherId/extensionId
// ```
type Extension struct {
	pulumi.CustomResourceState

	// Whether to disable the extension.
	Disabled pulumi.BoolOutput `pulumi:"disabled"`
	// The publisher ID of the extension.
	ExtensionId pulumi.StringOutput `pulumi:"extensionId"`
	// The name of the extension.
	ExtensionName pulumi.StringOutput `pulumi:"extensionName"`
	// The extension ID of the extension.
	PublisherId pulumi.StringOutput `pulumi:"publisherId"`
	// The name of the publisher.
	PublisherName pulumi.StringOutput `pulumi:"publisherName"`
	// List of all oauth scopes required by this extension.
	Scopes pulumi.StringArrayOutput `pulumi:"scopes"`
	// The version of the extension.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewExtension registers a new resource with the given unique name, arguments, and options.
func NewExtension(ctx *pulumi.Context,
	name string, args *ExtensionArgs, opts ...pulumi.ResourceOption) (*Extension, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExtensionId == nil {
		return nil, errors.New("invalid value for required argument 'ExtensionId'")
	}
	if args.PublisherId == nil {
		return nil, errors.New("invalid value for required argument 'PublisherId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Extension
	err := ctx.RegisterResource("azuredevops:index/extension:Extension", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExtension gets an existing Extension resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExtension(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExtensionState, opts ...pulumi.ResourceOption) (*Extension, error) {
	var resource Extension
	err := ctx.ReadResource("azuredevops:index/extension:Extension", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Extension resources.
type extensionState struct {
	// Whether to disable the extension.
	Disabled *bool `pulumi:"disabled"`
	// The publisher ID of the extension.
	ExtensionId *string `pulumi:"extensionId"`
	// The name of the extension.
	ExtensionName *string `pulumi:"extensionName"`
	// The extension ID of the extension.
	PublisherId *string `pulumi:"publisherId"`
	// The name of the publisher.
	PublisherName *string `pulumi:"publisherName"`
	// List of all oauth scopes required by this extension.
	Scopes []string `pulumi:"scopes"`
	// The version of the extension.
	Version *string `pulumi:"version"`
}

type ExtensionState struct {
	// Whether to disable the extension.
	Disabled pulumi.BoolPtrInput
	// The publisher ID of the extension.
	ExtensionId pulumi.StringPtrInput
	// The name of the extension.
	ExtensionName pulumi.StringPtrInput
	// The extension ID of the extension.
	PublisherId pulumi.StringPtrInput
	// The name of the publisher.
	PublisherName pulumi.StringPtrInput
	// List of all oauth scopes required by this extension.
	Scopes pulumi.StringArrayInput
	// The version of the extension.
	Version pulumi.StringPtrInput
}

func (ExtensionState) ElementType() reflect.Type {
	return reflect.TypeOf((*extensionState)(nil)).Elem()
}

type extensionArgs struct {
	// Whether to disable the extension.
	Disabled *bool `pulumi:"disabled"`
	// The publisher ID of the extension.
	ExtensionId string `pulumi:"extensionId"`
	// The extension ID of the extension.
	PublisherId string `pulumi:"publisherId"`
	// The version of the extension.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a Extension resource.
type ExtensionArgs struct {
	// Whether to disable the extension.
	Disabled pulumi.BoolPtrInput
	// The publisher ID of the extension.
	ExtensionId pulumi.StringInput
	// The extension ID of the extension.
	PublisherId pulumi.StringInput
	// The version of the extension.
	Version pulumi.StringPtrInput
}

func (ExtensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*extensionArgs)(nil)).Elem()
}

type ExtensionInput interface {
	pulumi.Input

	ToExtensionOutput() ExtensionOutput
	ToExtensionOutputWithContext(ctx context.Context) ExtensionOutput
}

func (*Extension) ElementType() reflect.Type {
	return reflect.TypeOf((**Extension)(nil)).Elem()
}

func (i *Extension) ToExtensionOutput() ExtensionOutput {
	return i.ToExtensionOutputWithContext(context.Background())
}

func (i *Extension) ToExtensionOutputWithContext(ctx context.Context) ExtensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionOutput)
}

// ExtensionArrayInput is an input type that accepts ExtensionArray and ExtensionArrayOutput values.
// You can construct a concrete instance of `ExtensionArrayInput` via:
//
//	ExtensionArray{ ExtensionArgs{...} }
type ExtensionArrayInput interface {
	pulumi.Input

	ToExtensionArrayOutput() ExtensionArrayOutput
	ToExtensionArrayOutputWithContext(context.Context) ExtensionArrayOutput
}

type ExtensionArray []ExtensionInput

func (ExtensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Extension)(nil)).Elem()
}

func (i ExtensionArray) ToExtensionArrayOutput() ExtensionArrayOutput {
	return i.ToExtensionArrayOutputWithContext(context.Background())
}

func (i ExtensionArray) ToExtensionArrayOutputWithContext(ctx context.Context) ExtensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionArrayOutput)
}

// ExtensionMapInput is an input type that accepts ExtensionMap and ExtensionMapOutput values.
// You can construct a concrete instance of `ExtensionMapInput` via:
//
//	ExtensionMap{ "key": ExtensionArgs{...} }
type ExtensionMapInput interface {
	pulumi.Input

	ToExtensionMapOutput() ExtensionMapOutput
	ToExtensionMapOutputWithContext(context.Context) ExtensionMapOutput
}

type ExtensionMap map[string]ExtensionInput

func (ExtensionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Extension)(nil)).Elem()
}

func (i ExtensionMap) ToExtensionMapOutput() ExtensionMapOutput {
	return i.ToExtensionMapOutputWithContext(context.Background())
}

func (i ExtensionMap) ToExtensionMapOutputWithContext(ctx context.Context) ExtensionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionMapOutput)
}

type ExtensionOutput struct{ *pulumi.OutputState }

func (ExtensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Extension)(nil)).Elem()
}

func (o ExtensionOutput) ToExtensionOutput() ExtensionOutput {
	return o
}

func (o ExtensionOutput) ToExtensionOutputWithContext(ctx context.Context) ExtensionOutput {
	return o
}

// Whether to disable the extension.
func (o ExtensionOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Extension) pulumi.BoolOutput { return v.Disabled }).(pulumi.BoolOutput)
}

// The publisher ID of the extension.
func (o ExtensionOutput) ExtensionId() pulumi.StringOutput {
	return o.ApplyT(func(v *Extension) pulumi.StringOutput { return v.ExtensionId }).(pulumi.StringOutput)
}

// The name of the extension.
func (o ExtensionOutput) ExtensionName() pulumi.StringOutput {
	return o.ApplyT(func(v *Extension) pulumi.StringOutput { return v.ExtensionName }).(pulumi.StringOutput)
}

// The extension ID of the extension.
func (o ExtensionOutput) PublisherId() pulumi.StringOutput {
	return o.ApplyT(func(v *Extension) pulumi.StringOutput { return v.PublisherId }).(pulumi.StringOutput)
}

// The name of the publisher.
func (o ExtensionOutput) PublisherName() pulumi.StringOutput {
	return o.ApplyT(func(v *Extension) pulumi.StringOutput { return v.PublisherName }).(pulumi.StringOutput)
}

// List of all oauth scopes required by this extension.
func (o ExtensionOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Extension) pulumi.StringArrayOutput { return v.Scopes }).(pulumi.StringArrayOutput)
}

// The version of the extension.
func (o ExtensionOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Extension) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type ExtensionArrayOutput struct{ *pulumi.OutputState }

func (ExtensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Extension)(nil)).Elem()
}

func (o ExtensionArrayOutput) ToExtensionArrayOutput() ExtensionArrayOutput {
	return o
}

func (o ExtensionArrayOutput) ToExtensionArrayOutputWithContext(ctx context.Context) ExtensionArrayOutput {
	return o
}

func (o ExtensionArrayOutput) Index(i pulumi.IntInput) ExtensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Extension {
		return vs[0].([]*Extension)[vs[1].(int)]
	}).(ExtensionOutput)
}

type ExtensionMapOutput struct{ *pulumi.OutputState }

func (ExtensionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Extension)(nil)).Elem()
}

func (o ExtensionMapOutput) ToExtensionMapOutput() ExtensionMapOutput {
	return o
}

func (o ExtensionMapOutput) ToExtensionMapOutputWithContext(ctx context.Context) ExtensionMapOutput {
	return o
}

func (o ExtensionMapOutput) MapIndex(k pulumi.StringInput) ExtensionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Extension {
		return vs[0].(map[string]*Extension)[vs[1].(string)]
	}).(ExtensionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionInput)(nil)).Elem(), &Extension{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionArrayInput)(nil)).Elem(), ExtensionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionMapInput)(nil)).Elem(), ExtensionMap{})
	pulumi.RegisterOutputType(ExtensionOutput{})
	pulumi.RegisterOutputType(ExtensionArrayOutput{})
	pulumi.RegisterOutputType(ExtensionMapOutput{})
}
