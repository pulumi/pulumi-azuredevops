// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azuredevops

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## layout: "azuredevops"
//
// ***
// ## page_title: "AzureDevops: FeedRetentionPolicy"
//
// description: |-
//
//	Manages the Feed Retention Policy within Azure DevOps organization.
//
// ---
//
// # FeedRetentionPolicy
//
// Manages the Feed Retention Policy within Azure DevOps.
//
// ## Example Usage
//
// ### Project Feed
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := azuredevops.NewProject(ctx, "example", &azuredevops.ProjectArgs{
//				Name:             pulumi.String("Example Project"),
//				Visibility:       pulumi.String("private"),
//				VersionControl:   pulumi.String("Git"),
//				WorkItemTemplate: pulumi.String("Agile"),
//				Description:      pulumi.String("Managed by Pulumi"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleFeed, err := azuredevops.NewFeed(ctx, "example", &azuredevops.FeedArgs{
//				Name:      pulumi.String("ExampleFeed"),
//				ProjectId: example.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = azuredevops.NewFeedRetentionPolicy(ctx, "example", &azuredevops.FeedRetentionPolicyArgs{
//				ProjectId:                            example.ID(),
//				FeedId:                               exampleFeed.ID(),
//				CountLimit:                           pulumi.Int(20),
//				DaysToKeepRecentlyDownloadedPackages: pulumi.Int(30),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Organization Feed
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := azuredevops.NewFeed(ctx, "example", &azuredevops.FeedArgs{
//				Name: pulumi.String("examplefeed"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = azuredevops.NewFeedRetentionPolicy(ctx, "example", &azuredevops.FeedRetentionPolicyArgs{
//				FeedId:                               example.ID(),
//				CountLimit:                           pulumi.Int(20),
//				DaysToKeepRecentlyDownloadedPackages: pulumi.Int(30),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Relevant Links
//
// - [Azure DevOps Service REST API 7.0 - Feed Management](https://learn.microsoft.com/en-us/rest/api/azure/devops/artifacts/feed-management?view=azure-devops-rest-7.0)
//
// ## Import
//
// Azure DevOps Feed Retention Policy can be imported using the Project ID and Feed ID or Feed ID e.g.:
//
// ```sh
// $ pulumi import azuredevops:index/feedRetentionPolicy:FeedRetentionPolicy example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000
// ```
//
// or
//
// ```sh
// $ pulumi import azuredevops:index/feedRetentionPolicy:FeedRetentionPolicy example 00000000-0000-0000-0000-000000000000
// ```
type FeedRetentionPolicy struct {
	pulumi.CustomResourceState

	// The maximum number of versions per package.
	CountLimit pulumi.IntOutput `pulumi:"countLimit"`
	// The days to keep recently downloaded packages.
	DaysToKeepRecentlyDownloadedPackages pulumi.IntOutput `pulumi:"daysToKeepRecentlyDownloadedPackages"`
	// The ID of the Feed. Changing this forces a new resource to be created.
	FeedId pulumi.StringOutput `pulumi:"feedId"`
	// The ID of the Project. If not specified, Feed will be created at the organization level. Changing this forces a new resource to be created.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
}

// NewFeedRetentionPolicy registers a new resource with the given unique name, arguments, and options.
func NewFeedRetentionPolicy(ctx *pulumi.Context,
	name string, args *FeedRetentionPolicyArgs, opts ...pulumi.ResourceOption) (*FeedRetentionPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CountLimit == nil {
		return nil, errors.New("invalid value for required argument 'CountLimit'")
	}
	if args.DaysToKeepRecentlyDownloadedPackages == nil {
		return nil, errors.New("invalid value for required argument 'DaysToKeepRecentlyDownloadedPackages'")
	}
	if args.FeedId == nil {
		return nil, errors.New("invalid value for required argument 'FeedId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FeedRetentionPolicy
	err := ctx.RegisterResource("azuredevops:index/feedRetentionPolicy:FeedRetentionPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFeedRetentionPolicy gets an existing FeedRetentionPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFeedRetentionPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FeedRetentionPolicyState, opts ...pulumi.ResourceOption) (*FeedRetentionPolicy, error) {
	var resource FeedRetentionPolicy
	err := ctx.ReadResource("azuredevops:index/feedRetentionPolicy:FeedRetentionPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FeedRetentionPolicy resources.
type feedRetentionPolicyState struct {
	// The maximum number of versions per package.
	CountLimit *int `pulumi:"countLimit"`
	// The days to keep recently downloaded packages.
	DaysToKeepRecentlyDownloadedPackages *int `pulumi:"daysToKeepRecentlyDownloadedPackages"`
	// The ID of the Feed. Changing this forces a new resource to be created.
	FeedId *string `pulumi:"feedId"`
	// The ID of the Project. If not specified, Feed will be created at the organization level. Changing this forces a new resource to be created.
	ProjectId *string `pulumi:"projectId"`
}

type FeedRetentionPolicyState struct {
	// The maximum number of versions per package.
	CountLimit pulumi.IntPtrInput
	// The days to keep recently downloaded packages.
	DaysToKeepRecentlyDownloadedPackages pulumi.IntPtrInput
	// The ID of the Feed. Changing this forces a new resource to be created.
	FeedId pulumi.StringPtrInput
	// The ID of the Project. If not specified, Feed will be created at the organization level. Changing this forces a new resource to be created.
	ProjectId pulumi.StringPtrInput
}

func (FeedRetentionPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*feedRetentionPolicyState)(nil)).Elem()
}

type feedRetentionPolicyArgs struct {
	// The maximum number of versions per package.
	CountLimit int `pulumi:"countLimit"`
	// The days to keep recently downloaded packages.
	DaysToKeepRecentlyDownloadedPackages int `pulumi:"daysToKeepRecentlyDownloadedPackages"`
	// The ID of the Feed. Changing this forces a new resource to be created.
	FeedId string `pulumi:"feedId"`
	// The ID of the Project. If not specified, Feed will be created at the organization level. Changing this forces a new resource to be created.
	ProjectId *string `pulumi:"projectId"`
}

// The set of arguments for constructing a FeedRetentionPolicy resource.
type FeedRetentionPolicyArgs struct {
	// The maximum number of versions per package.
	CountLimit pulumi.IntInput
	// The days to keep recently downloaded packages.
	DaysToKeepRecentlyDownloadedPackages pulumi.IntInput
	// The ID of the Feed. Changing this forces a new resource to be created.
	FeedId pulumi.StringInput
	// The ID of the Project. If not specified, Feed will be created at the organization level. Changing this forces a new resource to be created.
	ProjectId pulumi.StringPtrInput
}

func (FeedRetentionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*feedRetentionPolicyArgs)(nil)).Elem()
}

type FeedRetentionPolicyInput interface {
	pulumi.Input

	ToFeedRetentionPolicyOutput() FeedRetentionPolicyOutput
	ToFeedRetentionPolicyOutputWithContext(ctx context.Context) FeedRetentionPolicyOutput
}

func (*FeedRetentionPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**FeedRetentionPolicy)(nil)).Elem()
}

func (i *FeedRetentionPolicy) ToFeedRetentionPolicyOutput() FeedRetentionPolicyOutput {
	return i.ToFeedRetentionPolicyOutputWithContext(context.Background())
}

func (i *FeedRetentionPolicy) ToFeedRetentionPolicyOutputWithContext(ctx context.Context) FeedRetentionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeedRetentionPolicyOutput)
}

// FeedRetentionPolicyArrayInput is an input type that accepts FeedRetentionPolicyArray and FeedRetentionPolicyArrayOutput values.
// You can construct a concrete instance of `FeedRetentionPolicyArrayInput` via:
//
//	FeedRetentionPolicyArray{ FeedRetentionPolicyArgs{...} }
type FeedRetentionPolicyArrayInput interface {
	pulumi.Input

	ToFeedRetentionPolicyArrayOutput() FeedRetentionPolicyArrayOutput
	ToFeedRetentionPolicyArrayOutputWithContext(context.Context) FeedRetentionPolicyArrayOutput
}

type FeedRetentionPolicyArray []FeedRetentionPolicyInput

func (FeedRetentionPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeedRetentionPolicy)(nil)).Elem()
}

func (i FeedRetentionPolicyArray) ToFeedRetentionPolicyArrayOutput() FeedRetentionPolicyArrayOutput {
	return i.ToFeedRetentionPolicyArrayOutputWithContext(context.Background())
}

func (i FeedRetentionPolicyArray) ToFeedRetentionPolicyArrayOutputWithContext(ctx context.Context) FeedRetentionPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeedRetentionPolicyArrayOutput)
}

// FeedRetentionPolicyMapInput is an input type that accepts FeedRetentionPolicyMap and FeedRetentionPolicyMapOutput values.
// You can construct a concrete instance of `FeedRetentionPolicyMapInput` via:
//
//	FeedRetentionPolicyMap{ "key": FeedRetentionPolicyArgs{...} }
type FeedRetentionPolicyMapInput interface {
	pulumi.Input

	ToFeedRetentionPolicyMapOutput() FeedRetentionPolicyMapOutput
	ToFeedRetentionPolicyMapOutputWithContext(context.Context) FeedRetentionPolicyMapOutput
}

type FeedRetentionPolicyMap map[string]FeedRetentionPolicyInput

func (FeedRetentionPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeedRetentionPolicy)(nil)).Elem()
}

func (i FeedRetentionPolicyMap) ToFeedRetentionPolicyMapOutput() FeedRetentionPolicyMapOutput {
	return i.ToFeedRetentionPolicyMapOutputWithContext(context.Background())
}

func (i FeedRetentionPolicyMap) ToFeedRetentionPolicyMapOutputWithContext(ctx context.Context) FeedRetentionPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeedRetentionPolicyMapOutput)
}

type FeedRetentionPolicyOutput struct{ *pulumi.OutputState }

func (FeedRetentionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeedRetentionPolicy)(nil)).Elem()
}

func (o FeedRetentionPolicyOutput) ToFeedRetentionPolicyOutput() FeedRetentionPolicyOutput {
	return o
}

func (o FeedRetentionPolicyOutput) ToFeedRetentionPolicyOutputWithContext(ctx context.Context) FeedRetentionPolicyOutput {
	return o
}

// The maximum number of versions per package.
func (o FeedRetentionPolicyOutput) CountLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *FeedRetentionPolicy) pulumi.IntOutput { return v.CountLimit }).(pulumi.IntOutput)
}

// The days to keep recently downloaded packages.
func (o FeedRetentionPolicyOutput) DaysToKeepRecentlyDownloadedPackages() pulumi.IntOutput {
	return o.ApplyT(func(v *FeedRetentionPolicy) pulumi.IntOutput { return v.DaysToKeepRecentlyDownloadedPackages }).(pulumi.IntOutput)
}

// The ID of the Feed. Changing this forces a new resource to be created.
func (o FeedRetentionPolicyOutput) FeedId() pulumi.StringOutput {
	return o.ApplyT(func(v *FeedRetentionPolicy) pulumi.StringOutput { return v.FeedId }).(pulumi.StringOutput)
}

// The ID of the Project. If not specified, Feed will be created at the organization level. Changing this forces a new resource to be created.
func (o FeedRetentionPolicyOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeedRetentionPolicy) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

type FeedRetentionPolicyArrayOutput struct{ *pulumi.OutputState }

func (FeedRetentionPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeedRetentionPolicy)(nil)).Elem()
}

func (o FeedRetentionPolicyArrayOutput) ToFeedRetentionPolicyArrayOutput() FeedRetentionPolicyArrayOutput {
	return o
}

func (o FeedRetentionPolicyArrayOutput) ToFeedRetentionPolicyArrayOutputWithContext(ctx context.Context) FeedRetentionPolicyArrayOutput {
	return o
}

func (o FeedRetentionPolicyArrayOutput) Index(i pulumi.IntInput) FeedRetentionPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FeedRetentionPolicy {
		return vs[0].([]*FeedRetentionPolicy)[vs[1].(int)]
	}).(FeedRetentionPolicyOutput)
}

type FeedRetentionPolicyMapOutput struct{ *pulumi.OutputState }

func (FeedRetentionPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeedRetentionPolicy)(nil)).Elem()
}

func (o FeedRetentionPolicyMapOutput) ToFeedRetentionPolicyMapOutput() FeedRetentionPolicyMapOutput {
	return o
}

func (o FeedRetentionPolicyMapOutput) ToFeedRetentionPolicyMapOutputWithContext(ctx context.Context) FeedRetentionPolicyMapOutput {
	return o
}

func (o FeedRetentionPolicyMapOutput) MapIndex(k pulumi.StringInput) FeedRetentionPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FeedRetentionPolicy {
		return vs[0].(map[string]*FeedRetentionPolicy)[vs[1].(string)]
	}).(FeedRetentionPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FeedRetentionPolicyInput)(nil)).Elem(), &FeedRetentionPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeedRetentionPolicyArrayInput)(nil)).Elem(), FeedRetentionPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeedRetentionPolicyMapInput)(nil)).Elem(), FeedRetentionPolicyMap{})
	pulumi.RegisterOutputType(FeedRetentionPolicyOutput{})
	pulumi.RegisterOutputType(FeedRetentionPolicyArrayOutput{})
	pulumi.RegisterOutputType(FeedRetentionPolicyMapOutput{})
}
