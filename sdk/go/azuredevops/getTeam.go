// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azuredevops

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Team in a Project within Azure DevOps.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleProject, err := azuredevops.NewProject(ctx, "example", &azuredevops.ProjectArgs{
//				Name:             pulumi.String("Example Project"),
//				WorkItemTemplate: pulumi.String("Agile"),
//				VersionControl:   pulumi.String("Git"),
//				Visibility:       pulumi.String("private"),
//				Description:      pulumi.String("Managed by Pulumi"),
//			})
//			if err != nil {
//				return err
//			}
//			_ = azuredevops.LookupTeamOutput(ctx, azuredevops.GetTeamOutputArgs{
//				ProjectId: exampleProject.ID(),
//				Name:      pulumi.String("Example Project Team"),
//			}, nil)
//			return nil
//		})
//	}
//
// ```
//
// ## Relevant Links
//
// - [Azure DevOps Service REST API 7.0 - Teams - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/core/teams/get?view=azure-devops-rest-7.0)
//
// ## PAT Permissions Required
//
// - **vso.project**:	Grants the ability to read projects and teams.
func LookupTeam(ctx *pulumi.Context, args *LookupTeamArgs, opts ...pulumi.InvokeOption) (*LookupTeamResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTeamResult
	err := ctx.Invoke("azuredevops:index/getTeam:getTeam", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTeam.
type LookupTeamArgs struct {
	// The name of the Team.
	Name string `pulumi:"name"`
	// The Project ID.
	ProjectId string `pulumi:"projectId"`
	// The maximum number of teams to return. Defaults to `100`.
	Top *int `pulumi:"top"`
}

// A collection of values returned by getTeam.
type LookupTeamResult struct {
	// List of subject descriptors for `administrators` of the team.
	Administrators []string `pulumi:"administrators"`
	// Team description.
	Description string `pulumi:"description"`
	// The descriptor of the Team.
	Descriptor string `pulumi:"descriptor"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// List of subject descriptors for `members` of the team.
	Members   []string `pulumi:"members"`
	Name      string   `pulumi:"name"`
	ProjectId string   `pulumi:"projectId"`
	Top       *int     `pulumi:"top"`
}

func LookupTeamOutput(ctx *pulumi.Context, args LookupTeamOutputArgs, opts ...pulumi.InvokeOption) LookupTeamResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTeamResultOutput, error) {
			args := v.(LookupTeamArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupTeamResult
			secret, err := ctx.InvokePackageRaw("azuredevops:index/getTeam:getTeam", args, &rv, "", opts...)
			if err != nil {
				return LookupTeamResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupTeamResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupTeamResultOutput), nil
			}
			return output, nil
		}).(LookupTeamResultOutput)
}

// A collection of arguments for invoking getTeam.
type LookupTeamOutputArgs struct {
	// The name of the Team.
	Name pulumi.StringInput `pulumi:"name"`
	// The Project ID.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The maximum number of teams to return. Defaults to `100`.
	Top pulumi.IntPtrInput `pulumi:"top"`
}

func (LookupTeamOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTeamArgs)(nil)).Elem()
}

// A collection of values returned by getTeam.
type LookupTeamResultOutput struct{ *pulumi.OutputState }

func (LookupTeamResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTeamResult)(nil)).Elem()
}

func (o LookupTeamResultOutput) ToLookupTeamResultOutput() LookupTeamResultOutput {
	return o
}

func (o LookupTeamResultOutput) ToLookupTeamResultOutputWithContext(ctx context.Context) LookupTeamResultOutput {
	return o
}

// List of subject descriptors for `administrators` of the team.
func (o LookupTeamResultOutput) Administrators() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupTeamResult) []string { return v.Administrators }).(pulumi.StringArrayOutput)
}

// Team description.
func (o LookupTeamResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamResult) string { return v.Description }).(pulumi.StringOutput)
}

// The descriptor of the Team.
func (o LookupTeamResultOutput) Descriptor() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamResult) string { return v.Descriptor }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupTeamResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamResult) string { return v.Id }).(pulumi.StringOutput)
}

// List of subject descriptors for `members` of the team.
func (o LookupTeamResultOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupTeamResult) []string { return v.Members }).(pulumi.StringArrayOutput)
}

func (o LookupTeamResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupTeamResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o LookupTeamResultOutput) Top() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupTeamResult) *int { return v.Top }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTeamResultOutput{})
}
