// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azuredevops

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Black Duck service endpoint within Azure DevOps. Using this service endpoint requires you to install: [Black Duck Detect](https://marketplace.visualstudio.com/items?itemName=blackduck.blackduck-detect)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := azuredevops.NewProject(ctx, "example", &azuredevops.ProjectArgs{
//				Name:             pulumi.String("Example Project"),
//				Visibility:       pulumi.String("private"),
//				VersionControl:   pulumi.String("Git"),
//				WorkItemTemplate: pulumi.String("Agile"),
//				Description:      pulumi.String("Managed by Pulumi"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = azuredevops.NewServiceendpointBlackDuck(ctx, "example", &azuredevops.ServiceendpointBlackDuckArgs{
//				ProjectId:           example.ID(),
//				ServerUrl:           pulumi.String("https://blackduck.com/"),
//				ApiToken:            pulumi.String("token"),
//				ServiceEndpointName: pulumi.String("Example Black Duck"),
//				Description:         pulumi.String("Managed by Pulumi"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Relevant Links
//
// - [Azure DevOps Service REST API 7.0 - Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-7.0)
//
// ## Import
//
// Azure DevOps Black Duck Service Endpoint can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**
//
// ```sh
// $ pulumi import azuredevops:index/serviceendpointBlackDuck:ServiceendpointBlackDuck example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000
// ```
type ServiceendpointBlackDuck struct {
	pulumi.CustomResourceState

	// The API token of the Black Duck Detect.
	ApiToken      pulumi.StringOutput    `pulumi:"apiToken"`
	Authorization pulumi.StringMapOutput `pulumi:"authorization"`
	Description   pulumi.StringPtrOutput `pulumi:"description"`
	// The ID of the project.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The server URL of the Black Duck Detect.
	ServerUrl pulumi.StringOutput `pulumi:"serverUrl"`
	// The Service Endpoint name.
	ServiceEndpointName pulumi.StringOutput `pulumi:"serviceEndpointName"`
}

// NewServiceendpointBlackDuck registers a new resource with the given unique name, arguments, and options.
func NewServiceendpointBlackDuck(ctx *pulumi.Context,
	name string, args *ServiceendpointBlackDuckArgs, opts ...pulumi.ResourceOption) (*ServiceendpointBlackDuck, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiToken == nil {
		return nil, errors.New("invalid value for required argument 'ApiToken'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.ServerUrl == nil {
		return nil, errors.New("invalid value for required argument 'ServerUrl'")
	}
	if args.ServiceEndpointName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceEndpointName'")
	}
	if args.ApiToken != nil {
		args.ApiToken = pulumi.ToSecret(args.ApiToken).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"apiToken",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceendpointBlackDuck
	err := ctx.RegisterResource("azuredevops:index/serviceendpointBlackDuck:ServiceendpointBlackDuck", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceendpointBlackDuck gets an existing ServiceendpointBlackDuck resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceendpointBlackDuck(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceendpointBlackDuckState, opts ...pulumi.ResourceOption) (*ServiceendpointBlackDuck, error) {
	var resource ServiceendpointBlackDuck
	err := ctx.ReadResource("azuredevops:index/serviceendpointBlackDuck:ServiceendpointBlackDuck", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceendpointBlackDuck resources.
type serviceendpointBlackDuckState struct {
	// The API token of the Black Duck Detect.
	ApiToken      *string           `pulumi:"apiToken"`
	Authorization map[string]string `pulumi:"authorization"`
	Description   *string           `pulumi:"description"`
	// The ID of the project.
	ProjectId *string `pulumi:"projectId"`
	// The server URL of the Black Duck Detect.
	ServerUrl *string `pulumi:"serverUrl"`
	// The Service Endpoint name.
	ServiceEndpointName *string `pulumi:"serviceEndpointName"`
}

type ServiceendpointBlackDuckState struct {
	// The API token of the Black Duck Detect.
	ApiToken      pulumi.StringPtrInput
	Authorization pulumi.StringMapInput
	Description   pulumi.StringPtrInput
	// The ID of the project.
	ProjectId pulumi.StringPtrInput
	// The server URL of the Black Duck Detect.
	ServerUrl pulumi.StringPtrInput
	// The Service Endpoint name.
	ServiceEndpointName pulumi.StringPtrInput
}

func (ServiceendpointBlackDuckState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceendpointBlackDuckState)(nil)).Elem()
}

type serviceendpointBlackDuckArgs struct {
	// The API token of the Black Duck Detect.
	ApiToken    string  `pulumi:"apiToken"`
	Description *string `pulumi:"description"`
	// The ID of the project.
	ProjectId string `pulumi:"projectId"`
	// The server URL of the Black Duck Detect.
	ServerUrl string `pulumi:"serverUrl"`
	// The Service Endpoint name.
	ServiceEndpointName string `pulumi:"serviceEndpointName"`
}

// The set of arguments for constructing a ServiceendpointBlackDuck resource.
type ServiceendpointBlackDuckArgs struct {
	// The API token of the Black Duck Detect.
	ApiToken    pulumi.StringInput
	Description pulumi.StringPtrInput
	// The ID of the project.
	ProjectId pulumi.StringInput
	// The server URL of the Black Duck Detect.
	ServerUrl pulumi.StringInput
	// The Service Endpoint name.
	ServiceEndpointName pulumi.StringInput
}

func (ServiceendpointBlackDuckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceendpointBlackDuckArgs)(nil)).Elem()
}

type ServiceendpointBlackDuckInput interface {
	pulumi.Input

	ToServiceendpointBlackDuckOutput() ServiceendpointBlackDuckOutput
	ToServiceendpointBlackDuckOutputWithContext(ctx context.Context) ServiceendpointBlackDuckOutput
}

func (*ServiceendpointBlackDuck) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceendpointBlackDuck)(nil)).Elem()
}

func (i *ServiceendpointBlackDuck) ToServiceendpointBlackDuckOutput() ServiceendpointBlackDuckOutput {
	return i.ToServiceendpointBlackDuckOutputWithContext(context.Background())
}

func (i *ServiceendpointBlackDuck) ToServiceendpointBlackDuckOutputWithContext(ctx context.Context) ServiceendpointBlackDuckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceendpointBlackDuckOutput)
}

// ServiceendpointBlackDuckArrayInput is an input type that accepts ServiceendpointBlackDuckArray and ServiceendpointBlackDuckArrayOutput values.
// You can construct a concrete instance of `ServiceendpointBlackDuckArrayInput` via:
//
//	ServiceendpointBlackDuckArray{ ServiceendpointBlackDuckArgs{...} }
type ServiceendpointBlackDuckArrayInput interface {
	pulumi.Input

	ToServiceendpointBlackDuckArrayOutput() ServiceendpointBlackDuckArrayOutput
	ToServiceendpointBlackDuckArrayOutputWithContext(context.Context) ServiceendpointBlackDuckArrayOutput
}

type ServiceendpointBlackDuckArray []ServiceendpointBlackDuckInput

func (ServiceendpointBlackDuckArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceendpointBlackDuck)(nil)).Elem()
}

func (i ServiceendpointBlackDuckArray) ToServiceendpointBlackDuckArrayOutput() ServiceendpointBlackDuckArrayOutput {
	return i.ToServiceendpointBlackDuckArrayOutputWithContext(context.Background())
}

func (i ServiceendpointBlackDuckArray) ToServiceendpointBlackDuckArrayOutputWithContext(ctx context.Context) ServiceendpointBlackDuckArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceendpointBlackDuckArrayOutput)
}

// ServiceendpointBlackDuckMapInput is an input type that accepts ServiceendpointBlackDuckMap and ServiceendpointBlackDuckMapOutput values.
// You can construct a concrete instance of `ServiceendpointBlackDuckMapInput` via:
//
//	ServiceendpointBlackDuckMap{ "key": ServiceendpointBlackDuckArgs{...} }
type ServiceendpointBlackDuckMapInput interface {
	pulumi.Input

	ToServiceendpointBlackDuckMapOutput() ServiceendpointBlackDuckMapOutput
	ToServiceendpointBlackDuckMapOutputWithContext(context.Context) ServiceendpointBlackDuckMapOutput
}

type ServiceendpointBlackDuckMap map[string]ServiceendpointBlackDuckInput

func (ServiceendpointBlackDuckMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceendpointBlackDuck)(nil)).Elem()
}

func (i ServiceendpointBlackDuckMap) ToServiceendpointBlackDuckMapOutput() ServiceendpointBlackDuckMapOutput {
	return i.ToServiceendpointBlackDuckMapOutputWithContext(context.Background())
}

func (i ServiceendpointBlackDuckMap) ToServiceendpointBlackDuckMapOutputWithContext(ctx context.Context) ServiceendpointBlackDuckMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceendpointBlackDuckMapOutput)
}

type ServiceendpointBlackDuckOutput struct{ *pulumi.OutputState }

func (ServiceendpointBlackDuckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceendpointBlackDuck)(nil)).Elem()
}

func (o ServiceendpointBlackDuckOutput) ToServiceendpointBlackDuckOutput() ServiceendpointBlackDuckOutput {
	return o
}

func (o ServiceendpointBlackDuckOutput) ToServiceendpointBlackDuckOutputWithContext(ctx context.Context) ServiceendpointBlackDuckOutput {
	return o
}

// The API token of the Black Duck Detect.
func (o ServiceendpointBlackDuckOutput) ApiToken() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceendpointBlackDuck) pulumi.StringOutput { return v.ApiToken }).(pulumi.StringOutput)
}

func (o ServiceendpointBlackDuckOutput) Authorization() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServiceendpointBlackDuck) pulumi.StringMapOutput { return v.Authorization }).(pulumi.StringMapOutput)
}

func (o ServiceendpointBlackDuckOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceendpointBlackDuck) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The ID of the project.
func (o ServiceendpointBlackDuckOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceendpointBlackDuck) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The server URL of the Black Duck Detect.
func (o ServiceendpointBlackDuckOutput) ServerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceendpointBlackDuck) pulumi.StringOutput { return v.ServerUrl }).(pulumi.StringOutput)
}

// The Service Endpoint name.
func (o ServiceendpointBlackDuckOutput) ServiceEndpointName() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceendpointBlackDuck) pulumi.StringOutput { return v.ServiceEndpointName }).(pulumi.StringOutput)
}

type ServiceendpointBlackDuckArrayOutput struct{ *pulumi.OutputState }

func (ServiceendpointBlackDuckArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceendpointBlackDuck)(nil)).Elem()
}

func (o ServiceendpointBlackDuckArrayOutput) ToServiceendpointBlackDuckArrayOutput() ServiceendpointBlackDuckArrayOutput {
	return o
}

func (o ServiceendpointBlackDuckArrayOutput) ToServiceendpointBlackDuckArrayOutputWithContext(ctx context.Context) ServiceendpointBlackDuckArrayOutput {
	return o
}

func (o ServiceendpointBlackDuckArrayOutput) Index(i pulumi.IntInput) ServiceendpointBlackDuckOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceendpointBlackDuck {
		return vs[0].([]*ServiceendpointBlackDuck)[vs[1].(int)]
	}).(ServiceendpointBlackDuckOutput)
}

type ServiceendpointBlackDuckMapOutput struct{ *pulumi.OutputState }

func (ServiceendpointBlackDuckMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceendpointBlackDuck)(nil)).Elem()
}

func (o ServiceendpointBlackDuckMapOutput) ToServiceendpointBlackDuckMapOutput() ServiceendpointBlackDuckMapOutput {
	return o
}

func (o ServiceendpointBlackDuckMapOutput) ToServiceendpointBlackDuckMapOutputWithContext(ctx context.Context) ServiceendpointBlackDuckMapOutput {
	return o
}

func (o ServiceendpointBlackDuckMapOutput) MapIndex(k pulumi.StringInput) ServiceendpointBlackDuckOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceendpointBlackDuck {
		return vs[0].(map[string]*ServiceendpointBlackDuck)[vs[1].(string)]
	}).(ServiceendpointBlackDuckOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceendpointBlackDuckInput)(nil)).Elem(), &ServiceendpointBlackDuck{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceendpointBlackDuckArrayInput)(nil)).Elem(), ServiceendpointBlackDuckArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceendpointBlackDuckMapInput)(nil)).Elem(), ServiceendpointBlackDuckMap{})
	pulumi.RegisterOutputType(ServiceendpointBlackDuckOutput{})
	pulumi.RegisterOutputType(ServiceendpointBlackDuckArrayOutput{})
	pulumi.RegisterOutputType(ServiceendpointBlackDuckMapOutput{})
}
