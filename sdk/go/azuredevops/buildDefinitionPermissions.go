// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package azuredevops

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages permissions for a Build Definition
//
// > **Note** Permissions can be assigned to group principals and not to single user principals.
//
// ## Relevant Links
//
// * [Azure DevOps Service REST API 5.1 - Security](https://docs.microsoft.com/en-us/rest/api/azure/devops/security/?view=azure-devops-rest-5.1)
//
// ## PAT Permissions Required
//
// - **Project & Team**: vso.security_manage - Grants the ability to read, write, and manage security permissions.
//
// ## Import
//
// The resource does not support import.
type BuildDefinitionPermissions struct {
	pulumi.CustomResourceState

	// The id of the build definition to assign the permissions.
	BuildDefinitionId pulumi.StringOutput `pulumi:"buildDefinitionId"`
	// the permissions to assign. The following permissions are available.
	Permissions pulumi.StringMapOutput `pulumi:"permissions"`
	// The **group** principal to assign the permissions.
	Principal pulumi.StringOutput `pulumi:"principal"`
	// The ID of the project to assign the permissions.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Replace (`true`) or merge (`false`) the permissions. Default: `true`.
	Replace pulumi.BoolPtrOutput `pulumi:"replace"`
}

// NewBuildDefinitionPermissions registers a new resource with the given unique name, arguments, and options.
func NewBuildDefinitionPermissions(ctx *pulumi.Context,
	name string, args *BuildDefinitionPermissionsArgs, opts ...pulumi.ResourceOption) (*BuildDefinitionPermissions, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BuildDefinitionId == nil {
		return nil, errors.New("invalid value for required argument 'BuildDefinitionId'")
	}
	if args.Permissions == nil {
		return nil, errors.New("invalid value for required argument 'Permissions'")
	}
	if args.Principal == nil {
		return nil, errors.New("invalid value for required argument 'Principal'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	var resource BuildDefinitionPermissions
	err := ctx.RegisterResource("azuredevops:index/buildDefinitionPermissions:BuildDefinitionPermissions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBuildDefinitionPermissions gets an existing BuildDefinitionPermissions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBuildDefinitionPermissions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BuildDefinitionPermissionsState, opts ...pulumi.ResourceOption) (*BuildDefinitionPermissions, error) {
	var resource BuildDefinitionPermissions
	err := ctx.ReadResource("azuredevops:index/buildDefinitionPermissions:BuildDefinitionPermissions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BuildDefinitionPermissions resources.
type buildDefinitionPermissionsState struct {
	// The id of the build definition to assign the permissions.
	BuildDefinitionId *string `pulumi:"buildDefinitionId"`
	// the permissions to assign. The following permissions are available.
	Permissions map[string]string `pulumi:"permissions"`
	// The **group** principal to assign the permissions.
	Principal *string `pulumi:"principal"`
	// The ID of the project to assign the permissions.
	ProjectId *string `pulumi:"projectId"`
	// Replace (`true`) or merge (`false`) the permissions. Default: `true`.
	Replace *bool `pulumi:"replace"`
}

type BuildDefinitionPermissionsState struct {
	// The id of the build definition to assign the permissions.
	BuildDefinitionId pulumi.StringPtrInput
	// the permissions to assign. The following permissions are available.
	Permissions pulumi.StringMapInput
	// The **group** principal to assign the permissions.
	Principal pulumi.StringPtrInput
	// The ID of the project to assign the permissions.
	ProjectId pulumi.StringPtrInput
	// Replace (`true`) or merge (`false`) the permissions. Default: `true`.
	Replace pulumi.BoolPtrInput
}

func (BuildDefinitionPermissionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*buildDefinitionPermissionsState)(nil)).Elem()
}

type buildDefinitionPermissionsArgs struct {
	// The id of the build definition to assign the permissions.
	BuildDefinitionId string `pulumi:"buildDefinitionId"`
	// the permissions to assign. The following permissions are available.
	Permissions map[string]string `pulumi:"permissions"`
	// The **group** principal to assign the permissions.
	Principal string `pulumi:"principal"`
	// The ID of the project to assign the permissions.
	ProjectId string `pulumi:"projectId"`
	// Replace (`true`) or merge (`false`) the permissions. Default: `true`.
	Replace *bool `pulumi:"replace"`
}

// The set of arguments for constructing a BuildDefinitionPermissions resource.
type BuildDefinitionPermissionsArgs struct {
	// The id of the build definition to assign the permissions.
	BuildDefinitionId pulumi.StringInput
	// the permissions to assign. The following permissions are available.
	Permissions pulumi.StringMapInput
	// The **group** principal to assign the permissions.
	Principal pulumi.StringInput
	// The ID of the project to assign the permissions.
	ProjectId pulumi.StringInput
	// Replace (`true`) or merge (`false`) the permissions. Default: `true`.
	Replace pulumi.BoolPtrInput
}

func (BuildDefinitionPermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*buildDefinitionPermissionsArgs)(nil)).Elem()
}

type BuildDefinitionPermissionsInput interface {
	pulumi.Input

	ToBuildDefinitionPermissionsOutput() BuildDefinitionPermissionsOutput
	ToBuildDefinitionPermissionsOutputWithContext(ctx context.Context) BuildDefinitionPermissionsOutput
}

func (*BuildDefinitionPermissions) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDefinitionPermissions)(nil))
}

func (i *BuildDefinitionPermissions) ToBuildDefinitionPermissionsOutput() BuildDefinitionPermissionsOutput {
	return i.ToBuildDefinitionPermissionsOutputWithContext(context.Background())
}

func (i *BuildDefinitionPermissions) ToBuildDefinitionPermissionsOutputWithContext(ctx context.Context) BuildDefinitionPermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildDefinitionPermissionsOutput)
}

type BuildDefinitionPermissionsOutput struct {
	*pulumi.OutputState
}

func (BuildDefinitionPermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildDefinitionPermissions)(nil))
}

func (o BuildDefinitionPermissionsOutput) ToBuildDefinitionPermissionsOutput() BuildDefinitionPermissionsOutput {
	return o
}

func (o BuildDefinitionPermissionsOutput) ToBuildDefinitionPermissionsOutputWithContext(ctx context.Context) BuildDefinitionPermissionsOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(BuildDefinitionPermissionsOutput{})
}
