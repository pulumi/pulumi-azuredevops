// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package serviceendpoint

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Bitbucket service endpoint within Azure DevOps.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		project, err := azuredevops.NewProject(ctx, "project", &azuredevops.ProjectArgs{
// 			Visibility:       pulumi.String("private"),
// 			VersionControl:   pulumi.String("Git"),
// 			WorkItemTemplate: pulumi.String("Agile"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = azuredevops.NewServiceEndpointBitBucket(ctx, "serviceendpoint", &azuredevops.ServiceEndpointBitBucketArgs{
// 			ProjectId:           project.ID(),
// 			Username:            pulumi.String("username"),
// 			Password:            pulumi.String("password"),
// 			ServiceEndpointName: pulumi.String("Sample Bitbucket"),
// 			Description:         pulumi.String("Managed by Terraform"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Relevant Links
//
// - [Azure DevOps Service REST API 5.1 - Agent Pools](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-5.1)
//
// ## Import
//
// Azure DevOps Service Endpoint Bitbucket can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**
//
// ```sh
//  $ pulumi import azuredevops:ServiceEndpoint/bitBucket:BitBucket serviceendpoint 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000
// ```
//
// Deprecated: azuredevops.serviceendpoint.BitBucket has been deprecated in favor of azuredevops.ServiceEndpointBitBucket
type BitBucket struct {
	pulumi.CustomResourceState

	Authorization pulumi.StringMapOutput `pulumi:"authorization"`
	Description   pulumi.StringPtrOutput `pulumi:"description"`
	// Bitbucket account password.
	Password pulumi.StringOutput `pulumi:"password"`
	// A bcrypted hash of the attribute 'password'
	PasswordHash pulumi.StringOutput `pulumi:"passwordHash"`
	// The project ID or project name.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The Service Endpoint name.
	ServiceEndpointName pulumi.StringOutput `pulumi:"serviceEndpointName"`
	// Bitbucket account username.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewBitBucket registers a new resource with the given unique name, arguments, and options.
func NewBitBucket(ctx *pulumi.Context,
	name string, args *BitBucketArgs, opts ...pulumi.ResourceOption) (*BitBucket, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.ServiceEndpointName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceEndpointName'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	var resource BitBucket
	err := ctx.RegisterResource("azuredevops:ServiceEndpoint/bitBucket:BitBucket", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBitBucket gets an existing BitBucket resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBitBucket(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BitBucketState, opts ...pulumi.ResourceOption) (*BitBucket, error) {
	var resource BitBucket
	err := ctx.ReadResource("azuredevops:ServiceEndpoint/bitBucket:BitBucket", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BitBucket resources.
type bitBucketState struct {
	Authorization map[string]string `pulumi:"authorization"`
	Description   *string           `pulumi:"description"`
	// Bitbucket account password.
	Password *string `pulumi:"password"`
	// A bcrypted hash of the attribute 'password'
	PasswordHash *string `pulumi:"passwordHash"`
	// The project ID or project name.
	ProjectId *string `pulumi:"projectId"`
	// The Service Endpoint name.
	ServiceEndpointName *string `pulumi:"serviceEndpointName"`
	// Bitbucket account username.
	Username *string `pulumi:"username"`
}

type BitBucketState struct {
	Authorization pulumi.StringMapInput
	Description   pulumi.StringPtrInput
	// Bitbucket account password.
	Password pulumi.StringPtrInput
	// A bcrypted hash of the attribute 'password'
	PasswordHash pulumi.StringPtrInput
	// The project ID or project name.
	ProjectId pulumi.StringPtrInput
	// The Service Endpoint name.
	ServiceEndpointName pulumi.StringPtrInput
	// Bitbucket account username.
	Username pulumi.StringPtrInput
}

func (BitBucketState) ElementType() reflect.Type {
	return reflect.TypeOf((*bitBucketState)(nil)).Elem()
}

type bitBucketArgs struct {
	Authorization map[string]string `pulumi:"authorization"`
	Description   *string           `pulumi:"description"`
	// Bitbucket account password.
	Password string `pulumi:"password"`
	// The project ID or project name.
	ProjectId string `pulumi:"projectId"`
	// The Service Endpoint name.
	ServiceEndpointName string `pulumi:"serviceEndpointName"`
	// Bitbucket account username.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a BitBucket resource.
type BitBucketArgs struct {
	Authorization pulumi.StringMapInput
	Description   pulumi.StringPtrInput
	// Bitbucket account password.
	Password pulumi.StringInput
	// The project ID or project name.
	ProjectId pulumi.StringInput
	// The Service Endpoint name.
	ServiceEndpointName pulumi.StringInput
	// Bitbucket account username.
	Username pulumi.StringInput
}

func (BitBucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bitBucketArgs)(nil)).Elem()
}

type BitBucketInput interface {
	pulumi.Input

	ToBitBucketOutput() BitBucketOutput
	ToBitBucketOutputWithContext(ctx context.Context) BitBucketOutput
}

func (*BitBucket) ElementType() reflect.Type {
	return reflect.TypeOf((*BitBucket)(nil))
}

func (i *BitBucket) ToBitBucketOutput() BitBucketOutput {
	return i.ToBitBucketOutputWithContext(context.Background())
}

func (i *BitBucket) ToBitBucketOutputWithContext(ctx context.Context) BitBucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BitBucketOutput)
}

func (i *BitBucket) ToBitBucketPtrOutput() BitBucketPtrOutput {
	return i.ToBitBucketPtrOutputWithContext(context.Background())
}

func (i *BitBucket) ToBitBucketPtrOutputWithContext(ctx context.Context) BitBucketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BitBucketPtrOutput)
}

type BitBucketPtrInput interface {
	pulumi.Input

	ToBitBucketPtrOutput() BitBucketPtrOutput
	ToBitBucketPtrOutputWithContext(ctx context.Context) BitBucketPtrOutput
}

type bitBucketPtrType BitBucketArgs

func (*bitBucketPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BitBucket)(nil))
}

func (i *bitBucketPtrType) ToBitBucketPtrOutput() BitBucketPtrOutput {
	return i.ToBitBucketPtrOutputWithContext(context.Background())
}

func (i *bitBucketPtrType) ToBitBucketPtrOutputWithContext(ctx context.Context) BitBucketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BitBucketPtrOutput)
}

// BitBucketArrayInput is an input type that accepts BitBucketArray and BitBucketArrayOutput values.
// You can construct a concrete instance of `BitBucketArrayInput` via:
//
//          BitBucketArray{ BitBucketArgs{...} }
type BitBucketArrayInput interface {
	pulumi.Input

	ToBitBucketArrayOutput() BitBucketArrayOutput
	ToBitBucketArrayOutputWithContext(context.Context) BitBucketArrayOutput
}

type BitBucketArray []BitBucketInput

func (BitBucketArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*BitBucket)(nil))
}

func (i BitBucketArray) ToBitBucketArrayOutput() BitBucketArrayOutput {
	return i.ToBitBucketArrayOutputWithContext(context.Background())
}

func (i BitBucketArray) ToBitBucketArrayOutputWithContext(ctx context.Context) BitBucketArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BitBucketArrayOutput)
}

// BitBucketMapInput is an input type that accepts BitBucketMap and BitBucketMapOutput values.
// You can construct a concrete instance of `BitBucketMapInput` via:
//
//          BitBucketMap{ "key": BitBucketArgs{...} }
type BitBucketMapInput interface {
	pulumi.Input

	ToBitBucketMapOutput() BitBucketMapOutput
	ToBitBucketMapOutputWithContext(context.Context) BitBucketMapOutput
}

type BitBucketMap map[string]BitBucketInput

func (BitBucketMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*BitBucket)(nil))
}

func (i BitBucketMap) ToBitBucketMapOutput() BitBucketMapOutput {
	return i.ToBitBucketMapOutputWithContext(context.Background())
}

func (i BitBucketMap) ToBitBucketMapOutputWithContext(ctx context.Context) BitBucketMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BitBucketMapOutput)
}

type BitBucketOutput struct {
	*pulumi.OutputState
}

func (BitBucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BitBucket)(nil))
}

func (o BitBucketOutput) ToBitBucketOutput() BitBucketOutput {
	return o
}

func (o BitBucketOutput) ToBitBucketOutputWithContext(ctx context.Context) BitBucketOutput {
	return o
}

func (o BitBucketOutput) ToBitBucketPtrOutput() BitBucketPtrOutput {
	return o.ToBitBucketPtrOutputWithContext(context.Background())
}

func (o BitBucketOutput) ToBitBucketPtrOutputWithContext(ctx context.Context) BitBucketPtrOutput {
	return o.ApplyT(func(v BitBucket) *BitBucket {
		return &v
	}).(BitBucketPtrOutput)
}

type BitBucketPtrOutput struct {
	*pulumi.OutputState
}

func (BitBucketPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BitBucket)(nil))
}

func (o BitBucketPtrOutput) ToBitBucketPtrOutput() BitBucketPtrOutput {
	return o
}

func (o BitBucketPtrOutput) ToBitBucketPtrOutputWithContext(ctx context.Context) BitBucketPtrOutput {
	return o
}

type BitBucketArrayOutput struct{ *pulumi.OutputState }

func (BitBucketArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BitBucket)(nil))
}

func (o BitBucketArrayOutput) ToBitBucketArrayOutput() BitBucketArrayOutput {
	return o
}

func (o BitBucketArrayOutput) ToBitBucketArrayOutputWithContext(ctx context.Context) BitBucketArrayOutput {
	return o
}

func (o BitBucketArrayOutput) Index(i pulumi.IntInput) BitBucketOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BitBucket {
		return vs[0].([]BitBucket)[vs[1].(int)]
	}).(BitBucketOutput)
}

type BitBucketMapOutput struct{ *pulumi.OutputState }

func (BitBucketMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]BitBucket)(nil))
}

func (o BitBucketMapOutput) ToBitBucketMapOutput() BitBucketMapOutput {
	return o
}

func (o BitBucketMapOutput) ToBitBucketMapOutputWithContext(ctx context.Context) BitBucketMapOutput {
	return o
}

func (o BitBucketMapOutput) MapIndex(k pulumi.StringInput) BitBucketOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) BitBucket {
		return vs[0].(map[string]BitBucket)[vs[1].(string)]
	}).(BitBucketOutput)
}

func init() {
	pulumi.RegisterOutputType(BitBucketOutput{})
	pulumi.RegisterOutputType(BitBucketPtrOutput{})
	pulumi.RegisterOutputType(BitBucketArrayOutput{})
	pulumi.RegisterOutputType(BitBucketMapOutput{})
}
