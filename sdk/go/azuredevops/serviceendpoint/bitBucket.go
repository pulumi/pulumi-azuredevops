// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package serviceendpoint

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Bitbucket service endpoint within Azure DevOps.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleProject, err := azuredevops.NewProject(ctx, "exampleProject", &azuredevops.ProjectArgs{
//				Visibility:       pulumi.String("private"),
//				VersionControl:   pulumi.String("Git"),
//				WorkItemTemplate: pulumi.String("Agile"),
//				Description:      pulumi.String("Managed by Terraform"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = azuredevops.NewServiceEndpointBitBucket(ctx, "exampleServiceEndpointBitBucket", &azuredevops.ServiceEndpointBitBucketArgs{
//				ProjectId:           exampleProject.ID(),
//				Username:            pulumi.String("username"),
//				Password:            pulumi.String("password"),
//				ServiceEndpointName: pulumi.String("Example Bitbucket"),
//				Description:         pulumi.String("Managed by Terraform"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Relevant Links
//
// - [Azure DevOps Service REST API 6.0 - Agent Pools](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-6.0)
//
// ## Import
//
// Azure DevOps Service Endpoint Bitbucket can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**
//
// ```sh
//
//	$ pulumi import azuredevops:ServiceEndpoint/bitBucket:BitBucket example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000
//
// ```
//
// Deprecated: azuredevops.serviceendpoint.BitBucket has been deprecated in favor of azuredevops.ServiceEndpointBitBucket
type BitBucket struct {
	pulumi.CustomResourceState

	Authorization pulumi.StringMapOutput `pulumi:"authorization"`
	Description   pulumi.StringPtrOutput `pulumi:"description"`
	// Bitbucket account password.
	Password pulumi.StringOutput `pulumi:"password"`
	// A bcrypted hash of the attribute 'password'
	PasswordHash pulumi.StringOutput `pulumi:"passwordHash"`
	// The ID of the project.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The Service Endpoint name.
	ServiceEndpointName pulumi.StringOutput `pulumi:"serviceEndpointName"`
	// Bitbucket account username.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewBitBucket registers a new resource with the given unique name, arguments, and options.
func NewBitBucket(ctx *pulumi.Context,
	name string, args *BitBucketArgs, opts ...pulumi.ResourceOption) (*BitBucket, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.ServiceEndpointName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceEndpointName'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	var resource BitBucket
	err := ctx.RegisterResource("azuredevops:ServiceEndpoint/bitBucket:BitBucket", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBitBucket gets an existing BitBucket resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBitBucket(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BitBucketState, opts ...pulumi.ResourceOption) (*BitBucket, error) {
	var resource BitBucket
	err := ctx.ReadResource("azuredevops:ServiceEndpoint/bitBucket:BitBucket", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BitBucket resources.
type bitBucketState struct {
	Authorization map[string]string `pulumi:"authorization"`
	Description   *string           `pulumi:"description"`
	// Bitbucket account password.
	Password *string `pulumi:"password"`
	// A bcrypted hash of the attribute 'password'
	PasswordHash *string `pulumi:"passwordHash"`
	// The ID of the project.
	ProjectId *string `pulumi:"projectId"`
	// The Service Endpoint name.
	ServiceEndpointName *string `pulumi:"serviceEndpointName"`
	// Bitbucket account username.
	Username *string `pulumi:"username"`
}

type BitBucketState struct {
	Authorization pulumi.StringMapInput
	Description   pulumi.StringPtrInput
	// Bitbucket account password.
	Password pulumi.StringPtrInput
	// A bcrypted hash of the attribute 'password'
	PasswordHash pulumi.StringPtrInput
	// The ID of the project.
	ProjectId pulumi.StringPtrInput
	// The Service Endpoint name.
	ServiceEndpointName pulumi.StringPtrInput
	// Bitbucket account username.
	Username pulumi.StringPtrInput
}

func (BitBucketState) ElementType() reflect.Type {
	return reflect.TypeOf((*bitBucketState)(nil)).Elem()
}

type bitBucketArgs struct {
	Authorization map[string]string `pulumi:"authorization"`
	Description   *string           `pulumi:"description"`
	// Bitbucket account password.
	Password string `pulumi:"password"`
	// The ID of the project.
	ProjectId string `pulumi:"projectId"`
	// The Service Endpoint name.
	ServiceEndpointName string `pulumi:"serviceEndpointName"`
	// Bitbucket account username.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a BitBucket resource.
type BitBucketArgs struct {
	Authorization pulumi.StringMapInput
	Description   pulumi.StringPtrInput
	// Bitbucket account password.
	Password pulumi.StringInput
	// The ID of the project.
	ProjectId pulumi.StringInput
	// The Service Endpoint name.
	ServiceEndpointName pulumi.StringInput
	// Bitbucket account username.
	Username pulumi.StringInput
}

func (BitBucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bitBucketArgs)(nil)).Elem()
}

type BitBucketInput interface {
	pulumi.Input

	ToBitBucketOutput() BitBucketOutput
	ToBitBucketOutputWithContext(ctx context.Context) BitBucketOutput
}

func (*BitBucket) ElementType() reflect.Type {
	return reflect.TypeOf((**BitBucket)(nil)).Elem()
}

func (i *BitBucket) ToBitBucketOutput() BitBucketOutput {
	return i.ToBitBucketOutputWithContext(context.Background())
}

func (i *BitBucket) ToBitBucketOutputWithContext(ctx context.Context) BitBucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BitBucketOutput)
}

// BitBucketArrayInput is an input type that accepts BitBucketArray and BitBucketArrayOutput values.
// You can construct a concrete instance of `BitBucketArrayInput` via:
//
//	BitBucketArray{ BitBucketArgs{...} }
type BitBucketArrayInput interface {
	pulumi.Input

	ToBitBucketArrayOutput() BitBucketArrayOutput
	ToBitBucketArrayOutputWithContext(context.Context) BitBucketArrayOutput
}

type BitBucketArray []BitBucketInput

func (BitBucketArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BitBucket)(nil)).Elem()
}

func (i BitBucketArray) ToBitBucketArrayOutput() BitBucketArrayOutput {
	return i.ToBitBucketArrayOutputWithContext(context.Background())
}

func (i BitBucketArray) ToBitBucketArrayOutputWithContext(ctx context.Context) BitBucketArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BitBucketArrayOutput)
}

// BitBucketMapInput is an input type that accepts BitBucketMap and BitBucketMapOutput values.
// You can construct a concrete instance of `BitBucketMapInput` via:
//
//	BitBucketMap{ "key": BitBucketArgs{...} }
type BitBucketMapInput interface {
	pulumi.Input

	ToBitBucketMapOutput() BitBucketMapOutput
	ToBitBucketMapOutputWithContext(context.Context) BitBucketMapOutput
}

type BitBucketMap map[string]BitBucketInput

func (BitBucketMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BitBucket)(nil)).Elem()
}

func (i BitBucketMap) ToBitBucketMapOutput() BitBucketMapOutput {
	return i.ToBitBucketMapOutputWithContext(context.Background())
}

func (i BitBucketMap) ToBitBucketMapOutputWithContext(ctx context.Context) BitBucketMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BitBucketMapOutput)
}

type BitBucketOutput struct{ *pulumi.OutputState }

func (BitBucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BitBucket)(nil)).Elem()
}

func (o BitBucketOutput) ToBitBucketOutput() BitBucketOutput {
	return o
}

func (o BitBucketOutput) ToBitBucketOutputWithContext(ctx context.Context) BitBucketOutput {
	return o
}

func (o BitBucketOutput) Authorization() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BitBucket) pulumi.StringMapOutput { return v.Authorization }).(pulumi.StringMapOutput)
}

func (o BitBucketOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BitBucket) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Bitbucket account password.
func (o BitBucketOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *BitBucket) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// A bcrypted hash of the attribute 'password'
func (o BitBucketOutput) PasswordHash() pulumi.StringOutput {
	return o.ApplyT(func(v *BitBucket) pulumi.StringOutput { return v.PasswordHash }).(pulumi.StringOutput)
}

// The ID of the project.
func (o BitBucketOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *BitBucket) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The Service Endpoint name.
func (o BitBucketOutput) ServiceEndpointName() pulumi.StringOutput {
	return o.ApplyT(func(v *BitBucket) pulumi.StringOutput { return v.ServiceEndpointName }).(pulumi.StringOutput)
}

// Bitbucket account username.
func (o BitBucketOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *BitBucket) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type BitBucketArrayOutput struct{ *pulumi.OutputState }

func (BitBucketArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BitBucket)(nil)).Elem()
}

func (o BitBucketArrayOutput) ToBitBucketArrayOutput() BitBucketArrayOutput {
	return o
}

func (o BitBucketArrayOutput) ToBitBucketArrayOutputWithContext(ctx context.Context) BitBucketArrayOutput {
	return o
}

func (o BitBucketArrayOutput) Index(i pulumi.IntInput) BitBucketOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BitBucket {
		return vs[0].([]*BitBucket)[vs[1].(int)]
	}).(BitBucketOutput)
}

type BitBucketMapOutput struct{ *pulumi.OutputState }

func (BitBucketMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BitBucket)(nil)).Elem()
}

func (o BitBucketMapOutput) ToBitBucketMapOutput() BitBucketMapOutput {
	return o
}

func (o BitBucketMapOutput) ToBitBucketMapOutputWithContext(ctx context.Context) BitBucketMapOutput {
	return o
}

func (o BitBucketMapOutput) MapIndex(k pulumi.StringInput) BitBucketOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BitBucket {
		return vs[0].(map[string]*BitBucket)[vs[1].(string)]
	}).(BitBucketOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BitBucketInput)(nil)).Elem(), &BitBucket{})
	pulumi.RegisterInputType(reflect.TypeOf((*BitBucketArrayInput)(nil)).Elem(), BitBucketArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BitBucketMapInput)(nil)).Elem(), BitBucketMap{})
	pulumi.RegisterOutputType(BitBucketOutput{})
	pulumi.RegisterOutputType(BitBucketArrayOutput{})
	pulumi.RegisterOutputType(BitBucketMapOutput{})
}
