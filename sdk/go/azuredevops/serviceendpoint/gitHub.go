// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package serviceendpoint

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a GitHub service endpoint within Azure DevOps.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleProject, err := azuredevops.NewProject(ctx, "exampleProject", &azuredevops.ProjectArgs{
//				Visibility:       pulumi.String("private"),
//				VersionControl:   pulumi.String("Git"),
//				WorkItemTemplate: pulumi.String("Agile"),
//				Description:      pulumi.String("Managed by Terraform"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = azuredevops.NewServiceEndpointGitHub(ctx, "exampleServiceEndpointGitHub", &azuredevops.ServiceEndpointGitHubArgs{
//				ProjectId:           exampleProject.ID(),
//				ServiceEndpointName: pulumi.String("Example GitHub Personal Access Token"),
//				AuthPersonal: &ServiceEndpointGitHubAuthPersonalArgs{
//					PersonalAccessToken: pulumi.String("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleProject, err := azuredevops.NewProject(ctx, "exampleProject", &azuredevops.ProjectArgs{
//				Visibility:       pulumi.String("private"),
//				VersionControl:   pulumi.String("Git"),
//				WorkItemTemplate: pulumi.String("Agile"),
//				Description:      pulumi.String("Managed by Terraform"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = azuredevops.NewServiceEndpointGitHub(ctx, "exampleServiceEndpointGitHub", &azuredevops.ServiceEndpointGitHubArgs{
//				ProjectId:           exampleProject.ID(),
//				ServiceEndpointName: pulumi.String("Example GitHub"),
//				AuthOauth: &ServiceEndpointGitHubAuthOauthArgs{
//					OauthConfigurationId: pulumi.String("00000000-0000-0000-0000-000000000000"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleProject, err := azuredevops.NewProject(ctx, "exampleProject", &azuredevops.ProjectArgs{
//				Visibility:       pulumi.String("private"),
//				VersionControl:   pulumi.String("Git"),
//				WorkItemTemplate: pulumi.String("Agile"),
//				Description:      pulumi.String("Managed by Terraform"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = azuredevops.NewServiceEndpointGitHub(ctx, "exampleServiceEndpointGitHub", &azuredevops.ServiceEndpointGitHubArgs{
//				ProjectId:           exampleProject.ID(),
//				ServiceEndpointName: pulumi.String("Example GitHub Apps: Azure Pipelines"),
//				Description:         pulumi.String("Managed by Terraform"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Relevant Links
//
// - [Azure DevOps Service REST API 6.0 - Service Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-6.0)
//
// ## Import
//
// Azure DevOps Service Endpoint GitHub can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**
//
// ```sh
//
//	$ pulumi import azuredevops:ServiceEndpoint/gitHub:GitHub example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000
//
// ```
//
// Deprecated: azuredevops.serviceendpoint.GitHub has been deprecated in favor of azuredevops.ServiceEndpointGitHub
type GitHub struct {
	pulumi.CustomResourceState

	// An `authOauth` block as documented below. Allows connecting using an Oauth token.
	AuthOauth GitHubAuthOauthPtrOutput `pulumi:"authOauth"`
	// An `authPersonal` block as documented below. Allows connecting using a personal access token.
	AuthPersonal  GitHubAuthPersonalPtrOutput `pulumi:"authPersonal"`
	Authorization pulumi.StringMapOutput      `pulumi:"authorization"`
	Description   pulumi.StringPtrOutput      `pulumi:"description"`
	// The ID of the project.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The Service Endpoint name.
	ServiceEndpointName pulumi.StringOutput `pulumi:"serviceEndpointName"`
}

// NewGitHub registers a new resource with the given unique name, arguments, and options.
func NewGitHub(ctx *pulumi.Context,
	name string, args *GitHubArgs, opts ...pulumi.ResourceOption) (*GitHub, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.ServiceEndpointName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceEndpointName'")
	}
	var resource GitHub
	err := ctx.RegisterResource("azuredevops:ServiceEndpoint/gitHub:GitHub", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGitHub gets an existing GitHub resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGitHub(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GitHubState, opts ...pulumi.ResourceOption) (*GitHub, error) {
	var resource GitHub
	err := ctx.ReadResource("azuredevops:ServiceEndpoint/gitHub:GitHub", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GitHub resources.
type gitHubState struct {
	// An `authOauth` block as documented below. Allows connecting using an Oauth token.
	AuthOauth *GitHubAuthOauth `pulumi:"authOauth"`
	// An `authPersonal` block as documented below. Allows connecting using a personal access token.
	AuthPersonal  *GitHubAuthPersonal `pulumi:"authPersonal"`
	Authorization map[string]string   `pulumi:"authorization"`
	Description   *string             `pulumi:"description"`
	// The ID of the project.
	ProjectId *string `pulumi:"projectId"`
	// The Service Endpoint name.
	ServiceEndpointName *string `pulumi:"serviceEndpointName"`
}

type GitHubState struct {
	// An `authOauth` block as documented below. Allows connecting using an Oauth token.
	AuthOauth GitHubAuthOauthPtrInput
	// An `authPersonal` block as documented below. Allows connecting using a personal access token.
	AuthPersonal  GitHubAuthPersonalPtrInput
	Authorization pulumi.StringMapInput
	Description   pulumi.StringPtrInput
	// The ID of the project.
	ProjectId pulumi.StringPtrInput
	// The Service Endpoint name.
	ServiceEndpointName pulumi.StringPtrInput
}

func (GitHubState) ElementType() reflect.Type {
	return reflect.TypeOf((*gitHubState)(nil)).Elem()
}

type gitHubArgs struct {
	// An `authOauth` block as documented below. Allows connecting using an Oauth token.
	AuthOauth *GitHubAuthOauth `pulumi:"authOauth"`
	// An `authPersonal` block as documented below. Allows connecting using a personal access token.
	AuthPersonal  *GitHubAuthPersonal `pulumi:"authPersonal"`
	Authorization map[string]string   `pulumi:"authorization"`
	Description   *string             `pulumi:"description"`
	// The ID of the project.
	ProjectId string `pulumi:"projectId"`
	// The Service Endpoint name.
	ServiceEndpointName string `pulumi:"serviceEndpointName"`
}

// The set of arguments for constructing a GitHub resource.
type GitHubArgs struct {
	// An `authOauth` block as documented below. Allows connecting using an Oauth token.
	AuthOauth GitHubAuthOauthPtrInput
	// An `authPersonal` block as documented below. Allows connecting using a personal access token.
	AuthPersonal  GitHubAuthPersonalPtrInput
	Authorization pulumi.StringMapInput
	Description   pulumi.StringPtrInput
	// The ID of the project.
	ProjectId pulumi.StringInput
	// The Service Endpoint name.
	ServiceEndpointName pulumi.StringInput
}

func (GitHubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gitHubArgs)(nil)).Elem()
}

type GitHubInput interface {
	pulumi.Input

	ToGitHubOutput() GitHubOutput
	ToGitHubOutputWithContext(ctx context.Context) GitHubOutput
}

func (*GitHub) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHub)(nil)).Elem()
}

func (i *GitHub) ToGitHubOutput() GitHubOutput {
	return i.ToGitHubOutputWithContext(context.Background())
}

func (i *GitHub) ToGitHubOutputWithContext(ctx context.Context) GitHubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubOutput)
}

// GitHubArrayInput is an input type that accepts GitHubArray and GitHubArrayOutput values.
// You can construct a concrete instance of `GitHubArrayInput` via:
//
//	GitHubArray{ GitHubArgs{...} }
type GitHubArrayInput interface {
	pulumi.Input

	ToGitHubArrayOutput() GitHubArrayOutput
	ToGitHubArrayOutputWithContext(context.Context) GitHubArrayOutput
}

type GitHubArray []GitHubInput

func (GitHubArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitHub)(nil)).Elem()
}

func (i GitHubArray) ToGitHubArrayOutput() GitHubArrayOutput {
	return i.ToGitHubArrayOutputWithContext(context.Background())
}

func (i GitHubArray) ToGitHubArrayOutputWithContext(ctx context.Context) GitHubArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubArrayOutput)
}

// GitHubMapInput is an input type that accepts GitHubMap and GitHubMapOutput values.
// You can construct a concrete instance of `GitHubMapInput` via:
//
//	GitHubMap{ "key": GitHubArgs{...} }
type GitHubMapInput interface {
	pulumi.Input

	ToGitHubMapOutput() GitHubMapOutput
	ToGitHubMapOutputWithContext(context.Context) GitHubMapOutput
}

type GitHubMap map[string]GitHubInput

func (GitHubMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitHub)(nil)).Elem()
}

func (i GitHubMap) ToGitHubMapOutput() GitHubMapOutput {
	return i.ToGitHubMapOutputWithContext(context.Background())
}

func (i GitHubMap) ToGitHubMapOutputWithContext(ctx context.Context) GitHubMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubMapOutput)
}

type GitHubOutput struct{ *pulumi.OutputState }

func (GitHubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHub)(nil)).Elem()
}

func (o GitHubOutput) ToGitHubOutput() GitHubOutput {
	return o
}

func (o GitHubOutput) ToGitHubOutputWithContext(ctx context.Context) GitHubOutput {
	return o
}

// An `authOauth` block as documented below. Allows connecting using an Oauth token.
func (o GitHubOutput) AuthOauth() GitHubAuthOauthPtrOutput {
	return o.ApplyT(func(v *GitHub) GitHubAuthOauthPtrOutput { return v.AuthOauth }).(GitHubAuthOauthPtrOutput)
}

// An `authPersonal` block as documented below. Allows connecting using a personal access token.
func (o GitHubOutput) AuthPersonal() GitHubAuthPersonalPtrOutput {
	return o.ApplyT(func(v *GitHub) GitHubAuthPersonalPtrOutput { return v.AuthPersonal }).(GitHubAuthPersonalPtrOutput)
}

func (o GitHubOutput) Authorization() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GitHub) pulumi.StringMapOutput { return v.Authorization }).(pulumi.StringMapOutput)
}

func (o GitHubOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHub) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The ID of the project.
func (o GitHubOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitHub) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The Service Endpoint name.
func (o GitHubOutput) ServiceEndpointName() pulumi.StringOutput {
	return o.ApplyT(func(v *GitHub) pulumi.StringOutput { return v.ServiceEndpointName }).(pulumi.StringOutput)
}

type GitHubArrayOutput struct{ *pulumi.OutputState }

func (GitHubArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitHub)(nil)).Elem()
}

func (o GitHubArrayOutput) ToGitHubArrayOutput() GitHubArrayOutput {
	return o
}

func (o GitHubArrayOutput) ToGitHubArrayOutputWithContext(ctx context.Context) GitHubArrayOutput {
	return o
}

func (o GitHubArrayOutput) Index(i pulumi.IntInput) GitHubOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GitHub {
		return vs[0].([]*GitHub)[vs[1].(int)]
	}).(GitHubOutput)
}

type GitHubMapOutput struct{ *pulumi.OutputState }

func (GitHubMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitHub)(nil)).Elem()
}

func (o GitHubMapOutput) ToGitHubMapOutput() GitHubMapOutput {
	return o
}

func (o GitHubMapOutput) ToGitHubMapOutputWithContext(ctx context.Context) GitHubMapOutput {
	return o
}

func (o GitHubMapOutput) MapIndex(k pulumi.StringInput) GitHubOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GitHub {
		return vs[0].(map[string]*GitHub)[vs[1].(string)]
	}).(GitHubOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GitHubInput)(nil)).Elem(), &GitHub{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitHubArrayInput)(nil)).Elem(), GitHubArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitHubMapInput)(nil)).Elem(), GitHubMap{})
	pulumi.RegisterOutputType(GitHubOutput{})
	pulumi.RegisterOutputType(GitHubArrayOutput{})
	pulumi.RegisterOutputType(GitHubMapOutput{})
}
