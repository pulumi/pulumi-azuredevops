// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azuredevops

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages permissions for Work Item Queries.
//
// > **Note** Permissions can be assigned to group principals and not to single user principals.
//
// ## Permission levels
//
// Permission for Work Item Queries within Azure DevOps can be applied on two different levels.
// Those levels are reflected by specifying (or omitting) values for the arguments `projectId` and `path`.
//
// ### Project level
//
// Permissions for all Work Item Queries inside a project (existing or newly created ones) are specified, if only the argument `projectId` has a value.
//
// #### Example usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := azuredevops.NewProject(ctx, "example", &azuredevops.ProjectArgs{
//				Name:             pulumi.String("Example Project"),
//				WorkItemTemplate: pulumi.String("Agile"),
//				VersionControl:   pulumi.String("Git"),
//				Visibility:       pulumi.String("private"),
//				Description:      pulumi.String("Managed by Terraform"),
//			})
//			if err != nil {
//				return err
//			}
//			example_readers := azuredevops.LookupGroupOutput(ctx, azuredevops.GetGroupOutputArgs{
//				ProjectId: example.ID(),
//				Name:      pulumi.String("Readers"),
//			}, nil)
//			_, err = azuredevops.NewWorkItemQueryPermissions(ctx, "project-wiq-root-permissions", &azuredevops.WorkItemQueryPermissionsArgs{
//				ProjectId: example.ID(),
//				Principal: pulumi.String(example_readers.ApplyT(func(example_readers azuredevops.GetGroupResult) (*string, error) {
//					return &example_readers.Id, nil
//				}).(pulumi.StringPtrOutput)),
//				Permissions: pulumi.StringMap{
//					"CreateRepository": pulumi.String("Deny"),
//					"DeleteRepository": pulumi.String("Deny"),
//					"RenameRepository": pulumi.String("NotSet"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Shared Queries folder level
//
// Permissions for a specific folder inside Shared Queries are specified if the arguments `projectId` and `path` are set.
//
// > **Note** To set permissions for the Shared Queries folder itself use `/` as path value
//
// #### Example usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := azuredevops.NewProject(ctx, "example", &azuredevops.ProjectArgs{
//				Name:             pulumi.String("Example Project"),
//				WorkItemTemplate: pulumi.String("Agile"),
//				VersionControl:   pulumi.String("Git"),
//				Visibility:       pulumi.String("private"),
//				Description:      pulumi.String("Managed by Terraform"),
//			})
//			if err != nil {
//				return err
//			}
//			example_readers := azuredevops.LookupGroupOutput(ctx, azuredevops.GetGroupOutputArgs{
//				ProjectId: example.ID(),
//				Name:      pulumi.String("Readers"),
//			}, nil)
//			_, err = azuredevops.NewWorkItemQueryPermissions(ctx, "example-permissions", &azuredevops.WorkItemQueryPermissionsArgs{
//				ProjectId: example.ID(),
//				Path:      pulumi.String("/Team"),
//				Principal: pulumi.String(example_readers.ApplyT(func(example_readers azuredevops.GetGroupResult) (*string, error) {
//					return &example_readers.Id, nil
//				}).(pulumi.StringPtrOutput)),
//				Permissions: pulumi.StringMap{
//					"Contribute": pulumi.String("Allow"),
//					"Delete":     pulumi.String("Deny"),
//					"Read":       pulumi.String("NotSet"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := azuredevops.NewProject(ctx, "example", &azuredevops.ProjectArgs{
//				Name:             pulumi.String("Example Project"),
//				WorkItemTemplate: pulumi.String("Agile"),
//				VersionControl:   pulumi.String("Git"),
//				Visibility:       pulumi.String("private"),
//				Description:      pulumi.String("Managed by Terraform"),
//			})
//			if err != nil {
//				return err
//			}
//			example_readers := azuredevops.LookupGroupOutput(ctx, azuredevops.GetGroupOutputArgs{
//				ProjectId: example.ID(),
//				Name:      pulumi.String("Readers"),
//			}, nil)
//			example_contributors := azuredevops.LookupGroupOutput(ctx, azuredevops.GetGroupOutputArgs{
//				ProjectId: example.ID(),
//				Name:      pulumi.String("Contributors"),
//			}, nil)
//			_, err = azuredevops.NewWorkItemQueryPermissions(ctx, "example-project-permissions", &azuredevops.WorkItemQueryPermissionsArgs{
//				ProjectId: example.ID(),
//				Principal: pulumi.String(example_readers.ApplyT(func(example_readers azuredevops.GetGroupResult) (*string, error) {
//					return &example_readers.Id, nil
//				}).(pulumi.StringPtrOutput)),
//				Permissions: pulumi.StringMap{
//					"Read":              pulumi.String("Allow"),
//					"Delete":            pulumi.String("Deny"),
//					"Contribute":        pulumi.String("Deny"),
//					"ManagePermissions": pulumi.String("Deny"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = azuredevops.NewWorkItemQueryPermissions(ctx, "example-sharedqueries-permissions", &azuredevops.WorkItemQueryPermissionsArgs{
//				ProjectId: example.ID(),
//				Path:      pulumi.String("/"),
//				Principal: pulumi.String(example_contributors.ApplyT(func(example_contributors azuredevops.GetGroupResult) (*string, error) {
//					return &example_contributors.Id, nil
//				}).(pulumi.StringPtrOutput)),
//				Permissions: pulumi.StringMap{
//					"Read":   pulumi.String("Allow"),
//					"Delete": pulumi.String("Deny"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type WorkItemQueryPermissions struct {
	pulumi.CustomResourceState

	// Path to a query or folder beneath `Shared Queries`
	Path pulumi.StringPtrOutput `pulumi:"path"`
	// the permissions to assign. The following permissions are available
	//
	// |    Permissions    | Description |
	// |-------------------|-------------|
	// | Read              | Read        |
	// | Contribute        | Contribute  |
	// | Delete            | Delete      |
	// | ManagePermissions | Manage      |
	Permissions pulumi.StringMapOutput `pulumi:"permissions"`
	// The **group** principal to assign the permissions.
	Principal pulumi.StringOutput `pulumi:"principal"`
	// The ID of the project to assign the permissions.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Replace (`true`) or merge (`false`) the permissions. Default: `true`
	Replace pulumi.BoolPtrOutput `pulumi:"replace"`
}

// NewWorkItemQueryPermissions registers a new resource with the given unique name, arguments, and options.
func NewWorkItemQueryPermissions(ctx *pulumi.Context,
	name string, args *WorkItemQueryPermissionsArgs, opts ...pulumi.ResourceOption) (*WorkItemQueryPermissions, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Permissions == nil {
		return nil, errors.New("invalid value for required argument 'Permissions'")
	}
	if args.Principal == nil {
		return nil, errors.New("invalid value for required argument 'Principal'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkItemQueryPermissions
	err := ctx.RegisterResource("azuredevops:index/workItemQueryPermissions:WorkItemQueryPermissions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkItemQueryPermissions gets an existing WorkItemQueryPermissions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkItemQueryPermissions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkItemQueryPermissionsState, opts ...pulumi.ResourceOption) (*WorkItemQueryPermissions, error) {
	var resource WorkItemQueryPermissions
	err := ctx.ReadResource("azuredevops:index/workItemQueryPermissions:WorkItemQueryPermissions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkItemQueryPermissions resources.
type workItemQueryPermissionsState struct {
	// Path to a query or folder beneath `Shared Queries`
	Path *string `pulumi:"path"`
	// the permissions to assign. The following permissions are available
	//
	// |    Permissions    | Description |
	// |-------------------|-------------|
	// | Read              | Read        |
	// | Contribute        | Contribute  |
	// | Delete            | Delete      |
	// | ManagePermissions | Manage      |
	Permissions map[string]string `pulumi:"permissions"`
	// The **group** principal to assign the permissions.
	Principal *string `pulumi:"principal"`
	// The ID of the project to assign the permissions.
	ProjectId *string `pulumi:"projectId"`
	// Replace (`true`) or merge (`false`) the permissions. Default: `true`
	Replace *bool `pulumi:"replace"`
}

type WorkItemQueryPermissionsState struct {
	// Path to a query or folder beneath `Shared Queries`
	Path pulumi.StringPtrInput
	// the permissions to assign. The following permissions are available
	//
	// |    Permissions    | Description |
	// |-------------------|-------------|
	// | Read              | Read        |
	// | Contribute        | Contribute  |
	// | Delete            | Delete      |
	// | ManagePermissions | Manage      |
	Permissions pulumi.StringMapInput
	// The **group** principal to assign the permissions.
	Principal pulumi.StringPtrInput
	// The ID of the project to assign the permissions.
	ProjectId pulumi.StringPtrInput
	// Replace (`true`) or merge (`false`) the permissions. Default: `true`
	Replace pulumi.BoolPtrInput
}

func (WorkItemQueryPermissionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*workItemQueryPermissionsState)(nil)).Elem()
}

type workItemQueryPermissionsArgs struct {
	// Path to a query or folder beneath `Shared Queries`
	Path *string `pulumi:"path"`
	// the permissions to assign. The following permissions are available
	//
	// |    Permissions    | Description |
	// |-------------------|-------------|
	// | Read              | Read        |
	// | Contribute        | Contribute  |
	// | Delete            | Delete      |
	// | ManagePermissions | Manage      |
	Permissions map[string]string `pulumi:"permissions"`
	// The **group** principal to assign the permissions.
	Principal string `pulumi:"principal"`
	// The ID of the project to assign the permissions.
	ProjectId string `pulumi:"projectId"`
	// Replace (`true`) or merge (`false`) the permissions. Default: `true`
	Replace *bool `pulumi:"replace"`
}

// The set of arguments for constructing a WorkItemQueryPermissions resource.
type WorkItemQueryPermissionsArgs struct {
	// Path to a query or folder beneath `Shared Queries`
	Path pulumi.StringPtrInput
	// the permissions to assign. The following permissions are available
	//
	// |    Permissions    | Description |
	// |-------------------|-------------|
	// | Read              | Read        |
	// | Contribute        | Contribute  |
	// | Delete            | Delete      |
	// | ManagePermissions | Manage      |
	Permissions pulumi.StringMapInput
	// The **group** principal to assign the permissions.
	Principal pulumi.StringInput
	// The ID of the project to assign the permissions.
	ProjectId pulumi.StringInput
	// Replace (`true`) or merge (`false`) the permissions. Default: `true`
	Replace pulumi.BoolPtrInput
}

func (WorkItemQueryPermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workItemQueryPermissionsArgs)(nil)).Elem()
}

type WorkItemQueryPermissionsInput interface {
	pulumi.Input

	ToWorkItemQueryPermissionsOutput() WorkItemQueryPermissionsOutput
	ToWorkItemQueryPermissionsOutputWithContext(ctx context.Context) WorkItemQueryPermissionsOutput
}

func (*WorkItemQueryPermissions) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkItemQueryPermissions)(nil)).Elem()
}

func (i *WorkItemQueryPermissions) ToWorkItemQueryPermissionsOutput() WorkItemQueryPermissionsOutput {
	return i.ToWorkItemQueryPermissionsOutputWithContext(context.Background())
}

func (i *WorkItemQueryPermissions) ToWorkItemQueryPermissionsOutputWithContext(ctx context.Context) WorkItemQueryPermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkItemQueryPermissionsOutput)
}

// WorkItemQueryPermissionsArrayInput is an input type that accepts WorkItemQueryPermissionsArray and WorkItemQueryPermissionsArrayOutput values.
// You can construct a concrete instance of `WorkItemQueryPermissionsArrayInput` via:
//
//	WorkItemQueryPermissionsArray{ WorkItemQueryPermissionsArgs{...} }
type WorkItemQueryPermissionsArrayInput interface {
	pulumi.Input

	ToWorkItemQueryPermissionsArrayOutput() WorkItemQueryPermissionsArrayOutput
	ToWorkItemQueryPermissionsArrayOutputWithContext(context.Context) WorkItemQueryPermissionsArrayOutput
}

type WorkItemQueryPermissionsArray []WorkItemQueryPermissionsInput

func (WorkItemQueryPermissionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkItemQueryPermissions)(nil)).Elem()
}

func (i WorkItemQueryPermissionsArray) ToWorkItemQueryPermissionsArrayOutput() WorkItemQueryPermissionsArrayOutput {
	return i.ToWorkItemQueryPermissionsArrayOutputWithContext(context.Background())
}

func (i WorkItemQueryPermissionsArray) ToWorkItemQueryPermissionsArrayOutputWithContext(ctx context.Context) WorkItemQueryPermissionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkItemQueryPermissionsArrayOutput)
}

// WorkItemQueryPermissionsMapInput is an input type that accepts WorkItemQueryPermissionsMap and WorkItemQueryPermissionsMapOutput values.
// You can construct a concrete instance of `WorkItemQueryPermissionsMapInput` via:
//
//	WorkItemQueryPermissionsMap{ "key": WorkItemQueryPermissionsArgs{...} }
type WorkItemQueryPermissionsMapInput interface {
	pulumi.Input

	ToWorkItemQueryPermissionsMapOutput() WorkItemQueryPermissionsMapOutput
	ToWorkItemQueryPermissionsMapOutputWithContext(context.Context) WorkItemQueryPermissionsMapOutput
}

type WorkItemQueryPermissionsMap map[string]WorkItemQueryPermissionsInput

func (WorkItemQueryPermissionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkItemQueryPermissions)(nil)).Elem()
}

func (i WorkItemQueryPermissionsMap) ToWorkItemQueryPermissionsMapOutput() WorkItemQueryPermissionsMapOutput {
	return i.ToWorkItemQueryPermissionsMapOutputWithContext(context.Background())
}

func (i WorkItemQueryPermissionsMap) ToWorkItemQueryPermissionsMapOutputWithContext(ctx context.Context) WorkItemQueryPermissionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkItemQueryPermissionsMapOutput)
}

type WorkItemQueryPermissionsOutput struct{ *pulumi.OutputState }

func (WorkItemQueryPermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkItemQueryPermissions)(nil)).Elem()
}

func (o WorkItemQueryPermissionsOutput) ToWorkItemQueryPermissionsOutput() WorkItemQueryPermissionsOutput {
	return o
}

func (o WorkItemQueryPermissionsOutput) ToWorkItemQueryPermissionsOutputWithContext(ctx context.Context) WorkItemQueryPermissionsOutput {
	return o
}

// Path to a query or folder beneath `Shared Queries`
func (o WorkItemQueryPermissionsOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkItemQueryPermissions) pulumi.StringPtrOutput { return v.Path }).(pulumi.StringPtrOutput)
}

// the permissions to assign. The following permissions are available
//
// |    Permissions    | Description |
// |-------------------|-------------|
// | Read              | Read        |
// | Contribute        | Contribute  |
// | Delete            | Delete      |
// | ManagePermissions | Manage      |
func (o WorkItemQueryPermissionsOutput) Permissions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WorkItemQueryPermissions) pulumi.StringMapOutput { return v.Permissions }).(pulumi.StringMapOutput)
}

// The **group** principal to assign the permissions.
func (o WorkItemQueryPermissionsOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkItemQueryPermissions) pulumi.StringOutput { return v.Principal }).(pulumi.StringOutput)
}

// The ID of the project to assign the permissions.
func (o WorkItemQueryPermissionsOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkItemQueryPermissions) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Replace (`true`) or merge (`false`) the permissions. Default: `true`
func (o WorkItemQueryPermissionsOutput) Replace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkItemQueryPermissions) pulumi.BoolPtrOutput { return v.Replace }).(pulumi.BoolPtrOutput)
}

type WorkItemQueryPermissionsArrayOutput struct{ *pulumi.OutputState }

func (WorkItemQueryPermissionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkItemQueryPermissions)(nil)).Elem()
}

func (o WorkItemQueryPermissionsArrayOutput) ToWorkItemQueryPermissionsArrayOutput() WorkItemQueryPermissionsArrayOutput {
	return o
}

func (o WorkItemQueryPermissionsArrayOutput) ToWorkItemQueryPermissionsArrayOutputWithContext(ctx context.Context) WorkItemQueryPermissionsArrayOutput {
	return o
}

func (o WorkItemQueryPermissionsArrayOutput) Index(i pulumi.IntInput) WorkItemQueryPermissionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkItemQueryPermissions {
		return vs[0].([]*WorkItemQueryPermissions)[vs[1].(int)]
	}).(WorkItemQueryPermissionsOutput)
}

type WorkItemQueryPermissionsMapOutput struct{ *pulumi.OutputState }

func (WorkItemQueryPermissionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkItemQueryPermissions)(nil)).Elem()
}

func (o WorkItemQueryPermissionsMapOutput) ToWorkItemQueryPermissionsMapOutput() WorkItemQueryPermissionsMapOutput {
	return o
}

func (o WorkItemQueryPermissionsMapOutput) ToWorkItemQueryPermissionsMapOutputWithContext(ctx context.Context) WorkItemQueryPermissionsMapOutput {
	return o
}

func (o WorkItemQueryPermissionsMapOutput) MapIndex(k pulumi.StringInput) WorkItemQueryPermissionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkItemQueryPermissions {
		return vs[0].(map[string]*WorkItemQueryPermissions)[vs[1].(string)]
	}).(WorkItemQueryPermissionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkItemQueryPermissionsInput)(nil)).Elem(), &WorkItemQueryPermissions{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkItemQueryPermissionsArrayInput)(nil)).Elem(), WorkItemQueryPermissionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkItemQueryPermissionsMapInput)(nil)).Elem(), WorkItemQueryPermissionsMap{})
	pulumi.RegisterOutputType(WorkItemQueryPermissionsOutput{})
	pulumi.RegisterOutputType(WorkItemQueryPermissionsArrayOutput{})
	pulumi.RegisterOutputType(WorkItemQueryPermissionsMapOutput{})
}
