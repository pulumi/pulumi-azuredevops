// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package azuredevops

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages permissions for an Area (Component)
//
// > **Note** Permissions can be assigned to group principals and not to single user principals.
//
// ## Permission levels
//
// Permission for Areas within Azure DevOps can be applied on two different levels.
// Those levels are reflected by specifying (or omitting) values for the arguments `projectId` and `path`.
//
// ## Relevant Links
//
// * [Azure DevOps Service REST API 5.1 - Security](https://docs.microsoft.com/en-us/rest/api/azure/devops/security/?view=azure-devops-rest-5.1)
//
// ## PAT Permissions Required
//
// - **Project & Team**: vso.security_manage - Grants the ability to read, write, and manage security permissions.
//
// ## Import
//
// The resource does not support import.
type AreaPermissions struct {
	pulumi.CustomResourceState

	// The name of the branch to assign the permissions.
	Path pulumi.StringPtrOutput `pulumi:"path"`
	// the permissions to assign. The following permissions are available.
	Permissions pulumi.StringMapOutput `pulumi:"permissions"`
	// The **group** principal to assign the permissions.
	Principal pulumi.StringOutput `pulumi:"principal"`
	// The ID of the project to assign the permissions.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Replace (`true`) or merge (`false`) the permissions. Default: `true`.
	Replace pulumi.BoolPtrOutput `pulumi:"replace"`
}

// NewAreaPermissions registers a new resource with the given unique name, arguments, and options.
func NewAreaPermissions(ctx *pulumi.Context,
	name string, args *AreaPermissionsArgs, opts ...pulumi.ResourceOption) (*AreaPermissions, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Permissions == nil {
		return nil, errors.New("invalid value for required argument 'Permissions'")
	}
	if args.Principal == nil {
		return nil, errors.New("invalid value for required argument 'Principal'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	var resource AreaPermissions
	err := ctx.RegisterResource("azuredevops:index/areaPermissions:AreaPermissions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAreaPermissions gets an existing AreaPermissions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAreaPermissions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AreaPermissionsState, opts ...pulumi.ResourceOption) (*AreaPermissions, error) {
	var resource AreaPermissions
	err := ctx.ReadResource("azuredevops:index/areaPermissions:AreaPermissions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AreaPermissions resources.
type areaPermissionsState struct {
	// The name of the branch to assign the permissions.
	Path *string `pulumi:"path"`
	// the permissions to assign. The following permissions are available.
	Permissions map[string]string `pulumi:"permissions"`
	// The **group** principal to assign the permissions.
	Principal *string `pulumi:"principal"`
	// The ID of the project to assign the permissions.
	ProjectId *string `pulumi:"projectId"`
	// Replace (`true`) or merge (`false`) the permissions. Default: `true`.
	Replace *bool `pulumi:"replace"`
}

type AreaPermissionsState struct {
	// The name of the branch to assign the permissions.
	Path pulumi.StringPtrInput
	// the permissions to assign. The following permissions are available.
	Permissions pulumi.StringMapInput
	// The **group** principal to assign the permissions.
	Principal pulumi.StringPtrInput
	// The ID of the project to assign the permissions.
	ProjectId pulumi.StringPtrInput
	// Replace (`true`) or merge (`false`) the permissions. Default: `true`.
	Replace pulumi.BoolPtrInput
}

func (AreaPermissionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*areaPermissionsState)(nil)).Elem()
}

type areaPermissionsArgs struct {
	// The name of the branch to assign the permissions.
	Path *string `pulumi:"path"`
	// the permissions to assign. The following permissions are available.
	Permissions map[string]string `pulumi:"permissions"`
	// The **group** principal to assign the permissions.
	Principal string `pulumi:"principal"`
	// The ID of the project to assign the permissions.
	ProjectId string `pulumi:"projectId"`
	// Replace (`true`) or merge (`false`) the permissions. Default: `true`.
	Replace *bool `pulumi:"replace"`
}

// The set of arguments for constructing a AreaPermissions resource.
type AreaPermissionsArgs struct {
	// The name of the branch to assign the permissions.
	Path pulumi.StringPtrInput
	// the permissions to assign. The following permissions are available.
	Permissions pulumi.StringMapInput
	// The **group** principal to assign the permissions.
	Principal pulumi.StringInput
	// The ID of the project to assign the permissions.
	ProjectId pulumi.StringInput
	// Replace (`true`) or merge (`false`) the permissions. Default: `true`.
	Replace pulumi.BoolPtrInput
}

func (AreaPermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*areaPermissionsArgs)(nil)).Elem()
}

type AreaPermissionsInput interface {
	pulumi.Input

	ToAreaPermissionsOutput() AreaPermissionsOutput
	ToAreaPermissionsOutputWithContext(ctx context.Context) AreaPermissionsOutput
}

func (AreaPermissions) ElementType() reflect.Type {
	return reflect.TypeOf((*AreaPermissions)(nil)).Elem()
}

func (i AreaPermissions) ToAreaPermissionsOutput() AreaPermissionsOutput {
	return i.ToAreaPermissionsOutputWithContext(context.Background())
}

func (i AreaPermissions) ToAreaPermissionsOutputWithContext(ctx context.Context) AreaPermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AreaPermissionsOutput)
}

type AreaPermissionsOutput struct {
	*pulumi.OutputState
}

func (AreaPermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AreaPermissionsOutput)(nil)).Elem()
}

func (o AreaPermissionsOutput) ToAreaPermissionsOutput() AreaPermissionsOutput {
	return o
}

func (o AreaPermissionsOutput) ToAreaPermissionsOutputWithContext(ctx context.Context) AreaPermissionsOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(AreaPermissionsOutput{})
}
