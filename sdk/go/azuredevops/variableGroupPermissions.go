// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azuredevops

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages permissions for a Variable Group
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuredevops/sdk/v3/go/azuredevops"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			project, err := azuredevops.NewProject(ctx, "project", &azuredevops.ProjectArgs{
//				Name:             pulumi.String("Testing"),
//				Description:      pulumi.String("Testing-description"),
//				Visibility:       pulumi.String("private"),
//				VersionControl:   pulumi.String("Git"),
//				WorkItemTemplate: pulumi.String("Agile"),
//			})
//			if err != nil {
//				return err
//			}
//			example, err := azuredevops.NewVariableGroup(ctx, "example", &azuredevops.VariableGroupArgs{
//				ProjectId:   project.ID(),
//				Name:        pulumi.String("test"),
//				Description: pulumi.String("Test Description"),
//				AllowAccess: pulumi.Bool(true),
//				Variables: azuredevops.VariableGroupVariableArray{
//					&azuredevops.VariableGroupVariableArgs{
//						Name:  pulumi.String("key1"),
//						Value: pulumi.String("val1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			tf_project_readers := azuredevops.LookupGroupOutput(ctx, azuredevops.GetGroupOutputArgs{
//				ProjectId: project.ID(),
//				Name:      pulumi.String("Readers"),
//			}, nil)
//			_, err = azuredevops.NewVariableGroupPermissions(ctx, "permissions", &azuredevops.VariableGroupPermissionsArgs{
//				ProjectId:       project.ID(),
//				VariableGroupId: example.ID(),
//				Principal: pulumi.String(tf_project_readers.ApplyT(func(tf_project_readers azuredevops.GetGroupResult) (*string, error) {
//					return &tf_project_readers.Id, nil
//				}).(pulumi.StringPtrOutput)),
//				Permissions: pulumi.StringMap{
//					"View":       pulumi.String("allow"),
//					"Administer": pulumi.String("allow"),
//					"Use":        pulumi.String("allow"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Roles
//
// The Azure DevOps UI uses roles to assign permissions for variable groups.
// <table>
// <thead>
// <tr>
// <th>Role</th>
// <th>Allow Permissions</th>
// </tr>
// </thead>
// <tbody>
// <tr>
// <td>Reader</td>
// <td>View</td>
// </tr>
// <tr>
// <td>User</td>
// <td>View, Use</td>
// </tr>
// <tr>
// <td>Administrator</td>
// <td>View, Use, Administer</td>
// </tr>
// </tbody>
// </table>
//
// ## Relevant Links
//
// * [Azure DevOps Service REST API 6.0 - Security](https://docs.microsoft.com/en-us/rest/api/azure/devops/security/?view=azure-devops-rest-6.0)
//
// ## PAT Permissions Required
//
// - **Project & Team**: vso.security_manage - Grants the ability to read, write, and manage security permissions.
//
// ## Import
//
// The resource does not support import.
type VariableGroupPermissions struct {
	pulumi.CustomResourceState

	// the permissions to assign. The following permissions are available.
	Permissions pulumi.StringMapOutput `pulumi:"permissions"`
	// The **group** principal to assign the permissions.
	Principal pulumi.StringOutput `pulumi:"principal"`
	// The ID of the project.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Replace (`true`) or merge (`false`) the permissions. Default: `true`
	// <table>
	// <thead>
	// <tr>
	// <th>Permission</th>
	// <th>Description</th>
	// </tr>
	// </thead>
	// <tbody>
	// <tr>
	// <td>View</td>
	// <td>View library item</td>
	// </tr>
	// <tr>
	// <td>Administer</td>
	// <td>Administer library item</td>
	// </tr>
	// <tr>
	// <td>Create</td>
	// <td>Create library item</td>
	// </tr>
	// <tr>
	// <td>ViewSecrets</td>
	// <td>View library item secrets</td>
	// </tr>
	// <tr>
	// <td>Use</td>
	// <td>Use library item</td>
	// </tr>
	// <tr>
	// <td>Owner</td>
	// <td>Owner library item</td>
	// </tr>
	// </tbody>
	// </table>
	Replace pulumi.BoolPtrOutput `pulumi:"replace"`
	// The id of the variable group to assign the permissions.
	VariableGroupId pulumi.StringOutput `pulumi:"variableGroupId"`
}

// NewVariableGroupPermissions registers a new resource with the given unique name, arguments, and options.
func NewVariableGroupPermissions(ctx *pulumi.Context,
	name string, args *VariableGroupPermissionsArgs, opts ...pulumi.ResourceOption) (*VariableGroupPermissions, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Permissions == nil {
		return nil, errors.New("invalid value for required argument 'Permissions'")
	}
	if args.Principal == nil {
		return nil, errors.New("invalid value for required argument 'Principal'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.VariableGroupId == nil {
		return nil, errors.New("invalid value for required argument 'VariableGroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VariableGroupPermissions
	err := ctx.RegisterResource("azuredevops:index/variableGroupPermissions:VariableGroupPermissions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVariableGroupPermissions gets an existing VariableGroupPermissions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVariableGroupPermissions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VariableGroupPermissionsState, opts ...pulumi.ResourceOption) (*VariableGroupPermissions, error) {
	var resource VariableGroupPermissions
	err := ctx.ReadResource("azuredevops:index/variableGroupPermissions:VariableGroupPermissions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VariableGroupPermissions resources.
type variableGroupPermissionsState struct {
	// the permissions to assign. The following permissions are available.
	Permissions map[string]string `pulumi:"permissions"`
	// The **group** principal to assign the permissions.
	Principal *string `pulumi:"principal"`
	// The ID of the project.
	ProjectId *string `pulumi:"projectId"`
	// Replace (`true`) or merge (`false`) the permissions. Default: `true`
	// <table>
	// <thead>
	// <tr>
	// <th>Permission</th>
	// <th>Description</th>
	// </tr>
	// </thead>
	// <tbody>
	// <tr>
	// <td>View</td>
	// <td>View library item</td>
	// </tr>
	// <tr>
	// <td>Administer</td>
	// <td>Administer library item</td>
	// </tr>
	// <tr>
	// <td>Create</td>
	// <td>Create library item</td>
	// </tr>
	// <tr>
	// <td>ViewSecrets</td>
	// <td>View library item secrets</td>
	// </tr>
	// <tr>
	// <td>Use</td>
	// <td>Use library item</td>
	// </tr>
	// <tr>
	// <td>Owner</td>
	// <td>Owner library item</td>
	// </tr>
	// </tbody>
	// </table>
	Replace *bool `pulumi:"replace"`
	// The id of the variable group to assign the permissions.
	VariableGroupId *string `pulumi:"variableGroupId"`
}

type VariableGroupPermissionsState struct {
	// the permissions to assign. The following permissions are available.
	Permissions pulumi.StringMapInput
	// The **group** principal to assign the permissions.
	Principal pulumi.StringPtrInput
	// The ID of the project.
	ProjectId pulumi.StringPtrInput
	// Replace (`true`) or merge (`false`) the permissions. Default: `true`
	// <table>
	// <thead>
	// <tr>
	// <th>Permission</th>
	// <th>Description</th>
	// </tr>
	// </thead>
	// <tbody>
	// <tr>
	// <td>View</td>
	// <td>View library item</td>
	// </tr>
	// <tr>
	// <td>Administer</td>
	// <td>Administer library item</td>
	// </tr>
	// <tr>
	// <td>Create</td>
	// <td>Create library item</td>
	// </tr>
	// <tr>
	// <td>ViewSecrets</td>
	// <td>View library item secrets</td>
	// </tr>
	// <tr>
	// <td>Use</td>
	// <td>Use library item</td>
	// </tr>
	// <tr>
	// <td>Owner</td>
	// <td>Owner library item</td>
	// </tr>
	// </tbody>
	// </table>
	Replace pulumi.BoolPtrInput
	// The id of the variable group to assign the permissions.
	VariableGroupId pulumi.StringPtrInput
}

func (VariableGroupPermissionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*variableGroupPermissionsState)(nil)).Elem()
}

type variableGroupPermissionsArgs struct {
	// the permissions to assign. The following permissions are available.
	Permissions map[string]string `pulumi:"permissions"`
	// The **group** principal to assign the permissions.
	Principal string `pulumi:"principal"`
	// The ID of the project.
	ProjectId string `pulumi:"projectId"`
	// Replace (`true`) or merge (`false`) the permissions. Default: `true`
	// <table>
	// <thead>
	// <tr>
	// <th>Permission</th>
	// <th>Description</th>
	// </tr>
	// </thead>
	// <tbody>
	// <tr>
	// <td>View</td>
	// <td>View library item</td>
	// </tr>
	// <tr>
	// <td>Administer</td>
	// <td>Administer library item</td>
	// </tr>
	// <tr>
	// <td>Create</td>
	// <td>Create library item</td>
	// </tr>
	// <tr>
	// <td>ViewSecrets</td>
	// <td>View library item secrets</td>
	// </tr>
	// <tr>
	// <td>Use</td>
	// <td>Use library item</td>
	// </tr>
	// <tr>
	// <td>Owner</td>
	// <td>Owner library item</td>
	// </tr>
	// </tbody>
	// </table>
	Replace *bool `pulumi:"replace"`
	// The id of the variable group to assign the permissions.
	VariableGroupId string `pulumi:"variableGroupId"`
}

// The set of arguments for constructing a VariableGroupPermissions resource.
type VariableGroupPermissionsArgs struct {
	// the permissions to assign. The following permissions are available.
	Permissions pulumi.StringMapInput
	// The **group** principal to assign the permissions.
	Principal pulumi.StringInput
	// The ID of the project.
	ProjectId pulumi.StringInput
	// Replace (`true`) or merge (`false`) the permissions. Default: `true`
	// <table>
	// <thead>
	// <tr>
	// <th>Permission</th>
	// <th>Description</th>
	// </tr>
	// </thead>
	// <tbody>
	// <tr>
	// <td>View</td>
	// <td>View library item</td>
	// </tr>
	// <tr>
	// <td>Administer</td>
	// <td>Administer library item</td>
	// </tr>
	// <tr>
	// <td>Create</td>
	// <td>Create library item</td>
	// </tr>
	// <tr>
	// <td>ViewSecrets</td>
	// <td>View library item secrets</td>
	// </tr>
	// <tr>
	// <td>Use</td>
	// <td>Use library item</td>
	// </tr>
	// <tr>
	// <td>Owner</td>
	// <td>Owner library item</td>
	// </tr>
	// </tbody>
	// </table>
	Replace pulumi.BoolPtrInput
	// The id of the variable group to assign the permissions.
	VariableGroupId pulumi.StringInput
}

func (VariableGroupPermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*variableGroupPermissionsArgs)(nil)).Elem()
}

type VariableGroupPermissionsInput interface {
	pulumi.Input

	ToVariableGroupPermissionsOutput() VariableGroupPermissionsOutput
	ToVariableGroupPermissionsOutputWithContext(ctx context.Context) VariableGroupPermissionsOutput
}

func (*VariableGroupPermissions) ElementType() reflect.Type {
	return reflect.TypeOf((**VariableGroupPermissions)(nil)).Elem()
}

func (i *VariableGroupPermissions) ToVariableGroupPermissionsOutput() VariableGroupPermissionsOutput {
	return i.ToVariableGroupPermissionsOutputWithContext(context.Background())
}

func (i *VariableGroupPermissions) ToVariableGroupPermissionsOutputWithContext(ctx context.Context) VariableGroupPermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariableGroupPermissionsOutput)
}

// VariableGroupPermissionsArrayInput is an input type that accepts VariableGroupPermissionsArray and VariableGroupPermissionsArrayOutput values.
// You can construct a concrete instance of `VariableGroupPermissionsArrayInput` via:
//
//	VariableGroupPermissionsArray{ VariableGroupPermissionsArgs{...} }
type VariableGroupPermissionsArrayInput interface {
	pulumi.Input

	ToVariableGroupPermissionsArrayOutput() VariableGroupPermissionsArrayOutput
	ToVariableGroupPermissionsArrayOutputWithContext(context.Context) VariableGroupPermissionsArrayOutput
}

type VariableGroupPermissionsArray []VariableGroupPermissionsInput

func (VariableGroupPermissionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VariableGroupPermissions)(nil)).Elem()
}

func (i VariableGroupPermissionsArray) ToVariableGroupPermissionsArrayOutput() VariableGroupPermissionsArrayOutput {
	return i.ToVariableGroupPermissionsArrayOutputWithContext(context.Background())
}

func (i VariableGroupPermissionsArray) ToVariableGroupPermissionsArrayOutputWithContext(ctx context.Context) VariableGroupPermissionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariableGroupPermissionsArrayOutput)
}

// VariableGroupPermissionsMapInput is an input type that accepts VariableGroupPermissionsMap and VariableGroupPermissionsMapOutput values.
// You can construct a concrete instance of `VariableGroupPermissionsMapInput` via:
//
//	VariableGroupPermissionsMap{ "key": VariableGroupPermissionsArgs{...} }
type VariableGroupPermissionsMapInput interface {
	pulumi.Input

	ToVariableGroupPermissionsMapOutput() VariableGroupPermissionsMapOutput
	ToVariableGroupPermissionsMapOutputWithContext(context.Context) VariableGroupPermissionsMapOutput
}

type VariableGroupPermissionsMap map[string]VariableGroupPermissionsInput

func (VariableGroupPermissionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VariableGroupPermissions)(nil)).Elem()
}

func (i VariableGroupPermissionsMap) ToVariableGroupPermissionsMapOutput() VariableGroupPermissionsMapOutput {
	return i.ToVariableGroupPermissionsMapOutputWithContext(context.Background())
}

func (i VariableGroupPermissionsMap) ToVariableGroupPermissionsMapOutputWithContext(ctx context.Context) VariableGroupPermissionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariableGroupPermissionsMapOutput)
}

type VariableGroupPermissionsOutput struct{ *pulumi.OutputState }

func (VariableGroupPermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VariableGroupPermissions)(nil)).Elem()
}

func (o VariableGroupPermissionsOutput) ToVariableGroupPermissionsOutput() VariableGroupPermissionsOutput {
	return o
}

func (o VariableGroupPermissionsOutput) ToVariableGroupPermissionsOutputWithContext(ctx context.Context) VariableGroupPermissionsOutput {
	return o
}

// the permissions to assign. The following permissions are available.
func (o VariableGroupPermissionsOutput) Permissions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VariableGroupPermissions) pulumi.StringMapOutput { return v.Permissions }).(pulumi.StringMapOutput)
}

// The **group** principal to assign the permissions.
func (o VariableGroupPermissionsOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v *VariableGroupPermissions) pulumi.StringOutput { return v.Principal }).(pulumi.StringOutput)
}

// The ID of the project.
func (o VariableGroupPermissionsOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *VariableGroupPermissions) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Replace (`true`) or merge (`false`) the permissions. Default: `true`
// <table>
// <thead>
// <tr>
// <th>Permission</th>
// <th>Description</th>
// </tr>
// </thead>
// <tbody>
// <tr>
// <td>View</td>
// <td>View library item</td>
// </tr>
// <tr>
// <td>Administer</td>
// <td>Administer library item</td>
// </tr>
// <tr>
// <td>Create</td>
// <td>Create library item</td>
// </tr>
// <tr>
// <td>ViewSecrets</td>
// <td>View library item secrets</td>
// </tr>
// <tr>
// <td>Use</td>
// <td>Use library item</td>
// </tr>
// <tr>
// <td>Owner</td>
// <td>Owner library item</td>
// </tr>
// </tbody>
// </table>
func (o VariableGroupPermissionsOutput) Replace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VariableGroupPermissions) pulumi.BoolPtrOutput { return v.Replace }).(pulumi.BoolPtrOutput)
}

// The id of the variable group to assign the permissions.
func (o VariableGroupPermissionsOutput) VariableGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *VariableGroupPermissions) pulumi.StringOutput { return v.VariableGroupId }).(pulumi.StringOutput)
}

type VariableGroupPermissionsArrayOutput struct{ *pulumi.OutputState }

func (VariableGroupPermissionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VariableGroupPermissions)(nil)).Elem()
}

func (o VariableGroupPermissionsArrayOutput) ToVariableGroupPermissionsArrayOutput() VariableGroupPermissionsArrayOutput {
	return o
}

func (o VariableGroupPermissionsArrayOutput) ToVariableGroupPermissionsArrayOutputWithContext(ctx context.Context) VariableGroupPermissionsArrayOutput {
	return o
}

func (o VariableGroupPermissionsArrayOutput) Index(i pulumi.IntInput) VariableGroupPermissionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VariableGroupPermissions {
		return vs[0].([]*VariableGroupPermissions)[vs[1].(int)]
	}).(VariableGroupPermissionsOutput)
}

type VariableGroupPermissionsMapOutput struct{ *pulumi.OutputState }

func (VariableGroupPermissionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VariableGroupPermissions)(nil)).Elem()
}

func (o VariableGroupPermissionsMapOutput) ToVariableGroupPermissionsMapOutput() VariableGroupPermissionsMapOutput {
	return o
}

func (o VariableGroupPermissionsMapOutput) ToVariableGroupPermissionsMapOutputWithContext(ctx context.Context) VariableGroupPermissionsMapOutput {
	return o
}

func (o VariableGroupPermissionsMapOutput) MapIndex(k pulumi.StringInput) VariableGroupPermissionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VariableGroupPermissions {
		return vs[0].(map[string]*VariableGroupPermissions)[vs[1].(string)]
	}).(VariableGroupPermissionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VariableGroupPermissionsInput)(nil)).Elem(), &VariableGroupPermissions{})
	pulumi.RegisterInputType(reflect.TypeOf((*VariableGroupPermissionsArrayInput)(nil)).Elem(), VariableGroupPermissionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VariableGroupPermissionsMapInput)(nil)).Elem(), VariableGroupPermissionsMap{})
	pulumi.RegisterOutputType(VariableGroupPermissionsOutput{})
	pulumi.RegisterOutputType(VariableGroupPermissionsArrayOutput{})
	pulumi.RegisterOutputType(VariableGroupPermissionsMapOutput{})
}
