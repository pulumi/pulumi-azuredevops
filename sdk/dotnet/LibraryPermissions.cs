// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureDevOps
{
    /// <summary>
    /// Manages permissions for a Library
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AzureDevOps = Pulumi.AzureDevOps;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = new AzureDevOps.Project("project", new()
    ///     {
    ///         Name = "Testing",
    ///         Description = "Testing-description",
    ///         Visibility = "private",
    ///         VersionControl = "Git",
    ///         WorkItemTemplate = "Agile",
    ///     });
    /// 
    ///     var tf_project_readers = AzureDevOps.GetGroup.Invoke(new()
    ///     {
    ///         ProjectId = project.Id,
    ///         Name = "Readers",
    ///     });
    /// 
    ///     var permissions = new AzureDevOps.LibraryPermissions("permissions", new()
    ///     {
    ///         ProjectId = project.Id,
    ///         Principal = tf_project_readers.Apply(tf_project_readers =&gt; tf_project_readers.Apply(getGroupResult =&gt; getGroupResult.Id)),
    ///         Permissions = 
    ///         {
    ///             { "View", "allow" },
    ///             { "Administer", "allow" },
    ///             { "Use", "allow" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Roles
    /// 
    /// The Azure DevOps UI uses roles to assign permissions for the Library.
    /// 
    /// | Role          | Allowed Permissions   |
    /// |---------------|-----------------------|
    /// | Reader        | View                  |
    /// | Creator       | View, Create          |
    /// | User          | View, Use             |
    /// | Administrator | View, Use, Administer |
    /// 
    /// ## Relevant Links
    /// 
    /// * [Azure DevOps Service REST API 6.0 - Security](https://docs.microsoft.com/en-us/rest/api/azure/devops/security/?view=azure-devops-rest-6.0)
    /// 
    /// ## PAT Permissions Required
    /// 
    /// - **Project &amp; Team**: vso.security_manage - Grants the ability to read, write, and manage security permissions.
    /// 
    /// ## Import
    /// 
    /// The resource does not support import.
    /// </summary>
    [AzureDevOpsResourceType("azuredevops:index/libraryPermissions:LibraryPermissions")]
    public partial class LibraryPermissions : global::Pulumi.CustomResource
    {
        /// <summary>
        /// the permissions to assign. The following permissions are available.
        /// 
        /// | Permission  | Description               |
        /// |-------------|---------------------------|
        /// | View        | View library item         |
        /// | Administer  | Administer library item   |
        /// | Create      | Create library item       |
        /// | ViewSecrets | View library item secrets |
        /// | Use         | Use library item          |
        /// | Owner       | Owner library item        |
        /// </summary>
        [Output("permissions")]
        public Output<ImmutableDictionary<string, string>> Permissions { get; private set; } = null!;

        /// <summary>
        /// The **group** principal to assign the permissions.
        /// </summary>
        [Output("principal")]
        public Output<string> Principal { get; private set; } = null!;

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Replace (`True`) or merge (`False`) the permissions. Default: `True`
        /// </summary>
        [Output("replace")]
        public Output<bool?> Replace { get; private set; } = null!;


        /// <summary>
        /// Create a LibraryPermissions resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LibraryPermissions(string name, LibraryPermissionsArgs args, CustomResourceOptions? options = null)
            : base("azuredevops:index/libraryPermissions:LibraryPermissions", name, args ?? new LibraryPermissionsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LibraryPermissions(string name, Input<string> id, LibraryPermissionsState? state = null, CustomResourceOptions? options = null)
            : base("azuredevops:index/libraryPermissions:LibraryPermissions", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LibraryPermissions resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LibraryPermissions Get(string name, Input<string> id, LibraryPermissionsState? state = null, CustomResourceOptions? options = null)
        {
            return new LibraryPermissions(name, id, state, options);
        }
    }

    public sealed class LibraryPermissionsArgs : global::Pulumi.ResourceArgs
    {
        [Input("permissions", required: true)]
        private InputMap<string>? _permissions;

        /// <summary>
        /// the permissions to assign. The following permissions are available.
        /// 
        /// | Permission  | Description               |
        /// |-------------|---------------------------|
        /// | View        | View library item         |
        /// | Administer  | Administer library item   |
        /// | Create      | Create library item       |
        /// | ViewSecrets | View library item secrets |
        /// | Use         | Use library item          |
        /// | Owner       | Owner library item        |
        /// </summary>
        public InputMap<string> Permissions
        {
            get => _permissions ?? (_permissions = new InputMap<string>());
            set => _permissions = value;
        }

        /// <summary>
        /// The **group** principal to assign the permissions.
        /// </summary>
        [Input("principal", required: true)]
        public Input<string> Principal { get; set; } = null!;

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Replace (`True`) or merge (`False`) the permissions. Default: `True`
        /// </summary>
        [Input("replace")]
        public Input<bool>? Replace { get; set; }

        public LibraryPermissionsArgs()
        {
        }
        public static new LibraryPermissionsArgs Empty => new LibraryPermissionsArgs();
    }

    public sealed class LibraryPermissionsState : global::Pulumi.ResourceArgs
    {
        [Input("permissions")]
        private InputMap<string>? _permissions;

        /// <summary>
        /// the permissions to assign. The following permissions are available.
        /// 
        /// | Permission  | Description               |
        /// |-------------|---------------------------|
        /// | View        | View library item         |
        /// | Administer  | Administer library item   |
        /// | Create      | Create library item       |
        /// | ViewSecrets | View library item secrets |
        /// | Use         | Use library item          |
        /// | Owner       | Owner library item        |
        /// </summary>
        public InputMap<string> Permissions
        {
            get => _permissions ?? (_permissions = new InputMap<string>());
            set => _permissions = value;
        }

        /// <summary>
        /// The **group** principal to assign the permissions.
        /// </summary>
        [Input("principal")]
        public Input<string>? Principal { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Replace (`True`) or merge (`False`) the permissions. Default: `True`
        /// </summary>
        [Input("replace")]
        public Input<bool>? Replace { get; set; }

        public LibraryPermissionsState()
        {
        }
        public static new LibraryPermissionsState Empty => new LibraryPermissionsState();
    }
}
