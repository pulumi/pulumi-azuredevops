// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureDevOps
{
    /// <summary>
    /// Manages Project Tags within Azure DevOps organization.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AzureDevOps = Pulumi.AzureDevOps;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new AzureDevOps.Project("example", new()
    ///     {
    ///         Name = "Example Project",
    ///         Visibility = "private",
    ///         VersionControl = "Git",
    ///         WorkItemTemplate = "Agile",
    ///         Description = "Managed by Pulumi",
    ///     });
    /// 
    ///     var exampleProjectTags = new AzureDevOps.ProjectTags("example", new()
    ///     {
    ///         ProjectId = example.Id,
    ///         Tags = new[]
    ///         {
    ///             "tag1",
    ///             "tag2",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Relevant Links
    /// 
    /// - [Azure DevOps Service REST API 7.0 - Project Properties](https://learn.microsoft.com/en-us/rest/api/azure/devops/core/projects/get-project-properties?view=azure-devops-rest-7.1&amp;tabs=HTTP)
    /// 
    /// ## Import
    /// 
    /// Azure DevOps Project Tags can be imported using the Project ID e.g.:
    /// 
    /// ```sh
    /// $ pulumi import azuredevops:index/projectTags:ProjectTags example 00000000-0000-0000-0000-000000000000
    /// ```
    /// </summary>
    [AzureDevOpsResourceType("azuredevops:index/projectTags:ProjectTags")]
    public partial class ProjectTags : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the Project. Changing this forces a new resource to be created.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags assigned to the Project.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectTags resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectTags(string name, ProjectTagsArgs args, CustomResourceOptions? options = null)
            : base("azuredevops:index/projectTags:ProjectTags", name, args ?? new ProjectTagsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProjectTags(string name, Input<string> id, ProjectTagsState? state = null, CustomResourceOptions? options = null)
            : base("azuredevops:index/projectTags:ProjectTags", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectTags resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectTags Get(string name, Input<string> id, ProjectTagsState? state = null, CustomResourceOptions? options = null)
        {
            return new ProjectTags(name, id, state, options);
        }
    }

    public sealed class ProjectTagsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Project. Changing this forces a new resource to be created.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        [Input("tags", required: true)]
        private InputList<string>? _tags;

        /// <summary>
        /// A mapping of tags assigned to the Project.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public ProjectTagsArgs()
        {
        }
        public static new ProjectTagsArgs Empty => new ProjectTagsArgs();
    }

    public sealed class ProjectTagsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Project. Changing this forces a new resource to be created.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A mapping of tags assigned to the Project.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public ProjectTagsState()
        {
        }
        public static new ProjectTagsState Empty => new ProjectTagsState();
    }
}
