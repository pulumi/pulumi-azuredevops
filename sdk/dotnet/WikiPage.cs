// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureDevOps
{
    /// <summary>
    /// Manages Wiki pages within Azure DevOps project.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AzureDevOps = Pulumi.AzureDevOps;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new AzureDevOps.Project("example", new()
    ///     {
    ///         Name = "Example Project",
    ///         Description = "Managed by Pulumi",
    ///     });
    /// 
    ///     var exampleWiki = new AzureDevOps.Wiki("example", new()
    ///     {
    ///         Name = "Example project wiki ",
    ///         ProjectId = example.Id,
    ///         Type = "projectWiki",
    ///     });
    /// 
    ///     var exampleWikiPage = new AzureDevOps.WikiPage("example", new()
    ///     {
    ///         ProjectId = example.Id,
    ///         WikiId = exampleWiki.Id,
    ///         Path = "/page",
    ///         Content = "content",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Relevant Links
    /// 
    /// - [Azure DevOps Service REST API 7.1 - Wiki Page](https://learn.microsoft.com/en-us/rest/api/azure/devops/wiki/pages?view=azure-devops-rest-7.1)
    /// </summary>
    [AzureDevOpsResourceType("azuredevops:index/wikiPage:WikiPage")]
    public partial class WikiPage : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The content of the wiki page.
        /// </summary>
        [Output("content")]
        public Output<string> Content { get; private set; } = null!;

        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// The path of the wiki page.
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        /// <summary>
        /// The ID of the Project.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The ID of the Wiki.
        /// </summary>
        [Output("wikiId")]
        public Output<string> WikiId { get; private set; } = null!;


        /// <summary>
        /// Create a WikiPage resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WikiPage(string name, WikiPageArgs args, CustomResourceOptions? options = null)
            : base("azuredevops:index/wikiPage:WikiPage", name, args ?? new WikiPageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WikiPage(string name, Input<string> id, WikiPageState? state = null, CustomResourceOptions? options = null)
            : base("azuredevops:index/wikiPage:WikiPage", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WikiPage resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WikiPage Get(string name, Input<string> id, WikiPageState? state = null, CustomResourceOptions? options = null)
        {
            return new WikiPage(name, id, state, options);
        }
    }

    public sealed class WikiPageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The content of the wiki page.
        /// </summary>
        [Input("content", required: true)]
        public Input<string> Content { get; set; } = null!;

        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// The path of the wiki page.
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        /// <summary>
        /// The ID of the Project.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// The ID of the Wiki.
        /// </summary>
        [Input("wikiId", required: true)]
        public Input<string> WikiId { get; set; } = null!;

        public WikiPageArgs()
        {
        }
        public static new WikiPageArgs Empty => new WikiPageArgs();
    }

    public sealed class WikiPageState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The content of the wiki page.
        /// </summary>
        [Input("content")]
        public Input<string>? Content { get; set; }

        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// The path of the wiki page.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// The ID of the Project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The ID of the Wiki.
        /// </summary>
        [Input("wikiId")]
        public Input<string>? WikiId { get; set; }

        public WikiPageState()
        {
        }
        public static new WikiPageState Empty => new WikiPageState();
    }
}
