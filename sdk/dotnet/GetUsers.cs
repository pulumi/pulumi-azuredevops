// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureDevOps
{
    public static class GetUsers
    {
        /// <summary>
        /// Use this data source to access information about an existing users within Azure DevOps.
        /// 
        /// &gt; **NOTE:** This resource will try to get all the users within the organization which may result in poor performance. `azuredevops.getIdentityUsers`, `azuredevops.getUser` can be used to replace this resource.
        /// </summary>
        public static Task<GetUsersResult> InvokeAsync(GetUsersArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUsersResult>("azuredevops:index/getUsers:getUsers", args ?? new GetUsersArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing users within Azure DevOps.
        /// 
        /// &gt; **NOTE:** This resource will try to get all the users within the organization which may result in poor performance. `azuredevops.getIdentityUsers`, `azuredevops.getUser` can be used to replace this resource.
        /// </summary>
        public static Output<GetUsersResult> Invoke(GetUsersInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUsersResult>("azuredevops:index/getUsers:getUsers", args ?? new GetUsersInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing users within Azure DevOps.
        /// 
        /// &gt; **NOTE:** This resource will try to get all the users within the organization which may result in poor performance. `azuredevops.getIdentityUsers`, `azuredevops.getUser` can be used to replace this resource.
        /// </summary>
        public static Output<GetUsersResult> Invoke(GetUsersInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetUsersResult>("azuredevops:index/getUsers:getUsers", args ?? new GetUsersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUsersArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A `Features` block as defined below.
        /// </summary>
        [Input("features")]
        public Inputs.GetUsersFeaturesArgs? Features { get; set; }

        /// <summary>
        /// The type of source provider for the `OriginId` parameter (ex:AD, AAD, MSA) The supported origins are listed below.
        /// &lt;pre&gt;List of possible origins
        /// ```hcl
        /// ActiveDirectory          = "ad"   # Windows Active Directory
        /// AzureActiveDirectory     = "aad"  # Azure Active Directory
        /// MicrosoftAccount         = "msa"  # Windows Live Account
        /// VisualStudioTeamServices = "vsts" # DevOps
        /// GitHubDirectory          = "ghb"  # GitHub
        /// ```
        /// &lt;/pre&gt;
        /// </summary>
        [Input("origin")]
        public string? Origin { get; set; }

        /// <summary>
        /// The unique identifier from the system of origin.
        /// </summary>
        [Input("originId")]
        public string? OriginId { get; set; }

        /// <summary>
        /// The PrincipalName of this graph member from the source provider.
        /// </summary>
        [Input("principalName")]
        public string? PrincipalName { get; set; }

        [Input("subjectTypes")]
        private List<string>? _subjectTypes;

        /// <summary>
        /// A list of user subject subtypes to reduce the retrieved results, e.g. `Msa`, `Aad`, `Svc` (service identity), `Imp` (imported identity), etc. The supported subject types are listed below.
        /// &lt;pre&gt;List of possible subject types
        /// ```hcl
        /// AadUser                 = "aad" # Azure Active Directory Tenant
        /// MsaUser                 = "msa" # Windows Live
        /// UnknownUser             = "unusr"
        /// BindPendingUser         = "bnd" # Invited user with pending redeem status
        /// WindowsIdentity         = "win" # Windows Active Directory user
        /// UnauthenticatedIdentity = "uauth"
        /// ServiceIdentity         = "svc"
        /// AggregateIdentity       = "agg"
        /// ImportedIdentity        = "imp"
        /// ServerTestIdentity      = "tst"
        /// GroupScopeType          = "scp"
        /// CspPartnerIdentity      = "csp"
        /// SystemServicePrincipal  = "s2s"
        /// SystemLicense           = "slic"
        /// SystemScope             = "sscp"
        /// SystemCspPartner        = "scsp"
        /// SystemPublicAccess      = "spa"
        /// SystemAccessControl     = "sace"
        /// AcsServiceIdentity      = "acs"
        /// Unknown                 = "ukn"
        /// ```
        /// &lt;/pre&gt;
        /// </summary>
        public List<string> SubjectTypes
        {
            get => _subjectTypes ?? (_subjectTypes = new List<string>());
            set => _subjectTypes = value;
        }

        public GetUsersArgs()
        {
        }
        public static new GetUsersArgs Empty => new GetUsersArgs();
    }

    public sealed class GetUsersInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A `Features` block as defined below.
        /// </summary>
        [Input("features")]
        public Input<Inputs.GetUsersFeaturesInputArgs>? Features { get; set; }

        /// <summary>
        /// The type of source provider for the `OriginId` parameter (ex:AD, AAD, MSA) The supported origins are listed below.
        /// &lt;pre&gt;List of possible origins
        /// ```hcl
        /// ActiveDirectory          = "ad"   # Windows Active Directory
        /// AzureActiveDirectory     = "aad"  # Azure Active Directory
        /// MicrosoftAccount         = "msa"  # Windows Live Account
        /// VisualStudioTeamServices = "vsts" # DevOps
        /// GitHubDirectory          = "ghb"  # GitHub
        /// ```
        /// &lt;/pre&gt;
        /// </summary>
        [Input("origin")]
        public Input<string>? Origin { get; set; }

        /// <summary>
        /// The unique identifier from the system of origin.
        /// </summary>
        [Input("originId")]
        public Input<string>? OriginId { get; set; }

        /// <summary>
        /// The PrincipalName of this graph member from the source provider.
        /// </summary>
        [Input("principalName")]
        public Input<string>? PrincipalName { get; set; }

        [Input("subjectTypes")]
        private InputList<string>? _subjectTypes;

        /// <summary>
        /// A list of user subject subtypes to reduce the retrieved results, e.g. `Msa`, `Aad`, `Svc` (service identity), `Imp` (imported identity), etc. The supported subject types are listed below.
        /// &lt;pre&gt;List of possible subject types
        /// ```hcl
        /// AadUser                 = "aad" # Azure Active Directory Tenant
        /// MsaUser                 = "msa" # Windows Live
        /// UnknownUser             = "unusr"
        /// BindPendingUser         = "bnd" # Invited user with pending redeem status
        /// WindowsIdentity         = "win" # Windows Active Directory user
        /// UnauthenticatedIdentity = "uauth"
        /// ServiceIdentity         = "svc"
        /// AggregateIdentity       = "agg"
        /// ImportedIdentity        = "imp"
        /// ServerTestIdentity      = "tst"
        /// GroupScopeType          = "scp"
        /// CspPartnerIdentity      = "csp"
        /// SystemServicePrincipal  = "s2s"
        /// SystemLicense           = "slic"
        /// SystemScope             = "sscp"
        /// SystemCspPartner        = "scsp"
        /// SystemPublicAccess      = "spa"
        /// SystemAccessControl     = "sace"
        /// AcsServiceIdentity      = "acs"
        /// Unknown                 = "ukn"
        /// ```
        /// &lt;/pre&gt;
        /// </summary>
        public InputList<string> SubjectTypes
        {
            get => _subjectTypes ?? (_subjectTypes = new InputList<string>());
            set => _subjectTypes = value;
        }

        public GetUsersInvokeArgs()
        {
        }
        public static new GetUsersInvokeArgs Empty => new GetUsersInvokeArgs();
    }


    [OutputType]
    public sealed class GetUsersResult
    {
        public readonly Outputs.GetUsersFeaturesResult? Features;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The type of source provider for the origin identifier (ex:AD, AAD, MSA)
        /// </summary>
        public readonly string? Origin;
        /// <summary>
        /// The unique identifier from the system of origin. Typically a sid, object id or Guid. Linking and unlinking operations can cause this value to change for a user because the user is not backed by a different provider and has a different unique id in the new provider.
        /// </summary>
        public readonly string? OriginId;
        /// <summary>
        /// This is the PrincipalName of this graph member from the source provider. The source provider may change this field over time and it is not guaranteed to be immutable for the life of the graph member by VSTS.
        /// </summary>
        public readonly string? PrincipalName;
        public readonly ImmutableArray<string> SubjectTypes;
        /// <summary>
        /// A `Users` block as defined below. A set of existing users in your Azure DevOps Organization with details about every single user.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUsersUserResult> Users;

        [OutputConstructor]
        private GetUsersResult(
            Outputs.GetUsersFeaturesResult? features,

            string id,

            string? origin,

            string? originId,

            string? principalName,

            ImmutableArray<string> subjectTypes,

            ImmutableArray<Outputs.GetUsersUserResult> users)
        {
            Features = features;
            Id = id;
            Origin = origin;
            OriginId = originId;
            PrincipalName = principalName;
            SubjectTypes = subjectTypes;
            Users = users;
        }
    }
}
