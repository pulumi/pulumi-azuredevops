// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureDevOps
{
    public static class GetTeams
    {
        /// <summary>
        /// Use this data source to access information about existing Teams in a Project or globally within an Azure DevOps organization
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AzureDevOps = Pulumi.AzureDevOps;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = AzureDevOps.GetTeams.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["projectId"] = example.Apply(getTeamsResult =&gt; getTeamsResult.Teams).Select(__item =&gt; __item.ProjectId).ToList(),
        ///         ["name"] = example.Apply(getTeamsResult =&gt; getTeamsResult.Teams).Select(__item =&gt; __item.Name).ToList(),
        ///         ["alladministrators"] = example.Apply(getTeamsResult =&gt; getTeamsResult.Teams).Select(__item =&gt; __item.Administrators).ToList(),
        ///         ["administrators"] = example.Apply(getTeamsResult =&gt; getTeamsResult.Teams).Select(__item =&gt; __item.Members).ToList(),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// ## Relevant Links
        /// 
        /// - [Azure DevOps Service REST API 6.0 - Teams - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/core/teams/get?view=azure-devops-rest-6.0)
        /// 
        /// ## PAT Permissions Required
        /// 
        /// - **vso.project**:	Grants the ability to read projects and teams.
        /// </summary>
        public static Task<GetTeamsResult> InvokeAsync(GetTeamsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTeamsResult>("azuredevops:index/getTeams:getTeams", args ?? new GetTeamsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about existing Teams in a Project or globally within an Azure DevOps organization
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AzureDevOps = Pulumi.AzureDevOps;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = AzureDevOps.GetTeams.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["projectId"] = example.Apply(getTeamsResult =&gt; getTeamsResult.Teams).Select(__item =&gt; __item.ProjectId).ToList(),
        ///         ["name"] = example.Apply(getTeamsResult =&gt; getTeamsResult.Teams).Select(__item =&gt; __item.Name).ToList(),
        ///         ["alladministrators"] = example.Apply(getTeamsResult =&gt; getTeamsResult.Teams).Select(__item =&gt; __item.Administrators).ToList(),
        ///         ["administrators"] = example.Apply(getTeamsResult =&gt; getTeamsResult.Teams).Select(__item =&gt; __item.Members).ToList(),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// ## Relevant Links
        /// 
        /// - [Azure DevOps Service REST API 6.0 - Teams - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/core/teams/get?view=azure-devops-rest-6.0)
        /// 
        /// ## PAT Permissions Required
        /// 
        /// - **vso.project**:	Grants the ability to read projects and teams.
        /// </summary>
        public static Output<GetTeamsResult> Invoke(GetTeamsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTeamsResult>("azuredevops:index/getTeams:getTeams", args ?? new GetTeamsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTeamsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Project ID. If no project ID all teams of the organization will be returned.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        public GetTeamsArgs()
        {
        }
        public static new GetTeamsArgs Empty => new GetTeamsArgs();
    }

    public sealed class GetTeamsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Project ID. If no project ID all teams of the organization will be returned.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public GetTeamsInvokeArgs()
        {
        }
        public static new GetTeamsInvokeArgs Empty => new GetTeamsInvokeArgs();
    }


    [OutputType]
    public sealed class GetTeamsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Project identifier.
        /// - `id - Team identifier
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// A list of existing projects in your Azure DevOps Organization with details about every project which includes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTeamsTeamResult> Teams;

        [OutputConstructor]
        private GetTeamsResult(
            string id,

            string? projectId,

            ImmutableArray<Outputs.GetTeamsTeamResult> teams)
        {
            Id = id;
            ProjectId = projectId;
            Teams = teams;
        }
    }
}
