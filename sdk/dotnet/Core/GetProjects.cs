// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureDevOps.Core
{
    public static class GetProjects
    {
        /// <summary>
        /// Use this data source to access information about existing Projects within Azure DevOps.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Linq;
        /// using Pulumi;
        /// using AzureDevOps = Pulumi.AzureDevOps;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var test = Output.Create(AzureDevOps.Core.GetProjects.InvokeAsync(new AzureDevOps.Core.GetProjectsArgs
        ///         {
        ///             ProjectName = "contoso",
        ///             State = "wellFormed",
        ///         }));
        ///         this.ProjectId = test.Apply(test =&gt; test.Projects.Select(__item =&gt; __item.ProjectId).ToList());
        ///         this.ProjectName = test.Apply(test =&gt; test.Projects.Select(__item =&gt; __item.Name).ToList());
        ///         this.ProjectUrl = test.Apply(test =&gt; test.Projects.Select(__item =&gt; __item.ProjectUrl).ToList());
        ///         this.State = test.Apply(test =&gt; test.Projects.Select(__item =&gt; __item.State).ToList());
        ///     }
        /// 
        ///     [Output("projectId")]
        ///     public Output&lt;string&gt; ProjectId { get; set; }
        ///     [Output("projectName")]
        ///     public Output&lt;string&gt; ProjectName { get; set; }
        ///     [Output("projectUrl")]
        ///     public Output&lt;string&gt; ProjectUrl { get; set; }
        ///     [Output("state")]
        ///     public Output&lt;string&gt; State { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// ## Relevant Links
        /// 
        /// - [Azure DevOps Service REST API 5.1 - Projects - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/core/projects/get?view=azure-devops-rest-5.1)
        /// </summary>
        public static Task<GetProjectsResult> InvokeAsync(GetProjectsArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetProjectsResult>("azuredevops:Core/getProjects:getProjects", args ?? new GetProjectsArgs(), options.WithVersion());
    }


    public sealed class GetProjectsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Project, if not specified all projects will be returned.
        /// </summary>
        [Input("projectName")]
        public string? ProjectName { get; set; }

        /// <summary>
        /// State of the Project, if not specified all projects will be returned. Valid values are `all`, `deleting`, `new`, `wellFormed`, `createPending`, `unchanged`,`deleted`.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetProjectsArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetProjectsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? ProjectName;
        /// <summary>
        /// A list of existing projects in your Azure DevOps Organization with details about every project which includes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProjectsProjectResult> Projects;
        /// <summary>
        /// Project state.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetProjectsResult(
            string id,

            string? projectName,

            ImmutableArray<Outputs.GetProjectsProjectResult> projects,

            string? state)
        {
            Id = id;
            ProjectName = projectName;
            Projects = projects;
            State = state;
        }
    }
}
