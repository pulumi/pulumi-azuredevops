// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureDevOps
{
    /// <summary>
    /// Manages an Openshift service endpoint within Azure DevOps organization. Using this service endpoint requires you to first install the [OpenShift Extension](https://marketplace.visualstudio.com/items?itemName=redhat.openshift-vsts).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AzureDevOps = Pulumi.AzureDevOps;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new AzureDevOps.Project("example", new()
    ///     {
    ///         Name = "Example Project",
    ///         Visibility = "private",
    ///         VersionControl = "Git",
    ///         WorkItemTemplate = "Agile",
    ///         Description = "Managed by Pulumi",
    ///     });
    /// 
    ///     var exampleServiceendpointOpenshift = new AzureDevOps.ServiceendpointOpenshift("example", new()
    ///     {
    ///         ProjectId = example.Id,
    ///         ServiceEndpointName = "Example Openshift",
    ///         ServerUrl = "https://example.server",
    ///         CertificateAuthorityFile = "/opt/file",
    ///         AcceptUntrustedCerts = true,
    ///         AuthBasic = new AzureDevOps.Inputs.ServiceendpointOpenshiftAuthBasicArgs
    ///         {
    ///             Username = "username",
    ///             Password = "password",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AzureDevOps = Pulumi.AzureDevOps;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new AzureDevOps.Project("example", new()
    ///     {
    ///         Name = "Example Project",
    ///         Visibility = "private",
    ///         VersionControl = "Git",
    ///         WorkItemTemplate = "Agile",
    ///         Description = "Managed by Pulumi",
    ///     });
    /// 
    ///     var exampleServiceendpointOpenshift = new AzureDevOps.ServiceendpointOpenshift("example", new()
    ///     {
    ///         ProjectId = example.Id,
    ///         ServiceEndpointName = "Example Openshift",
    ///         ServerUrl = "https://example.server",
    ///         CertificateAuthorityFile = "/opt/file",
    ///         AcceptUntrustedCerts = true,
    ///         AuthToken = new AzureDevOps.Inputs.ServiceendpointOpenshiftAuthTokenArgs
    ///         {
    ///             Token = "username",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AzureDevOps = Pulumi.AzureDevOps;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new AzureDevOps.Project("example", new()
    ///     {
    ///         Name = "Example Project",
    ///         Visibility = "private",
    ///         VersionControl = "Git",
    ///         WorkItemTemplate = "Agile",
    ///         Description = "Managed by Pulumi",
    ///     });
    /// 
    ///     var exampleServiceendpointOpenshift = new AzureDevOps.ServiceendpointOpenshift("example", new()
    ///     {
    ///         ProjectId = example.Id,
    ///         ServiceEndpointName = "Example Openshift",
    ///         ServerUrl = "https://example.server",
    ///         AuthNone = new AzureDevOps.Inputs.ServiceendpointOpenshiftAuthNoneArgs
    ///         {
    ///             KubeConfig = "config",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Relevant Links
    /// 
    /// - [Azure DevOps Service REST API 7.1 - Service Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-7.1)
    /// 
    /// ## Import
    /// 
    /// Azure DevOps Openshift Service Endpoint can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**
    /// 
    /// ```sh
    /// $ pulumi import azuredevops:index/serviceendpointOpenshift:ServiceendpointOpenshift example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000
    /// ```
    /// </summary>
    [AzureDevOpsResourceType("azuredevops:index/serviceendpointOpenshift:ServiceendpointOpenshift")]
    public partial class ServiceendpointOpenshift : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Set this option to allow clients to accept a self-signed certificate. Available when using `auth_basic` or `auth_token` authorization.
        /// </summary>
        [Output("acceptUntrustedCerts")]
        public Output<bool?> AcceptUntrustedCerts { get; private set; } = null!;

        /// <summary>
        /// An `auth_basic` block as documented below.
        /// </summary>
        [Output("authBasic")]
        public Output<Outputs.ServiceendpointOpenshiftAuthBasic?> AuthBasic { get; private set; } = null!;

        /// <summary>
        /// An `auth_none` block as documented below.
        /// </summary>
        [Output("authNone")]
        public Output<Outputs.ServiceendpointOpenshiftAuthNone?> AuthNone { get; private set; } = null!;

        /// <summary>
        /// An `auth_token` block as documented below.
        /// </summary>
        [Output("authToken")]
        public Output<Outputs.ServiceendpointOpenshiftAuthToken?> AuthToken { get; private set; } = null!;

        [Output("authorization")]
        public Output<ImmutableDictionary<string, string>> Authorization { get; private set; } = null!;

        /// <summary>
        /// The path to a certificate authority file to correctly and securely authenticates with an OpenShift server that uses HTTPS. Available when using `auth_basic` or `auth_token` authorization.
        /// </summary>
        [Output("certificateAuthorityFile")]
        public Output<string?> CertificateAuthorityFile { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The URL for the OpenShift cluster to connect to.
        /// </summary>
        [Output("serverUrl")]
        public Output<string?> ServerUrl { get; private set; } = null!;

        /// <summary>
        /// The Service Endpoint name.
        /// </summary>
        [Output("serviceEndpointName")]
        public Output<string> ServiceEndpointName { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceendpointOpenshift resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceendpointOpenshift(string name, ServiceendpointOpenshiftArgs args, CustomResourceOptions? options = null)
            : base("azuredevops:index/serviceendpointOpenshift:ServiceendpointOpenshift", name, args ?? new ServiceendpointOpenshiftArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceendpointOpenshift(string name, Input<string> id, ServiceendpointOpenshiftState? state = null, CustomResourceOptions? options = null)
            : base("azuredevops:index/serviceendpointOpenshift:ServiceendpointOpenshift", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceendpointOpenshift resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceendpointOpenshift Get(string name, Input<string> id, ServiceendpointOpenshiftState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceendpointOpenshift(name, id, state, options);
        }
    }

    public sealed class ServiceendpointOpenshiftArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Set this option to allow clients to accept a self-signed certificate. Available when using `auth_basic` or `auth_token` authorization.
        /// </summary>
        [Input("acceptUntrustedCerts")]
        public Input<bool>? AcceptUntrustedCerts { get; set; }

        /// <summary>
        /// An `auth_basic` block as documented below.
        /// </summary>
        [Input("authBasic")]
        public Input<Inputs.ServiceendpointOpenshiftAuthBasicArgs>? AuthBasic { get; set; }

        /// <summary>
        /// An `auth_none` block as documented below.
        /// </summary>
        [Input("authNone")]
        public Input<Inputs.ServiceendpointOpenshiftAuthNoneArgs>? AuthNone { get; set; }

        /// <summary>
        /// An `auth_token` block as documented below.
        /// </summary>
        [Input("authToken")]
        public Input<Inputs.ServiceendpointOpenshiftAuthTokenArgs>? AuthToken { get; set; }

        /// <summary>
        /// The path to a certificate authority file to correctly and securely authenticates with an OpenShift server that uses HTTPS. Available when using `auth_basic` or `auth_token` authorization.
        /// </summary>
        [Input("certificateAuthorityFile")]
        public Input<string>? CertificateAuthorityFile { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// The URL for the OpenShift cluster to connect to.
        /// </summary>
        [Input("serverUrl")]
        public Input<string>? ServerUrl { get; set; }

        /// <summary>
        /// The Service Endpoint name.
        /// </summary>
        [Input("serviceEndpointName", required: true)]
        public Input<string> ServiceEndpointName { get; set; } = null!;

        public ServiceendpointOpenshiftArgs()
        {
        }
        public static new ServiceendpointOpenshiftArgs Empty => new ServiceendpointOpenshiftArgs();
    }

    public sealed class ServiceendpointOpenshiftState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Set this option to allow clients to accept a self-signed certificate. Available when using `auth_basic` or `auth_token` authorization.
        /// </summary>
        [Input("acceptUntrustedCerts")]
        public Input<bool>? AcceptUntrustedCerts { get; set; }

        /// <summary>
        /// An `auth_basic` block as documented below.
        /// </summary>
        [Input("authBasic")]
        public Input<Inputs.ServiceendpointOpenshiftAuthBasicGetArgs>? AuthBasic { get; set; }

        /// <summary>
        /// An `auth_none` block as documented below.
        /// </summary>
        [Input("authNone")]
        public Input<Inputs.ServiceendpointOpenshiftAuthNoneGetArgs>? AuthNone { get; set; }

        /// <summary>
        /// An `auth_token` block as documented below.
        /// </summary>
        [Input("authToken")]
        public Input<Inputs.ServiceendpointOpenshiftAuthTokenGetArgs>? AuthToken { get; set; }

        [Input("authorization")]
        private InputMap<string>? _authorization;
        public InputMap<string> Authorization
        {
            get => _authorization ?? (_authorization = new InputMap<string>());
            set => _authorization = value;
        }

        /// <summary>
        /// The path to a certificate authority file to correctly and securely authenticates with an OpenShift server that uses HTTPS. Available when using `auth_basic` or `auth_token` authorization.
        /// </summary>
        [Input("certificateAuthorityFile")]
        public Input<string>? CertificateAuthorityFile { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The URL for the OpenShift cluster to connect to.
        /// </summary>
        [Input("serverUrl")]
        public Input<string>? ServerUrl { get; set; }

        /// <summary>
        /// The Service Endpoint name.
        /// </summary>
        [Input("serviceEndpointName")]
        public Input<string>? ServiceEndpointName { get; set; }

        public ServiceendpointOpenshiftState()
        {
        }
        public static new ServiceendpointOpenshiftState Empty => new ServiceendpointOpenshiftState();
    }
}
