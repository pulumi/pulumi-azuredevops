// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureDevOps
{
    /// <summary>
    /// Manages permissions for a Build Folder
    /// 
    /// &gt; **Note** Permissions can be assigned to group principals and not to single user principals.
    /// 
    /// ## Example Usage
    /// 
    /// ### Set specific folder permissions
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AzureDevOps = Pulumi.AzureDevOps;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new AzureDevOps.Project("example", new()
    ///     {
    ///         Name = "Example Project",
    ///         WorkItemTemplate = "Agile",
    ///         VersionControl = "Git",
    ///         Visibility = "private",
    ///         Description = "Managed by Terraform",
    ///     });
    /// 
    ///     var example_readers = AzureDevOps.GetGroup.Invoke(new()
    ///     {
    ///         ProjectId = example.Id,
    ///         Name = "Readers",
    ///     });
    /// 
    ///     var exampleBuildFolder = new AzureDevOps.BuildFolder("example", new()
    ///     {
    ///         ProjectId = example.Id,
    ///         Path = "\\ExampleFolder",
    ///         Description = "ExampleFolder description",
    ///     });
    /// 
    ///     var exampleBuildFolderPermissions = new AzureDevOps.BuildFolderPermissions("example", new()
    ///     {
    ///         ProjectId = example.Id,
    ///         Path = "\\ExampleFolder",
    ///         Principal = example_readers.Apply(example_readers =&gt; example_readers.Apply(getGroupResult =&gt; getGroupResult.Id)),
    ///         Permissions = 
    ///         {
    ///             { "ViewBuilds", "Allow" },
    ///             { "EditBuildQuality", "Allow" },
    ///             { "RetainIndefinitely", "Allow" },
    ///             { "DeleteBuilds", "Deny" },
    ///             { "ManageBuildQualities", "Deny" },
    ///             { "DestroyBuilds", "Deny" },
    ///             { "UpdateBuildInformation", "Deny" },
    ///             { "QueueBuilds", "Allow" },
    ///             { "ManageBuildQueue", "Deny" },
    ///             { "StopBuilds", "Allow" },
    ///             { "ViewBuildDefinition", "Allow" },
    ///             { "EditBuildDefinition", "Deny" },
    ///             { "DeleteBuildDefinition", "Deny" },
    ///             { "AdministerBuildPermissions", "NotSet" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Set root folder permissions
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AzureDevOps = Pulumi.AzureDevOps;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new AzureDevOps.Project("example", new()
    ///     {
    ///         Name = "Example Project",
    ///         WorkItemTemplate = "Agile",
    ///         VersionControl = "Git",
    ///         Visibility = "private",
    ///         Description = "Managed by Terraform",
    ///     });
    /// 
    ///     var example_readers = AzureDevOps.GetGroup.Invoke(new()
    ///     {
    ///         ProjectId = example.Id,
    ///         Name = "Readers",
    ///     });
    /// 
    ///     var exampleBuildFolderPermissions = new AzureDevOps.BuildFolderPermissions("example", new()
    ///     {
    ///         ProjectId = example.Id,
    ///         Path = "\\",
    ///         Principal = example_readers.Apply(example_readers =&gt; example_readers.Apply(getGroupResult =&gt; getGroupResult.Id)),
    ///         Permissions = 
    ///         {
    ///             { "RetainIndefinitely", "Allow" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Relevant Links
    /// 
    /// * [Azure DevOps Service REST API 7.0 - Security](https://docs.microsoft.com/en-us/rest/api/azure/devops/security/?view=azure-devops-rest-7.0)
    /// 
    /// ## PAT Permissions Required
    /// 
    /// - **Project &amp; Team**: vso.security_manage - Grants the ability to read, write, and manage security permissions.
    /// 
    /// ## Import
    /// 
    /// The resource does not support import.
    /// </summary>
    [AzureDevOpsResourceType("azuredevops:index/buildFolderPermissions:BuildFolderPermissions")]
    public partial class BuildFolderPermissions : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The folder path to assign the permissions.
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        /// <summary>
        /// the permissions to assign. The following permissions are available.
        /// 
        /// | Permission                     | Description                           |
        /// |--------------------------------|---------------------------------------|
        /// | ViewBuilds                     | View builds                           |
        /// | EditBuildQuality               | Edit build quality                    |
        /// | RetainIndefinitely             | Retain indefinitely                   |
        /// | DeleteBuilds                   | Delete builds                         |
        /// | ManageBuildQualities           | Manage build qualities                |
        /// | DestroyBuilds                  | Destroy builds                        |
        /// | UpdateBuildInformation         | Update build information              |
        /// | QueueBuilds                    | Queue builds                          |
        /// | ManageBuildQueue               | Manage build queue                    |
        /// | StopBuilds                     | Stop builds                           |
        /// | ViewBuildDefinition            | View build pipeline                   |
        /// | EditBuildDefinition            | Edit build pipeline                   |
        /// | DeleteBuildDefinition          | Delete build pipeline                 |
        /// | OverrideBuildCheckInValidation | Override check-in validation by build |
        /// | AdministerBuildPermissions     | Administer build permissions          |
        /// </summary>
        [Output("permissions")]
        public Output<ImmutableDictionary<string, string>> Permissions { get; private set; } = null!;

        /// <summary>
        /// The **group** principal to assign the permissions.
        /// </summary>
        [Output("principal")]
        public Output<string> Principal { get; private set; } = null!;

        /// <summary>
        /// The ID of the project to assign the permissions.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Replace (`true`) or merge (`false`) the permissions. Default: `true`.
        /// </summary>
        [Output("replace")]
        public Output<bool?> Replace { get; private set; } = null!;


        /// <summary>
        /// Create a BuildFolderPermissions resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BuildFolderPermissions(string name, BuildFolderPermissionsArgs args, CustomResourceOptions? options = null)
            : base("azuredevops:index/buildFolderPermissions:BuildFolderPermissions", name, args ?? new BuildFolderPermissionsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BuildFolderPermissions(string name, Input<string> id, BuildFolderPermissionsState? state = null, CustomResourceOptions? options = null)
            : base("azuredevops:index/buildFolderPermissions:BuildFolderPermissions", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BuildFolderPermissions resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BuildFolderPermissions Get(string name, Input<string> id, BuildFolderPermissionsState? state = null, CustomResourceOptions? options = null)
        {
            return new BuildFolderPermissions(name, id, state, options);
        }
    }

    public sealed class BuildFolderPermissionsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The folder path to assign the permissions.
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        [Input("permissions", required: true)]
        private InputMap<string>? _permissions;

        /// <summary>
        /// the permissions to assign. The following permissions are available.
        /// 
        /// | Permission                     | Description                           |
        /// |--------------------------------|---------------------------------------|
        /// | ViewBuilds                     | View builds                           |
        /// | EditBuildQuality               | Edit build quality                    |
        /// | RetainIndefinitely             | Retain indefinitely                   |
        /// | DeleteBuilds                   | Delete builds                         |
        /// | ManageBuildQualities           | Manage build qualities                |
        /// | DestroyBuilds                  | Destroy builds                        |
        /// | UpdateBuildInformation         | Update build information              |
        /// | QueueBuilds                    | Queue builds                          |
        /// | ManageBuildQueue               | Manage build queue                    |
        /// | StopBuilds                     | Stop builds                           |
        /// | ViewBuildDefinition            | View build pipeline                   |
        /// | EditBuildDefinition            | Edit build pipeline                   |
        /// | DeleteBuildDefinition          | Delete build pipeline                 |
        /// | OverrideBuildCheckInValidation | Override check-in validation by build |
        /// | AdministerBuildPermissions     | Administer build permissions          |
        /// </summary>
        public InputMap<string> Permissions
        {
            get => _permissions ?? (_permissions = new InputMap<string>());
            set => _permissions = value;
        }

        /// <summary>
        /// The **group** principal to assign the permissions.
        /// </summary>
        [Input("principal", required: true)]
        public Input<string> Principal { get; set; } = null!;

        /// <summary>
        /// The ID of the project to assign the permissions.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Replace (`true`) or merge (`false`) the permissions. Default: `true`.
        /// </summary>
        [Input("replace")]
        public Input<bool>? Replace { get; set; }

        public BuildFolderPermissionsArgs()
        {
        }
        public static new BuildFolderPermissionsArgs Empty => new BuildFolderPermissionsArgs();
    }

    public sealed class BuildFolderPermissionsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The folder path to assign the permissions.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        [Input("permissions")]
        private InputMap<string>? _permissions;

        /// <summary>
        /// the permissions to assign. The following permissions are available.
        /// 
        /// | Permission                     | Description                           |
        /// |--------------------------------|---------------------------------------|
        /// | ViewBuilds                     | View builds                           |
        /// | EditBuildQuality               | Edit build quality                    |
        /// | RetainIndefinitely             | Retain indefinitely                   |
        /// | DeleteBuilds                   | Delete builds                         |
        /// | ManageBuildQualities           | Manage build qualities                |
        /// | DestroyBuilds                  | Destroy builds                        |
        /// | UpdateBuildInformation         | Update build information              |
        /// | QueueBuilds                    | Queue builds                          |
        /// | ManageBuildQueue               | Manage build queue                    |
        /// | StopBuilds                     | Stop builds                           |
        /// | ViewBuildDefinition            | View build pipeline                   |
        /// | EditBuildDefinition            | Edit build pipeline                   |
        /// | DeleteBuildDefinition          | Delete build pipeline                 |
        /// | OverrideBuildCheckInValidation | Override check-in validation by build |
        /// | AdministerBuildPermissions     | Administer build permissions          |
        /// </summary>
        public InputMap<string> Permissions
        {
            get => _permissions ?? (_permissions = new InputMap<string>());
            set => _permissions = value;
        }

        /// <summary>
        /// The **group** principal to assign the permissions.
        /// </summary>
        [Input("principal")]
        public Input<string>? Principal { get; set; }

        /// <summary>
        /// The ID of the project to assign the permissions.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Replace (`true`) or merge (`false`) the permissions. Default: `true`.
        /// </summary>
        [Input("replace")]
        public Input<bool>? Replace { get; set; }

        public BuildFolderPermissionsState()
        {
        }
        public static new BuildFolderPermissionsState Empty => new BuildFolderPermissionsState();
    }
}
