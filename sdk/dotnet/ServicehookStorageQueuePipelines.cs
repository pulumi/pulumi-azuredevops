// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureDevOps
{
    /// <summary>
    /// Manages a Service Hook Storage Queue Pipelines.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// using AzureDevOps = Pulumi.AzureDevOps;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new AzureDevOps.Project("example", new()
    ///     {
    ///         Name = "example-project",
    ///     });
    /// 
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-resources",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("example", new()
    ///     {
    ///         Name = "servicehookexamplestacc",
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "LRS",
    ///     });
    /// 
    ///     var exampleQueue = new Azure.Storage.Queue("example", new()
    ///     {
    ///         Name = "examplequeue",
    ///         StorageAccountName = exampleAccount.Name,
    ///     });
    /// 
    ///     var exampleServicehookStorageQueuePipelines = new AzureDevOps.ServicehookStorageQueuePipelines("example", new()
    ///     {
    ///         ProjectId = example.Id,
    ///         AccountName = exampleAccount.Name,
    ///         AccountKey = exampleAccount.PrimaryAccessKey,
    ///         QueueName = exampleQueue.Name,
    ///         VisiTimeout = 30,
    ///         RunStateChangedEvent = new AzureDevOps.Inputs.ServicehookStorageQueuePipelinesRunStateChangedEventArgs
    ///         {
    ///             RunStateFilter = "Completed",
    ///             RunResultFilter = "Succeeded",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// An empty configuration block will occur in all events triggering the associated action.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AzureDevOps = Pulumi.AzureDevOps;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new AzureDevOps.ServicehookStorageQueuePipelines("example", new()
    ///     {
    ///         ProjectId = exampleAzuredevopsProject.Id,
    ///         AccountName = exampleAzurermStorageAccount.Name,
    ///         AccountKey = exampleAzurermStorageAccount.PrimaryAccessKey,
    ///         QueueName = exampleAzurermStorageQueue.Name,
    ///         VisiTimeout = 30,
    ///         RunStateChangedEvent = null,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Service Hook Storage Queue Pipeliness can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azuredevops:index/servicehookStorageQueuePipelines:ServicehookStorageQueuePipelines example 00000000-0000-0000-0000-000000000000
    /// ```
    /// </summary>
    [AzureDevOpsResourceType("azuredevops:index/servicehookStorageQueuePipelines:ServicehookStorageQueuePipelines")]
    public partial class ServicehookStorageQueuePipelines : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A valid account key from the queue's storage account.
        /// </summary>
        [Output("accountKey")]
        public Output<string> AccountKey { get; private set; } = null!;

        /// <summary>
        /// The queue's storage account name.
        /// </summary>
        [Output("accountName")]
        public Output<string> AccountName { get; private set; } = null!;

        /// <summary>
        /// The ID of the associated project. Changing this forces a new Service Hook Storage Queue Pipelines to be created.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The name of the queue that will store the events.
        /// </summary>
        [Output("queueName")]
        public Output<string> QueueName { get; private set; } = null!;

        /// <summary>
        /// A `run_state_changed_event` block as defined below. Conflicts with `stage_state_changed_event`
        /// </summary>
        [Output("runStateChangedEvent")]
        public Output<Outputs.ServicehookStorageQueuePipelinesRunStateChangedEvent?> RunStateChangedEvent { get; private set; } = null!;

        /// <summary>
        /// A `stage_state_changed_event` block as defined below. Conflicts with `run_state_changed_event`
        /// 
        /// &gt; **Note** At least one of `run_state_changed_event` and `stage_state_changed_event` has to be set.
        /// </summary>
        [Output("stageStateChangedEvent")]
        public Output<Outputs.ServicehookStorageQueuePipelinesStageStateChangedEvent?> StageStateChangedEvent { get; private set; } = null!;

        /// <summary>
        /// event time-to-live - the duration a message can remain in the queue before it's automatically removed. Defaults to `604800`.
        /// </summary>
        [Output("ttl")]
        public Output<int?> Ttl { get; private set; } = null!;

        /// <summary>
        /// event visibility timout - how long a message is invisible to other consumers after it's been dequeued. Defaults to `0`.
        /// </summary>
        [Output("visiTimeout")]
        public Output<int?> VisiTimeout { get; private set; } = null!;


        /// <summary>
        /// Create a ServicehookStorageQueuePipelines resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServicehookStorageQueuePipelines(string name, ServicehookStorageQueuePipelinesArgs args, CustomResourceOptions? options = null)
            : base("azuredevops:index/servicehookStorageQueuePipelines:ServicehookStorageQueuePipelines", name, args ?? new ServicehookStorageQueuePipelinesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServicehookStorageQueuePipelines(string name, Input<string> id, ServicehookStorageQueuePipelinesState? state = null, CustomResourceOptions? options = null)
            : base("azuredevops:index/servicehookStorageQueuePipelines:ServicehookStorageQueuePipelines", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "accountKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServicehookStorageQueuePipelines resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServicehookStorageQueuePipelines Get(string name, Input<string> id, ServicehookStorageQueuePipelinesState? state = null, CustomResourceOptions? options = null)
        {
            return new ServicehookStorageQueuePipelines(name, id, state, options);
        }
    }

    public sealed class ServicehookStorageQueuePipelinesArgs : global::Pulumi.ResourceArgs
    {
        [Input("accountKey", required: true)]
        private Input<string>? _accountKey;

        /// <summary>
        /// A valid account key from the queue's storage account.
        /// </summary>
        public Input<string>? AccountKey
        {
            get => _accountKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _accountKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The queue's storage account name.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// The ID of the associated project. Changing this forces a new Service Hook Storage Queue Pipelines to be created.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// The name of the queue that will store the events.
        /// </summary>
        [Input("queueName", required: true)]
        public Input<string> QueueName { get; set; } = null!;

        /// <summary>
        /// A `run_state_changed_event` block as defined below. Conflicts with `stage_state_changed_event`
        /// </summary>
        [Input("runStateChangedEvent")]
        public Input<Inputs.ServicehookStorageQueuePipelinesRunStateChangedEventArgs>? RunStateChangedEvent { get; set; }

        /// <summary>
        /// A `stage_state_changed_event` block as defined below. Conflicts with `run_state_changed_event`
        /// 
        /// &gt; **Note** At least one of `run_state_changed_event` and `stage_state_changed_event` has to be set.
        /// </summary>
        [Input("stageStateChangedEvent")]
        public Input<Inputs.ServicehookStorageQueuePipelinesStageStateChangedEventArgs>? StageStateChangedEvent { get; set; }

        /// <summary>
        /// event time-to-live - the duration a message can remain in the queue before it's automatically removed. Defaults to `604800`.
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        /// <summary>
        /// event visibility timout - how long a message is invisible to other consumers after it's been dequeued. Defaults to `0`.
        /// </summary>
        [Input("visiTimeout")]
        public Input<int>? VisiTimeout { get; set; }

        public ServicehookStorageQueuePipelinesArgs()
        {
        }
        public static new ServicehookStorageQueuePipelinesArgs Empty => new ServicehookStorageQueuePipelinesArgs();
    }

    public sealed class ServicehookStorageQueuePipelinesState : global::Pulumi.ResourceArgs
    {
        [Input("accountKey")]
        private Input<string>? _accountKey;

        /// <summary>
        /// A valid account key from the queue's storage account.
        /// </summary>
        public Input<string>? AccountKey
        {
            get => _accountKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _accountKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The queue's storage account name.
        /// </summary>
        [Input("accountName")]
        public Input<string>? AccountName { get; set; }

        /// <summary>
        /// The ID of the associated project. Changing this forces a new Service Hook Storage Queue Pipelines to be created.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The name of the queue that will store the events.
        /// </summary>
        [Input("queueName")]
        public Input<string>? QueueName { get; set; }

        /// <summary>
        /// A `run_state_changed_event` block as defined below. Conflicts with `stage_state_changed_event`
        /// </summary>
        [Input("runStateChangedEvent")]
        public Input<Inputs.ServicehookStorageQueuePipelinesRunStateChangedEventGetArgs>? RunStateChangedEvent { get; set; }

        /// <summary>
        /// A `stage_state_changed_event` block as defined below. Conflicts with `run_state_changed_event`
        /// 
        /// &gt; **Note** At least one of `run_state_changed_event` and `stage_state_changed_event` has to be set.
        /// </summary>
        [Input("stageStateChangedEvent")]
        public Input<Inputs.ServicehookStorageQueuePipelinesStageStateChangedEventGetArgs>? StageStateChangedEvent { get; set; }

        /// <summary>
        /// event time-to-live - the duration a message can remain in the queue before it's automatically removed. Defaults to `604800`.
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        /// <summary>
        /// event visibility timout - how long a message is invisible to other consumers after it's been dequeued. Defaults to `0`.
        /// </summary>
        [Input("visiTimeout")]
        public Input<int>? VisiTimeout { get; set; }

        public ServicehookStorageQueuePipelinesState()
        {
        }
        public static new ServicehookStorageQueuePipelinesState Empty => new ServicehookStorageQueuePipelinesState();
    }
}
