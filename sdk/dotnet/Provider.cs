// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureDevOps
{
    /// <summary>
    /// The provider type for the azuredevops package. By default, resources use package-wide configuration
    /// settings, however an explicit `Provider` instance may be created and passed during resource
    /// construction to achieve fine-grained programmatic control over provider settings. See the
    /// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
    /// </summary>
    [AzureDevOpsResourceType("pulumi:providers:azuredevops")]
    public partial class Provider : global::Pulumi.ProviderResource
    {
        /// <summary>
        /// Base64 encoded certificate to use to authenticate to the service principal.
        /// </summary>
        [Output("clientCertificate")]
        public Output<string?> ClientCertificate { get; private set; } = null!;

        /// <summary>
        /// Password for a client certificate password.
        /// </summary>
        [Output("clientCertificatePassword")]
        public Output<string?> ClientCertificatePassword { get; private set; } = null!;

        /// <summary>
        /// Path to a certificate to use to authenticate to the service principal.
        /// </summary>
        [Output("clientCertificatePath")]
        public Output<string?> ClientCertificatePath { get; private set; } = null!;

        /// <summary>
        /// The service principal client or managed service principal id which should be used.
        /// </summary>
        [Output("clientId")]
        public Output<string?> ClientId { get; private set; } = null!;

        [Output("clientIdApply")]
        public Output<string?> ClientIdApply { get; private set; } = null!;

        [Output("clientIdPlan")]
        public Output<string?> ClientIdPlan { get; private set; } = null!;

        /// <summary>
        /// Client secret for authenticating to a service principal.
        /// </summary>
        [Output("clientSecret")]
        public Output<string?> ClientSecret { get; private set; } = null!;

        /// <summary>
        /// Path to a file containing a client secret for authenticating to a service principal.
        /// </summary>
        [Output("clientSecretPath")]
        public Output<string?> ClientSecretPath { get; private set; } = null!;

        /// <summary>
        /// Set the audience when requesting OIDC tokens.
        /// </summary>
        [Output("oidcAudience")]
        public Output<string?> OidcAudience { get; private set; } = null!;

        /// <summary>
        /// The bearer token for the request to the OIDC provider. For use when authenticating as a Service Principal using OpenID
        /// Connect.
        /// </summary>
        [Output("oidcRequestToken")]
        public Output<string?> OidcRequestToken { get; private set; } = null!;

        /// <summary>
        /// The URL for the OIDC provider from which to request an ID token. For use when authenticating as a Service Principal
        /// using OpenID Connect.
        /// </summary>
        [Output("oidcRequestUrl")]
        public Output<string?> OidcRequestUrl { get; private set; } = null!;

        [Output("oidcTfcTag")]
        public Output<string?> OidcTfcTag { get; private set; } = null!;

        /// <summary>
        /// OIDC token to authenticate as a service principal.
        /// </summary>
        [Output("oidcToken")]
        public Output<string?> OidcToken { get; private set; } = null!;

        /// <summary>
        /// OIDC token from file to authenticate as a service principal.
        /// </summary>
        [Output("oidcTokenFilePath")]
        public Output<string?> OidcTokenFilePath { get; private set; } = null!;

        /// <summary>
        /// The url of the Azure DevOps instance which should be used.
        /// </summary>
        [Output("orgServiceUrl")]
        public Output<string?> OrgServiceUrl { get; private set; } = null!;

        /// <summary>
        /// The personal access token which should be used.
        /// </summary>
        [Output("personalAccessToken")]
        public Output<string?> PersonalAccessToken { get; private set; } = null!;

        /// <summary>
        /// The service principal tenant id which should be used.
        /// </summary>
        [Output("tenantId")]
        public Output<string?> TenantId { get; private set; } = null!;

        [Output("tenantIdApply")]
        public Output<string?> TenantIdApply { get; private set; } = null!;

        [Output("tenantIdPlan")]
        public Output<string?> TenantIdPlan { get; private set; } = null!;


        /// <summary>
        /// Create a Provider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Provider(string name, ProviderArgs? args = null, CustomResourceOptions? options = null)
            : base("azuredevops", name, args ?? new ProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "clientCertificate",
                    "clientCertificatePassword",
                    "clientSecret",
                    "oidcToken",
                    "personalAccessToken",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }

        /// <summary>
        /// This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
        /// </summary>
        public global::Pulumi.Output<ProviderTerraformConfigResult> TerraformConfig()
            => global::Pulumi.Deployment.Instance.Call<ProviderTerraformConfigResult>("pulumi:providers:azuredevops/terraformConfig", CallArgs.Empty, this);
    }

    public sealed class ProviderArgs : global::Pulumi.ResourceArgs
    {
        [Input("clientCertificate")]
        private Input<string>? _clientCertificate;

        /// <summary>
        /// Base64 encoded certificate to use to authenticate to the service principal.
        /// </summary>
        public Input<string>? ClientCertificate
        {
            get => _clientCertificate;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientCertificate = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("clientCertificatePassword")]
        private Input<string>? _clientCertificatePassword;

        /// <summary>
        /// Password for a client certificate password.
        /// </summary>
        public Input<string>? ClientCertificatePassword
        {
            get => _clientCertificatePassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientCertificatePassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Path to a certificate to use to authenticate to the service principal.
        /// </summary>
        [Input("clientCertificatePath")]
        public Input<string>? ClientCertificatePath { get; set; }

        /// <summary>
        /// The service principal client or managed service principal id which should be used.
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        [Input("clientIdApply")]
        public Input<string>? ClientIdApply { get; set; }

        [Input("clientIdPlan")]
        public Input<string>? ClientIdPlan { get; set; }

        [Input("clientSecret")]
        private Input<string>? _clientSecret;

        /// <summary>
        /// Client secret for authenticating to a service principal.
        /// </summary>
        public Input<string>? ClientSecret
        {
            get => _clientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Path to a file containing a client secret for authenticating to a service principal.
        /// </summary>
        [Input("clientSecretPath")]
        public Input<string>? ClientSecretPath { get; set; }

        /// <summary>
        /// Set the audience when requesting OIDC tokens.
        /// </summary>
        [Input("oidcAudience")]
        public Input<string>? OidcAudience { get; set; }

        /// <summary>
        /// The bearer token for the request to the OIDC provider. For use when authenticating as a Service Principal using OpenID
        /// Connect.
        /// </summary>
        [Input("oidcRequestToken")]
        public Input<string>? OidcRequestToken { get; set; }

        /// <summary>
        /// The URL for the OIDC provider from which to request an ID token. For use when authenticating as a Service Principal
        /// using OpenID Connect.
        /// </summary>
        [Input("oidcRequestUrl")]
        public Input<string>? OidcRequestUrl { get; set; }

        [Input("oidcTfcTag")]
        public Input<string>? OidcTfcTag { get; set; }

        [Input("oidcToken")]
        private Input<string>? _oidcToken;

        /// <summary>
        /// OIDC token to authenticate as a service principal.
        /// </summary>
        public Input<string>? OidcToken
        {
            get => _oidcToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _oidcToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// OIDC token from file to authenticate as a service principal.
        /// </summary>
        [Input("oidcTokenFilePath")]
        public Input<string>? OidcTokenFilePath { get; set; }

        /// <summary>
        /// The url of the Azure DevOps instance which should be used.
        /// </summary>
        [Input("orgServiceUrl")]
        public Input<string>? OrgServiceUrl { get; set; }

        [Input("personalAccessToken")]
        private Input<string>? _personalAccessToken;

        /// <summary>
        /// The personal access token which should be used.
        /// </summary>
        public Input<string>? PersonalAccessToken
        {
            get => _personalAccessToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _personalAccessToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The service principal tenant id which should be used.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        [Input("tenantIdApply")]
        public Input<string>? TenantIdApply { get; set; }

        [Input("tenantIdPlan")]
        public Input<string>? TenantIdPlan { get; set; }

        /// <summary>
        /// Use an Azure Managed Service Identity.
        /// </summary>
        [Input("useMsi", json: true)]
        public Input<bool>? UseMsi { get; set; }

        /// <summary>
        /// Use an OIDC token to authenticate to a service principal.
        /// </summary>
        [Input("useOidc", json: true)]
        public Input<bool>? UseOidc { get; set; }

        public ProviderArgs()
        {
            OrgServiceUrl = Utilities.GetEnv("AZDO_ORG_SERVICE_URL");
        }
        public static new ProviderArgs Empty => new ProviderArgs();
    }

    /// <summary>
    /// The results of the <see cref="Provider.TerraformConfig"/> method.
    /// </summary>
    [OutputType]
    public sealed class ProviderTerraformConfigResult
    {
        public readonly ImmutableDictionary<string, object> Result;

        [OutputConstructor]
        private ProviderTerraformConfigResult(ImmutableDictionary<string, object> result)
        {
            Result = result;
        }
    }
}
