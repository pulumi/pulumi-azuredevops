// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureDevOps
{
    public static class GetUser
    {
        /// <summary>
        /// Use this data source to access information about an existing user within Azure DevOps.
        /// 
        /// ~&gt;**NOTE:** If you only have the Storage Key(UUID) of the user, you can use `azuredevops.getDescriptor` to resolve the Storage Key(UUID) to a `Descriptor`.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AzureDevOps = Pulumi.AzureDevOps;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = AzureDevOps.GetUser.Invoke(new()
        ///     {
        ///         Descriptor = "descriptor",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Relevant Links
        /// 
        /// - [Azure DevOps Service REST API 7.1 - Graph Users API](https://learn.microsoft.com/en-us/rest/api/azure/devops/graph/users/get?view=azure-devops-rest-7.1)
        /// </summary>
        public static Task<GetUserResult> InvokeAsync(GetUserArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUserResult>("azuredevops:index/getUser:getUser", args ?? new GetUserArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing user within Azure DevOps.
        /// 
        /// ~&gt;**NOTE:** If you only have the Storage Key(UUID) of the user, you can use `azuredevops.getDescriptor` to resolve the Storage Key(UUID) to a `Descriptor`.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AzureDevOps = Pulumi.AzureDevOps;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = AzureDevOps.GetUser.Invoke(new()
        ///     {
        ///         Descriptor = "descriptor",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Relevant Links
        /// 
        /// - [Azure DevOps Service REST API 7.1 - Graph Users API](https://learn.microsoft.com/en-us/rest/api/azure/devops/graph/users/get?view=azure-devops-rest-7.1)
        /// </summary>
        public static Output<GetUserResult> Invoke(GetUserInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserResult>("azuredevops:index/getUser:getUser", args ?? new GetUserInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing user within Azure DevOps.
        /// 
        /// ~&gt;**NOTE:** If you only have the Storage Key(UUID) of the user, you can use `azuredevops.getDescriptor` to resolve the Storage Key(UUID) to a `Descriptor`.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AzureDevOps = Pulumi.AzureDevOps;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = AzureDevOps.GetUser.Invoke(new()
        ///     {
        ///         Descriptor = "descriptor",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Relevant Links
        /// 
        /// - [Azure DevOps Service REST API 7.1 - Graph Users API](https://learn.microsoft.com/en-us/rest/api/azure/devops/graph/users/get?view=azure-devops-rest-7.1)
        /// </summary>
        public static Output<GetUserResult> Invoke(GetUserInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserResult>("azuredevops:index/getUser:getUser", args ?? new GetUserInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUserArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The descriptor of the user.
        /// </summary>
        [Input("descriptor", required: true)]
        public string Descriptor { get; set; } = null!;

        public GetUserArgs()
        {
        }
        public static new GetUserArgs Empty => new GetUserArgs();
    }

    public sealed class GetUserInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The descriptor of the user.
        /// </summary>
        [Input("descriptor", required: true)]
        public Input<string> Descriptor { get; set; } = null!;

        public GetUserInvokeArgs()
        {
        }
        public static new GetUserInvokeArgs Empty => new GetUserInvokeArgs();
    }


    [OutputType]
    public sealed class GetUserResult
    {
        public readonly string Descriptor;
        /// <summary>
        /// The display name of the User.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// The domain of the user.
        /// </summary>
        public readonly string Domain;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The email address of the user.
        /// </summary>
        public readonly string MailAddress;
        /// <summary>
        /// The type of source provider for the origin identifier (ex:`AD`, `AAD`, `MSA`).
        /// </summary>
        public readonly string Origin;
        /// <summary>
        /// The origin ID of the user.
        /// </summary>
        public readonly string OriginId;
        /// <summary>
        /// The principal name of the user.
        /// </summary>
        public readonly string PrincipalName;
        /// <summary>
        /// The subject kind of the user (ex: `Group`, `Scope`, `User`).
        /// </summary>
        public readonly string SubjectKind;

        [OutputConstructor]
        private GetUserResult(
            string descriptor,

            string displayName,

            string domain,

            string id,

            string mailAddress,

            string origin,

            string originId,

            string principalName,

            string subjectKind)
        {
            Descriptor = descriptor;
            DisplayName = displayName;
            Domain = domain;
            Id = id;
            MailAddress = mailAddress;
            Origin = origin;
            OriginId = originId;
            PrincipalName = principalName;
            SubjectKind = subjectKind;
        }
    }
}
