// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureDevOps
{
    /// <summary>
    /// Manages a Build Folder.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AzureDevOps = Pulumi.AzureDevOps;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleProject = new AzureDevOps.Project("exampleProject", new()
    ///     {
    ///         Visibility = "private",
    ///         VersionControl = "Git",
    ///         WorkItemTemplate = "Agile",
    ///     });
    /// 
    ///     var exampleBuildFolder = new AzureDevOps.BuildFolder("exampleBuildFolder", new()
    ///     {
    ///         ProjectId = exampleProject.Id,
    ///         Path = "\\ExampleFolder",
    ///         Description = "ExampleFolder description",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Build Folders can be imported using the `project name/path` or `project id/path`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azuredevops:index/buildFolder:BuildFolder example "Example Project/\\ExampleFolder"
    /// ```
    /// 
    ///  or
    /// 
    /// ```sh
    /// $ pulumi import azuredevops:index/buildFolder:BuildFolder example 00000000-0000-0000-0000-000000000000/\\ExampleFolder
    /// ```
    /// </summary>
    [AzureDevOpsResourceType("azuredevops:index/buildFolder:BuildFolder")]
    public partial class BuildFolder : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Folder Description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The folder path.
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        /// <summary>
        /// The ID of the project in which the folder will be created.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;


        /// <summary>
        /// Create a BuildFolder resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BuildFolder(string name, BuildFolderArgs args, CustomResourceOptions? options = null)
            : base("azuredevops:index/buildFolder:BuildFolder", name, args ?? new BuildFolderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BuildFolder(string name, Input<string> id, BuildFolderState? state = null, CustomResourceOptions? options = null)
            : base("azuredevops:index/buildFolder:BuildFolder", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BuildFolder resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BuildFolder Get(string name, Input<string> id, BuildFolderState? state = null, CustomResourceOptions? options = null)
        {
            return new BuildFolder(name, id, state, options);
        }
    }

    public sealed class BuildFolderArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Folder Description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The folder path.
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        /// <summary>
        /// The ID of the project in which the folder will be created.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public BuildFolderArgs()
        {
        }
        public static new BuildFolderArgs Empty => new BuildFolderArgs();
    }

    public sealed class BuildFolderState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Folder Description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The folder path.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// The ID of the project in which the folder will be created.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public BuildFolderState()
        {
        }
        public static new BuildFolderState Empty => new BuildFolderState();
    }
}
