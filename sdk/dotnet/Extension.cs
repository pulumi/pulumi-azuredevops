// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureDevOps
{
    /// <summary>
    /// Manages extension within Azure DevOps organization.
    /// 
    /// ## Example Usage
    /// 
    /// ### Install Extension
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AzureDevOps = Pulumi.AzureDevOps;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new AzureDevOps.Extension("example", new()
    ///     {
    ///         ExtensionId = "extension ID",
    ///         PublisherId = "publisher ID",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Relevant Links
    /// 
    /// - [Azure DevOps Service REST API 7.1 - Extension Management](https://learn.microsoft.com/en-us/rest/api/azure/devops/extensionmanagement/installed-extensions?view=azure-devops-rest-7.1)
    /// 
    /// ## Import
    /// 
    /// Azure DevOps Extension can be imported using the publisher ID and extension ID:
    /// 
    /// ```sh
    /// $ pulumi import azuredevops:index/extension:Extension example publisherId/extensionId
    /// ```
    /// </summary>
    [AzureDevOpsResourceType("azuredevops:index/extension:Extension")]
    public partial class Extension : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether to disable the extension.
        /// </summary>
        [Output("disabled")]
        public Output<bool> Disabled { get; private set; } = null!;

        /// <summary>
        /// The publisher ID of the extension.
        /// </summary>
        [Output("extensionId")]
        public Output<string> ExtensionId { get; private set; } = null!;

        /// <summary>
        /// The name of the extension.
        /// </summary>
        [Output("extensionName")]
        public Output<string> ExtensionName { get; private set; } = null!;

        /// <summary>
        /// The extension ID of the extension.
        /// </summary>
        [Output("publisherId")]
        public Output<string> PublisherId { get; private set; } = null!;

        /// <summary>
        /// The name of the publisher.
        /// </summary>
        [Output("publisherName")]
        public Output<string> PublisherName { get; private set; } = null!;

        /// <summary>
        /// List of all oauth scopes required by this extension.
        /// </summary>
        [Output("scopes")]
        public Output<ImmutableArray<string>> Scopes { get; private set; } = null!;

        /// <summary>
        /// The version of the extension.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a Extension resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Extension(string name, ExtensionArgs args, CustomResourceOptions? options = null)
            : base("azuredevops:index/extension:Extension", name, args ?? new ExtensionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Extension(string name, Input<string> id, ExtensionState? state = null, CustomResourceOptions? options = null)
            : base("azuredevops:index/extension:Extension", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Extension resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Extension Get(string name, Input<string> id, ExtensionState? state = null, CustomResourceOptions? options = null)
        {
            return new Extension(name, id, state, options);
        }
    }

    public sealed class ExtensionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to disable the extension.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// The publisher ID of the extension.
        /// </summary>
        [Input("extensionId", required: true)]
        public Input<string> ExtensionId { get; set; } = null!;

        /// <summary>
        /// The extension ID of the extension.
        /// </summary>
        [Input("publisherId", required: true)]
        public Input<string> PublisherId { get; set; } = null!;

        /// <summary>
        /// The version of the extension.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public ExtensionArgs()
        {
        }
        public static new ExtensionArgs Empty => new ExtensionArgs();
    }

    public sealed class ExtensionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to disable the extension.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// The publisher ID of the extension.
        /// </summary>
        [Input("extensionId")]
        public Input<string>? ExtensionId { get; set; }

        /// <summary>
        /// The name of the extension.
        /// </summary>
        [Input("extensionName")]
        public Input<string>? ExtensionName { get; set; }

        /// <summary>
        /// The extension ID of the extension.
        /// </summary>
        [Input("publisherId")]
        public Input<string>? PublisherId { get; set; }

        /// <summary>
        /// The name of the publisher.
        /// </summary>
        [Input("publisherName")]
        public Input<string>? PublisherName { get; set; }

        [Input("scopes")]
        private InputList<string>? _scopes;

        /// <summary>
        /// List of all oauth scopes required by this extension.
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        /// <summary>
        /// The version of the extension.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public ExtensionState()
        {
        }
        public static new ExtensionState Empty => new ExtensionState();
    }
}
