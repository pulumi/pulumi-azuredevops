// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureDevOps
{
    public static class GetDescriptor
    {
        /// <summary>
        /// Use this data source to access information about an existing Descriptor.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AzureDevOps = Pulumi.AzureDevOps;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = AzureDevOps.GetDescriptor.Invoke(new()
        ///     {
        ///         StorageKey = "00000000-0000-0000-0000-000000000000",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getDescriptorResult =&gt; getDescriptorResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ## Relevant Links
        /// 
        /// - [Azure DevOps Service REST API 7.1 - Descriptors - Get](https://learn.microsoft.com/en-us/rest/api/azure/devops/graph/descriptors/get?view=azure-devops-rest-7.1)
        /// </summary>
        public static Task<GetDescriptorResult> InvokeAsync(GetDescriptorArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDescriptorResult>("azuredevops:index/getDescriptor:getDescriptor", args ?? new GetDescriptorArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Descriptor.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AzureDevOps = Pulumi.AzureDevOps;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = AzureDevOps.GetDescriptor.Invoke(new()
        ///     {
        ///         StorageKey = "00000000-0000-0000-0000-000000000000",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getDescriptorResult =&gt; getDescriptorResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ## Relevant Links
        /// 
        /// - [Azure DevOps Service REST API 7.1 - Descriptors - Get](https://learn.microsoft.com/en-us/rest/api/azure/devops/graph/descriptors/get?view=azure-devops-rest-7.1)
        /// </summary>
        public static Output<GetDescriptorResult> Invoke(GetDescriptorInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDescriptorResult>("azuredevops:index/getDescriptor:getDescriptor", args ?? new GetDescriptorInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Descriptor.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AzureDevOps = Pulumi.AzureDevOps;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = AzureDevOps.GetDescriptor.Invoke(new()
        ///     {
        ///         StorageKey = "00000000-0000-0000-0000-000000000000",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getDescriptorResult =&gt; getDescriptorResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ## Relevant Links
        /// 
        /// - [Azure DevOps Service REST API 7.1 - Descriptors - Get](https://learn.microsoft.com/en-us/rest/api/azure/devops/graph/descriptors/get?view=azure-devops-rest-7.1)
        /// </summary>
        public static Output<GetDescriptorResult> Invoke(GetDescriptorInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDescriptorResult>("azuredevops:index/getDescriptor:getDescriptor", args ?? new GetDescriptorInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDescriptorArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the resource(`user`, `group`, `scope`, etc.) that will be resolved to a descriptor.
        /// </summary>
        [Input("storageKey", required: true)]
        public string StorageKey { get; set; } = null!;

        public GetDescriptorArgs()
        {
        }
        public static new GetDescriptorArgs Empty => new GetDescriptorArgs();
    }

    public sealed class GetDescriptorInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the resource(`user`, `group`, `scope`, etc.) that will be resolved to a descriptor.
        /// </summary>
        [Input("storageKey", required: true)]
        public Input<string> StorageKey { get; set; } = null!;

        public GetDescriptorInvokeArgs()
        {
        }
        public static new GetDescriptorInvokeArgs Empty => new GetDescriptorInvokeArgs();
    }


    [OutputType]
    public sealed class GetDescriptorResult
    {
        /// <summary>
        /// The descriptor of the storage key.
        /// </summary>
        public readonly string Descriptor;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string StorageKey;

        [OutputConstructor]
        private GetDescriptorResult(
            string descriptor,

            string id,

            string storageKey)
        {
            Descriptor = descriptor;
            Id = id;
            StorageKey = storageKey;
        }
    }
}
