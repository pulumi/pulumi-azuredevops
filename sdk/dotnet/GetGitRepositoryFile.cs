// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureDevOps
{
    public static class GetGitRepositoryFile
    {
        /// <summary>
        /// Use this data source to get an existing Git Repository File.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AzureDevOps = Pulumi.AzureDevOps;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = AzureDevOps.GetProject.Invoke(new()
        ///     {
        ///         Name = "Example Project",
        ///     });
        /// 
        ///     // Load a specific Git repository by name
        ///     var exampleGetGitRepository = AzureDevOps.GetGitRepository.Invoke(new()
        ///     {
        ///         ProjectId = example.Apply(getProjectResult =&gt; getProjectResult.Id),
        ///         Name = "Example Repository",
        ///     });
        /// 
        ///     var exampleGetGitRepositoryFile = AzureDevOps.GetGitRepositoryFile.Invoke(new()
        ///     {
        ///         RepositoryId = exampleGetGitRepository.Apply(getGitRepositoryResult =&gt; getGitRepositoryResult.Id),
        ///         Branch = "refs/heads/main",
        ///         File = "MyFile.txt",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetGitRepositoryFileResult> InvokeAsync(GetGitRepositoryFileArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGitRepositoryFileResult>("azuredevops:index/getGitRepositoryFile:getGitRepositoryFile", args ?? new GetGitRepositoryFileArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get an existing Git Repository File.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AzureDevOps = Pulumi.AzureDevOps;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = AzureDevOps.GetProject.Invoke(new()
        ///     {
        ///         Name = "Example Project",
        ///     });
        /// 
        ///     // Load a specific Git repository by name
        ///     var exampleGetGitRepository = AzureDevOps.GetGitRepository.Invoke(new()
        ///     {
        ///         ProjectId = example.Apply(getProjectResult =&gt; getProjectResult.Id),
        ///         Name = "Example Repository",
        ///     });
        /// 
        ///     var exampleGetGitRepositoryFile = AzureDevOps.GetGitRepositoryFile.Invoke(new()
        ///     {
        ///         RepositoryId = exampleGetGitRepository.Apply(getGitRepositoryResult =&gt; getGitRepositoryResult.Id),
        ///         Branch = "refs/heads/main",
        ///         File = "MyFile.txt",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetGitRepositoryFileResult> Invoke(GetGitRepositoryFileInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGitRepositoryFileResult>("azuredevops:index/getGitRepositoryFile:getGitRepositoryFile", args ?? new GetGitRepositoryFileInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get an existing Git Repository File.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AzureDevOps = Pulumi.AzureDevOps;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = AzureDevOps.GetProject.Invoke(new()
        ///     {
        ///         Name = "Example Project",
        ///     });
        /// 
        ///     // Load a specific Git repository by name
        ///     var exampleGetGitRepository = AzureDevOps.GetGitRepository.Invoke(new()
        ///     {
        ///         ProjectId = example.Apply(getProjectResult =&gt; getProjectResult.Id),
        ///         Name = "Example Repository",
        ///     });
        /// 
        ///     var exampleGetGitRepositoryFile = AzureDevOps.GetGitRepositoryFile.Invoke(new()
        ///     {
        ///         RepositoryId = exampleGetGitRepository.Apply(getGitRepositoryResult =&gt; getGitRepositoryResult.Id),
        ///         Branch = "refs/heads/main",
        ///         File = "MyFile.txt",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetGitRepositoryFileResult> Invoke(GetGitRepositoryFileInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetGitRepositoryFileResult>("azuredevops:index/getGitRepositoryFile:getGitRepositoryFile", args ?? new GetGitRepositoryFileInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGitRepositoryFileArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The git branch to use. Conflicts with `tag`; one or the other must be specified.
        /// </summary>
        [Input("branch")]
        public string? Branch { get; set; }

        /// <summary>
        /// The path of the file to get.
        /// </summary>
        [Input("file", required: true)]
        public string File { get; set; } = null!;

        /// <summary>
        /// The ID of the Git repository.
        /// </summary>
        [Input("repositoryId", required: true)]
        public string RepositoryId { get; set; } = null!;

        /// <summary>
        /// The tag to use.Conflicts with `branch`; one or the other must be specified.
        /// </summary>
        [Input("tag")]
        public string? Tag { get; set; }

        public GetGitRepositoryFileArgs()
        {
        }
        public static new GetGitRepositoryFileArgs Empty => new GetGitRepositoryFileArgs();
    }

    public sealed class GetGitRepositoryFileInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The git branch to use. Conflicts with `tag`; one or the other must be specified.
        /// </summary>
        [Input("branch")]
        public Input<string>? Branch { get; set; }

        /// <summary>
        /// The path of the file to get.
        /// </summary>
        [Input("file", required: true)]
        public Input<string> File { get; set; } = null!;

        /// <summary>
        /// The ID of the Git repository.
        /// </summary>
        [Input("repositoryId", required: true)]
        public Input<string> RepositoryId { get; set; } = null!;

        /// <summary>
        /// The tag to use.Conflicts with `branch`; one or the other must be specified.
        /// </summary>
        [Input("tag")]
        public Input<string>? Tag { get; set; }

        public GetGitRepositoryFileInvokeArgs()
        {
        }
        public static new GetGitRepositoryFileInvokeArgs Empty => new GetGitRepositoryFileInvokeArgs();
    }


    [OutputType]
    public sealed class GetGitRepositoryFileResult
    {
        public readonly string? Branch;
        /// <summary>
        /// The file content.
        /// </summary>
        public readonly string Content;
        public readonly string File;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The commit message for the file.
        /// </summary>
        public readonly string LastCommitMessage;
        public readonly string RepositoryId;
        public readonly string? Tag;

        [OutputConstructor]
        private GetGitRepositoryFileResult(
            string? branch,

            string content,

            string file,

            string id,

            string lastCommitMessage,

            string repositoryId,

            string? tag)
        {
            Branch = branch;
            Content = content;
            File = file;
            Id = id;
            LastCommitMessage = lastCommitMessage;
            RepositoryId = repositoryId;
            Tag = tag;
        }
    }
}
