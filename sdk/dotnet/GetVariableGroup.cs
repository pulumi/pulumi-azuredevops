// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureDevOps
{
    public static class GetVariableGroup
    {
        /// <summary>
        /// Use this data source to access information about existing Variable Groups within Azure DevOps.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using AzureDevOps = Pulumi.AzureDevOps;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var exampleProject = Output.Create(AzureDevOps.GetProject.InvokeAsync(new AzureDevOps.GetProjectArgs
        ///         {
        ///             Name = "Example Project",
        ///         }));
        ///         var exampleVariableGroup = exampleProject.Apply(exampleProject =&gt; Output.Create(AzureDevOps.GetVariableGroup.InvokeAsync(new AzureDevOps.GetVariableGroupArgs
        ///         {
        ///             ProjectId = exampleProject.Id,
        ///             Name = "Example Variable Group",
        ///         })));
        ///         this.Id = exampleVariableGroup.Apply(exampleVariableGroup =&gt; exampleVariableGroup.Id);
        ///     }
        /// 
        ///     [Output("id")]
        ///     public Output&lt;string&gt; Id { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// ## Relevant Links
        /// 
        /// - [Azure DevOps Service REST API 6.0 - Variable Groups](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/variablegroups?view=azure-devops-rest-6.0)
        /// </summary>
        public static Task<GetVariableGroupResult> InvokeAsync(GetVariableGroupArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetVariableGroupResult>("azuredevops:index/getVariableGroup:getVariableGroup", args ?? new GetVariableGroupArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about existing Variable Groups within Azure DevOps.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using AzureDevOps = Pulumi.AzureDevOps;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var exampleProject = Output.Create(AzureDevOps.GetProject.InvokeAsync(new AzureDevOps.GetProjectArgs
        ///         {
        ///             Name = "Example Project",
        ///         }));
        ///         var exampleVariableGroup = exampleProject.Apply(exampleProject =&gt; Output.Create(AzureDevOps.GetVariableGroup.InvokeAsync(new AzureDevOps.GetVariableGroupArgs
        ///         {
        ///             ProjectId = exampleProject.Id,
        ///             Name = "Example Variable Group",
        ///         })));
        ///         this.Id = exampleVariableGroup.Apply(exampleVariableGroup =&gt; exampleVariableGroup.Id);
        ///     }
        /// 
        ///     [Output("id")]
        ///     public Output&lt;string&gt; Id { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// ## Relevant Links
        /// 
        /// - [Azure DevOps Service REST API 6.0 - Variable Groups](https://docs.microsoft.com/en-us/rest/api/azure/devops/distributedtask/variablegroups?view=azure-devops-rest-6.0)
        /// </summary>
        public static Output<GetVariableGroupResult> Invoke(GetVariableGroupInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetVariableGroupResult>("azuredevops:index/getVariableGroup:getVariableGroup", args ?? new GetVariableGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVariableGroupArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Variable Group to retrieve.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The project ID.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        public GetVariableGroupArgs()
        {
        }
    }

    public sealed class GetVariableGroupInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Variable Group to retrieve.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The project ID.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public GetVariableGroupInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetVariableGroupResult
    {
        /// <summary>
        /// Boolean that indicate if this Variable Group is shared by all pipelines of this project.
        /// </summary>
        public readonly bool AllowAccess;
        /// <summary>
        /// The description of the Variable Group.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A list of `key_vault` blocks as documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVariableGroupKeyVaultResult> KeyVaults;
        /// <summary>
        /// The name of the Azure key vault to link secrets from as variables.
        /// </summary>
        public readonly string Name;
        public readonly string ProjectId;
        /// <summary>
        /// One or more `variable` blocks as documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVariableGroupVariableResult> Variables;

        [OutputConstructor]
        private GetVariableGroupResult(
            bool allowAccess,

            string description,

            string id,

            ImmutableArray<Outputs.GetVariableGroupKeyVaultResult> keyVaults,

            string name,

            string projectId,

            ImmutableArray<Outputs.GetVariableGroupVariableResult> variables)
        {
            AllowAccess = allowAccess;
            Description = description;
            Id = id;
            KeyVaults = keyVaults;
            Name = name;
            ProjectId = projectId;
            Variables = variables;
        }
    }
}
