// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureDevOps.Inputs
{

    public sealed class BranchPolicyBuildValidationSettingsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the build to monitor for the policy.
        /// </summary>
        [Input("buildDefinitionId", required: true)]
        public Input<int> BuildDefinitionId { get; set; } = null!;

        /// <summary>
        /// The display name for the policy.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        [Input("filenamePatterns")]
        private InputList<string>? _filenamePatterns;

        /// <summary>
        /// If a path filter is set, the policy will only apply when files which match the filter are changes. Not setting this field means that the policy will always apply. You can specify absolute paths and wildcards. Example: `["/WebApp/Models/Data.cs", "/WebApp/*", "*.cs"]`. Paths prefixed with "!" are excluded. Example: `["/WebApp/*", "!/WebApp/Tests/*"]`. Order is significant.
        /// </summary>
        public InputList<string> FilenamePatterns
        {
            get => _filenamePatterns ?? (_filenamePatterns = new InputList<string>());
            set => _filenamePatterns = value;
        }

        /// <summary>
        /// If set to true, the build will need to be manually queued. Defaults to `false`
        /// </summary>
        [Input("manualQueueOnly")]
        public Input<bool>? ManualQueueOnly { get; set; }

        /// <summary>
        /// True if the build should queue on source updates only. Defaults to `true`.
        /// </summary>
        [Input("queueOnSourceUpdateOnly")]
        public Input<bool>? QueueOnSourceUpdateOnly { get; set; }

        [Input("scopes", required: true)]
        private InputList<Inputs.BranchPolicyBuildValidationSettingsScopeArgs>? _scopes;

        /// <summary>
        /// Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
        /// </summary>
        public InputList<Inputs.BranchPolicyBuildValidationSettingsScopeArgs> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<Inputs.BranchPolicyBuildValidationSettingsScopeArgs>());
            set => _scopes = value;
        }

        /// <summary>
        /// The number of minutes for which the build is valid. If `0`, the build will not expire. Defaults to `720` (12 hours).
        /// 
        /// &gt; **Note** Combine `valid_duration` and `queue_on_source_update_only` to set the build expiration.
        /// 1.  Expire immediately when branch is updated: `valid_duration=0` and `queue_on_source_update_only=false`
        /// 2.  Expire after a period of time : `valid_duration=360` and `queue_on_source_update_only=true`
        /// 3.  Never expire: `valid_duration=0` and `queue_on_source_update_only=true`
        /// </summary>
        [Input("validDuration")]
        public Input<int>? ValidDuration { get; set; }

        public BranchPolicyBuildValidationSettingsArgs()
        {
        }
        public static new BranchPolicyBuildValidationSettingsArgs Empty => new BranchPolicyBuildValidationSettingsArgs();
    }
}
