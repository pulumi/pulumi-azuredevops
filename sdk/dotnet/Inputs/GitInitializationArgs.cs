// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureDevOps.Inputs
{

    public sealed class GitInitializationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The type of repository to create. Valid values: `Uninitialized`, `Clean` or `Import`.
        /// </summary>
        [Input("initType", required: true)]
        public Input<string> InitType { get; set; } = null!;

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// **NOTE:** This field is write-only and its value will not be updated in state as part of read operations.
        /// The password used to authenticate to a private repository for import initialization. Conflicts with `ServiceConnectionId`. Note: This is a write-only attribute, which allows ephemeral resources to be used.
        /// 
        /// ~&gt;**Note** At least `ServiceConnectionId` or `username/password` needs to be set to import private repository.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The ID of service connection used to authenticate to a private repository for import initialization. Conflicts with `Username` and `Password`.
        /// </summary>
        [Input("serviceConnectionId")]
        public Input<string>? ServiceConnectionId { get; set; }

        /// <summary>
        /// Type of the source repository. Used if the `InitType` is `Import`. Valid values: `Git`.
        /// </summary>
        [Input("sourceType")]
        public Input<string>? SourceType { get; set; }

        /// <summary>
        /// The URL of the source repository. Used if the `InitType` is `Import`.
        /// </summary>
        [Input("sourceUrl")]
        public Input<string>? SourceUrl { get; set; }

        /// <summary>
        /// The username used to authenticate to a private repository for import initialization. Conflicts with `ServiceConnectionId`.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public GitInitializationArgs()
        {
        }
        public static new GitInitializationArgs Empty => new GitInitializationArgs();
    }
}
