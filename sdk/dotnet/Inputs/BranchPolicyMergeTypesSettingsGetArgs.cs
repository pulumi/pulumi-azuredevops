// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureDevOps.Inputs
{

    public sealed class BranchPolicyMergeTypesSettingsGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allow basic merge with no fast forward. Defaults to `false`.
        /// </summary>
        [Input("allowBasicNoFastForward")]
        public Input<bool>? AllowBasicNoFastForward { get; set; }

        /// <summary>
        /// Allow rebase with fast forward. Defaults to `false`.
        /// </summary>
        [Input("allowRebaseAndFastForward")]
        public Input<bool>? AllowRebaseAndFastForward { get; set; }

        /// <summary>
        /// Allow rebase with merge commit. Defaults to `false`.
        /// </summary>
        [Input("allowRebaseWithMerge")]
        public Input<bool>? AllowRebaseWithMerge { get; set; }

        /// <summary>
        /// Allow squash merge. Defaults to `false`
        /// </summary>
        [Input("allowSquash")]
        public Input<bool>? AllowSquash { get; set; }

        [Input("scopes", required: true)]
        private InputList<Inputs.BranchPolicyMergeTypesSettingsScopeGetArgs>? _scopes;

        /// <summary>
        /// A `scope` block as defined below. Controls which repositories and branches the policy will be enabled for. This block must be defined at least once.
        /// </summary>
        public InputList<Inputs.BranchPolicyMergeTypesSettingsScopeGetArgs> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<Inputs.BranchPolicyMergeTypesSettingsScopeGetArgs>());
            set => _scopes = value;
        }

        public BranchPolicyMergeTypesSettingsGetArgs()
        {
        }
        public static new BranchPolicyMergeTypesSettingsGetArgs Empty => new BranchPolicyMergeTypesSettingsGetArgs();
    }
}
