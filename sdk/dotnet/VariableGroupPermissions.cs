// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureDevOps
{
    /// <summary>
    /// Manages permissions for a Variable Group
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AzureDevOps = Pulumi.AzureDevOps;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = new AzureDevOps.Project("project", new()
    ///     {
    ///         Name = "Testing",
    ///         Description = "Testing-description",
    ///         Visibility = "private",
    ///         VersionControl = "Git",
    ///         WorkItemTemplate = "Agile",
    ///     });
    /// 
    ///     var example = new AzureDevOps.VariableGroup("example", new()
    ///     {
    ///         ProjectId = project.Id,
    ///         Name = "test",
    ///         Description = "Test Description",
    ///         AllowAccess = true,
    ///         Variables = new[]
    ///         {
    ///             new AzureDevOps.Inputs.VariableGroupVariableArgs
    ///             {
    ///                 Name = "key1",
    ///                 Value = "val1",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var tf_project_readers = AzureDevOps.GetGroup.Invoke(new()
    ///     {
    ///         ProjectId = project.Id,
    ///         Name = "Readers",
    ///     });
    /// 
    ///     var permissions = new AzureDevOps.VariableGroupPermissions("permissions", new()
    ///     {
    ///         ProjectId = project.Id,
    ///         VariableGroupId = example.Id,
    ///         Principal = tf_project_readers.Apply(tf_project_readers =&gt; tf_project_readers.Apply(getGroupResult =&gt; getGroupResult.Id)),
    ///         Permissions = 
    ///         {
    ///             { "View", "allow" },
    ///             { "Administer", "allow" },
    ///             { "Use", "allow" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Roles
    /// 
    /// The Azure DevOps UI uses roles to assign permissions for variable groups.
    /// 
    /// |     Role      |   Allow    |
    /// |---------------|------------|
    /// | Reader        | View       |
    /// | User          | View,      |
    /// | Administrator | View, Use, |
    /// </summary>
    [AzureDevOpsResourceType("azuredevops:index/variableGroupPermissions:VariableGroupPermissions")]
    public partial class VariableGroupPermissions : global::Pulumi.CustomResource
    {
        [Output("permissions")]
        public Output<ImmutableDictionary<string, string>> Permissions { get; private set; } = null!;

        [Output("principal")]
        public Output<string> Principal { get; private set; } = null!;

        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        [Output("replace")]
        public Output<bool?> Replace { get; private set; } = null!;

        [Output("variableGroupId")]
        public Output<string> VariableGroupId { get; private set; } = null!;


        /// <summary>
        /// Create a VariableGroupPermissions resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VariableGroupPermissions(string name, VariableGroupPermissionsArgs args, CustomResourceOptions? options = null)
            : base("azuredevops:index/variableGroupPermissions:VariableGroupPermissions", name, args ?? new VariableGroupPermissionsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VariableGroupPermissions(string name, Input<string> id, VariableGroupPermissionsState? state = null, CustomResourceOptions? options = null)
            : base("azuredevops:index/variableGroupPermissions:VariableGroupPermissions", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VariableGroupPermissions resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VariableGroupPermissions Get(string name, Input<string> id, VariableGroupPermissionsState? state = null, CustomResourceOptions? options = null)
        {
            return new VariableGroupPermissions(name, id, state, options);
        }
    }

    public sealed class VariableGroupPermissionsArgs : global::Pulumi.ResourceArgs
    {
        [Input("permissions", required: true)]
        private InputMap<string>? _permissions;
        public InputMap<string> Permissions
        {
            get => _permissions ?? (_permissions = new InputMap<string>());
            set => _permissions = value;
        }

        [Input("principal", required: true)]
        public Input<string> Principal { get; set; } = null!;

        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        [Input("replace")]
        public Input<bool>? Replace { get; set; }

        [Input("variableGroupId", required: true)]
        public Input<string> VariableGroupId { get; set; } = null!;

        public VariableGroupPermissionsArgs()
        {
        }
        public static new VariableGroupPermissionsArgs Empty => new VariableGroupPermissionsArgs();
    }

    public sealed class VariableGroupPermissionsState : global::Pulumi.ResourceArgs
    {
        [Input("permissions")]
        private InputMap<string>? _permissions;
        public InputMap<string> Permissions
        {
            get => _permissions ?? (_permissions = new InputMap<string>());
            set => _permissions = value;
        }

        [Input("principal")]
        public Input<string>? Principal { get; set; }

        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("replace")]
        public Input<bool>? Replace { get; set; }

        [Input("variableGroupId")]
        public Input<string>? VariableGroupId { get; set; }

        public VariableGroupPermissionsState()
        {
        }
        public static new VariableGroupPermissionsState Empty => new VariableGroupPermissionsState();
    }
}
