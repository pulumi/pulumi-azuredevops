// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureDevOps.Outputs
{

    [OutputType]
    public sealed class GetBuildDefinitionCiTriggerOverrideResult
    {
        /// <summary>
        /// If batch is true, when a pipeline is running, the system waits until the run is completed, then starts another run with all changes that have not yet been built.
        /// </summary>
        public readonly bool Batch;
        /// <summary>
        /// A `branch_filter` block as defined above.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetBuildDefinitionCiTriggerOverrideBranchFilterResult> BranchFilters;
        /// <summary>
        /// The number of max builds per branch.
        /// </summary>
        public readonly int MaxConcurrentBuildsPerBranch;
        /// <summary>
        /// block supports the following:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetBuildDefinitionCiTriggerOverridePathFilterResult> PathFilters;
        /// <summary>
        /// How often the external repository is polled.
        /// </summary>
        public readonly int PollingInterval;
        /// <summary>
        /// This is the ID of the polling job that polls the external repository. Once the build definition is saved/updated, this value is set.
        /// </summary>
        public readonly string PollingJobId;

        [OutputConstructor]
        private GetBuildDefinitionCiTriggerOverrideResult(
            bool batch,

            ImmutableArray<Outputs.GetBuildDefinitionCiTriggerOverrideBranchFilterResult> branchFilters,

            int maxConcurrentBuildsPerBranch,

            ImmutableArray<Outputs.GetBuildDefinitionCiTriggerOverridePathFilterResult> pathFilters,

            int pollingInterval,

            string pollingJobId)
        {
            Batch = batch;
            BranchFilters = branchFilters;
            MaxConcurrentBuildsPerBranch = maxConcurrentBuildsPerBranch;
            PathFilters = pathFilters;
            PollingInterval = pollingInterval;
            PollingJobId = pollingJobId;
        }
    }
}
