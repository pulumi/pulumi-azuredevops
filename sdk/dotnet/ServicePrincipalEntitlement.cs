// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureDevOps
{
    /// <summary>
    /// Manages a Service Principal Entitlement.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AzureDevOps = Pulumi.AzureDevOps;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new AzureDevOps.ServicePrincipalEntitlement("example", new()
    ///     {
    ///         OriginId = "00000000-0000-0000-0000-000000000000",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Service Principal Entitlements can be imported using the `resource id`.
    /// 
    /// The `resource id` can be found using DEV Tools in the `Users` section of the ADO organization.
    /// 
    /// ```sh
    /// $ pulumi import azuredevops:index/servicePrincipalEntitlement:ServicePrincipalEntitlement example 8480c6eb-ce60-47e9-88df-eca3c801638b
    /// ```
    /// </summary>
    [AzureDevOpsResourceType("azuredevops:index/servicePrincipalEntitlement:ServicePrincipalEntitlement")]
    public partial class ServicePrincipalEntitlement : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Type of Account License. Possible values are: `advanced`, `earlyAdopter`, `express`, `none`, `professional`, or `stakeholder`. Defaults to `express`. In addition the value `basic` is allowed which is an alias for `express` and reflects the name of the `express` license used in the Azure DevOps web interface.
        /// </summary>
        [Output("accountLicenseType")]
        public Output<string?> AccountLicenseType { get; private set; } = null!;

        /// <summary>
        /// The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the user graph subject.
        /// </summary>
        [Output("descriptor")]
        public Output<string> Descriptor { get; private set; } = null!;

        /// <summary>
        /// The display name of service principal.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The source of the licensing (e.g. Account. MSDN etc.) Possible values are: `account` (Default), `auto`, `msdn`, `none`, `profile`, `trial`
        /// </summary>
        [Output("licensingSource")]
        public Output<string?> LicensingSource { get; private set; } = null!;

        /// <summary>
        /// The type of source provider for the origin identifier.
        /// </summary>
        [Output("origin")]
        public Output<string> Origin { get; private set; } = null!;

        /// <summary>
        /// The Object ID of the service principal in Entra ID. Changing this forces a new Service Principal Entitlement to be created.
        /// </summary>
        [Output("originId")]
        public Output<string> OriginId { get; private set; } = null!;


        /// <summary>
        /// Create a ServicePrincipalEntitlement resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServicePrincipalEntitlement(string name, ServicePrincipalEntitlementArgs args, CustomResourceOptions? options = null)
            : base("azuredevops:index/servicePrincipalEntitlement:ServicePrincipalEntitlement", name, args ?? new ServicePrincipalEntitlementArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServicePrincipalEntitlement(string name, Input<string> id, ServicePrincipalEntitlementState? state = null, CustomResourceOptions? options = null)
            : base("azuredevops:index/servicePrincipalEntitlement:ServicePrincipalEntitlement", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServicePrincipalEntitlement resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServicePrincipalEntitlement Get(string name, Input<string> id, ServicePrincipalEntitlementState? state = null, CustomResourceOptions? options = null)
        {
            return new ServicePrincipalEntitlement(name, id, state, options);
        }
    }

    public sealed class ServicePrincipalEntitlementArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Type of Account License. Possible values are: `advanced`, `earlyAdopter`, `express`, `none`, `professional`, or `stakeholder`. Defaults to `express`. In addition the value `basic` is allowed which is an alias for `express` and reflects the name of the `express` license used in the Azure DevOps web interface.
        /// </summary>
        [Input("accountLicenseType")]
        public Input<string>? AccountLicenseType { get; set; }

        /// <summary>
        /// The source of the licensing (e.g. Account. MSDN etc.) Possible values are: `account` (Default), `auto`, `msdn`, `none`, `profile`, `trial`
        /// </summary>
        [Input("licensingSource")]
        public Input<string>? LicensingSource { get; set; }

        /// <summary>
        /// The type of source provider for the origin identifier.
        /// </summary>
        [Input("origin")]
        public Input<string>? Origin { get; set; }

        /// <summary>
        /// The Object ID of the service principal in Entra ID. Changing this forces a new Service Principal Entitlement to be created.
        /// </summary>
        [Input("originId", required: true)]
        public Input<string> OriginId { get; set; } = null!;

        public ServicePrincipalEntitlementArgs()
        {
        }
        public static new ServicePrincipalEntitlementArgs Empty => new ServicePrincipalEntitlementArgs();
    }

    public sealed class ServicePrincipalEntitlementState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Type of Account License. Possible values are: `advanced`, `earlyAdopter`, `express`, `none`, `professional`, or `stakeholder`. Defaults to `express`. In addition the value `basic` is allowed which is an alias for `express` and reflects the name of the `express` license used in the Azure DevOps web interface.
        /// </summary>
        [Input("accountLicenseType")]
        public Input<string>? AccountLicenseType { get; set; }

        /// <summary>
        /// The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the user graph subject.
        /// </summary>
        [Input("descriptor")]
        public Input<string>? Descriptor { get; set; }

        /// <summary>
        /// The display name of service principal.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The source of the licensing (e.g. Account. MSDN etc.) Possible values are: `account` (Default), `auto`, `msdn`, `none`, `profile`, `trial`
        /// </summary>
        [Input("licensingSource")]
        public Input<string>? LicensingSource { get; set; }

        /// <summary>
        /// The type of source provider for the origin identifier.
        /// </summary>
        [Input("origin")]
        public Input<string>? Origin { get; set; }

        /// <summary>
        /// The Object ID of the service principal in Entra ID. Changing this forces a new Service Principal Entitlement to be created.
        /// </summary>
        [Input("originId")]
        public Input<string>? OriginId { get; set; }

        public ServicePrincipalEntitlementState()
        {
        }
        public static new ServicePrincipalEntitlementState Empty => new ServicePrincipalEntitlementState();
    }
}
