// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureDevOps
{
    public static class GetServiceendpointDockerregistry
    {
        /// <summary>
        /// Use this data source to access information about an existing Docker Registry Service Endpoint.
        /// 
        /// ## Example Usage
        /// 
        /// ### By Service Endpoint ID
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AzureDevOps = Pulumi.AzureDevOps;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = AzureDevOps.GetProject.Invoke(new()
        ///     {
        ///         Name = "Example Project",
        ///     });
        /// 
        ///     var exampleGetServiceendpointDockerregistry = AzureDevOps.GetServiceendpointDockerregistry.Invoke(new()
        ///     {
        ///         ProjectId = example.Apply(getProjectResult =&gt; getProjectResult.Id),
        ///         ServiceEndpointId = "00000000-0000-0000-0000-000000000000",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["serviceEndpointName"] = exampleGetServiceendpointDockerregistry.Apply(getServiceendpointDockerregistryResult =&gt; getServiceendpointDockerregistryResult.ServiceEndpointName),
        ///     };
        /// });
        /// ```
        /// 
        /// ### By Service Endpoint Name
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AzureDevOps = Pulumi.AzureDevOps;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = AzureDevOps.GetProject.Invoke(new()
        ///     {
        ///         Name = "Example Project",
        ///     });
        /// 
        ///     var exampleGetServiceendpointDockerregistry = AzureDevOps.GetServiceendpointDockerregistry.Invoke(new()
        ///     {
        ///         ProjectId = example.Apply(getProjectResult =&gt; getProjectResult.Id),
        ///         ServiceEndpointName = "Example-Service-Endpoint",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["serviceEndpointId"] = serviceendpoint.Id,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetServiceendpointDockerregistryResult> InvokeAsync(GetServiceendpointDockerregistryArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServiceendpointDockerregistryResult>("azuredevops:index/getServiceendpointDockerregistry:getServiceendpointDockerregistry", args ?? new GetServiceendpointDockerregistryArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Docker Registry Service Endpoint.
        /// 
        /// ## Example Usage
        /// 
        /// ### By Service Endpoint ID
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AzureDevOps = Pulumi.AzureDevOps;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = AzureDevOps.GetProject.Invoke(new()
        ///     {
        ///         Name = "Example Project",
        ///     });
        /// 
        ///     var exampleGetServiceendpointDockerregistry = AzureDevOps.GetServiceendpointDockerregistry.Invoke(new()
        ///     {
        ///         ProjectId = example.Apply(getProjectResult =&gt; getProjectResult.Id),
        ///         ServiceEndpointId = "00000000-0000-0000-0000-000000000000",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["serviceEndpointName"] = exampleGetServiceendpointDockerregistry.Apply(getServiceendpointDockerregistryResult =&gt; getServiceendpointDockerregistryResult.ServiceEndpointName),
        ///     };
        /// });
        /// ```
        /// 
        /// ### By Service Endpoint Name
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AzureDevOps = Pulumi.AzureDevOps;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = AzureDevOps.GetProject.Invoke(new()
        ///     {
        ///         Name = "Example Project",
        ///     });
        /// 
        ///     var exampleGetServiceendpointDockerregistry = AzureDevOps.GetServiceendpointDockerregistry.Invoke(new()
        ///     {
        ///         ProjectId = example.Apply(getProjectResult =&gt; getProjectResult.Id),
        ///         ServiceEndpointName = "Example-Service-Endpoint",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["serviceEndpointId"] = serviceendpoint.Id,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetServiceendpointDockerregistryResult> Invoke(GetServiceendpointDockerregistryInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceendpointDockerregistryResult>("azuredevops:index/getServiceendpointDockerregistry:getServiceendpointDockerregistry", args ?? new GetServiceendpointDockerregistryInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Docker Registry Service Endpoint.
        /// 
        /// ## Example Usage
        /// 
        /// ### By Service Endpoint ID
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AzureDevOps = Pulumi.AzureDevOps;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = AzureDevOps.GetProject.Invoke(new()
        ///     {
        ///         Name = "Example Project",
        ///     });
        /// 
        ///     var exampleGetServiceendpointDockerregistry = AzureDevOps.GetServiceendpointDockerregistry.Invoke(new()
        ///     {
        ///         ProjectId = example.Apply(getProjectResult =&gt; getProjectResult.Id),
        ///         ServiceEndpointId = "00000000-0000-0000-0000-000000000000",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["serviceEndpointName"] = exampleGetServiceendpointDockerregistry.Apply(getServiceendpointDockerregistryResult =&gt; getServiceendpointDockerregistryResult.ServiceEndpointName),
        ///     };
        /// });
        /// ```
        /// 
        /// ### By Service Endpoint Name
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AzureDevOps = Pulumi.AzureDevOps;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = AzureDevOps.GetProject.Invoke(new()
        ///     {
        ///         Name = "Example Project",
        ///     });
        /// 
        ///     var exampleGetServiceendpointDockerregistry = AzureDevOps.GetServiceendpointDockerregistry.Invoke(new()
        ///     {
        ///         ProjectId = example.Apply(getProjectResult =&gt; getProjectResult.Id),
        ///         ServiceEndpointName = "Example-Service-Endpoint",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["serviceEndpointId"] = serviceendpoint.Id,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetServiceendpointDockerregistryResult> Invoke(GetServiceendpointDockerregistryInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceendpointDockerregistryResult>("azuredevops:index/getServiceendpointDockerregistry:getServiceendpointDockerregistry", args ?? new GetServiceendpointDockerregistryInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceendpointDockerregistryArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        /// <summary>
        /// the ID of the Service Endpoint.
        /// </summary>
        [Input("serviceEndpointId")]
        public string? ServiceEndpointId { get; set; }

        /// <summary>
        /// the Name of the Service Endpoint.
        /// 
        /// &gt; **NOTE:** 1. One of either `service_endpoint_id` or `service_endpoint_name` must be specified.
        /// &lt;br&gt;2. When supplying `service_endpoint_name`, take care to ensure that this is a unique name.
        /// </summary>
        [Input("serviceEndpointName")]
        public string? ServiceEndpointName { get; set; }

        public GetServiceendpointDockerregistryArgs()
        {
        }
        public static new GetServiceendpointDockerregistryArgs Empty => new GetServiceendpointDockerregistryArgs();
    }

    public sealed class GetServiceendpointDockerregistryInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// the ID of the Service Endpoint.
        /// </summary>
        [Input("serviceEndpointId")]
        public Input<string>? ServiceEndpointId { get; set; }

        /// <summary>
        /// the Name of the Service Endpoint.
        /// 
        /// &gt; **NOTE:** 1. One of either `service_endpoint_id` or `service_endpoint_name` must be specified.
        /// &lt;br&gt;2. When supplying `service_endpoint_name`, take care to ensure that this is a unique name.
        /// </summary>
        [Input("serviceEndpointName")]
        public Input<string>? ServiceEndpointName { get; set; }

        public GetServiceendpointDockerregistryInvokeArgs()
        {
        }
        public static new GetServiceendpointDockerregistryInvokeArgs Empty => new GetServiceendpointDockerregistryInvokeArgs();
    }


    [OutputType]
    public sealed class GetServiceendpointDockerregistryResult
    {
        /// <summary>
        /// The Authorization scheme.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Authorization;
        /// <summary>
        /// The Service Endpoint description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The email for Docker account user.
        /// </summary>
        public readonly string DockerEmail;
        /// <summary>
        /// The password for the account user identified above.
        /// </summary>
        public readonly string DockerPassword;
        /// <summary>
        /// The URL of the Docker registry.
        /// </summary>
        public readonly string DockerRegistry;
        /// <summary>
        /// The identifier of the Docker account user.
        /// </summary>
        public readonly string DockerUsername;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string ProjectId;
        /// <summary>
        /// Can be "DockerHub" or "Others" (Default "DockerHub")
        /// </summary>
        public readonly string RegistryType;
        public readonly string ServiceEndpointId;
        public readonly string ServiceEndpointName;

        [OutputConstructor]
        private GetServiceendpointDockerregistryResult(
            ImmutableDictionary<string, string> authorization,

            string description,

            string dockerEmail,

            string dockerPassword,

            string dockerRegistry,

            string dockerUsername,

            string id,

            string projectId,

            string registryType,

            string serviceEndpointId,

            string serviceEndpointName)
        {
            Authorization = authorization;
            Description = description;
            DockerEmail = dockerEmail;
            DockerPassword = dockerPassword;
            DockerRegistry = dockerRegistry;
            DockerUsername = dockerUsername;
            Id = id;
            ProjectId = projectId;
            RegistryType = registryType;
            ServiceEndpointId = serviceEndpointId;
            ServiceEndpointName = serviceEndpointName;
        }
    }
}
