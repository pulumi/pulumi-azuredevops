# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['GroupEntitlementArgs', 'GroupEntitlement']

@pulumi.input_type
class GroupEntitlementArgs:
    def __init__(__self__, *,
                 account_license_type: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 licensing_source: Optional[pulumi.Input[str]] = None,
                 origin: Optional[pulumi.Input[str]] = None,
                 origin_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a GroupEntitlement resource.
        :param pulumi.Input[str] account_license_type: Type of Account License. Valid values: `advanced`, `earlyAdopter`, `express`, `none`, `professional`, or `stakeholder`. Defaults to `express`. In addition, the value `basic` is allowed which is an alias for `express` and reflects the name of the `express` license used in the Azure DevOps web interface.
        :param pulumi.Input[str] display_name: The display name is the name used in Azure DevOps UI. Cannot be set together with `origin_id` and `origin`.
        :param pulumi.Input[str] licensing_source: The source of the licensing (e.g. Account. MSDN etc.) Valid values: `account` (Default), `auto`, `msdn`, `none`, `profile`, `trial`
               
               > **NOTE:** A existing group in Azure AD can only be referenced by the combination of `origin_id` and `origin`.
        :param pulumi.Input[str] origin: The type of source provider for the origin identifier.
        :param pulumi.Input[str] origin_id: The unique identifier from the system of origin. Typically, a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.
        """
        if account_license_type is not None:
            pulumi.set(__self__, "account_license_type", account_license_type)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if licensing_source is not None:
            pulumi.set(__self__, "licensing_source", licensing_source)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if origin_id is not None:
            pulumi.set(__self__, "origin_id", origin_id)

    @property
    @pulumi.getter(name="accountLicenseType")
    def account_license_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of Account License. Valid values: `advanced`, `earlyAdopter`, `express`, `none`, `professional`, or `stakeholder`. Defaults to `express`. In addition, the value `basic` is allowed which is an alias for `express` and reflects the name of the `express` license used in the Azure DevOps web interface.
        """
        return pulumi.get(self, "account_license_type")

    @account_license_type.setter
    def account_license_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_license_type", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name is the name used in Azure DevOps UI. Cannot be set together with `origin_id` and `origin`.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="licensingSource")
    def licensing_source(self) -> Optional[pulumi.Input[str]]:
        """
        The source of the licensing (e.g. Account. MSDN etc.) Valid values: `account` (Default), `auto`, `msdn`, `none`, `profile`, `trial`

        > **NOTE:** A existing group in Azure AD can only be referenced by the combination of `origin_id` and `origin`.
        """
        return pulumi.get(self, "licensing_source")

    @licensing_source.setter
    def licensing_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "licensing_source", value)

    @property
    @pulumi.getter
    def origin(self) -> Optional[pulumi.Input[str]]:
        """
        The type of source provider for the origin identifier.
        """
        return pulumi.get(self, "origin")

    @origin.setter
    def origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin", value)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier from the system of origin. Typically, a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.
        """
        return pulumi.get(self, "origin_id")

    @origin_id.setter
    def origin_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin_id", value)


@pulumi.input_type
class _GroupEntitlementState:
    def __init__(__self__, *,
                 account_license_type: Optional[pulumi.Input[str]] = None,
                 descriptor: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 licensing_source: Optional[pulumi.Input[str]] = None,
                 origin: Optional[pulumi.Input[str]] = None,
                 origin_id: Optional[pulumi.Input[str]] = None,
                 principal_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering GroupEntitlement resources.
        :param pulumi.Input[str] account_license_type: Type of Account License. Valid values: `advanced`, `earlyAdopter`, `express`, `none`, `professional`, or `stakeholder`. Defaults to `express`. In addition, the value `basic` is allowed which is an alias for `express` and reflects the name of the `express` license used in the Azure DevOps web interface.
        :param pulumi.Input[str] descriptor: The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the group graph subject.
        :param pulumi.Input[str] display_name: The display name is the name used in Azure DevOps UI. Cannot be set together with `origin_id` and `origin`.
        :param pulumi.Input[str] licensing_source: The source of the licensing (e.g. Account. MSDN etc.) Valid values: `account` (Default), `auto`, `msdn`, `none`, `profile`, `trial`
               
               > **NOTE:** A existing group in Azure AD can only be referenced by the combination of `origin_id` and `origin`.
        :param pulumi.Input[str] origin: The type of source provider for the origin identifier.
        :param pulumi.Input[str] origin_id: The unique identifier from the system of origin. Typically, a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.
        :param pulumi.Input[str] principal_name: The principal name of a graph member on Azure DevOps
        """
        if account_license_type is not None:
            pulumi.set(__self__, "account_license_type", account_license_type)
        if descriptor is not None:
            pulumi.set(__self__, "descriptor", descriptor)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if licensing_source is not None:
            pulumi.set(__self__, "licensing_source", licensing_source)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if origin_id is not None:
            pulumi.set(__self__, "origin_id", origin_id)
        if principal_name is not None:
            pulumi.set(__self__, "principal_name", principal_name)

    @property
    @pulumi.getter(name="accountLicenseType")
    def account_license_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of Account License. Valid values: `advanced`, `earlyAdopter`, `express`, `none`, `professional`, or `stakeholder`. Defaults to `express`. In addition, the value `basic` is allowed which is an alias for `express` and reflects the name of the `express` license used in the Azure DevOps web interface.
        """
        return pulumi.get(self, "account_license_type")

    @account_license_type.setter
    def account_license_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_license_type", value)

    @property
    @pulumi.getter
    def descriptor(self) -> Optional[pulumi.Input[str]]:
        """
        The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the group graph subject.
        """
        return pulumi.get(self, "descriptor")

    @descriptor.setter
    def descriptor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "descriptor", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name is the name used in Azure DevOps UI. Cannot be set together with `origin_id` and `origin`.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="licensingSource")
    def licensing_source(self) -> Optional[pulumi.Input[str]]:
        """
        The source of the licensing (e.g. Account. MSDN etc.) Valid values: `account` (Default), `auto`, `msdn`, `none`, `profile`, `trial`

        > **NOTE:** A existing group in Azure AD can only be referenced by the combination of `origin_id` and `origin`.
        """
        return pulumi.get(self, "licensing_source")

    @licensing_source.setter
    def licensing_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "licensing_source", value)

    @property
    @pulumi.getter
    def origin(self) -> Optional[pulumi.Input[str]]:
        """
        The type of source provider for the origin identifier.
        """
        return pulumi.get(self, "origin")

    @origin.setter
    def origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin", value)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier from the system of origin. Typically, a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.
        """
        return pulumi.get(self, "origin_id")

    @origin_id.setter
    def origin_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin_id", value)

    @property
    @pulumi.getter(name="principalName")
    def principal_name(self) -> Optional[pulumi.Input[str]]:
        """
        The principal name of a graph member on Azure DevOps
        """
        return pulumi.get(self, "principal_name")

    @principal_name.setter
    def principal_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal_name", value)


class GroupEntitlement(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_license_type: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 licensing_source: Optional[pulumi.Input[str]] = None,
                 origin: Optional[pulumi.Input[str]] = None,
                 origin_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a group entitlement within Azure DevOps.

        ## Example Usage
        ### With an Azure DevOps local group managed by this resource
        ```python
        import pulumi
        import pulumi_azuredevops as azuredevops

        example = azuredevops.GroupEntitlement("example", display_name="Group Name")
        ```
        ### With group origin ID
        ```python
        import pulumi
        import pulumi_azuredevops as azuredevops

        example = azuredevops.GroupEntitlement("example",
            origin="aad",
            origin_id="00000000-0000-0000-0000-000000000000")
        ```
        ## Relevant Links

        - [Azure DevOps Service REST API 7.0 - Group Entitlements](https://learn.microsoft.com/en-us/rest/api/azure/devops/memberentitlementmanagement/group-entitlements?view=azure-devops-rest-7.1)
        - [Programmatic mapping of access levels](https://docs.microsoft.com/en-us/azure/devops/organizations/security/access-levels?view=azure-devops#programmatic-mapping-of-access-levels)

        ## PAT Permissions Required

        - **Member Entitlement Management**: Read & Write

        ## Import

        The resource allows the import via the ID of a group entitlement, which is a UUID.

        ```sh
         $ pulumi import azuredevops:index/groupEntitlement:GroupEntitlement example 00000000-0000-0000-0000-000000000000
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_license_type: Type of Account License. Valid values: `advanced`, `earlyAdopter`, `express`, `none`, `professional`, or `stakeholder`. Defaults to `express`. In addition, the value `basic` is allowed which is an alias for `express` and reflects the name of the `express` license used in the Azure DevOps web interface.
        :param pulumi.Input[str] display_name: The display name is the name used in Azure DevOps UI. Cannot be set together with `origin_id` and `origin`.
        :param pulumi.Input[str] licensing_source: The source of the licensing (e.g. Account. MSDN etc.) Valid values: `account` (Default), `auto`, `msdn`, `none`, `profile`, `trial`
               
               > **NOTE:** A existing group in Azure AD can only be referenced by the combination of `origin_id` and `origin`.
        :param pulumi.Input[str] origin: The type of source provider for the origin identifier.
        :param pulumi.Input[str] origin_id: The unique identifier from the system of origin. Typically, a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[GroupEntitlementArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a group entitlement within Azure DevOps.

        ## Example Usage
        ### With an Azure DevOps local group managed by this resource
        ```python
        import pulumi
        import pulumi_azuredevops as azuredevops

        example = azuredevops.GroupEntitlement("example", display_name="Group Name")
        ```
        ### With group origin ID
        ```python
        import pulumi
        import pulumi_azuredevops as azuredevops

        example = azuredevops.GroupEntitlement("example",
            origin="aad",
            origin_id="00000000-0000-0000-0000-000000000000")
        ```
        ## Relevant Links

        - [Azure DevOps Service REST API 7.0 - Group Entitlements](https://learn.microsoft.com/en-us/rest/api/azure/devops/memberentitlementmanagement/group-entitlements?view=azure-devops-rest-7.1)
        - [Programmatic mapping of access levels](https://docs.microsoft.com/en-us/azure/devops/organizations/security/access-levels?view=azure-devops#programmatic-mapping-of-access-levels)

        ## PAT Permissions Required

        - **Member Entitlement Management**: Read & Write

        ## Import

        The resource allows the import via the ID of a group entitlement, which is a UUID.

        ```sh
         $ pulumi import azuredevops:index/groupEntitlement:GroupEntitlement example 00000000-0000-0000-0000-000000000000
        ```

        :param str resource_name: The name of the resource.
        :param GroupEntitlementArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GroupEntitlementArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_license_type: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 licensing_source: Optional[pulumi.Input[str]] = None,
                 origin: Optional[pulumi.Input[str]] = None,
                 origin_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GroupEntitlementArgs.__new__(GroupEntitlementArgs)

            __props__.__dict__["account_license_type"] = account_license_type
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["licensing_source"] = licensing_source
            __props__.__dict__["origin"] = origin
            __props__.__dict__["origin_id"] = origin_id
            __props__.__dict__["descriptor"] = None
            __props__.__dict__["principal_name"] = None
        super(GroupEntitlement, __self__).__init__(
            'azuredevops:index/groupEntitlement:GroupEntitlement',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_license_type: Optional[pulumi.Input[str]] = None,
            descriptor: Optional[pulumi.Input[str]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            licensing_source: Optional[pulumi.Input[str]] = None,
            origin: Optional[pulumi.Input[str]] = None,
            origin_id: Optional[pulumi.Input[str]] = None,
            principal_name: Optional[pulumi.Input[str]] = None) -> 'GroupEntitlement':
        """
        Get an existing GroupEntitlement resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_license_type: Type of Account License. Valid values: `advanced`, `earlyAdopter`, `express`, `none`, `professional`, or `stakeholder`. Defaults to `express`. In addition, the value `basic` is allowed which is an alias for `express` and reflects the name of the `express` license used in the Azure DevOps web interface.
        :param pulumi.Input[str] descriptor: The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the group graph subject.
        :param pulumi.Input[str] display_name: The display name is the name used in Azure DevOps UI. Cannot be set together with `origin_id` and `origin`.
        :param pulumi.Input[str] licensing_source: The source of the licensing (e.g. Account. MSDN etc.) Valid values: `account` (Default), `auto`, `msdn`, `none`, `profile`, `trial`
               
               > **NOTE:** A existing group in Azure AD can only be referenced by the combination of `origin_id` and `origin`.
        :param pulumi.Input[str] origin: The type of source provider for the origin identifier.
        :param pulumi.Input[str] origin_id: The unique identifier from the system of origin. Typically, a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.
        :param pulumi.Input[str] principal_name: The principal name of a graph member on Azure DevOps
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GroupEntitlementState.__new__(_GroupEntitlementState)

        __props__.__dict__["account_license_type"] = account_license_type
        __props__.__dict__["descriptor"] = descriptor
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["licensing_source"] = licensing_source
        __props__.__dict__["origin"] = origin
        __props__.__dict__["origin_id"] = origin_id
        __props__.__dict__["principal_name"] = principal_name
        return GroupEntitlement(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountLicenseType")
    def account_license_type(self) -> pulumi.Output[Optional[str]]:
        """
        Type of Account License. Valid values: `advanced`, `earlyAdopter`, `express`, `none`, `professional`, or `stakeholder`. Defaults to `express`. In addition, the value `basic` is allowed which is an alias for `express` and reflects the name of the `express` license used in the Azure DevOps web interface.
        """
        return pulumi.get(self, "account_license_type")

    @property
    @pulumi.getter
    def descriptor(self) -> pulumi.Output[str]:
        """
        The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the group graph subject.
        """
        return pulumi.get(self, "descriptor")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        The display name is the name used in Azure DevOps UI. Cannot be set together with `origin_id` and `origin`.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="licensingSource")
    def licensing_source(self) -> pulumi.Output[Optional[str]]:
        """
        The source of the licensing (e.g. Account. MSDN etc.) Valid values: `account` (Default), `auto`, `msdn`, `none`, `profile`, `trial`

        > **NOTE:** A existing group in Azure AD can only be referenced by the combination of `origin_id` and `origin`.
        """
        return pulumi.get(self, "licensing_source")

    @property
    @pulumi.getter
    def origin(self) -> pulumi.Output[str]:
        """
        The type of source provider for the origin identifier.
        """
        return pulumi.get(self, "origin")

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> pulumi.Output[str]:
        """
        The unique identifier from the system of origin. Typically, a sid, object id or Guid. e.g. Used for member of other tenant on Azure Active Directory.
        """
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter(name="principalName")
    def principal_name(self) -> pulumi.Output[str]:
        """
        The principal name of a graph member on Azure DevOps
        """
        return pulumi.get(self, "principal_name")

