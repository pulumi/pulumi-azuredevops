# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = ['ServiceEndpointDockerRegistry']


class ServiceEndpointDockerRegistry(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authorization: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 docker_email: Optional[pulumi.Input[str]] = None,
                 docker_password: Optional[pulumi.Input[str]] = None,
                 docker_registry: Optional[pulumi.Input[str]] = None,
                 docker_username: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 registry_type: Optional[pulumi.Input[str]] = None,
                 service_endpoint_name: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Manages a Docker Registry service endpoint within Azure DevOps.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azuredevops as azuredevops

        project = azuredevops.Project("project",
            visibility="private",
            version_control="Git",
            work_item_template="Agile")
        # dockerhub registry service connection
        dockerhubregistry = azuredevops.ServiceEndpointDockerRegistry("dockerhubregistry",
            project_id=project.id,
            service_endpoint_name="Sample Docker Hub",
            docker_username="sample",
            docker_email="email@example.com",
            docker_password="12345",
            registry_type="DockerHub")
        # other docker registry service connection
        otherregistry = azuredevops.ServiceEndpointDockerRegistry("otherregistry",
            project_id=project.id,
            service_endpoint_name="Sample Docker Registry",
            docker_registry="https://sample.azurecr.io/v1",
            docker_username="sample",
            docker_password="12345",
            registry_type="Others")
        ```
        ## Relevant Links

        - [Azure DevOps Service REST API 5.1 - Service Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-5.1)
        - [Docker Registry Service Connection](https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops&tabs=yaml#sep-docreg)

        ## Import

        Azure DevOps Service Endpoint Docker Registry can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**

        ```sh
         $ pulumi import azuredevops:index/serviceEndpointDockerRegistry:ServiceEndpointDockerRegistry serviceendpoint 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The name you will use to refer to this service connection in task inputs.
        :param pulumi.Input[str] docker_email: The email for Docker account user.
        :param pulumi.Input[str] docker_password: The password for the account user identified above.
        :param pulumi.Input[str] docker_registry: The URL of the Docker registry. (Default: "https://index.docker.io/v1/")
        :param pulumi.Input[str] docker_username: The identifier of the Docker account user.
        :param pulumi.Input[str] project_id: The project ID or project name.
        :param pulumi.Input[str] registry_type: Can be "DockerHub" or "Others" (Default "DockerHub")
        :param pulumi.Input[str] service_endpoint_name: The name you will use to refer to this service connection in task inputs.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['authorization'] = authorization
            __props__['description'] = description
            __props__['docker_email'] = docker_email
            __props__['docker_password'] = docker_password
            if docker_registry is None and not opts.urn:
                raise TypeError("Missing required property 'docker_registry'")
            __props__['docker_registry'] = docker_registry
            __props__['docker_username'] = docker_username
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__['project_id'] = project_id
            if registry_type is None and not opts.urn:
                raise TypeError("Missing required property 'registry_type'")
            __props__['registry_type'] = registry_type
            if service_endpoint_name is None and not opts.urn:
                raise TypeError("Missing required property 'service_endpoint_name'")
            __props__['service_endpoint_name'] = service_endpoint_name
            __props__['docker_password_hash'] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azuredevops:ServiceEndpoint/dockerRegistry:DockerRegistry")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(ServiceEndpointDockerRegistry, __self__).__init__(
            'azuredevops:index/serviceEndpointDockerRegistry:ServiceEndpointDockerRegistry',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            authorization: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            docker_email: Optional[pulumi.Input[str]] = None,
            docker_password: Optional[pulumi.Input[str]] = None,
            docker_password_hash: Optional[pulumi.Input[str]] = None,
            docker_registry: Optional[pulumi.Input[str]] = None,
            docker_username: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            registry_type: Optional[pulumi.Input[str]] = None,
            service_endpoint_name: Optional[pulumi.Input[str]] = None) -> 'ServiceEndpointDockerRegistry':
        """
        Get an existing ServiceEndpointDockerRegistry resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The name you will use to refer to this service connection in task inputs.
        :param pulumi.Input[str] docker_email: The email for Docker account user.
        :param pulumi.Input[str] docker_password: The password for the account user identified above.
        :param pulumi.Input[str] docker_password_hash: A bcrypted hash of the attribute 'docker_password'
        :param pulumi.Input[str] docker_registry: The URL of the Docker registry. (Default: "https://index.docker.io/v1/")
        :param pulumi.Input[str] docker_username: The identifier of the Docker account user.
        :param pulumi.Input[str] project_id: The project ID or project name.
        :param pulumi.Input[str] registry_type: Can be "DockerHub" or "Others" (Default "DockerHub")
        :param pulumi.Input[str] service_endpoint_name: The name you will use to refer to this service connection in task inputs.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["authorization"] = authorization
        __props__["description"] = description
        __props__["docker_email"] = docker_email
        __props__["docker_password"] = docker_password
        __props__["docker_password_hash"] = docker_password_hash
        __props__["docker_registry"] = docker_registry
        __props__["docker_username"] = docker_username
        __props__["project_id"] = project_id
        __props__["registry_type"] = registry_type
        __props__["service_endpoint_name"] = service_endpoint_name
        return ServiceEndpointDockerRegistry(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def authorization(self) -> pulumi.Output[Mapping[str, str]]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The name you will use to refer to this service connection in task inputs.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dockerEmail")
    def docker_email(self) -> pulumi.Output[Optional[str]]:
        """
        The email for Docker account user.
        """
        return pulumi.get(self, "docker_email")

    @property
    @pulumi.getter(name="dockerPassword")
    def docker_password(self) -> pulumi.Output[Optional[str]]:
        """
        The password for the account user identified above.
        """
        return pulumi.get(self, "docker_password")

    @property
    @pulumi.getter(name="dockerPasswordHash")
    def docker_password_hash(self) -> pulumi.Output[str]:
        """
        A bcrypted hash of the attribute 'docker_password'
        """
        return pulumi.get(self, "docker_password_hash")

    @property
    @pulumi.getter(name="dockerRegistry")
    def docker_registry(self) -> pulumi.Output[str]:
        """
        The URL of the Docker registry. (Default: "https://index.docker.io/v1/")
        """
        return pulumi.get(self, "docker_registry")

    @property
    @pulumi.getter(name="dockerUsername")
    def docker_username(self) -> pulumi.Output[Optional[str]]:
        """
        The identifier of the Docker account user.
        """
        return pulumi.get(self, "docker_username")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        """
        The project ID or project name.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="registryType")
    def registry_type(self) -> pulumi.Output[str]:
        """
        Can be "DockerHub" or "Others" (Default "DockerHub")
        """
        return pulumi.get(self, "registry_type")

    @property
    @pulumi.getter(name="serviceEndpointName")
    def service_endpoint_name(self) -> pulumi.Output[str]:
        """
        The name you will use to refer to this service connection in task inputs.
        """
        return pulumi.get(self, "service_endpoint_name")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

