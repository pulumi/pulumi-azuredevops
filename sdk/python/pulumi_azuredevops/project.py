# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = ['Project']


class Project(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 features: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 version_control: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None,
                 work_item_template: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Manages a project within Azure DevOps.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azuredevops as azuredevops

        project = azuredevops.Project("project",
            description="Test Project Description",
            features={
                "artifacts": "disabled",
                "testplans": "disabled",
            },
            version_control="Git",
            visibility="private",
            work_item_template="Agile")
        ```
        ## Relevant Links

        - [Azure DevOps Service REST API 5.1 - Projects](https://docs.microsoft.com/en-us/rest/api/azure/devops/core/projects?view=azure-devops-rest-5.1)

        ## PAT Permissions Required

        - **Project & Team**: Read, Write, & Manage

        ## Import

        Azure DevOps Projects can be imported using the project name or by the project Guid, e.g.

        ```sh
         $ pulumi import azuredevops:index/project:Project project "Test Project"
        ```

         or

        ```sh
         $ pulumi import azuredevops:index/project:Project project 00000000-0000-0000-0000-000000000000
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The Description of the Project.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] features: Defines the status (`enabled`, `disabled`) of the project features.  
               Valid features `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`
        :param pulumi.Input[str] name: The Project Name.
        :param pulumi.Input[str] version_control: Specifies the version control system. Valid values: `Git` or `Tfvc`. Defaults to `Git`.
        :param pulumi.Input[str] visibility: Specifies the visibility of the Project. Valid values: `private` or `public`. Defaults to `private`.
        :param pulumi.Input[str] work_item_template: Specifies the work item template. Defaults to `Agile`.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['description'] = description
            __props__['features'] = features
            __props__['name'] = name
            __props__['version_control'] = version_control
            __props__['visibility'] = visibility
            __props__['work_item_template'] = work_item_template
            __props__['process_template_id'] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azuredevops:Core/project:Project")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(Project, __self__).__init__(
            'azuredevops:index/project:Project',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            features: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            process_template_id: Optional[pulumi.Input[str]] = None,
            version_control: Optional[pulumi.Input[str]] = None,
            visibility: Optional[pulumi.Input[str]] = None,
            work_item_template: Optional[pulumi.Input[str]] = None) -> 'Project':
        """
        Get an existing Project resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The Description of the Project.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] features: Defines the status (`enabled`, `disabled`) of the project features.  
               Valid features `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`
        :param pulumi.Input[str] name: The Project Name.
        :param pulumi.Input[str] process_template_id: The Process Template ID used by the Project.
        :param pulumi.Input[str] version_control: Specifies the version control system. Valid values: `Git` or `Tfvc`. Defaults to `Git`.
        :param pulumi.Input[str] visibility: Specifies the visibility of the Project. Valid values: `private` or `public`. Defaults to `private`.
        :param pulumi.Input[str] work_item_template: Specifies the work item template. Defaults to `Agile`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["description"] = description
        __props__["features"] = features
        __props__["name"] = name
        __props__["process_template_id"] = process_template_id
        __props__["version_control"] = version_control
        __props__["visibility"] = visibility
        __props__["work_item_template"] = work_item_template
        return Project(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The Description of the Project.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def features(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Defines the status (`enabled`, `disabled`) of the project features.  
        Valid features `boards`, `repositories`, `pipelines`, `testplans`, `artifacts`
        """
        return pulumi.get(self, "features")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The Project Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="processTemplateId")
    def process_template_id(self) -> pulumi.Output[str]:
        """
        The Process Template ID used by the Project.
        """
        return pulumi.get(self, "process_template_id")

    @property
    @pulumi.getter(name="versionControl")
    def version_control(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the version control system. Valid values: `Git` or `Tfvc`. Defaults to `Git`.
        """
        return pulumi.get(self, "version_control")

    @property
    @pulumi.getter
    def visibility(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the visibility of the Project. Valid values: `private` or `public`. Defaults to `private`.
        """
        return pulumi.get(self, "visibility")

    @property
    @pulumi.getter(name="workItemTemplate")
    def work_item_template(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the work item template. Defaults to `Agile`.
        """
        return pulumi.get(self, "work_item_template")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

