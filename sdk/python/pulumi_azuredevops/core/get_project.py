# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from .. import _utilities, _tables

__all__ = [
    'GetProjectResult',
    'AwaitableGetProjectResult',
    'get_project',
]

warnings.warn("""azuredevops.core.getProject has been deprecated in favor of azuredevops.getProject""", DeprecationWarning)

@pulumi.output_type
class GetProjectResult:
    """
    A collection of values returned by getProject.
    """
    def __init__(__self__, description=None, features=None, id=None, name=None, process_template_id=None, project_id=None, version_control=None, visibility=None, work_item_template=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if features and not isinstance(features, dict):
            raise TypeError("Expected argument 'features' to be a dict")
        pulumi.set(__self__, "features", features)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if process_template_id and not isinstance(process_template_id, str):
            raise TypeError("Expected argument 'process_template_id' to be a str")
        pulumi.set(__self__, "process_template_id", process_template_id)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if version_control and not isinstance(version_control, str):
            raise TypeError("Expected argument 'version_control' to be a str")
        pulumi.set(__self__, "version_control", version_control)
        if visibility and not isinstance(visibility, str):
            raise TypeError("Expected argument 'visibility' to be a str")
        pulumi.set(__self__, "visibility", visibility)
        if work_item_template and not isinstance(work_item_template, str):
            raise TypeError("Expected argument 'work_item_template' to be a str")
        pulumi.set(__self__, "work_item_template", work_item_template)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def features(self) -> Mapping[str, Any]:
        return pulumi.get(self, "features")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="processTemplateId")
    def process_template_id(self) -> str:
        return pulumi.get(self, "process_template_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="versionControl")
    def version_control(self) -> str:
        return pulumi.get(self, "version_control")

    @property
    @pulumi.getter
    def visibility(self) -> str:
        return pulumi.get(self, "visibility")

    @property
    @pulumi.getter(name="workItemTemplate")
    def work_item_template(self) -> str:
        return pulumi.get(self, "work_item_template")


class AwaitableGetProjectResult(GetProjectResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProjectResult(
            description=self.description,
            features=self.features,
            id=self.id,
            name=self.name,
            process_template_id=self.process_template_id,
            project_id=self.project_id,
            version_control=self.version_control,
            visibility=self.visibility,
            work_item_template=self.work_item_template)


def get_project(name: Optional[str] = None,
                project_id: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProjectResult:
    """
    Use this data source to access information about an existing Project within Azure DevOps.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_azuredevops as azuredevops

    project = azuredevops.get_project(name="Sample Project")
    pulumi.export("id", project.id)
    pulumi.export("name", project.name)
    pulumi.export("visibility", project.visibility)
    pulumi.export("versionControl", project.version_control)
    pulumi.export("workItemTemplate", project.work_item_template)
    pulumi.export("processTemplateId", project.process_template_id)
    ```
    ## Relevant Links

    - [Azure DevOps Service REST API 5.1 - Projects - Get](https://docs.microsoft.com/en-us/rest/api/azure/devops/core/projects/get?view=azure-devops-rest-5.1)


    :param str name: Name of the Project.
    :param str project_id: ID of the Project.
    """
    pulumi.log.warn("get_project is deprecated: azuredevops.core.getProject has been deprecated in favor of azuredevops.getProject")
    __args__ = dict()
    __args__['name'] = name
    __args__['projectId'] = project_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azuredevops:Core/getProject:getProject', __args__, opts=opts, typ=GetProjectResult).value

    return AwaitableGetProjectResult(
        description=__ret__.description,
        features=__ret__.features,
        id=__ret__.id,
        name=__ret__.name,
        process_template_id=__ret__.process_template_id,
        project_id=__ret__.project_id,
        version_control=__ret__.version_control,
        visibility=__ret__.visibility,
        work_item_template=__ret__.work_item_template)
