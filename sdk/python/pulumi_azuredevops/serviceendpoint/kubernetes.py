# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import _utilities, _tables


class Kubernetes(pulumi.CustomResource):
    apiserver_url: pulumi.Output[str]
    """
    The Service Endpoint description.
    """
    authorization: pulumi.Output[dict]
    authorization_type: pulumi.Output[str]
    """
    The authentication method used to authenticate on the Kubernetes cluster. The value should be one of AzureSubscription, Kubeconfig, ServiceAccount.
    """
    azure_subscriptions: pulumi.Output[list]
    """
    The configuration for authorization_type="AzureSubscription".

      * `azureEnvironment` (`str`) - Azure environment refers to whether the public cloud offering or domestic (government) clouds are being used. Currently, only the public cloud is supported. The value must be AzureCloud. This is also the default-value.
      * `clusterName` (`str`) - The name of the Kubernetes cluster.
      * `namespace` (`str`) - The Kubernetes namespace. Default value is "default".
      * `resourcegroupId` (`str`) - The resource group id, to which the Kubernetes cluster is deployed.
      * `subscriptionId` (`str`) - The id of the Azure subscription.
      * `subscriptionName` (`str`) - The name of the Azure subscription.
      * `tenantId` (`str`) - The id of the tenant used by the subscription.
    """
    description: pulumi.Output[str]
    kubeconfigs: pulumi.Output[list]
    """
    The configuration for authorization_type="Kubeconfig".

      * `acceptUntrustedCerts` (`bool`) - Set this option to allow clients to accept a self-signed certificate.
      * `clusterContext` (`str`) - Context within the kubeconfig file that is to be used for identifying the cluster. Default value is the current-context set in kubeconfig.
      * `kubeConfig` (`str`) - The content of the kubeconfig in yaml notation to be used to communicate with the API-Server of Kubernetes.
      * `kubeConfigHash` (`str`)
    """
    project_id: pulumi.Output[str]
    """
    The project ID or project name.
    """
    service_accounts: pulumi.Output[list]
    """
    The configuration for authorization_type="ServiceAccount". This type uses the credentials of a service account currently deployed to the cluster.

      * `caCert` (`str`) - The certificate from a Kubernetes secret object.
      * `caCertHash` (`str`)
      * `token` (`str`) - The token from a Kubernetes secret object.
      * `tokenHash` (`str`)
    """
    service_endpoint_name: pulumi.Output[str]
    """
    The Service Endpoint name.
    """
    def __init__(__self__, resource_name, opts=None, apiserver_url=None, authorization=None, authorization_type=None, azure_subscriptions=None, description=None, kubeconfigs=None, project_id=None, service_accounts=None, service_endpoint_name=None, __props__=None, __name__=None, __opts__=None):
        """
        ## # ServiceEndpoint.Kubernetes

        Manages a Kubernetes service endpoint within Azure DevOps.

        ## Relevant Links

        * [Azure DevOps Service REST API 5.1 - Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-5.1)

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] apiserver_url: The Service Endpoint description.
        :param pulumi.Input[str] authorization_type: The authentication method used to authenticate on the Kubernetes cluster. The value should be one of AzureSubscription, Kubeconfig, ServiceAccount.
        :param pulumi.Input[list] azure_subscriptions: The configuration for authorization_type="AzureSubscription".
        :param pulumi.Input[list] kubeconfigs: The configuration for authorization_type="Kubeconfig".
        :param pulumi.Input[str] project_id: The project ID or project name.
        :param pulumi.Input[list] service_accounts: The configuration for authorization_type="ServiceAccount". This type uses the credentials of a service account currently deployed to the cluster.
        :param pulumi.Input[str] service_endpoint_name: The Service Endpoint name.

        The **azure_subscriptions** object supports the following:

          * `azureEnvironment` (`pulumi.Input[str]`) - Azure environment refers to whether the public cloud offering or domestic (government) clouds are being used. Currently, only the public cloud is supported. The value must be AzureCloud. This is also the default-value.
          * `clusterName` (`pulumi.Input[str]`) - The name of the Kubernetes cluster.
          * `namespace` (`pulumi.Input[str]`) - The Kubernetes namespace. Default value is "default".
          * `resourcegroupId` (`pulumi.Input[str]`) - The resource group id, to which the Kubernetes cluster is deployed.
          * `subscriptionId` (`pulumi.Input[str]`) - The id of the Azure subscription.
          * `subscriptionName` (`pulumi.Input[str]`) - The name of the Azure subscription.
          * `tenantId` (`pulumi.Input[str]`) - The id of the tenant used by the subscription.

        The **kubeconfigs** object supports the following:

          * `acceptUntrustedCerts` (`pulumi.Input[bool]`) - Set this option to allow clients to accept a self-signed certificate.
          * `clusterContext` (`pulumi.Input[str]`) - Context within the kubeconfig file that is to be used for identifying the cluster. Default value is the current-context set in kubeconfig.
          * `kubeConfig` (`pulumi.Input[str]`) - The content of the kubeconfig in yaml notation to be used to communicate with the API-Server of Kubernetes.
          * `kubeConfigHash` (`pulumi.Input[str]`)

        The **service_accounts** object supports the following:

          * `caCert` (`pulumi.Input[str]`) - The certificate from a Kubernetes secret object.
          * `caCertHash` (`pulumi.Input[str]`)
          * `token` (`pulumi.Input[str]`) - The token from a Kubernetes secret object.
          * `tokenHash` (`pulumi.Input[str]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if apiserver_url is None:
                raise TypeError("Missing required property 'apiserver_url'")
            __props__['apiserver_url'] = apiserver_url
            __props__['authorization'] = authorization
            if authorization_type is None:
                raise TypeError("Missing required property 'authorization_type'")
            __props__['authorization_type'] = authorization_type
            __props__['azure_subscriptions'] = azure_subscriptions
            __props__['description'] = description
            __props__['kubeconfigs'] = kubeconfigs
            if project_id is None:
                raise TypeError("Missing required property 'project_id'")
            __props__['project_id'] = project_id
            __props__['service_accounts'] = service_accounts
            if service_endpoint_name is None:
                raise TypeError("Missing required property 'service_endpoint_name'")
            __props__['service_endpoint_name'] = service_endpoint_name
        super(Kubernetes, __self__).__init__(
            'azuredevops:ServiceEndpoint/kubernetes:Kubernetes',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, apiserver_url=None, authorization=None, authorization_type=None, azure_subscriptions=None, description=None, kubeconfigs=None, project_id=None, service_accounts=None, service_endpoint_name=None):
        """
        Get an existing Kubernetes resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] apiserver_url: The Service Endpoint description.
        :param pulumi.Input[str] authorization_type: The authentication method used to authenticate on the Kubernetes cluster. The value should be one of AzureSubscription, Kubeconfig, ServiceAccount.
        :param pulumi.Input[list] azure_subscriptions: The configuration for authorization_type="AzureSubscription".
        :param pulumi.Input[list] kubeconfigs: The configuration for authorization_type="Kubeconfig".
        :param pulumi.Input[str] project_id: The project ID or project name.
        :param pulumi.Input[list] service_accounts: The configuration for authorization_type="ServiceAccount". This type uses the credentials of a service account currently deployed to the cluster.
        :param pulumi.Input[str] service_endpoint_name: The Service Endpoint name.

        The **azure_subscriptions** object supports the following:

          * `azureEnvironment` (`pulumi.Input[str]`) - Azure environment refers to whether the public cloud offering or domestic (government) clouds are being used. Currently, only the public cloud is supported. The value must be AzureCloud. This is also the default-value.
          * `clusterName` (`pulumi.Input[str]`) - The name of the Kubernetes cluster.
          * `namespace` (`pulumi.Input[str]`) - The Kubernetes namespace. Default value is "default".
          * `resourcegroupId` (`pulumi.Input[str]`) - The resource group id, to which the Kubernetes cluster is deployed.
          * `subscriptionId` (`pulumi.Input[str]`) - The id of the Azure subscription.
          * `subscriptionName` (`pulumi.Input[str]`) - The name of the Azure subscription.
          * `tenantId` (`pulumi.Input[str]`) - The id of the tenant used by the subscription.

        The **kubeconfigs** object supports the following:

          * `acceptUntrustedCerts` (`pulumi.Input[bool]`) - Set this option to allow clients to accept a self-signed certificate.
          * `clusterContext` (`pulumi.Input[str]`) - Context within the kubeconfig file that is to be used for identifying the cluster. Default value is the current-context set in kubeconfig.
          * `kubeConfig` (`pulumi.Input[str]`) - The content of the kubeconfig in yaml notation to be used to communicate with the API-Server of Kubernetes.
          * `kubeConfigHash` (`pulumi.Input[str]`)

        The **service_accounts** object supports the following:

          * `caCert` (`pulumi.Input[str]`) - The certificate from a Kubernetes secret object.
          * `caCertHash` (`pulumi.Input[str]`)
          * `token` (`pulumi.Input[str]`) - The token from a Kubernetes secret object.
          * `tokenHash` (`pulumi.Input[str]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["apiserver_url"] = apiserver_url
        __props__["authorization"] = authorization
        __props__["authorization_type"] = authorization_type
        __props__["azure_subscriptions"] = azure_subscriptions
        __props__["description"] = description
        __props__["kubeconfigs"] = kubeconfigs
        __props__["project_id"] = project_id
        __props__["service_accounts"] = service_accounts
        __props__["service_endpoint_name"] = service_endpoint_name
        return Kubernetes(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
