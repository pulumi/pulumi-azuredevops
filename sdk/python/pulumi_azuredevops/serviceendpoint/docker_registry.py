# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import _utilities, _tables


class DockerRegistry(pulumi.CustomResource):
    authorization: pulumi.Output[dict]
    description: pulumi.Output[str]
    """
    The name you will use to refer to this service connection in task inputs.
    """
    docker_email: pulumi.Output[str]
    """
    The email for Docker account user.
    """
    docker_password: pulumi.Output[str]
    """
    The password for the account user identified above.
    """
    docker_password_hash: pulumi.Output[str]
    """
    A bcrypted hash of the attribute 'docker_password'
    """
    docker_registry: pulumi.Output[str]
    """
    The URL of the Docker registry. (Default: "https://index.docker.io/v1/")
    """
    docker_username: pulumi.Output[str]
    """
    The identifier of the Docker account user.
    """
    project_id: pulumi.Output[str]
    """
    The project ID or project name.
    """
    registry_type: pulumi.Output[str]
    """
    Can be "DockerHub" or "Others" (Default "DockerHub")
    """
    service_endpoint_name: pulumi.Output[str]
    """
    The name you will use to refer to this service connection in task inputs.
    """
    def __init__(__self__, resource_name, opts=None, authorization=None, description=None, docker_email=None, docker_password=None, docker_registry=None, docker_username=None, project_id=None, registry_type=None, service_endpoint_name=None, __props__=None, __name__=None, __opts__=None):
        """
        Manages a Docker Registry service endpoint within Azure DevOps.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azuredevops as azuredevops

        project = azuredevops.core.Project("project",
            project_name="Sample Project",
            visibility="private",
            version_control="Git",
            work_item_template="Agile")
        # dockerhub registry service connection
        dockerhubregistry = azuredevops.service_endpoint.DockerRegistry("dockerhubregistry",
            project_id=project.id,
            service_endpoint_name="Sample Docker Hub",
            docker_username="sample",
            docker_email="email@example.com",
            docker_password="12345",
            registry_type="DockerHub")
        # other docker registry service connection
        otherregistry = azuredevops.service_endpoint.DockerRegistry("otherregistry",
            project_id=project.id,
            service_endpoint_name="Sample Docker Registry",
            docker_registry="https://sample.azurecr.io/v1",
            docker_username="sample",
            docker_password="12345",
            registry_type="Others")
        ```
        ## Relevant Links

        * [Azure DevOps Service REST API 5.1 - Service Endpoints](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-5.1)
        * [Docker Registry Service Connection](https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops&tabs=yaml#sep-docreg)

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The name you will use to refer to this service connection in task inputs.
        :param pulumi.Input[str] docker_email: The email for Docker account user.
        :param pulumi.Input[str] docker_password: The password for the account user identified above.
        :param pulumi.Input[str] docker_registry: The URL of the Docker registry. (Default: "https://index.docker.io/v1/")
        :param pulumi.Input[str] docker_username: The identifier of the Docker account user.
        :param pulumi.Input[str] project_id: The project ID or project name.
        :param pulumi.Input[str] registry_type: Can be "DockerHub" or "Others" (Default "DockerHub")
        :param pulumi.Input[str] service_endpoint_name: The name you will use to refer to this service connection in task inputs.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['authorization'] = authorization
            __props__['description'] = description
            __props__['docker_email'] = docker_email
            __props__['docker_password'] = docker_password
            if docker_registry is None:
                raise TypeError("Missing required property 'docker_registry'")
            __props__['docker_registry'] = docker_registry
            __props__['docker_username'] = docker_username
            if project_id is None:
                raise TypeError("Missing required property 'project_id'")
            __props__['project_id'] = project_id
            if registry_type is None:
                raise TypeError("Missing required property 'registry_type'")
            __props__['registry_type'] = registry_type
            if service_endpoint_name is None:
                raise TypeError("Missing required property 'service_endpoint_name'")
            __props__['service_endpoint_name'] = service_endpoint_name
            __props__['docker_password_hash'] = None
        super(DockerRegistry, __self__).__init__(
            'azuredevops:ServiceEndpoint/dockerRegistry:DockerRegistry',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, authorization=None, description=None, docker_email=None, docker_password=None, docker_password_hash=None, docker_registry=None, docker_username=None, project_id=None, registry_type=None, service_endpoint_name=None):
        """
        Get an existing DockerRegistry resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The name you will use to refer to this service connection in task inputs.
        :param pulumi.Input[str] docker_email: The email for Docker account user.
        :param pulumi.Input[str] docker_password: The password for the account user identified above.
        :param pulumi.Input[str] docker_password_hash: A bcrypted hash of the attribute 'docker_password'
        :param pulumi.Input[str] docker_registry: The URL of the Docker registry. (Default: "https://index.docker.io/v1/")
        :param pulumi.Input[str] docker_username: The identifier of the Docker account user.
        :param pulumi.Input[str] project_id: The project ID or project name.
        :param pulumi.Input[str] registry_type: Can be "DockerHub" or "Others" (Default "DockerHub")
        :param pulumi.Input[str] service_endpoint_name: The name you will use to refer to this service connection in task inputs.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["authorization"] = authorization
        __props__["description"] = description
        __props__["docker_email"] = docker_email
        __props__["docker_password"] = docker_password
        __props__["docker_password_hash"] = docker_password_hash
        __props__["docker_registry"] = docker_registry
        __props__["docker_username"] = docker_username
        __props__["project_id"] = project_id
        __props__["registry_type"] = registry_type
        __props__["service_endpoint_name"] = service_endpoint_name
        return DockerRegistry(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
