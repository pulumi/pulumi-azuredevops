# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['BuildFolderArgs', 'BuildFolder']

@pulumi.input_type
class BuildFolderArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 project_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a BuildFolder resource.
        :param pulumi.Input[str] path: The folder path.
        :param pulumi.Input[str] project_id: The ID of the project in which the folder will be created.
        :param pulumi.Input[str] description: Folder Description.
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "project_id", project_id)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The folder path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        The ID of the project in which the folder will be created.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Folder Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class _BuildFolderState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering BuildFolder resources.
        :param pulumi.Input[str] description: Folder Description.
        :param pulumi.Input[str] path: The folder path.
        :param pulumi.Input[str] project_id: The ID of the project in which the folder will be created.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Folder Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The folder path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project in which the folder will be created.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)


class BuildFolder(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a Build Folder.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azuredevops as azuredevops

        example_project = azuredevops.Project("exampleProject",
            visibility="private",
            version_control="Git",
            work_item_template="Agile")
        example_build_folder = azuredevops.BuildFolder("exampleBuildFolder",
            project_id=example_project.id,
            path="\\\\ExampleFolder",
            description="ExampleFolder description")
        ```

        ## Import

        Build Folders can be imported using the `project name/path` or `project id/path`, e.g.

        ```sh
         $ pulumi import azuredevops:index/buildFolder:BuildFolder example "Example Project/\\\\ExampleFolder"
        ```

         or

        ```sh
         $ pulumi import azuredevops:index/buildFolder:BuildFolder example 00000000-0000-0000-0000-000000000000/\\\\ExampleFolder
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Folder Description.
        :param pulumi.Input[str] path: The folder path.
        :param pulumi.Input[str] project_id: The ID of the project in which the folder will be created.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BuildFolderArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Build Folder.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_azuredevops as azuredevops

        example_project = azuredevops.Project("exampleProject",
            visibility="private",
            version_control="Git",
            work_item_template="Agile")
        example_build_folder = azuredevops.BuildFolder("exampleBuildFolder",
            project_id=example_project.id,
            path="\\\\ExampleFolder",
            description="ExampleFolder description")
        ```

        ## Import

        Build Folders can be imported using the `project name/path` or `project id/path`, e.g.

        ```sh
         $ pulumi import azuredevops:index/buildFolder:BuildFolder example "Example Project/\\\\ExampleFolder"
        ```

         or

        ```sh
         $ pulumi import azuredevops:index/buildFolder:BuildFolder example 00000000-0000-0000-0000-000000000000/\\\\ExampleFolder
        ```

        :param str resource_name: The name of the resource.
        :param BuildFolderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BuildFolderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BuildFolderArgs.__new__(BuildFolderArgs)

            __props__.__dict__["description"] = description
            if path is None and not opts.urn:
                raise TypeError("Missing required property 'path'")
            __props__.__dict__["path"] = path
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
        super(BuildFolder, __self__).__init__(
            'azuredevops:index/buildFolder:BuildFolder',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            path: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[str]] = None) -> 'BuildFolder':
        """
        Get an existing BuildFolder resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Folder Description.
        :param pulumi.Input[str] path: The folder path.
        :param pulumi.Input[str] project_id: The ID of the project in which the folder will be created.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BuildFolderState.__new__(_BuildFolderState)

        __props__.__dict__["description"] = description
        __props__.__dict__["path"] = path
        __props__.__dict__["project_id"] = project_id
        return BuildFolder(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Folder Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def path(self) -> pulumi.Output[str]:
        """
        The folder path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        """
        The ID of the project in which the folder will be created.
        """
        return pulumi.get(self, "project_id")

