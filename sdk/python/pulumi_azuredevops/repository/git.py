# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import _utilities, _tables


class Git(pulumi.CustomResource):
    default_branch: pulumi.Output[str]
    """
    The ref of the default branch.
    """
    initialization: pulumi.Output[dict]
    """
    An `initialization` block as documented below.

      * `initType` (`str`) - The type of repository to create. Valid values: `Uninitialized`, `Clean`, or `Import`. Defaults to `Uninitialized`.
      * `sourceType` (`str`) - Type type of the source repository. Used if the `init_type` is `Import`.
      * `sourceUrl` (`str`) - The URL of the source repository. Used if the `init_type` is `Import`.
    """
    is_fork: pulumi.Output[bool]
    """
    True if the repository was created as a fork.
    """
    name: pulumi.Output[str]
    """
    The name of the git repository.
    """
    parent_repository_id: pulumi.Output[str]
    project_id: pulumi.Output[str]
    """
    The project ID or project name.
    """
    remote_url: pulumi.Output[str]
    """
    Git HTTPS URL of the repository
    """
    size: pulumi.Output[float]
    """
    Size in bytes.
    """
    ssh_url: pulumi.Output[str]
    """
    Git SSH URL of the repository.
    """
    url: pulumi.Output[str]
    """
    REST API URL of the repository.
    """
    web_url: pulumi.Output[str]
    """
    Web link to the repository.
    """
    def __init__(__self__, resource_name, opts=None, default_branch=None, initialization=None, name=None, parent_repository_id=None, project_id=None, __props__=None, __name__=None, __opts__=None):
        """
        Manages a git repository within Azure DevOps.

        ## Example Usage
        ### Create Git repository

        ```python
        import pulumi
        import pulumi_azuredevops as azuredevops

        project = azuredevops.core.Project("project",
            project_name="Sample Project",
            visibility="private",
            version_control="Git",
            work_item_template="Agile")
        repo = azuredevops.repository.Git("repo",
            project_id=project.id,
            initialization={
                "initType": "Clean",
            })
        ```
        ### Create Fork of another Azure DevOps Git repository

        ```python
        import pulumi
        import pulumi_azuredevops as azuredevops

        repo = azuredevops.repository.Git("repo",
            project_id=azuredevops_project["project"]["id"],
            parent_id=azuredevops_git_repository["parent"]["id"])
        ```
        ## Relevant Links

        * [Azure DevOps Service REST API 5.1 - Agent Pools](https://docs.microsoft.com/en-us/rest/api/azure/devops/git/repositories?view=azure-devops-rest-5.1)

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] default_branch: The ref of the default branch.
        :param pulumi.Input[dict] initialization: An `initialization` block as documented below.
        :param pulumi.Input[str] name: The name of the git repository.
        :param pulumi.Input[str] project_id: The project ID or project name.

        The **initialization** object supports the following:

          * `initType` (`pulumi.Input[str]`) - The type of repository to create. Valid values: `Uninitialized`, `Clean`, or `Import`. Defaults to `Uninitialized`.
          * `sourceType` (`pulumi.Input[str]`) - Type type of the source repository. Used if the `init_type` is `Import`.
          * `sourceUrl` (`pulumi.Input[str]`) - The URL of the source repository. Used if the `init_type` is `Import`.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['default_branch'] = default_branch
            __props__['initialization'] = initialization
            __props__['name'] = name
            __props__['parent_repository_id'] = parent_repository_id
            if project_id is None:
                raise TypeError("Missing required property 'project_id'")
            __props__['project_id'] = project_id
            __props__['is_fork'] = None
            __props__['remote_url'] = None
            __props__['size'] = None
            __props__['ssh_url'] = None
            __props__['url'] = None
            __props__['web_url'] = None
        super(Git, __self__).__init__(
            'azuredevops:Repository/git:Git',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, default_branch=None, initialization=None, is_fork=None, name=None, parent_repository_id=None, project_id=None, remote_url=None, size=None, ssh_url=None, url=None, web_url=None):
        """
        Get an existing Git resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] default_branch: The ref of the default branch.
        :param pulumi.Input[dict] initialization: An `initialization` block as documented below.
        :param pulumi.Input[bool] is_fork: True if the repository was created as a fork.
        :param pulumi.Input[str] name: The name of the git repository.
        :param pulumi.Input[str] project_id: The project ID or project name.
        :param pulumi.Input[str] remote_url: Git HTTPS URL of the repository
        :param pulumi.Input[float] size: Size in bytes.
        :param pulumi.Input[str] ssh_url: Git SSH URL of the repository.
        :param pulumi.Input[str] url: REST API URL of the repository.
        :param pulumi.Input[str] web_url: Web link to the repository.

        The **initialization** object supports the following:

          * `initType` (`pulumi.Input[str]`) - The type of repository to create. Valid values: `Uninitialized`, `Clean`, or `Import`. Defaults to `Uninitialized`.
          * `sourceType` (`pulumi.Input[str]`) - Type type of the source repository. Used if the `init_type` is `Import`.
          * `sourceUrl` (`pulumi.Input[str]`) - The URL of the source repository. Used if the `init_type` is `Import`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["default_branch"] = default_branch
        __props__["initialization"] = initialization
        __props__["is_fork"] = is_fork
        __props__["name"] = name
        __props__["parent_repository_id"] = parent_repository_id
        __props__["project_id"] = project_id
        __props__["remote_url"] = remote_url
        __props__["size"] = size
        __props__["ssh_url"] = ssh_url
        __props__["url"] = url
        __props__["web_url"] = web_url
        return Git(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
