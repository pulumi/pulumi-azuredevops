# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import _utilities, _tables


class GetRepositoriesResult:
    """
    A collection of values returned by getRepositories.
    """
    def __init__(__self__, id=None, include_hidden=None, name=None, project_id=None, repositories=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if include_hidden and not isinstance(include_hidden, bool):
            raise TypeError("Expected argument 'include_hidden' to be a bool")
        __self__.include_hidden = include_hidden
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        Git repository name.
        """
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        __self__.project_id = project_id
        """
        Project identifier to which the Git repository belongs.
        """
        if repositories and not isinstance(repositories, list):
            raise TypeError("Expected argument 'repositories' to be a list")
        __self__.repositories = repositories
        """
        A list of existing projects in your Azure DevOps Organization with details about every project which includes:
        """


class AwaitableGetRepositoriesResult(GetRepositoriesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRepositoriesResult(
            id=self.id,
            include_hidden=self.include_hidden,
            name=self.name,
            project_id=self.project_id,
            repositories=self.repositories)


def get_repositories(include_hidden=None, name=None, project_id=None, opts=None):
    """
    Use this data source to access information about an existing Git Repositories within Azure DevOps.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_azuredevops as azuredevops

    project = azuredevops.Core.get_project(project_name="contoso-project")
    all_repos = azuredevops.Repository.get_repositories(project_id=project.id,
        include_hidden=True)
    single_repo = azuredevops.Repository.get_repositories(project_id=project.id,
        name="contoso-repo")
    ```
    ## Relevant Links

    - [Azure DevOps Service REST API 5.1 - Git API](https://docs.microsoft.com/en-us/rest/api/azure/devops/git/?view=azure-devops-rest-5.1)


    :param str name: Name of the Git repository to retrieve; requires `project_id` to be specified as well
    :param str project_id: ID of project to list Git repositories
    """
    __args__ = dict()
    __args__['includeHidden'] = include_hidden
    __args__['name'] = name
    __args__['projectId'] = project_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azuredevops:Repository/getRepositories:getRepositories', __args__, opts=opts).value

    return AwaitableGetRepositoriesResult(
        id=__ret__.get('id'),
        include_hidden=__ret__.get('includeHidden'),
        name=__ret__.get('name'),
        project_id=__ret__.get('projectId'),
        repositories=__ret__.get('repositories'))
