# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['GitPermissionsArgs', 'GitPermissions']

@pulumi.input_type
class GitPermissionsArgs:
    def __init__(__self__, *,
                 permissions: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 principal: pulumi.Input[str],
                 project_id: pulumi.Input[str],
                 branch_name: Optional[pulumi.Input[str]] = None,
                 replace: Optional[pulumi.Input[bool]] = None,
                 repository_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a GitPermissions resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] permissions: the permissions to assign. The follwing permissions are available
               
               
               | Permissions             | Description                                            |
               |-------------------------|--------------------------------------------------------|
               | Administer              | Administer                                             |
               | GenericRead             | Read                                                   |
               | GenericContribute       | Contribute                                             |
               | ForcePush               | Force push (rewrite history, delete branches and tags) |
               | CreateBranch            | Create branch                                          |
               | CreateTag               | Create tag                                             |
               | ManageNote              | Manage notes                                           |
               | PolicyExempt            | Bypass policies when pushing                           |
               | CreateRepository        | Create repository                                      |
               | DeleteRepository        | Delete repository                                      |
               | RenameRepository        | Rename repository                                      |
               | EditPolicies            | Edit policies                                          |
               | RemoveOthersLocks       | Remove others' locks                                   |
               | ManagePermissions       | Manage permissions                                     |
               | PullRequestContribute   | Contribute to pull requests                            |
               | PullRequestBypassPolicy | Bypass policies when completing pull requests          |
        :param pulumi.Input[str] principal: The **group** principal to assign the permissions.
        :param pulumi.Input[str] project_id: The ID of the project to assign the permissions.
        :param pulumi.Input[str] branch_name: The name of the branch to assign the permissions. 
               
               > **Note** to assign permissions to a branch, the `repository_id` must be set as well.
        :param pulumi.Input[bool] replace: Replace (`true`) or merge (`false`) the permissions. Default: `true`
        :param pulumi.Input[str] repository_id: The ID of the GIT repository to assign the permissions
        """
        GitPermissionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            permissions=permissions,
            principal=principal,
            project_id=project_id,
            branch_name=branch_name,
            replace=replace,
            repository_id=repository_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             permissions: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             principal: Optional[pulumi.Input[str]] = None,
             project_id: Optional[pulumi.Input[str]] = None,
             branch_name: Optional[pulumi.Input[str]] = None,
             replace: Optional[pulumi.Input[bool]] = None,
             repository_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if permissions is None:
            raise TypeError("Missing 'permissions' argument")
        if principal is None:
            raise TypeError("Missing 'principal' argument")
        if project_id is None and 'projectId' in kwargs:
            project_id = kwargs['projectId']
        if project_id is None:
            raise TypeError("Missing 'project_id' argument")
        if branch_name is None and 'branchName' in kwargs:
            branch_name = kwargs['branchName']
        if repository_id is None and 'repositoryId' in kwargs:
            repository_id = kwargs['repositoryId']

        _setter("permissions", permissions)
        _setter("principal", principal)
        _setter("project_id", project_id)
        if branch_name is not None:
            _setter("branch_name", branch_name)
        if replace is not None:
            _setter("replace", replace)
        if repository_id is not None:
            _setter("repository_id", repository_id)

    @property
    @pulumi.getter
    def permissions(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        the permissions to assign. The follwing permissions are available


        | Permissions             | Description                                            |
        |-------------------------|--------------------------------------------------------|
        | Administer              | Administer                                             |
        | GenericRead             | Read                                                   |
        | GenericContribute       | Contribute                                             |
        | ForcePush               | Force push (rewrite history, delete branches and tags) |
        | CreateBranch            | Create branch                                          |
        | CreateTag               | Create tag                                             |
        | ManageNote              | Manage notes                                           |
        | PolicyExempt            | Bypass policies when pushing                           |
        | CreateRepository        | Create repository                                      |
        | DeleteRepository        | Delete repository                                      |
        | RenameRepository        | Rename repository                                      |
        | EditPolicies            | Edit policies                                          |
        | RemoveOthersLocks       | Remove others' locks                                   |
        | ManagePermissions       | Manage permissions                                     |
        | PullRequestContribute   | Contribute to pull requests                            |
        | PullRequestBypassPolicy | Bypass policies when completing pull requests          |
        """
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "permissions", value)

    @property
    @pulumi.getter
    def principal(self) -> pulumi.Input[str]:
        """
        The **group** principal to assign the permissions.
        """
        return pulumi.get(self, "principal")

    @principal.setter
    def principal(self, value: pulumi.Input[str]):
        pulumi.set(self, "principal", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        The ID of the project to assign the permissions.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="branchName")
    def branch_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the branch to assign the permissions. 

        > **Note** to assign permissions to a branch, the `repository_id` must be set as well.
        """
        return pulumi.get(self, "branch_name")

    @branch_name.setter
    def branch_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branch_name", value)

    @property
    @pulumi.getter
    def replace(self) -> Optional[pulumi.Input[bool]]:
        """
        Replace (`true`) or merge (`false`) the permissions. Default: `true`
        """
        return pulumi.get(self, "replace")

    @replace.setter
    def replace(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "replace", value)

    @property
    @pulumi.getter(name="repositoryId")
    def repository_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the GIT repository to assign the permissions
        """
        return pulumi.get(self, "repository_id")

    @repository_id.setter
    def repository_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository_id", value)


@pulumi.input_type
class _GitPermissionsState:
    def __init__(__self__, *,
                 branch_name: Optional[pulumi.Input[str]] = None,
                 permissions: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 principal: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 replace: Optional[pulumi.Input[bool]] = None,
                 repository_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering GitPermissions resources.
        :param pulumi.Input[str] branch_name: The name of the branch to assign the permissions. 
               
               > **Note** to assign permissions to a branch, the `repository_id` must be set as well.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] permissions: the permissions to assign. The follwing permissions are available
               
               
               | Permissions             | Description                                            |
               |-------------------------|--------------------------------------------------------|
               | Administer              | Administer                                             |
               | GenericRead             | Read                                                   |
               | GenericContribute       | Contribute                                             |
               | ForcePush               | Force push (rewrite history, delete branches and tags) |
               | CreateBranch            | Create branch                                          |
               | CreateTag               | Create tag                                             |
               | ManageNote              | Manage notes                                           |
               | PolicyExempt            | Bypass policies when pushing                           |
               | CreateRepository        | Create repository                                      |
               | DeleteRepository        | Delete repository                                      |
               | RenameRepository        | Rename repository                                      |
               | EditPolicies            | Edit policies                                          |
               | RemoveOthersLocks       | Remove others' locks                                   |
               | ManagePermissions       | Manage permissions                                     |
               | PullRequestContribute   | Contribute to pull requests                            |
               | PullRequestBypassPolicy | Bypass policies when completing pull requests          |
        :param pulumi.Input[str] principal: The **group** principal to assign the permissions.
        :param pulumi.Input[str] project_id: The ID of the project to assign the permissions.
        :param pulumi.Input[bool] replace: Replace (`true`) or merge (`false`) the permissions. Default: `true`
        :param pulumi.Input[str] repository_id: The ID of the GIT repository to assign the permissions
        """
        _GitPermissionsState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            branch_name=branch_name,
            permissions=permissions,
            principal=principal,
            project_id=project_id,
            replace=replace,
            repository_id=repository_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             branch_name: Optional[pulumi.Input[str]] = None,
             permissions: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             principal: Optional[pulumi.Input[str]] = None,
             project_id: Optional[pulumi.Input[str]] = None,
             replace: Optional[pulumi.Input[bool]] = None,
             repository_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if branch_name is None and 'branchName' in kwargs:
            branch_name = kwargs['branchName']
        if project_id is None and 'projectId' in kwargs:
            project_id = kwargs['projectId']
        if repository_id is None and 'repositoryId' in kwargs:
            repository_id = kwargs['repositoryId']

        if branch_name is not None:
            _setter("branch_name", branch_name)
        if permissions is not None:
            _setter("permissions", permissions)
        if principal is not None:
            _setter("principal", principal)
        if project_id is not None:
            _setter("project_id", project_id)
        if replace is not None:
            _setter("replace", replace)
        if repository_id is not None:
            _setter("repository_id", repository_id)

    @property
    @pulumi.getter(name="branchName")
    def branch_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the branch to assign the permissions. 

        > **Note** to assign permissions to a branch, the `repository_id` must be set as well.
        """
        return pulumi.get(self, "branch_name")

    @branch_name.setter
    def branch_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branch_name", value)

    @property
    @pulumi.getter
    def permissions(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        the permissions to assign. The follwing permissions are available


        | Permissions             | Description                                            |
        |-------------------------|--------------------------------------------------------|
        | Administer              | Administer                                             |
        | GenericRead             | Read                                                   |
        | GenericContribute       | Contribute                                             |
        | ForcePush               | Force push (rewrite history, delete branches and tags) |
        | CreateBranch            | Create branch                                          |
        | CreateTag               | Create tag                                             |
        | ManageNote              | Manage notes                                           |
        | PolicyExempt            | Bypass policies when pushing                           |
        | CreateRepository        | Create repository                                      |
        | DeleteRepository        | Delete repository                                      |
        | RenameRepository        | Rename repository                                      |
        | EditPolicies            | Edit policies                                          |
        | RemoveOthersLocks       | Remove others' locks                                   |
        | ManagePermissions       | Manage permissions                                     |
        | PullRequestContribute   | Contribute to pull requests                            |
        | PullRequestBypassPolicy | Bypass policies when completing pull requests          |
        """
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "permissions", value)

    @property
    @pulumi.getter
    def principal(self) -> Optional[pulumi.Input[str]]:
        """
        The **group** principal to assign the permissions.
        """
        return pulumi.get(self, "principal")

    @principal.setter
    def principal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project to assign the permissions.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def replace(self) -> Optional[pulumi.Input[bool]]:
        """
        Replace (`true`) or merge (`false`) the permissions. Default: `true`
        """
        return pulumi.get(self, "replace")

    @replace.setter
    def replace(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "replace", value)

    @property
    @pulumi.getter(name="repositoryId")
    def repository_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the GIT repository to assign the permissions
        """
        return pulumi.get(self, "repository_id")

    @repository_id.setter
    def repository_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository_id", value)


class GitPermissions(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 branch_name: Optional[pulumi.Input[str]] = None,
                 permissions: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 principal: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 replace: Optional[pulumi.Input[bool]] = None,
                 repository_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages permissions for Git repositories.

        > **Note** Permissions can be assigned to group principals and not to single user principals.

        ## Permission levels

        Permission for Git Repositories within Azure DevOps can be applied on three different levels.
        Those levels are reflected by specifying (or omitting) values for the arguments `project_id`, `repository_id` and `branch_name`.

        ## Relevant Links

        * [Azure DevOps Service REST API 7.0 - Security](https://docs.microsoft.com/en-us/rest/api/azure/devops/security/?view=azure-devops-rest-7.0)

        ## PAT Permissions Required

        - **Project & Team**: vso.security_manage - Grants the ability to read, write, and manage security permissions.

        ## Import

        The resource does not support import.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] branch_name: The name of the branch to assign the permissions. 
               
               > **Note** to assign permissions to a branch, the `repository_id` must be set as well.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] permissions: the permissions to assign. The follwing permissions are available
               
               
               | Permissions             | Description                                            |
               |-------------------------|--------------------------------------------------------|
               | Administer              | Administer                                             |
               | GenericRead             | Read                                                   |
               | GenericContribute       | Contribute                                             |
               | ForcePush               | Force push (rewrite history, delete branches and tags) |
               | CreateBranch            | Create branch                                          |
               | CreateTag               | Create tag                                             |
               | ManageNote              | Manage notes                                           |
               | PolicyExempt            | Bypass policies when pushing                           |
               | CreateRepository        | Create repository                                      |
               | DeleteRepository        | Delete repository                                      |
               | RenameRepository        | Rename repository                                      |
               | EditPolicies            | Edit policies                                          |
               | RemoveOthersLocks       | Remove others' locks                                   |
               | ManagePermissions       | Manage permissions                                     |
               | PullRequestContribute   | Contribute to pull requests                            |
               | PullRequestBypassPolicy | Bypass policies when completing pull requests          |
        :param pulumi.Input[str] principal: The **group** principal to assign the permissions.
        :param pulumi.Input[str] project_id: The ID of the project to assign the permissions.
        :param pulumi.Input[bool] replace: Replace (`true`) or merge (`false`) the permissions. Default: `true`
        :param pulumi.Input[str] repository_id: The ID of the GIT repository to assign the permissions
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GitPermissionsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages permissions for Git repositories.

        > **Note** Permissions can be assigned to group principals and not to single user principals.

        ## Permission levels

        Permission for Git Repositories within Azure DevOps can be applied on three different levels.
        Those levels are reflected by specifying (or omitting) values for the arguments `project_id`, `repository_id` and `branch_name`.

        ## Relevant Links

        * [Azure DevOps Service REST API 7.0 - Security](https://docs.microsoft.com/en-us/rest/api/azure/devops/security/?view=azure-devops-rest-7.0)

        ## PAT Permissions Required

        - **Project & Team**: vso.security_manage - Grants the ability to read, write, and manage security permissions.

        ## Import

        The resource does not support import.

        :param str resource_name: The name of the resource.
        :param GitPermissionsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GitPermissionsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            GitPermissionsArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 branch_name: Optional[pulumi.Input[str]] = None,
                 permissions: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 principal: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 replace: Optional[pulumi.Input[bool]] = None,
                 repository_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GitPermissionsArgs.__new__(GitPermissionsArgs)

            __props__.__dict__["branch_name"] = branch_name
            if permissions is None and not opts.urn:
                raise TypeError("Missing required property 'permissions'")
            __props__.__dict__["permissions"] = permissions
            if principal is None and not opts.urn:
                raise TypeError("Missing required property 'principal'")
            __props__.__dict__["principal"] = principal
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["replace"] = replace
            __props__.__dict__["repository_id"] = repository_id
        super(GitPermissions, __self__).__init__(
            'azuredevops:index/gitPermissions:GitPermissions',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            branch_name: Optional[pulumi.Input[str]] = None,
            permissions: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            principal: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            replace: Optional[pulumi.Input[bool]] = None,
            repository_id: Optional[pulumi.Input[str]] = None) -> 'GitPermissions':
        """
        Get an existing GitPermissions resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] branch_name: The name of the branch to assign the permissions. 
               
               > **Note** to assign permissions to a branch, the `repository_id` must be set as well.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] permissions: the permissions to assign. The follwing permissions are available
               
               
               | Permissions             | Description                                            |
               |-------------------------|--------------------------------------------------------|
               | Administer              | Administer                                             |
               | GenericRead             | Read                                                   |
               | GenericContribute       | Contribute                                             |
               | ForcePush               | Force push (rewrite history, delete branches and tags) |
               | CreateBranch            | Create branch                                          |
               | CreateTag               | Create tag                                             |
               | ManageNote              | Manage notes                                           |
               | PolicyExempt            | Bypass policies when pushing                           |
               | CreateRepository        | Create repository                                      |
               | DeleteRepository        | Delete repository                                      |
               | RenameRepository        | Rename repository                                      |
               | EditPolicies            | Edit policies                                          |
               | RemoveOthersLocks       | Remove others' locks                                   |
               | ManagePermissions       | Manage permissions                                     |
               | PullRequestContribute   | Contribute to pull requests                            |
               | PullRequestBypassPolicy | Bypass policies when completing pull requests          |
        :param pulumi.Input[str] principal: The **group** principal to assign the permissions.
        :param pulumi.Input[str] project_id: The ID of the project to assign the permissions.
        :param pulumi.Input[bool] replace: Replace (`true`) or merge (`false`) the permissions. Default: `true`
        :param pulumi.Input[str] repository_id: The ID of the GIT repository to assign the permissions
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GitPermissionsState.__new__(_GitPermissionsState)

        __props__.__dict__["branch_name"] = branch_name
        __props__.__dict__["permissions"] = permissions
        __props__.__dict__["principal"] = principal
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["replace"] = replace
        __props__.__dict__["repository_id"] = repository_id
        return GitPermissions(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="branchName")
    def branch_name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the branch to assign the permissions. 

        > **Note** to assign permissions to a branch, the `repository_id` must be set as well.
        """
        return pulumi.get(self, "branch_name")

    @property
    @pulumi.getter
    def permissions(self) -> pulumi.Output[Mapping[str, str]]:
        """
        the permissions to assign. The follwing permissions are available


        | Permissions             | Description                                            |
        |-------------------------|--------------------------------------------------------|
        | Administer              | Administer                                             |
        | GenericRead             | Read                                                   |
        | GenericContribute       | Contribute                                             |
        | ForcePush               | Force push (rewrite history, delete branches and tags) |
        | CreateBranch            | Create branch                                          |
        | CreateTag               | Create tag                                             |
        | ManageNote              | Manage notes                                           |
        | PolicyExempt            | Bypass policies when pushing                           |
        | CreateRepository        | Create repository                                      |
        | DeleteRepository        | Delete repository                                      |
        | RenameRepository        | Rename repository                                      |
        | EditPolicies            | Edit policies                                          |
        | RemoveOthersLocks       | Remove others' locks                                   |
        | ManagePermissions       | Manage permissions                                     |
        | PullRequestContribute   | Contribute to pull requests                            |
        | PullRequestBypassPolicy | Bypass policies when completing pull requests          |
        """
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter
    def principal(self) -> pulumi.Output[str]:
        """
        The **group** principal to assign the permissions.
        """
        return pulumi.get(self, "principal")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        """
        The ID of the project to assign the permissions.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def replace(self) -> pulumi.Output[Optional[bool]]:
        """
        Replace (`true`) or merge (`false`) the permissions. Default: `true`
        """
        return pulumi.get(self, "replace")

    @property
    @pulumi.getter(name="repositoryId")
    def repository_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the GIT repository to assign the permissions
        """
        return pulumi.get(self, "repository_id")

