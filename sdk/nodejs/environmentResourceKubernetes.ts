// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class EnvironmentResourceKubernetes extends pulumi.CustomResource {
    /**
     * Get an existing EnvironmentResourceKubernetes resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EnvironmentResourceKubernetesState, opts?: pulumi.CustomResourceOptions): EnvironmentResourceKubernetes {
        return new EnvironmentResourceKubernetes(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azuredevops:index/environmentResourceKubernetes:EnvironmentResourceKubernetes';

    /**
     * Returns true if the given object is an instance of EnvironmentResourceKubernetes.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EnvironmentResourceKubernetes {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EnvironmentResourceKubernetes.__pulumiType;
    }

    public readonly clusterName!: pulumi.Output<string | undefined>;
    public readonly environmentId!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly namespace!: pulumi.Output<string>;
    public readonly projectId!: pulumi.Output<string>;
    public readonly serviceEndpointId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<string[] | undefined>;

    /**
     * Create a EnvironmentResourceKubernetes resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EnvironmentResourceKubernetesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EnvironmentResourceKubernetesArgs | EnvironmentResourceKubernetesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EnvironmentResourceKubernetesState | undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["serviceEndpointId"] = state ? state.serviceEndpointId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as EnvironmentResourceKubernetesArgs | undefined;
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.serviceEndpointId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceEndpointId'");
            }
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["serviceEndpointId"] = args ? args.serviceEndpointId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EnvironmentResourceKubernetes.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EnvironmentResourceKubernetes resources.
 */
export interface EnvironmentResourceKubernetesState {
    clusterName?: pulumi.Input<string>;
    environmentId?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    serviceEndpointId?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a EnvironmentResourceKubernetes resource.
 */
export interface EnvironmentResourceKubernetesArgs {
    clusterName?: pulumi.Input<string>;
    environmentId: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    namespace: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    serviceEndpointId: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
