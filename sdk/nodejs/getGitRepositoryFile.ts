// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Use this data source to get an existing Git Repository File.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azuredevops from "@pulumi/azuredevops";
 *
 * const example = azuredevops.getProject({
 *     name: "Example Project",
 * });
 * // Load a specific Git repository by name
 * const exampleGetGitRepository = example.then(example => azuredevops.getGitRepository({
 *     projectId: example.id,
 *     name: "Example Repository",
 * }));
 * const exampleGetGitRepositoryFile = exampleGetGitRepository.then(exampleGetGitRepository => azuredevops.getGitRepositoryFile({
 *     repositoryId: exampleGetGitRepository.id,
 *     branch: "refs/heads/main",
 *     file: "MyFile.txt",
 * }));
 * ```
 */
export function getGitRepositoryFile(args: GetGitRepositoryFileArgs, opts?: pulumi.InvokeOptions): Promise<GetGitRepositoryFileResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azuredevops:index/getGitRepositoryFile:getGitRepositoryFile", {
        "branch": args.branch,
        "file": args.file,
        "repositoryId": args.repositoryId,
        "tag": args.tag,
    }, opts);
}

/**
 * A collection of arguments for invoking getGitRepositoryFile.
 */
export interface GetGitRepositoryFileArgs {
    /**
     * The git branch to use. Conflicts with `tag`; one or the other must be specified.
     */
    branch?: string;
    /**
     * The path of the file to get.
     */
    file: string;
    /**
     * The ID of the Git repository.
     */
    repositoryId: string;
    /**
     * The tag to use.Conflicts with `branch`; one or the other must be specified.
     */
    tag?: string;
}

/**
 * A collection of values returned by getGitRepositoryFile.
 */
export interface GetGitRepositoryFileResult {
    readonly branch?: string;
    /**
     * The file content.
     */
    readonly content: string;
    readonly file: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The commit message for the file.
     */
    readonly lastCommitMessage: string;
    readonly repositoryId: string;
    readonly tag?: string;
}
/**
 * Use this data source to get an existing Git Repository File.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azuredevops from "@pulumi/azuredevops";
 *
 * const example = azuredevops.getProject({
 *     name: "Example Project",
 * });
 * // Load a specific Git repository by name
 * const exampleGetGitRepository = example.then(example => azuredevops.getGitRepository({
 *     projectId: example.id,
 *     name: "Example Repository",
 * }));
 * const exampleGetGitRepositoryFile = exampleGetGitRepository.then(exampleGetGitRepository => azuredevops.getGitRepositoryFile({
 *     repositoryId: exampleGetGitRepository.id,
 *     branch: "refs/heads/main",
 *     file: "MyFile.txt",
 * }));
 * ```
 */
export function getGitRepositoryFileOutput(args: GetGitRepositoryFileOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetGitRepositoryFileResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("azuredevops:index/getGitRepositoryFile:getGitRepositoryFile", {
        "branch": args.branch,
        "file": args.file,
        "repositoryId": args.repositoryId,
        "tag": args.tag,
    }, opts);
}

/**
 * A collection of arguments for invoking getGitRepositoryFile.
 */
export interface GetGitRepositoryFileOutputArgs {
    /**
     * The git branch to use. Conflicts with `tag`; one or the other must be specified.
     */
    branch?: pulumi.Input<string>;
    /**
     * The path of the file to get.
     */
    file: pulumi.Input<string>;
    /**
     * The ID of the Git repository.
     */
    repositoryId: pulumi.Input<string>;
    /**
     * The tag to use.Conflicts with `branch`; one or the other must be specified.
     */
    tag?: pulumi.Input<string>;
}
