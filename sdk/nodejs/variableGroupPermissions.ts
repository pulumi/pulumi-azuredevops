// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages permissions for a Variable Group
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azuredevops from "@pulumi/azuredevops";
 *
 * const project = new azuredevops.Project("project", {
 *     name: "Testing",
 *     description: "Testing-description",
 *     visibility: "private",
 *     versionControl: "Git",
 *     workItemTemplate: "Agile",
 * });
 * const example = new azuredevops.VariableGroup("example", {
 *     projectId: project.id,
 *     name: "test",
 *     description: "Test Description",
 *     allowAccess: true,
 *     variables: [{
 *         name: "key1",
 *         value: "val1",
 *     }],
 * });
 * const tf-project-readers = azuredevops.getGroupOutput({
 *     projectId: project.id,
 *     name: "Readers",
 * });
 * const permissions = new azuredevops.VariableGroupPermissions("permissions", {
 *     projectId: project.id,
 *     variableGroupId: example.id,
 *     principal: tf_project_readers.apply(tf_project_readers => tf_project_readers.id),
 *     permissions: {
 *         View: "allow",
 *         Administer: "allow",
 *         Use: "allow",
 *     },
 * });
 * ```
 *
 * ## Roles
 *
 * The Azure DevOps UI uses roles to assign permissions for variable groups.
 * <table>
 * <thead>
 * <tr>
 * <th>Role</th>
 * <th>Allow Permissions</th>
 * </tr>
 * </thead>
 * <tbody>
 * <tr>
 * <td>Reader</td>
 * <td>View</td>
 * </tr>
 * <tr>
 * <td>User</td>
 * <td>View, Use</td>
 * </tr>
 * <tr>
 * <td>Administrator</td>
 * <td>View, Use, Administer</td>
 * </tr>
 * </tbody>
 * </table>
 *
 * ## Relevant Links
 *
 * * [Azure DevOps Service REST API 6.0 - Security](https://docs.microsoft.com/en-us/rest/api/azure/devops/security/?view=azure-devops-rest-6.0)
 *
 * ## PAT Permissions Required
 *
 * - **Project & Team**: vso.security_manage - Grants the ability to read, write, and manage security permissions.
 *
 * ## Import
 *
 * The resource does not support import.
 */
export class VariableGroupPermissions extends pulumi.CustomResource {
    /**
     * Get an existing VariableGroupPermissions resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VariableGroupPermissionsState, opts?: pulumi.CustomResourceOptions): VariableGroupPermissions {
        return new VariableGroupPermissions(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azuredevops:index/variableGroupPermissions:VariableGroupPermissions';

    /**
     * Returns true if the given object is an instance of VariableGroupPermissions.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VariableGroupPermissions {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VariableGroupPermissions.__pulumiType;
    }

    /**
     * the permissions to assign. The following permissions are available.
     */
    public readonly permissions!: pulumi.Output<{[key: string]: string}>;
    /**
     * The **group** principal to assign the permissions.
     */
    public readonly principal!: pulumi.Output<string>;
    /**
     * The ID of the project.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Replace (`true`) or merge (`false`) the permissions. Default: `true`
     * <table>
     * <thead>
     * <tr>
     * <th>Permission</th>
     * <th>Description</th>
     * </tr>
     * </thead>
     * <tbody>
     * <tr>
     * <td>View</td>
     * <td>View library item</td>
     * </tr>
     * <tr>
     * <td>Administer</td>
     * <td>Administer library item</td>
     * </tr>
     * <tr>
     * <td>Create</td>
     * <td>Create library item</td>
     * </tr>
     * <tr>
     * <td>ViewSecrets</td>
     * <td>View library item secrets</td>
     * </tr>
     * <tr>
     * <td>Use</td>
     * <td>Use library item</td>
     * </tr>
     * <tr>
     * <td>Owner</td>
     * <td>Owner library item</td>
     * </tr>
     * </tbody>
     * </table>
     */
    public readonly replace!: pulumi.Output<boolean | undefined>;
    /**
     * The id of the variable group to assign the permissions.
     */
    public readonly variableGroupId!: pulumi.Output<string>;

    /**
     * Create a VariableGroupPermissions resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VariableGroupPermissionsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VariableGroupPermissionsArgs | VariableGroupPermissionsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VariableGroupPermissionsState | undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["principal"] = state ? state.principal : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["replace"] = state ? state.replace : undefined;
            resourceInputs["variableGroupId"] = state ? state.variableGroupId : undefined;
        } else {
            const args = argsOrState as VariableGroupPermissionsArgs | undefined;
            if ((!args || args.permissions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permissions'");
            }
            if ((!args || args.principal === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principal'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.variableGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'variableGroupId'");
            }
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["principal"] = args ? args.principal : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["replace"] = args ? args.replace : undefined;
            resourceInputs["variableGroupId"] = args ? args.variableGroupId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VariableGroupPermissions.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VariableGroupPermissions resources.
 */
export interface VariableGroupPermissionsState {
    /**
     * the permissions to assign. The following permissions are available.
     */
    permissions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The **group** principal to assign the permissions.
     */
    principal?: pulumi.Input<string>;
    /**
     * The ID of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Replace (`true`) or merge (`false`) the permissions. Default: `true`
     * <table>
     * <thead>
     * <tr>
     * <th>Permission</th>
     * <th>Description</th>
     * </tr>
     * </thead>
     * <tbody>
     * <tr>
     * <td>View</td>
     * <td>View library item</td>
     * </tr>
     * <tr>
     * <td>Administer</td>
     * <td>Administer library item</td>
     * </tr>
     * <tr>
     * <td>Create</td>
     * <td>Create library item</td>
     * </tr>
     * <tr>
     * <td>ViewSecrets</td>
     * <td>View library item secrets</td>
     * </tr>
     * <tr>
     * <td>Use</td>
     * <td>Use library item</td>
     * </tr>
     * <tr>
     * <td>Owner</td>
     * <td>Owner library item</td>
     * </tr>
     * </tbody>
     * </table>
     */
    replace?: pulumi.Input<boolean>;
    /**
     * The id of the variable group to assign the permissions.
     */
    variableGroupId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VariableGroupPermissions resource.
 */
export interface VariableGroupPermissionsArgs {
    /**
     * the permissions to assign. The following permissions are available.
     */
    permissions: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The **group** principal to assign the permissions.
     */
    principal: pulumi.Input<string>;
    /**
     * The ID of the project.
     */
    projectId: pulumi.Input<string>;
    /**
     * Replace (`true`) or merge (`false`) the permissions. Default: `true`
     * <table>
     * <thead>
     * <tr>
     * <th>Permission</th>
     * <th>Description</th>
     * </tr>
     * </thead>
     * <tbody>
     * <tr>
     * <td>View</td>
     * <td>View library item</td>
     * </tr>
     * <tr>
     * <td>Administer</td>
     * <td>Administer library item</td>
     * </tr>
     * <tr>
     * <td>Create</td>
     * <td>Create library item</td>
     * </tr>
     * <tr>
     * <td>ViewSecrets</td>
     * <td>View library item secrets</td>
     * </tr>
     * <tr>
     * <td>Use</td>
     * <td>Use library item</td>
     * </tr>
     * <tr>
     * <td>Owner</td>
     * <td>Owner library item</td>
     * </tr>
     * </tbody>
     * </table>
     */
    replace?: pulumi.Input<boolean>;
    /**
     * The id of the variable group to assign the permissions.
     */
    variableGroupId: pulumi.Input<string>;
}
