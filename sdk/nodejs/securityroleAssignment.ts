// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages assignment of security roles to various resources within Azure DevOps organization.
 */
export class SecurityroleAssignment extends pulumi.CustomResource {
    /**
     * Get an existing SecurityroleAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecurityroleAssignmentState, opts?: pulumi.CustomResourceOptions): SecurityroleAssignment {
        return new SecurityroleAssignment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azuredevops:index/securityroleAssignment:SecurityroleAssignment';

    /**
     * Returns true if the given object is an instance of SecurityroleAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecurityroleAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecurityroleAssignment.__pulumiType;
    }

    /**
     * The ID of the identity to authorize.
     */
    public readonly identityId!: pulumi.Output<string>;
    /**
     * The ID of the resource on which the role is to be assigned.
     */
    public readonly resourceId!: pulumi.Output<string>;
    /**
     * Name of the role to assign.
     */
    public readonly roleName!: pulumi.Output<string>;
    /**
     * The scope in which this assignment should exist.
     */
    public readonly scope!: pulumi.Output<string>;

    /**
     * Create a SecurityroleAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecurityroleAssignmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecurityroleAssignmentArgs | SecurityroleAssignmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecurityroleAssignmentState | undefined;
            resourceInputs["identityId"] = state ? state.identityId : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["roleName"] = state ? state.roleName : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
        } else {
            const args = argsOrState as SecurityroleAssignmentArgs | undefined;
            if ((!args || args.identityId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identityId'");
            }
            if ((!args || args.resourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            if ((!args || args.roleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleName'");
            }
            if ((!args || args.scope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            resourceInputs["identityId"] = args ? args.identityId : undefined;
            resourceInputs["resourceId"] = args ? args.resourceId : undefined;
            resourceInputs["roleName"] = args ? args.roleName : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecurityroleAssignment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecurityroleAssignment resources.
 */
export interface SecurityroleAssignmentState {
    /**
     * The ID of the identity to authorize.
     */
    identityId?: pulumi.Input<string>;
    /**
     * The ID of the resource on which the role is to be assigned.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * Name of the role to assign.
     */
    roleName?: pulumi.Input<string>;
    /**
     * The scope in which this assignment should exist.
     */
    scope?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecurityroleAssignment resource.
 */
export interface SecurityroleAssignmentArgs {
    /**
     * The ID of the identity to authorize.
     */
    identityId: pulumi.Input<string>;
    /**
     * The ID of the resource on which the role is to be assigned.
     */
    resourceId: pulumi.Input<string>;
    /**
     * Name of the role to assign.
     */
    roleName: pulumi.Input<string>;
    /**
     * The scope in which this assignment should exist.
     */
    scope: pulumi.Input<string>;
}
