// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages a NuGet service endpoint within Azure DevOps.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azuredevops from "@pulumi/azuredevops";
 *
 * const exampleProject = new azuredevops.Project("exampleProject", {
 *     visibility: "private",
 *     versionControl: "Git",
 *     workItemTemplate: "Agile",
 *     description: "Managed by Terraform",
 * });
 * const exampleServiceendpointNuget = new azuredevops.ServiceendpointNuget("exampleServiceendpointNuget", {
 *     projectId: exampleProject.id,
 *     apiKey: "apikey",
 *     serviceEndpointName: "Example NuGet",
 *     description: "Managed by Terraform",
 * });
 * ```
 * ## Relevant Links
 *
 * - [Azure DevOps Service REST API 7.0 - Agent Pools](https://docs.microsoft.com/en-us/rest/api/azure/devops/serviceendpoint/endpoints?view=azure-devops-rest-7.0)
 *
 * ## Import
 *
 * Azure DevOps Service Endpoint NuGet can be imported using **projectID/serviceEndpointID** or **projectName/serviceEndpointID**
 *
 * ```sh
 *  $ pulumi import azuredevops:index/serviceendpointNuget:ServiceendpointNuget example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000
 * ```
 */
export class ServiceendpointNuget extends pulumi.CustomResource {
    /**
     * Get an existing ServiceendpointNuget resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceendpointNugetState, opts?: pulumi.CustomResourceOptions): ServiceendpointNuget {
        return new ServiceendpointNuget(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azuredevops:index/serviceendpointNuget:ServiceendpointNuget';

    /**
     * Returns true if the given object is an instance of ServiceendpointNuget.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceendpointNuget {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceendpointNuget.__pulumiType;
    }

    /**
     * The API Key used to connect to the endpoint.
     */
    public readonly apiKey!: pulumi.Output<string | undefined>;
    public readonly authorization!: pulumi.Output<{[key: string]: string}>;
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The URL for the feed. This will generally end with `index.json`.
     */
    public readonly feedUrl!: pulumi.Output<string>;
    /**
     * The account password used to connect to the endpoint
     *
     * > **Note** Only one of `apiKey` or `personalAccessToken` or  `username`, `password` can be set at the same time.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * The Personal access token used to  connect to the endpoint. Personal access tokens are applicable only for NuGet feeds hosted on other Azure DevOps Services organizations or Azure DevOps Server 2019 (or later).
     */
    public readonly personalAccessToken!: pulumi.Output<string | undefined>;
    /**
     * The ID of the project.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The Service Endpoint name.
     */
    public readonly serviceEndpointName!: pulumi.Output<string>;
    /**
     * The account username used to connect to the endpoint.
     */
    public readonly username!: pulumi.Output<string | undefined>;

    /**
     * Create a ServiceendpointNuget resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceendpointNugetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceendpointNugetArgs | ServiceendpointNugetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceendpointNugetState | undefined;
            resourceInputs["apiKey"] = state ? state.apiKey : undefined;
            resourceInputs["authorization"] = state ? state.authorization : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["feedUrl"] = state ? state.feedUrl : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["personalAccessToken"] = state ? state.personalAccessToken : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["serviceEndpointName"] = state ? state.serviceEndpointName : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as ServiceendpointNugetArgs | undefined;
            if ((!args || args.feedUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'feedUrl'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.serviceEndpointName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceEndpointName'");
            }
            resourceInputs["apiKey"] = args?.apiKey ? pulumi.secret(args.apiKey) : undefined;
            resourceInputs["authorization"] = args ? args.authorization : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["feedUrl"] = args ? args.feedUrl : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["personalAccessToken"] = args?.personalAccessToken ? pulumi.secret(args.personalAccessToken) : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["serviceEndpointName"] = args ? args.serviceEndpointName : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["apiKey", "password", "personalAccessToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ServiceendpointNuget.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceendpointNuget resources.
 */
export interface ServiceendpointNugetState {
    /**
     * The API Key used to connect to the endpoint.
     */
    apiKey?: pulumi.Input<string>;
    authorization?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    /**
     * The URL for the feed. This will generally end with `index.json`.
     */
    feedUrl?: pulumi.Input<string>;
    /**
     * The account password used to connect to the endpoint
     *
     * > **Note** Only one of `apiKey` or `personalAccessToken` or  `username`, `password` can be set at the same time.
     */
    password?: pulumi.Input<string>;
    /**
     * The Personal access token used to  connect to the endpoint. Personal access tokens are applicable only for NuGet feeds hosted on other Azure DevOps Services organizations or Azure DevOps Server 2019 (or later).
     */
    personalAccessToken?: pulumi.Input<string>;
    /**
     * The ID of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The Service Endpoint name.
     */
    serviceEndpointName?: pulumi.Input<string>;
    /**
     * The account username used to connect to the endpoint.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceendpointNuget resource.
 */
export interface ServiceendpointNugetArgs {
    /**
     * The API Key used to connect to the endpoint.
     */
    apiKey?: pulumi.Input<string>;
    authorization?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    /**
     * The URL for the feed. This will generally end with `index.json`.
     */
    feedUrl: pulumi.Input<string>;
    /**
     * The account password used to connect to the endpoint
     *
     * > **Note** Only one of `apiKey` or `personalAccessToken` or  `username`, `password` can be set at the same time.
     */
    password?: pulumi.Input<string>;
    /**
     * The Personal access token used to  connect to the endpoint. Personal access tokens are applicable only for NuGet feeds hosted on other Azure DevOps Services organizations or Azure DevOps Server 2019 (or later).
     */
    personalAccessToken?: pulumi.Input<string>;
    /**
     * The ID of the project.
     */
    projectId: pulumi.Input<string>;
    /**
     * The Service Endpoint name.
     */
    serviceEndpointName: pulumi.Input<string>;
    /**
     * The account username used to connect to the endpoint.
     */
    username?: pulumi.Input<string>;
}
