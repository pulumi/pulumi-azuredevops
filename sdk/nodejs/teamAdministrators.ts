// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages administrators of a team within a project in a Azure DevOps organization.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azuredevops from "@pulumi/azuredevops";
 *
 * const exampleProject = new azuredevops.Project("exampleProject", {
 *     workItemTemplate: "Agile",
 *     versionControl: "Git",
 *     visibility: "private",
 *     description: "Managed by Terraform",
 * });
 * const example-project-contributors = azuredevops.getGroupOutput({
 *     projectId: exampleProject.id,
 *     name: "Contributors",
 * });
 * const exampleTeam = new azuredevops.Team("exampleTeam", {projectId: exampleProject.id});
 * const example_team_administrators = new azuredevops.TeamAdministrators("example-team-administrators", {
 *     projectId: exampleTeam.projectId,
 *     teamId: exampleTeam.id,
 *     mode: "overwrite",
 *     administrators: [example_project_contributors.apply(example_project_contributors => example_project_contributors.descriptor)],
 * });
 * ```
 * ## Relevant Links
 *
 * - [Azure DevOps Service REST API 6.0 - Teams - Update](https://docs.microsoft.com/en-us/rest/api/azure/devops/core/teams/update?view=azure-devops-rest-6.0)
 *
 * ## PAT Permissions Required
 *
 * - **vso.project_write**:	Grants the ability to read and update projects and teams.
 *
 * ## Import
 *
 * The resource does not support import.
 */
export class TeamAdministrators extends pulumi.CustomResource {
    /**
     * Get an existing TeamAdministrators resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TeamAdministratorsState, opts?: pulumi.CustomResourceOptions): TeamAdministrators {
        return new TeamAdministrators(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azuredevops:index/teamAdministrators:TeamAdministrators';

    /**
     * Returns true if the given object is an instance of TeamAdministrators.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TeamAdministrators {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TeamAdministrators.__pulumiType;
    }

    /**
     * List of subject descriptors to define adminitrators of the team.
     */
    public readonly administrators!: pulumi.Output<string[]>;
    /**
     * The mode how the resource manages team administrators.
     * - `mode == add`: the resource will ensure that all specified administrators will be part of the referenced team
     * - `mode == overwrite`: the resource will replace all existing administrators with the administrators specified within the `administrators` block
     */
    public readonly mode!: pulumi.Output<string | undefined>;
    /**
     * The Project ID.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The ID of the Team.
     */
    public readonly teamId!: pulumi.Output<string>;

    /**
     * Create a TeamAdministrators resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TeamAdministratorsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TeamAdministratorsArgs | TeamAdministratorsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TeamAdministratorsState | undefined;
            resourceInputs["administrators"] = state ? state.administrators : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
        } else {
            const args = argsOrState as TeamAdministratorsArgs | undefined;
            if ((!args || args.administrators === undefined) && !opts.urn) {
                throw new Error("Missing required property 'administrators'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.teamId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'teamId'");
            }
            resourceInputs["administrators"] = args ? args.administrators : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TeamAdministrators.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TeamAdministrators resources.
 */
export interface TeamAdministratorsState {
    /**
     * List of subject descriptors to define adminitrators of the team.
     */
    administrators?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The mode how the resource manages team administrators.
     * - `mode == add`: the resource will ensure that all specified administrators will be part of the referenced team
     * - `mode == overwrite`: the resource will replace all existing administrators with the administrators specified within the `administrators` block
     */
    mode?: pulumi.Input<string>;
    /**
     * The Project ID.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The ID of the Team.
     */
    teamId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TeamAdministrators resource.
 */
export interface TeamAdministratorsArgs {
    /**
     * List of subject descriptors to define adminitrators of the team.
     */
    administrators: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The mode how the resource manages team administrators.
     * - `mode == add`: the resource will ensure that all specified administrators will be part of the referenced team
     * - `mode == overwrite`: the resource will replace all existing administrators with the administrators specified within the `administrators` block
     */
    mode?: pulumi.Input<string>;
    /**
     * The Project ID.
     */
    projectId: pulumi.Input<string>;
    /**
     * The ID of the Team.
     */
    teamId: pulumi.Input<string>;
}
