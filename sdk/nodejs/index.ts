// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AreaPermissionsArgs, AreaPermissionsState } from "./areaPermissions";
export type AreaPermissions = import("./areaPermissions").AreaPermissions;
export const AreaPermissions: typeof import("./areaPermissions").AreaPermissions = null as any;
utilities.lazyLoad(exports, ["AreaPermissions"], () => require("./areaPermissions"));

export { BranchPolicyAutoReviewersArgs, BranchPolicyAutoReviewersState } from "./branchPolicyAutoReviewers";
export type BranchPolicyAutoReviewers = import("./branchPolicyAutoReviewers").BranchPolicyAutoReviewers;
export const BranchPolicyAutoReviewers: typeof import("./branchPolicyAutoReviewers").BranchPolicyAutoReviewers = null as any;
utilities.lazyLoad(exports, ["BranchPolicyAutoReviewers"], () => require("./branchPolicyAutoReviewers"));

export { BranchPolicyBuildValidationArgs, BranchPolicyBuildValidationState } from "./branchPolicyBuildValidation";
export type BranchPolicyBuildValidation = import("./branchPolicyBuildValidation").BranchPolicyBuildValidation;
export const BranchPolicyBuildValidation: typeof import("./branchPolicyBuildValidation").BranchPolicyBuildValidation = null as any;
utilities.lazyLoad(exports, ["BranchPolicyBuildValidation"], () => require("./branchPolicyBuildValidation"));

export { BranchPolicyCommentResolutionArgs, BranchPolicyCommentResolutionState } from "./branchPolicyCommentResolution";
export type BranchPolicyCommentResolution = import("./branchPolicyCommentResolution").BranchPolicyCommentResolution;
export const BranchPolicyCommentResolution: typeof import("./branchPolicyCommentResolution").BranchPolicyCommentResolution = null as any;
utilities.lazyLoad(exports, ["BranchPolicyCommentResolution"], () => require("./branchPolicyCommentResolution"));

export { BranchPolicyMergeTypesArgs, BranchPolicyMergeTypesState } from "./branchPolicyMergeTypes";
export type BranchPolicyMergeTypes = import("./branchPolicyMergeTypes").BranchPolicyMergeTypes;
export const BranchPolicyMergeTypes: typeof import("./branchPolicyMergeTypes").BranchPolicyMergeTypes = null as any;
utilities.lazyLoad(exports, ["BranchPolicyMergeTypes"], () => require("./branchPolicyMergeTypes"));

export { BranchPolicyMinReviewersArgs, BranchPolicyMinReviewersState } from "./branchPolicyMinReviewers";
export type BranchPolicyMinReviewers = import("./branchPolicyMinReviewers").BranchPolicyMinReviewers;
export const BranchPolicyMinReviewers: typeof import("./branchPolicyMinReviewers").BranchPolicyMinReviewers = null as any;
utilities.lazyLoad(exports, ["BranchPolicyMinReviewers"], () => require("./branchPolicyMinReviewers"));

export { BranchPolicyStatusCheckArgs, BranchPolicyStatusCheckState } from "./branchPolicyStatusCheck";
export type BranchPolicyStatusCheck = import("./branchPolicyStatusCheck").BranchPolicyStatusCheck;
export const BranchPolicyStatusCheck: typeof import("./branchPolicyStatusCheck").BranchPolicyStatusCheck = null as any;
utilities.lazyLoad(exports, ["BranchPolicyStatusCheck"], () => require("./branchPolicyStatusCheck"));

export { BranchPolicyWorkItemLinkingArgs, BranchPolicyWorkItemLinkingState } from "./branchPolicyWorkItemLinking";
export type BranchPolicyWorkItemLinking = import("./branchPolicyWorkItemLinking").BranchPolicyWorkItemLinking;
export const BranchPolicyWorkItemLinking: typeof import("./branchPolicyWorkItemLinking").BranchPolicyWorkItemLinking = null as any;
utilities.lazyLoad(exports, ["BranchPolicyWorkItemLinking"], () => require("./branchPolicyWorkItemLinking"));

export { BuildDefinitionArgs, BuildDefinitionState } from "./buildDefinition";
export type BuildDefinition = import("./buildDefinition").BuildDefinition;
export const BuildDefinition: typeof import("./buildDefinition").BuildDefinition = null as any;
utilities.lazyLoad(exports, ["BuildDefinition"], () => require("./buildDefinition"));

export { BuildDefinitionPermissionsArgs, BuildDefinitionPermissionsState } from "./buildDefinitionPermissions";
export type BuildDefinitionPermissions = import("./buildDefinitionPermissions").BuildDefinitionPermissions;
export const BuildDefinitionPermissions: typeof import("./buildDefinitionPermissions").BuildDefinitionPermissions = null as any;
utilities.lazyLoad(exports, ["BuildDefinitionPermissions"], () => require("./buildDefinitionPermissions"));

export { BuildFolderArgs, BuildFolderState } from "./buildFolder";
export type BuildFolder = import("./buildFolder").BuildFolder;
export const BuildFolder: typeof import("./buildFolder").BuildFolder = null as any;
utilities.lazyLoad(exports, ["BuildFolder"], () => require("./buildFolder"));

export { BuildFolderPermissionsArgs, BuildFolderPermissionsState } from "./buildFolderPermissions";
export type BuildFolderPermissions = import("./buildFolderPermissions").BuildFolderPermissions;
export const BuildFolderPermissions: typeof import("./buildFolderPermissions").BuildFolderPermissions = null as any;
utilities.lazyLoad(exports, ["BuildFolderPermissions"], () => require("./buildFolderPermissions"));

export { CheckApprovalArgs, CheckApprovalState } from "./checkApproval";
export type CheckApproval = import("./checkApproval").CheckApproval;
export const CheckApproval: typeof import("./checkApproval").CheckApproval = null as any;
utilities.lazyLoad(exports, ["CheckApproval"], () => require("./checkApproval"));

export { CheckBranchControlArgs, CheckBranchControlState } from "./checkBranchControl";
export type CheckBranchControl = import("./checkBranchControl").CheckBranchControl;
export const CheckBranchControl: typeof import("./checkBranchControl").CheckBranchControl = null as any;
utilities.lazyLoad(exports, ["CheckBranchControl"], () => require("./checkBranchControl"));

export { CheckBusinessHoursArgs, CheckBusinessHoursState } from "./checkBusinessHours";
export type CheckBusinessHours = import("./checkBusinessHours").CheckBusinessHours;
export const CheckBusinessHours: typeof import("./checkBusinessHours").CheckBusinessHours = null as any;
utilities.lazyLoad(exports, ["CheckBusinessHours"], () => require("./checkBusinessHours"));

export { CheckExclusiveLockArgs, CheckExclusiveLockState } from "./checkExclusiveLock";
export type CheckExclusiveLock = import("./checkExclusiveLock").CheckExclusiveLock;
export const CheckExclusiveLock: typeof import("./checkExclusiveLock").CheckExclusiveLock = null as any;
utilities.lazyLoad(exports, ["CheckExclusiveLock"], () => require("./checkExclusiveLock"));

export { CheckRequiredTemplateArgs, CheckRequiredTemplateState } from "./checkRequiredTemplate";
export type CheckRequiredTemplate = import("./checkRequiredTemplate").CheckRequiredTemplate;
export const CheckRequiredTemplate: typeof import("./checkRequiredTemplate").CheckRequiredTemplate = null as any;
utilities.lazyLoad(exports, ["CheckRequiredTemplate"], () => require("./checkRequiredTemplate"));

export { CheckRestApiArgs, CheckRestApiState } from "./checkRestApi";
export type CheckRestApi = import("./checkRestApi").CheckRestApi;
export const CheckRestApi: typeof import("./checkRestApi").CheckRestApi = null as any;
utilities.lazyLoad(exports, ["CheckRestApi"], () => require("./checkRestApi"));

export { DashboardArgs, DashboardState } from "./dashboard";
export type Dashboard = import("./dashboard").Dashboard;
export const Dashboard: typeof import("./dashboard").Dashboard = null as any;
utilities.lazyLoad(exports, ["Dashboard"], () => require("./dashboard"));

export { ElasticPoolArgs, ElasticPoolState } from "./elasticPool";
export type ElasticPool = import("./elasticPool").ElasticPool;
export const ElasticPool: typeof import("./elasticPool").ElasticPool = null as any;
utilities.lazyLoad(exports, ["ElasticPool"], () => require("./elasticPool"));

export { EnvironmentArgs, EnvironmentState } from "./environment";
export type Environment = import("./environment").Environment;
export const Environment: typeof import("./environment").Environment = null as any;
utilities.lazyLoad(exports, ["Environment"], () => require("./environment"));

export { EnvironmentResourceKubernetesArgs, EnvironmentResourceKubernetesState } from "./environmentResourceKubernetes";
export type EnvironmentResourceKubernetes = import("./environmentResourceKubernetes").EnvironmentResourceKubernetes;
export const EnvironmentResourceKubernetes: typeof import("./environmentResourceKubernetes").EnvironmentResourceKubernetes = null as any;
utilities.lazyLoad(exports, ["EnvironmentResourceKubernetes"], () => require("./environmentResourceKubernetes"));

export { FeedArgs, FeedState } from "./feed";
export type Feed = import("./feed").Feed;
export const Feed: typeof import("./feed").Feed = null as any;
utilities.lazyLoad(exports, ["Feed"], () => require("./feed"));

export { FeedPermissionArgs, FeedPermissionState } from "./feedPermission";
export type FeedPermission = import("./feedPermission").FeedPermission;
export const FeedPermission: typeof import("./feedPermission").FeedPermission = null as any;
utilities.lazyLoad(exports, ["FeedPermission"], () => require("./feedPermission"));

export { FeedRetentionPolicyArgs, FeedRetentionPolicyState } from "./feedRetentionPolicy";
export type FeedRetentionPolicy = import("./feedRetentionPolicy").FeedRetentionPolicy;
export const FeedRetentionPolicy: typeof import("./feedRetentionPolicy").FeedRetentionPolicy = null as any;
utilities.lazyLoad(exports, ["FeedRetentionPolicy"], () => require("./feedRetentionPolicy"));

export { GetAgentQueueArgs, GetAgentQueueResult, GetAgentQueueOutputArgs } from "./getAgentQueue";
export const getAgentQueue: typeof import("./getAgentQueue").getAgentQueue = null as any;
export const getAgentQueueOutput: typeof import("./getAgentQueue").getAgentQueueOutput = null as any;
utilities.lazyLoad(exports, ["getAgentQueue","getAgentQueueOutput"], () => require("./getAgentQueue"));

export { GetAreaArgs, GetAreaResult, GetAreaOutputArgs } from "./getArea";
export const getArea: typeof import("./getArea").getArea = null as any;
export const getAreaOutput: typeof import("./getArea").getAreaOutput = null as any;
utilities.lazyLoad(exports, ["getArea","getAreaOutput"], () => require("./getArea"));

export { GetBuildDefinitionArgs, GetBuildDefinitionResult, GetBuildDefinitionOutputArgs } from "./getBuildDefinition";
export const getBuildDefinition: typeof import("./getBuildDefinition").getBuildDefinition = null as any;
export const getBuildDefinitionOutput: typeof import("./getBuildDefinition").getBuildDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getBuildDefinition","getBuildDefinitionOutput"], () => require("./getBuildDefinition"));

export { GetClientConfigResult } from "./getClientConfig";
export const getClientConfig: typeof import("./getClientConfig").getClientConfig = null as any;
export const getClientConfigOutput: typeof import("./getClientConfig").getClientConfigOutput = null as any;
utilities.lazyLoad(exports, ["getClientConfig","getClientConfigOutput"], () => require("./getClientConfig"));

export { GetDescriptorArgs, GetDescriptorResult, GetDescriptorOutputArgs } from "./getDescriptor";
export const getDescriptor: typeof import("./getDescriptor").getDescriptor = null as any;
export const getDescriptorOutput: typeof import("./getDescriptor").getDescriptorOutput = null as any;
utilities.lazyLoad(exports, ["getDescriptor","getDescriptorOutput"], () => require("./getDescriptor"));

export { GetEnvironmentArgs, GetEnvironmentResult, GetEnvironmentOutputArgs } from "./getEnvironment";
export const getEnvironment: typeof import("./getEnvironment").getEnvironment = null as any;
export const getEnvironmentOutput: typeof import("./getEnvironment").getEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getEnvironment","getEnvironmentOutput"], () => require("./getEnvironment"));

export { GetFeedArgs, GetFeedResult, GetFeedOutputArgs } from "./getFeed";
export const getFeed: typeof import("./getFeed").getFeed = null as any;
export const getFeedOutput: typeof import("./getFeed").getFeedOutput = null as any;
utilities.lazyLoad(exports, ["getFeed","getFeedOutput"], () => require("./getFeed"));

export { GetGitRepositoryArgs, GetGitRepositoryResult, GetGitRepositoryOutputArgs } from "./getGitRepository";
export const getGitRepository: typeof import("./getGitRepository").getGitRepository = null as any;
export const getGitRepositoryOutput: typeof import("./getGitRepository").getGitRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getGitRepository","getGitRepositoryOutput"], () => require("./getGitRepository"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetGroupsArgs, GetGroupsResult, GetGroupsOutputArgs } from "./getGroups";
export const getGroups: typeof import("./getGroups").getGroups = null as any;
export const getGroupsOutput: typeof import("./getGroups").getGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getGroups","getGroupsOutput"], () => require("./getGroups"));

export { GetIdentityGroupArgs, GetIdentityGroupResult, GetIdentityGroupOutputArgs } from "./getIdentityGroup";
export const getIdentityGroup: typeof import("./getIdentityGroup").getIdentityGroup = null as any;
export const getIdentityGroupOutput: typeof import("./getIdentityGroup").getIdentityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityGroup","getIdentityGroupOutput"], () => require("./getIdentityGroup"));

export { GetIdentityGroupsArgs, GetIdentityGroupsResult, GetIdentityGroupsOutputArgs } from "./getIdentityGroups";
export const getIdentityGroups: typeof import("./getIdentityGroups").getIdentityGroups = null as any;
export const getIdentityGroupsOutput: typeof import("./getIdentityGroups").getIdentityGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityGroups","getIdentityGroupsOutput"], () => require("./getIdentityGroups"));

export { GetIdentityUsersArgs, GetIdentityUsersResult, GetIdentityUsersOutputArgs } from "./getIdentityUsers";
export const getIdentityUsers: typeof import("./getIdentityUsers").getIdentityUsers = null as any;
export const getIdentityUsersOutput: typeof import("./getIdentityUsers").getIdentityUsersOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityUsers","getIdentityUsersOutput"], () => require("./getIdentityUsers"));

export { GetIterationArgs, GetIterationResult, GetIterationOutputArgs } from "./getIteration";
export const getIteration: typeof import("./getIteration").getIteration = null as any;
export const getIterationOutput: typeof import("./getIteration").getIterationOutput = null as any;
utilities.lazyLoad(exports, ["getIteration","getIterationOutput"], () => require("./getIteration"));

export { GetPoolArgs, GetPoolResult, GetPoolOutputArgs } from "./getPool";
export const getPool: typeof import("./getPool").getPool = null as any;
export const getPoolOutput: typeof import("./getPool").getPoolOutput = null as any;
utilities.lazyLoad(exports, ["getPool","getPoolOutput"], () => require("./getPool"));

export { GetPoolsResult } from "./getPools";
export const getPools: typeof import("./getPools").getPools = null as any;
export const getPoolsOutput: typeof import("./getPools").getPoolsOutput = null as any;
utilities.lazyLoad(exports, ["getPools","getPoolsOutput"], () => require("./getPools"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetProjectsArgs, GetProjectsResult, GetProjectsOutputArgs } from "./getProjects";
export const getProjects: typeof import("./getProjects").getProjects = null as any;
export const getProjectsOutput: typeof import("./getProjects").getProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getProjects","getProjectsOutput"], () => require("./getProjects"));

export { GetRepositoriesArgs, GetRepositoriesResult, GetRepositoriesOutputArgs } from "./getRepositories";
export const getRepositories: typeof import("./getRepositories").getRepositories = null as any;
export const getRepositoriesOutput: typeof import("./getRepositories").getRepositoriesOutput = null as any;
utilities.lazyLoad(exports, ["getRepositories","getRepositoriesOutput"], () => require("./getRepositories"));

export { GetSecurityroleDefinitionsArgs, GetSecurityroleDefinitionsResult, GetSecurityroleDefinitionsOutputArgs } from "./getSecurityroleDefinitions";
export const getSecurityroleDefinitions: typeof import("./getSecurityroleDefinitions").getSecurityroleDefinitions = null as any;
export const getSecurityroleDefinitionsOutput: typeof import("./getSecurityroleDefinitions").getSecurityroleDefinitionsOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityroleDefinitions","getSecurityroleDefinitionsOutput"], () => require("./getSecurityroleDefinitions"));

export { GetServiceEndpointAzureRMArgs, GetServiceEndpointAzureRMResult, GetServiceEndpointAzureRMOutputArgs } from "./getServiceEndpointAzureRM";
export const getServiceEndpointAzureRM: typeof import("./getServiceEndpointAzureRM").getServiceEndpointAzureRM = null as any;
export const getServiceEndpointAzureRMOutput: typeof import("./getServiceEndpointAzureRM").getServiceEndpointAzureRMOutput = null as any;
utilities.lazyLoad(exports, ["getServiceEndpointAzureRM","getServiceEndpointAzureRMOutput"], () => require("./getServiceEndpointAzureRM"));

export { GetServiceEndpointGithubArgs, GetServiceEndpointGithubResult, GetServiceEndpointGithubOutputArgs } from "./getServiceEndpointGithub";
export const getServiceEndpointGithub: typeof import("./getServiceEndpointGithub").getServiceEndpointGithub = null as any;
export const getServiceEndpointGithubOutput: typeof import("./getServiceEndpointGithub").getServiceEndpointGithubOutput = null as any;
utilities.lazyLoad(exports, ["getServiceEndpointGithub","getServiceEndpointGithubOutput"], () => require("./getServiceEndpointGithub"));

export { GetServicePrincipalArgs, GetServicePrincipalResult, GetServicePrincipalOutputArgs } from "./getServicePrincipal";
export const getServicePrincipal: typeof import("./getServicePrincipal").getServicePrincipal = null as any;
export const getServicePrincipalOutput: typeof import("./getServicePrincipal").getServicePrincipalOutput = null as any;
utilities.lazyLoad(exports, ["getServicePrincipal","getServicePrincipalOutput"], () => require("./getServicePrincipal"));

export { GetServiceendpointAzurecrArgs, GetServiceendpointAzurecrResult, GetServiceendpointAzurecrOutputArgs } from "./getServiceendpointAzurecr";
export const getServiceendpointAzurecr: typeof import("./getServiceendpointAzurecr").getServiceendpointAzurecr = null as any;
export const getServiceendpointAzurecrOutput: typeof import("./getServiceendpointAzurecr").getServiceendpointAzurecrOutput = null as any;
utilities.lazyLoad(exports, ["getServiceendpointAzurecr","getServiceendpointAzurecrOutput"], () => require("./getServiceendpointAzurecr"));

export { GetServiceendpointBitbucketArgs, GetServiceendpointBitbucketResult, GetServiceendpointBitbucketOutputArgs } from "./getServiceendpointBitbucket";
export const getServiceendpointBitbucket: typeof import("./getServiceendpointBitbucket").getServiceendpointBitbucket = null as any;
export const getServiceendpointBitbucketOutput: typeof import("./getServiceendpointBitbucket").getServiceendpointBitbucketOutput = null as any;
utilities.lazyLoad(exports, ["getServiceendpointBitbucket","getServiceendpointBitbucketOutput"], () => require("./getServiceendpointBitbucket"));

export { GetServiceendpointNpmArgs, GetServiceendpointNpmResult, GetServiceendpointNpmOutputArgs } from "./getServiceendpointNpm";
export const getServiceendpointNpm: typeof import("./getServiceendpointNpm").getServiceendpointNpm = null as any;
export const getServiceendpointNpmOutput: typeof import("./getServiceendpointNpm").getServiceendpointNpmOutput = null as any;
utilities.lazyLoad(exports, ["getServiceendpointNpm","getServiceendpointNpmOutput"], () => require("./getServiceendpointNpm"));

export { GetServiceendpointSonarcloudArgs, GetServiceendpointSonarcloudResult, GetServiceendpointSonarcloudOutputArgs } from "./getServiceendpointSonarcloud";
export const getServiceendpointSonarcloud: typeof import("./getServiceendpointSonarcloud").getServiceendpointSonarcloud = null as any;
export const getServiceendpointSonarcloudOutput: typeof import("./getServiceendpointSonarcloud").getServiceendpointSonarcloudOutput = null as any;
utilities.lazyLoad(exports, ["getServiceendpointSonarcloud","getServiceendpointSonarcloudOutput"], () => require("./getServiceendpointSonarcloud"));

export { GetStorageKeyArgs, GetStorageKeyResult, GetStorageKeyOutputArgs } from "./getStorageKey";
export const getStorageKey: typeof import("./getStorageKey").getStorageKey = null as any;
export const getStorageKeyOutput: typeof import("./getStorageKey").getStorageKeyOutput = null as any;
utilities.lazyLoad(exports, ["getStorageKey","getStorageKeyOutput"], () => require("./getStorageKey"));

export { GetTeamArgs, GetTeamResult, GetTeamOutputArgs } from "./getTeam";
export const getTeam: typeof import("./getTeam").getTeam = null as any;
export const getTeamOutput: typeof import("./getTeam").getTeamOutput = null as any;
utilities.lazyLoad(exports, ["getTeam","getTeamOutput"], () => require("./getTeam"));

export { GetTeamsArgs, GetTeamsResult, GetTeamsOutputArgs } from "./getTeams";
export const getTeams: typeof import("./getTeams").getTeams = null as any;
export const getTeamsOutput: typeof import("./getTeams").getTeamsOutput = null as any;
utilities.lazyLoad(exports, ["getTeams","getTeamsOutput"], () => require("./getTeams"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUsersArgs, GetUsersResult, GetUsersOutputArgs } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { GetVariableGroupArgs, GetVariableGroupResult, GetVariableGroupOutputArgs } from "./getVariableGroup";
export const getVariableGroup: typeof import("./getVariableGroup").getVariableGroup = null as any;
export const getVariableGroupOutput: typeof import("./getVariableGroup").getVariableGroupOutput = null as any;
utilities.lazyLoad(exports, ["getVariableGroup","getVariableGroupOutput"], () => require("./getVariableGroup"));

export { GitArgs, GitState } from "./git";
export type Git = import("./git").Git;
export const Git: typeof import("./git").Git = null as any;
utilities.lazyLoad(exports, ["Git"], () => require("./git"));

export { GitPermissionsArgs, GitPermissionsState } from "./gitPermissions";
export type GitPermissions = import("./gitPermissions").GitPermissions;
export const GitPermissions: typeof import("./gitPermissions").GitPermissions = null as any;
utilities.lazyLoad(exports, ["GitPermissions"], () => require("./gitPermissions"));

export { GitRepositoryBranchArgs, GitRepositoryBranchState } from "./gitRepositoryBranch";
export type GitRepositoryBranch = import("./gitRepositoryBranch").GitRepositoryBranch;
export const GitRepositoryBranch: typeof import("./gitRepositoryBranch").GitRepositoryBranch = null as any;
utilities.lazyLoad(exports, ["GitRepositoryBranch"], () => require("./gitRepositoryBranch"));

export { GitRepositoryFileArgs, GitRepositoryFileState } from "./gitRepositoryFile";
export type GitRepositoryFile = import("./gitRepositoryFile").GitRepositoryFile;
export const GitRepositoryFile: typeof import("./gitRepositoryFile").GitRepositoryFile = null as any;
utilities.lazyLoad(exports, ["GitRepositoryFile"], () => require("./gitRepositoryFile"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { GroupEntitlementArgs, GroupEntitlementState } from "./groupEntitlement";
export type GroupEntitlement = import("./groupEntitlement").GroupEntitlement;
export const GroupEntitlement: typeof import("./groupEntitlement").GroupEntitlement = null as any;
utilities.lazyLoad(exports, ["GroupEntitlement"], () => require("./groupEntitlement"));

export { GroupMembershipArgs, GroupMembershipState } from "./groupMembership";
export type GroupMembership = import("./groupMembership").GroupMembership;
export const GroupMembership: typeof import("./groupMembership").GroupMembership = null as any;
utilities.lazyLoad(exports, ["GroupMembership"], () => require("./groupMembership"));

export { IterativePermissionsArgs, IterativePermissionsState } from "./iterativePermissions";
export type IterativePermissions = import("./iterativePermissions").IterativePermissions;
export const IterativePermissions: typeof import("./iterativePermissions").IterativePermissions = null as any;
utilities.lazyLoad(exports, ["IterativePermissions"], () => require("./iterativePermissions"));

export { LibraryPermissionsArgs, LibraryPermissionsState } from "./libraryPermissions";
export type LibraryPermissions = import("./libraryPermissions").LibraryPermissions;
export const LibraryPermissions: typeof import("./libraryPermissions").LibraryPermissions = null as any;
utilities.lazyLoad(exports, ["LibraryPermissions"], () => require("./libraryPermissions"));

export { PipelineAuthorizationArgs, PipelineAuthorizationState } from "./pipelineAuthorization";
export type PipelineAuthorization = import("./pipelineAuthorization").PipelineAuthorization;
export const PipelineAuthorization: typeof import("./pipelineAuthorization").PipelineAuthorization = null as any;
utilities.lazyLoad(exports, ["PipelineAuthorization"], () => require("./pipelineAuthorization"));

export { PoolArgs, PoolState } from "./pool";
export type Pool = import("./pool").Pool;
export const Pool: typeof import("./pool").Pool = null as any;
utilities.lazyLoad(exports, ["Pool"], () => require("./pool"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProjectFeaturesArgs, ProjectFeaturesState } from "./projectFeatures";
export type ProjectFeatures = import("./projectFeatures").ProjectFeatures;
export const ProjectFeatures: typeof import("./projectFeatures").ProjectFeatures = null as any;
utilities.lazyLoad(exports, ["ProjectFeatures"], () => require("./projectFeatures"));

export { ProjectPermissionsArgs, ProjectPermissionsState } from "./projectPermissions";
export type ProjectPermissions = import("./projectPermissions").ProjectPermissions;
export const ProjectPermissions: typeof import("./projectPermissions").ProjectPermissions = null as any;
utilities.lazyLoad(exports, ["ProjectPermissions"], () => require("./projectPermissions"));

export { ProjectPipelineSettingsArgs, ProjectPipelineSettingsState } from "./projectPipelineSettings";
export type ProjectPipelineSettings = import("./projectPipelineSettings").ProjectPipelineSettings;
export const ProjectPipelineSettings: typeof import("./projectPipelineSettings").ProjectPipelineSettings = null as any;
utilities.lazyLoad(exports, ["ProjectPipelineSettings"], () => require("./projectPipelineSettings"));

export { ProjectTagsArgs, ProjectTagsState } from "./projectTags";
export type ProjectTags = import("./projectTags").ProjectTags;
export const ProjectTags: typeof import("./projectTags").ProjectTags = null as any;
utilities.lazyLoad(exports, ["ProjectTags"], () => require("./projectTags"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { QueueArgs, QueueState } from "./queue";
export type Queue = import("./queue").Queue;
export const Queue: typeof import("./queue").Queue = null as any;
utilities.lazyLoad(exports, ["Queue"], () => require("./queue"));

export { RepositoryPolicyAuthorEmailPatternArgs, RepositoryPolicyAuthorEmailPatternState } from "./repositoryPolicyAuthorEmailPattern";
export type RepositoryPolicyAuthorEmailPattern = import("./repositoryPolicyAuthorEmailPattern").RepositoryPolicyAuthorEmailPattern;
export const RepositoryPolicyAuthorEmailPattern: typeof import("./repositoryPolicyAuthorEmailPattern").RepositoryPolicyAuthorEmailPattern = null as any;
utilities.lazyLoad(exports, ["RepositoryPolicyAuthorEmailPattern"], () => require("./repositoryPolicyAuthorEmailPattern"));

export { RepositoryPolicyCaseEnforcementArgs, RepositoryPolicyCaseEnforcementState } from "./repositoryPolicyCaseEnforcement";
export type RepositoryPolicyCaseEnforcement = import("./repositoryPolicyCaseEnforcement").RepositoryPolicyCaseEnforcement;
export const RepositoryPolicyCaseEnforcement: typeof import("./repositoryPolicyCaseEnforcement").RepositoryPolicyCaseEnforcement = null as any;
utilities.lazyLoad(exports, ["RepositoryPolicyCaseEnforcement"], () => require("./repositoryPolicyCaseEnforcement"));

export { RepositoryPolicyCheckCredentialsArgs, RepositoryPolicyCheckCredentialsState } from "./repositoryPolicyCheckCredentials";
export type RepositoryPolicyCheckCredentials = import("./repositoryPolicyCheckCredentials").RepositoryPolicyCheckCredentials;
export const RepositoryPolicyCheckCredentials: typeof import("./repositoryPolicyCheckCredentials").RepositoryPolicyCheckCredentials = null as any;
utilities.lazyLoad(exports, ["RepositoryPolicyCheckCredentials"], () => require("./repositoryPolicyCheckCredentials"));

export { RepositoryPolicyFilePathPatternArgs, RepositoryPolicyFilePathPatternState } from "./repositoryPolicyFilePathPattern";
export type RepositoryPolicyFilePathPattern = import("./repositoryPolicyFilePathPattern").RepositoryPolicyFilePathPattern;
export const RepositoryPolicyFilePathPattern: typeof import("./repositoryPolicyFilePathPattern").RepositoryPolicyFilePathPattern = null as any;
utilities.lazyLoad(exports, ["RepositoryPolicyFilePathPattern"], () => require("./repositoryPolicyFilePathPattern"));

export { RepositoryPolicyMaxFileSizeArgs, RepositoryPolicyMaxFileSizeState } from "./repositoryPolicyMaxFileSize";
export type RepositoryPolicyMaxFileSize = import("./repositoryPolicyMaxFileSize").RepositoryPolicyMaxFileSize;
export const RepositoryPolicyMaxFileSize: typeof import("./repositoryPolicyMaxFileSize").RepositoryPolicyMaxFileSize = null as any;
utilities.lazyLoad(exports, ["RepositoryPolicyMaxFileSize"], () => require("./repositoryPolicyMaxFileSize"));

export { RepositoryPolicyMaxPathLengthArgs, RepositoryPolicyMaxPathLengthState } from "./repositoryPolicyMaxPathLength";
export type RepositoryPolicyMaxPathLength = import("./repositoryPolicyMaxPathLength").RepositoryPolicyMaxPathLength;
export const RepositoryPolicyMaxPathLength: typeof import("./repositoryPolicyMaxPathLength").RepositoryPolicyMaxPathLength = null as any;
utilities.lazyLoad(exports, ["RepositoryPolicyMaxPathLength"], () => require("./repositoryPolicyMaxPathLength"));

export { RepositoryPolicyReservedNamesArgs, RepositoryPolicyReservedNamesState } from "./repositoryPolicyReservedNames";
export type RepositoryPolicyReservedNames = import("./repositoryPolicyReservedNames").RepositoryPolicyReservedNames;
export const RepositoryPolicyReservedNames: typeof import("./repositoryPolicyReservedNames").RepositoryPolicyReservedNames = null as any;
utilities.lazyLoad(exports, ["RepositoryPolicyReservedNames"], () => require("./repositoryPolicyReservedNames"));

export { ResourceAuthorizationArgs, ResourceAuthorizationState } from "./resourceAuthorization";
export type ResourceAuthorization = import("./resourceAuthorization").ResourceAuthorization;
export const ResourceAuthorization: typeof import("./resourceAuthorization").ResourceAuthorization = null as any;
utilities.lazyLoad(exports, ["ResourceAuthorization"], () => require("./resourceAuthorization"));

export { SecurityroleAssignmentArgs, SecurityroleAssignmentState } from "./securityroleAssignment";
export type SecurityroleAssignment = import("./securityroleAssignment").SecurityroleAssignment;
export const SecurityroleAssignment: typeof import("./securityroleAssignment").SecurityroleAssignment = null as any;
utilities.lazyLoad(exports, ["SecurityroleAssignment"], () => require("./securityroleAssignment"));

export { ServiceEndpointArtifactoryArgs, ServiceEndpointArtifactoryState } from "./serviceEndpointArtifactory";
export type ServiceEndpointArtifactory = import("./serviceEndpointArtifactory").ServiceEndpointArtifactory;
export const ServiceEndpointArtifactory: typeof import("./serviceEndpointArtifactory").ServiceEndpointArtifactory = null as any;
utilities.lazyLoad(exports, ["ServiceEndpointArtifactory"], () => require("./serviceEndpointArtifactory"));

export { ServiceEndpointAwsArgs, ServiceEndpointAwsState } from "./serviceEndpointAws";
export type ServiceEndpointAws = import("./serviceEndpointAws").ServiceEndpointAws;
export const ServiceEndpointAws: typeof import("./serviceEndpointAws").ServiceEndpointAws = null as any;
utilities.lazyLoad(exports, ["ServiceEndpointAws"], () => require("./serviceEndpointAws"));

export { ServiceEndpointAzureDevOpsArgs, ServiceEndpointAzureDevOpsState } from "./serviceEndpointAzureDevOps";
export type ServiceEndpointAzureDevOps = import("./serviceEndpointAzureDevOps").ServiceEndpointAzureDevOps;
export const ServiceEndpointAzureDevOps: typeof import("./serviceEndpointAzureDevOps").ServiceEndpointAzureDevOps = null as any;
utilities.lazyLoad(exports, ["ServiceEndpointAzureDevOps"], () => require("./serviceEndpointAzureDevOps"));

export { ServiceEndpointAzureEcrArgs, ServiceEndpointAzureEcrState } from "./serviceEndpointAzureEcr";
export type ServiceEndpointAzureEcr = import("./serviceEndpointAzureEcr").ServiceEndpointAzureEcr;
export const ServiceEndpointAzureEcr: typeof import("./serviceEndpointAzureEcr").ServiceEndpointAzureEcr = null as any;
utilities.lazyLoad(exports, ["ServiceEndpointAzureEcr"], () => require("./serviceEndpointAzureEcr"));

export { ServiceEndpointAzureRMArgs, ServiceEndpointAzureRMState } from "./serviceEndpointAzureRM";
export type ServiceEndpointAzureRM = import("./serviceEndpointAzureRM").ServiceEndpointAzureRM;
export const ServiceEndpointAzureRM: typeof import("./serviceEndpointAzureRM").ServiceEndpointAzureRM = null as any;
utilities.lazyLoad(exports, ["ServiceEndpointAzureRM"], () => require("./serviceEndpointAzureRM"));

export { ServiceEndpointBitBucketArgs, ServiceEndpointBitBucketState } from "./serviceEndpointBitBucket";
export type ServiceEndpointBitBucket = import("./serviceEndpointBitBucket").ServiceEndpointBitBucket;
export const ServiceEndpointBitBucket: typeof import("./serviceEndpointBitBucket").ServiceEndpointBitBucket = null as any;
utilities.lazyLoad(exports, ["ServiceEndpointBitBucket"], () => require("./serviceEndpointBitBucket"));

export { ServiceEndpointDockerRegistryArgs, ServiceEndpointDockerRegistryState } from "./serviceEndpointDockerRegistry";
export type ServiceEndpointDockerRegistry = import("./serviceEndpointDockerRegistry").ServiceEndpointDockerRegistry;
export const ServiceEndpointDockerRegistry: typeof import("./serviceEndpointDockerRegistry").ServiceEndpointDockerRegistry = null as any;
utilities.lazyLoad(exports, ["ServiceEndpointDockerRegistry"], () => require("./serviceEndpointDockerRegistry"));

export { ServiceEndpointGenericArgs, ServiceEndpointGenericState } from "./serviceEndpointGeneric";
export type ServiceEndpointGeneric = import("./serviceEndpointGeneric").ServiceEndpointGeneric;
export const ServiceEndpointGeneric: typeof import("./serviceEndpointGeneric").ServiceEndpointGeneric = null as any;
utilities.lazyLoad(exports, ["ServiceEndpointGeneric"], () => require("./serviceEndpointGeneric"));

export { ServiceEndpointGenericGitArgs, ServiceEndpointGenericGitState } from "./serviceEndpointGenericGit";
export type ServiceEndpointGenericGit = import("./serviceEndpointGenericGit").ServiceEndpointGenericGit;
export const ServiceEndpointGenericGit: typeof import("./serviceEndpointGenericGit").ServiceEndpointGenericGit = null as any;
utilities.lazyLoad(exports, ["ServiceEndpointGenericGit"], () => require("./serviceEndpointGenericGit"));

export { ServiceEndpointGitHubArgs, ServiceEndpointGitHubState } from "./serviceEndpointGitHub";
export type ServiceEndpointGitHub = import("./serviceEndpointGitHub").ServiceEndpointGitHub;
export const ServiceEndpointGitHub: typeof import("./serviceEndpointGitHub").ServiceEndpointGitHub = null as any;
utilities.lazyLoad(exports, ["ServiceEndpointGitHub"], () => require("./serviceEndpointGitHub"));

export { ServiceEndpointGitHubEnterpriseArgs, ServiceEndpointGitHubEnterpriseState } from "./serviceEndpointGitHubEnterprise";
export type ServiceEndpointGitHubEnterprise = import("./serviceEndpointGitHubEnterprise").ServiceEndpointGitHubEnterprise;
export const ServiceEndpointGitHubEnterprise: typeof import("./serviceEndpointGitHubEnterprise").ServiceEndpointGitHubEnterprise = null as any;
utilities.lazyLoad(exports, ["ServiceEndpointGitHubEnterprise"], () => require("./serviceEndpointGitHubEnterprise"));

export { ServiceEndpointGitLabArgs, ServiceEndpointGitLabState } from "./serviceEndpointGitLab";
export type ServiceEndpointGitLab = import("./serviceEndpointGitLab").ServiceEndpointGitLab;
export const ServiceEndpointGitLab: typeof import("./serviceEndpointGitLab").ServiceEndpointGitLab = null as any;
utilities.lazyLoad(exports, ["ServiceEndpointGitLab"], () => require("./serviceEndpointGitLab"));

export { ServiceEndpointKubernetesArgs, ServiceEndpointKubernetesState } from "./serviceEndpointKubernetes";
export type ServiceEndpointKubernetes = import("./serviceEndpointKubernetes").ServiceEndpointKubernetes;
export const ServiceEndpointKubernetes: typeof import("./serviceEndpointKubernetes").ServiceEndpointKubernetes = null as any;
utilities.lazyLoad(exports, ["ServiceEndpointKubernetes"], () => require("./serviceEndpointKubernetes"));

export { ServiceEndpointNpmArgs, ServiceEndpointNpmState } from "./serviceEndpointNpm";
export type ServiceEndpointNpm = import("./serviceEndpointNpm").ServiceEndpointNpm;
export const ServiceEndpointNpm: typeof import("./serviceEndpointNpm").ServiceEndpointNpm = null as any;
utilities.lazyLoad(exports, ["ServiceEndpointNpm"], () => require("./serviceEndpointNpm"));

export { ServiceEndpointPipelineArgs, ServiceEndpointPipelineState } from "./serviceEndpointPipeline";
export type ServiceEndpointPipeline = import("./serviceEndpointPipeline").ServiceEndpointPipeline;
export const ServiceEndpointPipeline: typeof import("./serviceEndpointPipeline").ServiceEndpointPipeline = null as any;
utilities.lazyLoad(exports, ["ServiceEndpointPipeline"], () => require("./serviceEndpointPipeline"));

export { ServiceEndpointServiceFabricArgs, ServiceEndpointServiceFabricState } from "./serviceEndpointServiceFabric";
export type ServiceEndpointServiceFabric = import("./serviceEndpointServiceFabric").ServiceEndpointServiceFabric;
export const ServiceEndpointServiceFabric: typeof import("./serviceEndpointServiceFabric").ServiceEndpointServiceFabric = null as any;
utilities.lazyLoad(exports, ["ServiceEndpointServiceFabric"], () => require("./serviceEndpointServiceFabric"));

export { ServiceEndpointSonarCloudArgs, ServiceEndpointSonarCloudState } from "./serviceEndpointSonarCloud";
export type ServiceEndpointSonarCloud = import("./serviceEndpointSonarCloud").ServiceEndpointSonarCloud;
export const ServiceEndpointSonarCloud: typeof import("./serviceEndpointSonarCloud").ServiceEndpointSonarCloud = null as any;
utilities.lazyLoad(exports, ["ServiceEndpointSonarCloud"], () => require("./serviceEndpointSonarCloud"));

export { ServiceEndpointSonarQubeArgs, ServiceEndpointSonarQubeState } from "./serviceEndpointSonarQube";
export type ServiceEndpointSonarQube = import("./serviceEndpointSonarQube").ServiceEndpointSonarQube;
export const ServiceEndpointSonarQube: typeof import("./serviceEndpointSonarQube").ServiceEndpointSonarQube = null as any;
utilities.lazyLoad(exports, ["ServiceEndpointSonarQube"], () => require("./serviceEndpointSonarQube"));

export { ServiceEndpointSshArgs, ServiceEndpointSshState } from "./serviceEndpointSsh";
export type ServiceEndpointSsh = import("./serviceEndpointSsh").ServiceEndpointSsh;
export const ServiceEndpointSsh: typeof import("./serviceEndpointSsh").ServiceEndpointSsh = null as any;
utilities.lazyLoad(exports, ["ServiceEndpointSsh"], () => require("./serviceEndpointSsh"));

export { ServicePrincipalEntitlementArgs, ServicePrincipalEntitlementState } from "./servicePrincipalEntitlement";
export type ServicePrincipalEntitlement = import("./servicePrincipalEntitlement").ServicePrincipalEntitlement;
export const ServicePrincipalEntitlement: typeof import("./servicePrincipalEntitlement").ServicePrincipalEntitlement = null as any;
utilities.lazyLoad(exports, ["ServicePrincipalEntitlement"], () => require("./servicePrincipalEntitlement"));

export { ServiceendpointArgocdArgs, ServiceendpointArgocdState } from "./serviceendpointArgocd";
export type ServiceendpointArgocd = import("./serviceendpointArgocd").ServiceendpointArgocd;
export const ServiceendpointArgocd: typeof import("./serviceendpointArgocd").ServiceendpointArgocd = null as any;
utilities.lazyLoad(exports, ["ServiceendpointArgocd"], () => require("./serviceendpointArgocd"));

export { ServiceendpointAzureServiceBusArgs, ServiceendpointAzureServiceBusState } from "./serviceendpointAzureServiceBus";
export type ServiceendpointAzureServiceBus = import("./serviceendpointAzureServiceBus").ServiceendpointAzureServiceBus;
export const ServiceendpointAzureServiceBus: typeof import("./serviceendpointAzureServiceBus").ServiceendpointAzureServiceBus = null as any;
utilities.lazyLoad(exports, ["ServiceendpointAzureServiceBus"], () => require("./serviceendpointAzureServiceBus"));

export { ServiceendpointCheckmarxOneArgs, ServiceendpointCheckmarxOneState } from "./serviceendpointCheckmarxOne";
export type ServiceendpointCheckmarxOne = import("./serviceendpointCheckmarxOne").ServiceendpointCheckmarxOne;
export const ServiceendpointCheckmarxOne: typeof import("./serviceendpointCheckmarxOne").ServiceendpointCheckmarxOne = null as any;
utilities.lazyLoad(exports, ["ServiceendpointCheckmarxOne"], () => require("./serviceendpointCheckmarxOne"));

export { ServiceendpointCheckmarxSastArgs, ServiceendpointCheckmarxSastState } from "./serviceendpointCheckmarxSast";
export type ServiceendpointCheckmarxSast = import("./serviceendpointCheckmarxSast").ServiceendpointCheckmarxSast;
export const ServiceendpointCheckmarxSast: typeof import("./serviceendpointCheckmarxSast").ServiceendpointCheckmarxSast = null as any;
utilities.lazyLoad(exports, ["ServiceendpointCheckmarxSast"], () => require("./serviceendpointCheckmarxSast"));

export { ServiceendpointCheckmarxScaArgs, ServiceendpointCheckmarxScaState } from "./serviceendpointCheckmarxSca";
export type ServiceendpointCheckmarxSca = import("./serviceendpointCheckmarxSca").ServiceendpointCheckmarxSca;
export const ServiceendpointCheckmarxSca: typeof import("./serviceendpointCheckmarxSca").ServiceendpointCheckmarxSca = null as any;
utilities.lazyLoad(exports, ["ServiceendpointCheckmarxSca"], () => require("./serviceendpointCheckmarxSca"));

export { ServiceendpointDynamicsLifecycleServicesArgs, ServiceendpointDynamicsLifecycleServicesState } from "./serviceendpointDynamicsLifecycleServices";
export type ServiceendpointDynamicsLifecycleServices = import("./serviceendpointDynamicsLifecycleServices").ServiceendpointDynamicsLifecycleServices;
export const ServiceendpointDynamicsLifecycleServices: typeof import("./serviceendpointDynamicsLifecycleServices").ServiceendpointDynamicsLifecycleServices = null as any;
utilities.lazyLoad(exports, ["ServiceendpointDynamicsLifecycleServices"], () => require("./serviceendpointDynamicsLifecycleServices"));

export { ServiceendpointExternaltfsArgs, ServiceendpointExternaltfsState } from "./serviceendpointExternaltfs";
export type ServiceendpointExternaltfs = import("./serviceendpointExternaltfs").ServiceendpointExternaltfs;
export const ServiceendpointExternaltfs: typeof import("./serviceendpointExternaltfs").ServiceendpointExternaltfs = null as any;
utilities.lazyLoad(exports, ["ServiceendpointExternaltfs"], () => require("./serviceendpointExternaltfs"));

export { ServiceendpointGcpTerraformArgs, ServiceendpointGcpTerraformState } from "./serviceendpointGcpTerraform";
export type ServiceendpointGcpTerraform = import("./serviceendpointGcpTerraform").ServiceendpointGcpTerraform;
export const ServiceendpointGcpTerraform: typeof import("./serviceendpointGcpTerraform").ServiceendpointGcpTerraform = null as any;
utilities.lazyLoad(exports, ["ServiceendpointGcpTerraform"], () => require("./serviceendpointGcpTerraform"));

export { ServiceendpointIncomingwebhookArgs, ServiceendpointIncomingwebhookState } from "./serviceendpointIncomingwebhook";
export type ServiceendpointIncomingwebhook = import("./serviceendpointIncomingwebhook").ServiceendpointIncomingwebhook;
export const ServiceendpointIncomingwebhook: typeof import("./serviceendpointIncomingwebhook").ServiceendpointIncomingwebhook = null as any;
utilities.lazyLoad(exports, ["ServiceendpointIncomingwebhook"], () => require("./serviceendpointIncomingwebhook"));

export { ServiceendpointJenkinsArgs, ServiceendpointJenkinsState } from "./serviceendpointJenkins";
export type ServiceendpointJenkins = import("./serviceendpointJenkins").ServiceendpointJenkins;
export const ServiceendpointJenkins: typeof import("./serviceendpointJenkins").ServiceendpointJenkins = null as any;
utilities.lazyLoad(exports, ["ServiceendpointJenkins"], () => require("./serviceendpointJenkins"));

export { ServiceendpointJfrogArtifactoryV2Args, ServiceendpointJfrogArtifactoryV2State } from "./serviceendpointJfrogArtifactoryV2";
export type ServiceendpointJfrogArtifactoryV2 = import("./serviceendpointJfrogArtifactoryV2").ServiceendpointJfrogArtifactoryV2;
export const ServiceendpointJfrogArtifactoryV2: typeof import("./serviceendpointJfrogArtifactoryV2").ServiceendpointJfrogArtifactoryV2 = null as any;
utilities.lazyLoad(exports, ["ServiceendpointJfrogArtifactoryV2"], () => require("./serviceendpointJfrogArtifactoryV2"));

export { ServiceendpointJfrogDistributionV2Args, ServiceendpointJfrogDistributionV2State } from "./serviceendpointJfrogDistributionV2";
export type ServiceendpointJfrogDistributionV2 = import("./serviceendpointJfrogDistributionV2").ServiceendpointJfrogDistributionV2;
export const ServiceendpointJfrogDistributionV2: typeof import("./serviceendpointJfrogDistributionV2").ServiceendpointJfrogDistributionV2 = null as any;
utilities.lazyLoad(exports, ["ServiceendpointJfrogDistributionV2"], () => require("./serviceendpointJfrogDistributionV2"));

export { ServiceendpointJfrogPlatformV2Args, ServiceendpointJfrogPlatformV2State } from "./serviceendpointJfrogPlatformV2";
export type ServiceendpointJfrogPlatformV2 = import("./serviceendpointJfrogPlatformV2").ServiceendpointJfrogPlatformV2;
export const ServiceendpointJfrogPlatformV2: typeof import("./serviceendpointJfrogPlatformV2").ServiceendpointJfrogPlatformV2 = null as any;
utilities.lazyLoad(exports, ["ServiceendpointJfrogPlatformV2"], () => require("./serviceendpointJfrogPlatformV2"));

export { ServiceendpointJfrogXrayV2Args, ServiceendpointJfrogXrayV2State } from "./serviceendpointJfrogXrayV2";
export type ServiceendpointJfrogXrayV2 = import("./serviceendpointJfrogXrayV2").ServiceendpointJfrogXrayV2;
export const ServiceendpointJfrogXrayV2: typeof import("./serviceendpointJfrogXrayV2").ServiceendpointJfrogXrayV2 = null as any;
utilities.lazyLoad(exports, ["ServiceendpointJfrogXrayV2"], () => require("./serviceendpointJfrogXrayV2"));

export { ServiceendpointMavenArgs, ServiceendpointMavenState } from "./serviceendpointMaven";
export type ServiceendpointMaven = import("./serviceendpointMaven").ServiceendpointMaven;
export const ServiceendpointMaven: typeof import("./serviceendpointMaven").ServiceendpointMaven = null as any;
utilities.lazyLoad(exports, ["ServiceendpointMaven"], () => require("./serviceendpointMaven"));

export { ServiceendpointNexusArgs, ServiceendpointNexusState } from "./serviceendpointNexus";
export type ServiceendpointNexus = import("./serviceendpointNexus").ServiceendpointNexus;
export const ServiceendpointNexus: typeof import("./serviceendpointNexus").ServiceendpointNexus = null as any;
utilities.lazyLoad(exports, ["ServiceendpointNexus"], () => require("./serviceendpointNexus"));

export { ServiceendpointNugetArgs, ServiceendpointNugetState } from "./serviceendpointNuget";
export type ServiceendpointNuget = import("./serviceendpointNuget").ServiceendpointNuget;
export const ServiceendpointNuget: typeof import("./serviceendpointNuget").ServiceendpointNuget = null as any;
utilities.lazyLoad(exports, ["ServiceendpointNuget"], () => require("./serviceendpointNuget"));

export { ServiceendpointOctopusdeployArgs, ServiceendpointOctopusdeployState } from "./serviceendpointOctopusdeploy";
export type ServiceendpointOctopusdeploy = import("./serviceendpointOctopusdeploy").ServiceendpointOctopusdeploy;
export const ServiceendpointOctopusdeploy: typeof import("./serviceendpointOctopusdeploy").ServiceendpointOctopusdeploy = null as any;
utilities.lazyLoad(exports, ["ServiceendpointOctopusdeploy"], () => require("./serviceendpointOctopusdeploy"));

export { ServiceendpointPermissionsArgs, ServiceendpointPermissionsState } from "./serviceendpointPermissions";
export type ServiceendpointPermissions = import("./serviceendpointPermissions").ServiceendpointPermissions;
export const ServiceendpointPermissions: typeof import("./serviceendpointPermissions").ServiceendpointPermissions = null as any;
utilities.lazyLoad(exports, ["ServiceendpointPermissions"], () => require("./serviceendpointPermissions"));

export { ServiceendpointSnykArgs, ServiceendpointSnykState } from "./serviceendpointSnyk";
export type ServiceendpointSnyk = import("./serviceendpointSnyk").ServiceendpointSnyk;
export const ServiceendpointSnyk: typeof import("./serviceendpointSnyk").ServiceendpointSnyk = null as any;
utilities.lazyLoad(exports, ["ServiceendpointSnyk"], () => require("./serviceendpointSnyk"));

export { ServiceendpointVisualstudiomarketplaceArgs, ServiceendpointVisualstudiomarketplaceState } from "./serviceendpointVisualstudiomarketplace";
export type ServiceendpointVisualstudiomarketplace = import("./serviceendpointVisualstudiomarketplace").ServiceendpointVisualstudiomarketplace;
export const ServiceendpointVisualstudiomarketplace: typeof import("./serviceendpointVisualstudiomarketplace").ServiceendpointVisualstudiomarketplace = null as any;
utilities.lazyLoad(exports, ["ServiceendpointVisualstudiomarketplace"], () => require("./serviceendpointVisualstudiomarketplace"));

export { ServicehookPermissionsArgs, ServicehookPermissionsState } from "./servicehookPermissions";
export type ServicehookPermissions = import("./servicehookPermissions").ServicehookPermissions;
export const ServicehookPermissions: typeof import("./servicehookPermissions").ServicehookPermissions = null as any;
utilities.lazyLoad(exports, ["ServicehookPermissions"], () => require("./servicehookPermissions"));

export { ServicehookStorageQueuePipelinesArgs, ServicehookStorageQueuePipelinesState } from "./servicehookStorageQueuePipelines";
export type ServicehookStorageQueuePipelines = import("./servicehookStorageQueuePipelines").ServicehookStorageQueuePipelines;
export const ServicehookStorageQueuePipelines: typeof import("./servicehookStorageQueuePipelines").ServicehookStorageQueuePipelines = null as any;
utilities.lazyLoad(exports, ["ServicehookStorageQueuePipelines"], () => require("./servicehookStorageQueuePipelines"));

export { TaggingPermissionsArgs, TaggingPermissionsState } from "./taggingPermissions";
export type TaggingPermissions = import("./taggingPermissions").TaggingPermissions;
export const TaggingPermissions: typeof import("./taggingPermissions").TaggingPermissions = null as any;
utilities.lazyLoad(exports, ["TaggingPermissions"], () => require("./taggingPermissions"));

export { TeamArgs, TeamState } from "./team";
export type Team = import("./team").Team;
export const Team: typeof import("./team").Team = null as any;
utilities.lazyLoad(exports, ["Team"], () => require("./team"));

export { TeamAdministratorsArgs, TeamAdministratorsState } from "./teamAdministrators";
export type TeamAdministrators = import("./teamAdministrators").TeamAdministrators;
export const TeamAdministrators: typeof import("./teamAdministrators").TeamAdministrators = null as any;
utilities.lazyLoad(exports, ["TeamAdministrators"], () => require("./teamAdministrators"));

export { TeamMembersArgs, TeamMembersState } from "./teamMembers";
export type TeamMembers = import("./teamMembers").TeamMembers;
export const TeamMembers: typeof import("./teamMembers").TeamMembers = null as any;
utilities.lazyLoad(exports, ["TeamMembers"], () => require("./teamMembers"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { VariableGroupArgs, VariableGroupState } from "./variableGroup";
export type VariableGroup = import("./variableGroup").VariableGroup;
export const VariableGroup: typeof import("./variableGroup").VariableGroup = null as any;
utilities.lazyLoad(exports, ["VariableGroup"], () => require("./variableGroup"));

export { VariableGroupPermissionsArgs, VariableGroupPermissionsState } from "./variableGroupPermissions";
export type VariableGroupPermissions = import("./variableGroupPermissions").VariableGroupPermissions;
export const VariableGroupPermissions: typeof import("./variableGroupPermissions").VariableGroupPermissions = null as any;
utilities.lazyLoad(exports, ["VariableGroupPermissions"], () => require("./variableGroupPermissions"));

export { WikiArgs, WikiState } from "./wiki";
export type Wiki = import("./wiki").Wiki;
export const Wiki: typeof import("./wiki").Wiki = null as any;
utilities.lazyLoad(exports, ["Wiki"], () => require("./wiki"));

export { WikiPageArgs, WikiPageState } from "./wikiPage";
export type WikiPage = import("./wikiPage").WikiPage;
export const WikiPage: typeof import("./wikiPage").WikiPage = null as any;
utilities.lazyLoad(exports, ["WikiPage"], () => require("./wikiPage"));

export { WorkItemQueryPermissionsArgs, WorkItemQueryPermissionsState } from "./workItemQueryPermissions";
export type WorkItemQueryPermissions = import("./workItemQueryPermissions").WorkItemQueryPermissions;
export const WorkItemQueryPermissions: typeof import("./workItemQueryPermissions").WorkItemQueryPermissions = null as any;
utilities.lazyLoad(exports, ["WorkItemQueryPermissions"], () => require("./workItemQueryPermissions"));

export { WorkitemArgs, WorkitemState } from "./workitem";
export type Workitem = import("./workitem").Workitem;
export const Workitem: typeof import("./workitem").Workitem = null as any;
utilities.lazyLoad(exports, ["Workitem"], () => require("./workitem"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azuredevops:index/areaPermissions:AreaPermissions":
                return new AreaPermissions(name, <any>undefined, { urn })
            case "azuredevops:index/branchPolicyAutoReviewers:BranchPolicyAutoReviewers":
                return new BranchPolicyAutoReviewers(name, <any>undefined, { urn })
            case "azuredevops:index/branchPolicyBuildValidation:BranchPolicyBuildValidation":
                return new BranchPolicyBuildValidation(name, <any>undefined, { urn })
            case "azuredevops:index/branchPolicyCommentResolution:BranchPolicyCommentResolution":
                return new BranchPolicyCommentResolution(name, <any>undefined, { urn })
            case "azuredevops:index/branchPolicyMergeTypes:BranchPolicyMergeTypes":
                return new BranchPolicyMergeTypes(name, <any>undefined, { urn })
            case "azuredevops:index/branchPolicyMinReviewers:BranchPolicyMinReviewers":
                return new BranchPolicyMinReviewers(name, <any>undefined, { urn })
            case "azuredevops:index/branchPolicyStatusCheck:BranchPolicyStatusCheck":
                return new BranchPolicyStatusCheck(name, <any>undefined, { urn })
            case "azuredevops:index/branchPolicyWorkItemLinking:BranchPolicyWorkItemLinking":
                return new BranchPolicyWorkItemLinking(name, <any>undefined, { urn })
            case "azuredevops:index/buildDefinition:BuildDefinition":
                return new BuildDefinition(name, <any>undefined, { urn })
            case "azuredevops:index/buildDefinitionPermissions:BuildDefinitionPermissions":
                return new BuildDefinitionPermissions(name, <any>undefined, { urn })
            case "azuredevops:index/buildFolder:BuildFolder":
                return new BuildFolder(name, <any>undefined, { urn })
            case "azuredevops:index/buildFolderPermissions:BuildFolderPermissions":
                return new BuildFolderPermissions(name, <any>undefined, { urn })
            case "azuredevops:index/checkApproval:CheckApproval":
                return new CheckApproval(name, <any>undefined, { urn })
            case "azuredevops:index/checkBranchControl:CheckBranchControl":
                return new CheckBranchControl(name, <any>undefined, { urn })
            case "azuredevops:index/checkBusinessHours:CheckBusinessHours":
                return new CheckBusinessHours(name, <any>undefined, { urn })
            case "azuredevops:index/checkExclusiveLock:CheckExclusiveLock":
                return new CheckExclusiveLock(name, <any>undefined, { urn })
            case "azuredevops:index/checkRequiredTemplate:CheckRequiredTemplate":
                return new CheckRequiredTemplate(name, <any>undefined, { urn })
            case "azuredevops:index/checkRestApi:CheckRestApi":
                return new CheckRestApi(name, <any>undefined, { urn })
            case "azuredevops:index/dashboard:Dashboard":
                return new Dashboard(name, <any>undefined, { urn })
            case "azuredevops:index/elasticPool:ElasticPool":
                return new ElasticPool(name, <any>undefined, { urn })
            case "azuredevops:index/environment:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "azuredevops:index/environmentResourceKubernetes:EnvironmentResourceKubernetes":
                return new EnvironmentResourceKubernetes(name, <any>undefined, { urn })
            case "azuredevops:index/feed:Feed":
                return new Feed(name, <any>undefined, { urn })
            case "azuredevops:index/feedPermission:FeedPermission":
                return new FeedPermission(name, <any>undefined, { urn })
            case "azuredevops:index/feedRetentionPolicy:FeedRetentionPolicy":
                return new FeedRetentionPolicy(name, <any>undefined, { urn })
            case "azuredevops:index/git:Git":
                return new Git(name, <any>undefined, { urn })
            case "azuredevops:index/gitPermissions:GitPermissions":
                return new GitPermissions(name, <any>undefined, { urn })
            case "azuredevops:index/gitRepositoryBranch:GitRepositoryBranch":
                return new GitRepositoryBranch(name, <any>undefined, { urn })
            case "azuredevops:index/gitRepositoryFile:GitRepositoryFile":
                return new GitRepositoryFile(name, <any>undefined, { urn })
            case "azuredevops:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "azuredevops:index/groupEntitlement:GroupEntitlement":
                return new GroupEntitlement(name, <any>undefined, { urn })
            case "azuredevops:index/groupMembership:GroupMembership":
                return new GroupMembership(name, <any>undefined, { urn })
            case "azuredevops:index/iterativePermissions:IterativePermissions":
                return new IterativePermissions(name, <any>undefined, { urn })
            case "azuredevops:index/libraryPermissions:LibraryPermissions":
                return new LibraryPermissions(name, <any>undefined, { urn })
            case "azuredevops:index/pipelineAuthorization:PipelineAuthorization":
                return new PipelineAuthorization(name, <any>undefined, { urn })
            case "azuredevops:index/pool:Pool":
                return new Pool(name, <any>undefined, { urn })
            case "azuredevops:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "azuredevops:index/projectFeatures:ProjectFeatures":
                return new ProjectFeatures(name, <any>undefined, { urn })
            case "azuredevops:index/projectPermissions:ProjectPermissions":
                return new ProjectPermissions(name, <any>undefined, { urn })
            case "azuredevops:index/projectPipelineSettings:ProjectPipelineSettings":
                return new ProjectPipelineSettings(name, <any>undefined, { urn })
            case "azuredevops:index/projectTags:ProjectTags":
                return new ProjectTags(name, <any>undefined, { urn })
            case "azuredevops:index/queue:Queue":
                return new Queue(name, <any>undefined, { urn })
            case "azuredevops:index/repositoryPolicyAuthorEmailPattern:RepositoryPolicyAuthorEmailPattern":
                return new RepositoryPolicyAuthorEmailPattern(name, <any>undefined, { urn })
            case "azuredevops:index/repositoryPolicyCaseEnforcement:RepositoryPolicyCaseEnforcement":
                return new RepositoryPolicyCaseEnforcement(name, <any>undefined, { urn })
            case "azuredevops:index/repositoryPolicyCheckCredentials:RepositoryPolicyCheckCredentials":
                return new RepositoryPolicyCheckCredentials(name, <any>undefined, { urn })
            case "azuredevops:index/repositoryPolicyFilePathPattern:RepositoryPolicyFilePathPattern":
                return new RepositoryPolicyFilePathPattern(name, <any>undefined, { urn })
            case "azuredevops:index/repositoryPolicyMaxFileSize:RepositoryPolicyMaxFileSize":
                return new RepositoryPolicyMaxFileSize(name, <any>undefined, { urn })
            case "azuredevops:index/repositoryPolicyMaxPathLength:RepositoryPolicyMaxPathLength":
                return new RepositoryPolicyMaxPathLength(name, <any>undefined, { urn })
            case "azuredevops:index/repositoryPolicyReservedNames:RepositoryPolicyReservedNames":
                return new RepositoryPolicyReservedNames(name, <any>undefined, { urn })
            case "azuredevops:index/resourceAuthorization:ResourceAuthorization":
                return new ResourceAuthorization(name, <any>undefined, { urn })
            case "azuredevops:index/securityroleAssignment:SecurityroleAssignment":
                return new SecurityroleAssignment(name, <any>undefined, { urn })
            case "azuredevops:index/serviceEndpointArtifactory:ServiceEndpointArtifactory":
                return new ServiceEndpointArtifactory(name, <any>undefined, { urn })
            case "azuredevops:index/serviceEndpointAws:ServiceEndpointAws":
                return new ServiceEndpointAws(name, <any>undefined, { urn })
            case "azuredevops:index/serviceEndpointAzureDevOps:ServiceEndpointAzureDevOps":
                return new ServiceEndpointAzureDevOps(name, <any>undefined, { urn })
            case "azuredevops:index/serviceEndpointAzureEcr:ServiceEndpointAzureEcr":
                return new ServiceEndpointAzureEcr(name, <any>undefined, { urn })
            case "azuredevops:index/serviceEndpointAzureRM:ServiceEndpointAzureRM":
                return new ServiceEndpointAzureRM(name, <any>undefined, { urn })
            case "azuredevops:index/serviceEndpointBitBucket:ServiceEndpointBitBucket":
                return new ServiceEndpointBitBucket(name, <any>undefined, { urn })
            case "azuredevops:index/serviceEndpointDockerRegistry:ServiceEndpointDockerRegistry":
                return new ServiceEndpointDockerRegistry(name, <any>undefined, { urn })
            case "azuredevops:index/serviceEndpointGeneric:ServiceEndpointGeneric":
                return new ServiceEndpointGeneric(name, <any>undefined, { urn })
            case "azuredevops:index/serviceEndpointGenericGit:ServiceEndpointGenericGit":
                return new ServiceEndpointGenericGit(name, <any>undefined, { urn })
            case "azuredevops:index/serviceEndpointGitHub:ServiceEndpointGitHub":
                return new ServiceEndpointGitHub(name, <any>undefined, { urn })
            case "azuredevops:index/serviceEndpointGitHubEnterprise:ServiceEndpointGitHubEnterprise":
                return new ServiceEndpointGitHubEnterprise(name, <any>undefined, { urn })
            case "azuredevops:index/serviceEndpointGitLab:ServiceEndpointGitLab":
                return new ServiceEndpointGitLab(name, <any>undefined, { urn })
            case "azuredevops:index/serviceEndpointKubernetes:ServiceEndpointKubernetes":
                return new ServiceEndpointKubernetes(name, <any>undefined, { urn })
            case "azuredevops:index/serviceEndpointNpm:ServiceEndpointNpm":
                return new ServiceEndpointNpm(name, <any>undefined, { urn })
            case "azuredevops:index/serviceEndpointPipeline:ServiceEndpointPipeline":
                return new ServiceEndpointPipeline(name, <any>undefined, { urn })
            case "azuredevops:index/serviceEndpointServiceFabric:ServiceEndpointServiceFabric":
                return new ServiceEndpointServiceFabric(name, <any>undefined, { urn })
            case "azuredevops:index/serviceEndpointSonarCloud:ServiceEndpointSonarCloud":
                return new ServiceEndpointSonarCloud(name, <any>undefined, { urn })
            case "azuredevops:index/serviceEndpointSonarQube:ServiceEndpointSonarQube":
                return new ServiceEndpointSonarQube(name, <any>undefined, { urn })
            case "azuredevops:index/serviceEndpointSsh:ServiceEndpointSsh":
                return new ServiceEndpointSsh(name, <any>undefined, { urn })
            case "azuredevops:index/servicePrincipalEntitlement:ServicePrincipalEntitlement":
                return new ServicePrincipalEntitlement(name, <any>undefined, { urn })
            case "azuredevops:index/serviceendpointArgocd:ServiceendpointArgocd":
                return new ServiceendpointArgocd(name, <any>undefined, { urn })
            case "azuredevops:index/serviceendpointAzureServiceBus:ServiceendpointAzureServiceBus":
                return new ServiceendpointAzureServiceBus(name, <any>undefined, { urn })
            case "azuredevops:index/serviceendpointCheckmarxOne:ServiceendpointCheckmarxOne":
                return new ServiceendpointCheckmarxOne(name, <any>undefined, { urn })
            case "azuredevops:index/serviceendpointCheckmarxSast:ServiceendpointCheckmarxSast":
                return new ServiceendpointCheckmarxSast(name, <any>undefined, { urn })
            case "azuredevops:index/serviceendpointCheckmarxSca:ServiceendpointCheckmarxSca":
                return new ServiceendpointCheckmarxSca(name, <any>undefined, { urn })
            case "azuredevops:index/serviceendpointDynamicsLifecycleServices:ServiceendpointDynamicsLifecycleServices":
                return new ServiceendpointDynamicsLifecycleServices(name, <any>undefined, { urn })
            case "azuredevops:index/serviceendpointExternaltfs:ServiceendpointExternaltfs":
                return new ServiceendpointExternaltfs(name, <any>undefined, { urn })
            case "azuredevops:index/serviceendpointGcpTerraform:ServiceendpointGcpTerraform":
                return new ServiceendpointGcpTerraform(name, <any>undefined, { urn })
            case "azuredevops:index/serviceendpointIncomingwebhook:ServiceendpointIncomingwebhook":
                return new ServiceendpointIncomingwebhook(name, <any>undefined, { urn })
            case "azuredevops:index/serviceendpointJenkins:ServiceendpointJenkins":
                return new ServiceendpointJenkins(name, <any>undefined, { urn })
            case "azuredevops:index/serviceendpointJfrogArtifactoryV2:ServiceendpointJfrogArtifactoryV2":
                return new ServiceendpointJfrogArtifactoryV2(name, <any>undefined, { urn })
            case "azuredevops:index/serviceendpointJfrogDistributionV2:ServiceendpointJfrogDistributionV2":
                return new ServiceendpointJfrogDistributionV2(name, <any>undefined, { urn })
            case "azuredevops:index/serviceendpointJfrogPlatformV2:ServiceendpointJfrogPlatformV2":
                return new ServiceendpointJfrogPlatformV2(name, <any>undefined, { urn })
            case "azuredevops:index/serviceendpointJfrogXrayV2:ServiceendpointJfrogXrayV2":
                return new ServiceendpointJfrogXrayV2(name, <any>undefined, { urn })
            case "azuredevops:index/serviceendpointMaven:ServiceendpointMaven":
                return new ServiceendpointMaven(name, <any>undefined, { urn })
            case "azuredevops:index/serviceendpointNexus:ServiceendpointNexus":
                return new ServiceendpointNexus(name, <any>undefined, { urn })
            case "azuredevops:index/serviceendpointNuget:ServiceendpointNuget":
                return new ServiceendpointNuget(name, <any>undefined, { urn })
            case "azuredevops:index/serviceendpointOctopusdeploy:ServiceendpointOctopusdeploy":
                return new ServiceendpointOctopusdeploy(name, <any>undefined, { urn })
            case "azuredevops:index/serviceendpointPermissions:ServiceendpointPermissions":
                return new ServiceendpointPermissions(name, <any>undefined, { urn })
            case "azuredevops:index/serviceendpointSnyk:ServiceendpointSnyk":
                return new ServiceendpointSnyk(name, <any>undefined, { urn })
            case "azuredevops:index/serviceendpointVisualstudiomarketplace:ServiceendpointVisualstudiomarketplace":
                return new ServiceendpointVisualstudiomarketplace(name, <any>undefined, { urn })
            case "azuredevops:index/servicehookPermissions:ServicehookPermissions":
                return new ServicehookPermissions(name, <any>undefined, { urn })
            case "azuredevops:index/servicehookStorageQueuePipelines:ServicehookStorageQueuePipelines":
                return new ServicehookStorageQueuePipelines(name, <any>undefined, { urn })
            case "azuredevops:index/taggingPermissions:TaggingPermissions":
                return new TaggingPermissions(name, <any>undefined, { urn })
            case "azuredevops:index/team:Team":
                return new Team(name, <any>undefined, { urn })
            case "azuredevops:index/teamAdministrators:TeamAdministrators":
                return new TeamAdministrators(name, <any>undefined, { urn })
            case "azuredevops:index/teamMembers:TeamMembers":
                return new TeamMembers(name, <any>undefined, { urn })
            case "azuredevops:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "azuredevops:index/variableGroup:VariableGroup":
                return new VariableGroup(name, <any>undefined, { urn })
            case "azuredevops:index/variableGroupPermissions:VariableGroupPermissions":
                return new VariableGroupPermissions(name, <any>undefined, { urn })
            case "azuredevops:index/wiki:Wiki":
                return new Wiki(name, <any>undefined, { urn })
            case "azuredevops:index/wikiPage:WikiPage":
                return new WikiPage(name, <any>undefined, { urn })
            case "azuredevops:index/workItemQueryPermissions:WorkItemQueryPermissions":
                return new WorkItemQueryPermissions(name, <any>undefined, { urn })
            case "azuredevops:index/workitem:Workitem":
                return new Workitem(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azuredevops", "index/areaPermissions", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/branchPolicyAutoReviewers", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/branchPolicyBuildValidation", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/branchPolicyCommentResolution", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/branchPolicyMergeTypes", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/branchPolicyMinReviewers", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/branchPolicyStatusCheck", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/branchPolicyWorkItemLinking", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/buildDefinition", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/buildDefinitionPermissions", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/buildFolder", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/buildFolderPermissions", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/checkApproval", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/checkBranchControl", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/checkBusinessHours", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/checkExclusiveLock", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/checkRequiredTemplate", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/checkRestApi", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/dashboard", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/elasticPool", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/environment", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/environmentResourceKubernetes", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/feed", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/feedPermission", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/feedRetentionPolicy", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/git", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/gitPermissions", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/gitRepositoryBranch", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/gitRepositoryFile", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/group", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/groupEntitlement", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/groupMembership", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/iterativePermissions", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/libraryPermissions", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/pipelineAuthorization", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/pool", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/project", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/projectFeatures", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/projectPermissions", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/projectPipelineSettings", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/projectTags", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/queue", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/repositoryPolicyAuthorEmailPattern", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/repositoryPolicyCaseEnforcement", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/repositoryPolicyCheckCredentials", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/repositoryPolicyFilePathPattern", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/repositoryPolicyMaxFileSize", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/repositoryPolicyMaxPathLength", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/repositoryPolicyReservedNames", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/resourceAuthorization", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/securityroleAssignment", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceEndpointArtifactory", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceEndpointAws", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceEndpointAzureDevOps", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceEndpointAzureEcr", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceEndpointAzureRM", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceEndpointBitBucket", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceEndpointDockerRegistry", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceEndpointGeneric", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceEndpointGenericGit", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceEndpointGitHub", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceEndpointGitHubEnterprise", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceEndpointGitLab", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceEndpointKubernetes", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceEndpointNpm", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceEndpointPipeline", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceEndpointServiceFabric", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceEndpointSonarCloud", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceEndpointSonarQube", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceEndpointSsh", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/servicePrincipalEntitlement", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceendpointArgocd", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceendpointAzureServiceBus", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceendpointCheckmarxOne", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceendpointCheckmarxSast", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceendpointCheckmarxSca", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceendpointDynamicsLifecycleServices", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceendpointExternaltfs", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceendpointGcpTerraform", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceendpointIncomingwebhook", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceendpointJenkins", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceendpointJfrogArtifactoryV2", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceendpointJfrogDistributionV2", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceendpointJfrogPlatformV2", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceendpointJfrogXrayV2", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceendpointMaven", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceendpointNexus", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceendpointNuget", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceendpointOctopusdeploy", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceendpointPermissions", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceendpointSnyk", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceendpointVisualstudiomarketplace", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/servicehookPermissions", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/servicehookStorageQueuePipelines", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/taggingPermissions", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/team", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/teamAdministrators", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/teamMembers", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/user", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/variableGroup", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/variableGroupPermissions", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/wiki", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/wikiPage", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/workItemQueryPermissions", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/workitem", _module)
pulumi.runtime.registerResourcePackage("azuredevops", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:azuredevops") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
