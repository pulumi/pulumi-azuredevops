// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./areaPermissions";
export * from "./branchPolicyAutoReviewers";
export * from "./branchPolicyBuildValidation";
export * from "./branchPolicyCommentResolution";
export * from "./branchPolicyMergeTypes";
export * from "./branchPolicyMinReviewers";
export * from "./branchPolicyStatusCheck";
export * from "./branchPolicyWorkItemLinking";
export * from "./buildDefinition";
export * from "./buildDefinitionPermissions";
export * from "./environment";
export * from "./getAgentQueue";
export * from "./getArea";
export * from "./getClientConfig";
export * from "./getGitRepository";
export * from "./getGroup";
export * from "./getGroups";
export * from "./getIteration";
export * from "./getPool";
export * from "./getPools";
export * from "./getProject";
export * from "./getProjects";
export * from "./getRepositories";
export * from "./getTeam";
export * from "./getTeams";
export * from "./getUsers";
export * from "./getVariableGroup";
export * from "./git";
export * from "./gitPermissions";
export * from "./gitRepositoryFile";
export * from "./group";
export * from "./groupMembership";
export * from "./iterativePermissions";
export * from "./pool";
export * from "./project";
export * from "./projectFeatures";
export * from "./projectPermissions";
export * from "./projectPipelineSettings";
export * from "./provider";
export * from "./queue";
export * from "./repositoryPolicyAuthorEmailPattern";
export * from "./repositoryPolicyCaseEnforcement";
export * from "./repositoryPolicyCheckCredentials";
export * from "./repositoryPolicyFilePathPattern";
export * from "./repositoryPolicyMaxFileSize";
export * from "./repositoryPolicyMaxPathLength";
export * from "./repositoryPolicyReservedNames";
export * from "./resourceAuthorization";
export * from "./serviceEndpointArtifactory";
export * from "./serviceEndpointAws";
export * from "./serviceEndpointAzureDevOps";
export * from "./serviceEndpointAzureEcr";
export * from "./serviceEndpointAzureRM";
export * from "./serviceEndpointBitBucket";
export * from "./serviceEndpointDockerRegistry";
export * from "./serviceEndpointGeneric";
export * from "./serviceEndpointGenericGit";
export * from "./serviceEndpointGitHub";
export * from "./serviceEndpointGitHubEnterprise";
export * from "./serviceEndpointKubernetes";
export * from "./serviceEndpointNpm";
export * from "./serviceEndpointPipeline";
export * from "./serviceEndpointServiceFabric";
export * from "./serviceEndpointSonarQube";
export * from "./serviceEndpointSsh";
export * from "./serviceendpointArgocd";
export * from "./serviceendpointPermissions";
export * from "./servicehookPermissions";
export * from "./taggingPermissions";
export * from "./team";
export * from "./teamAdministrators";
export * from "./teamMembers";
export * from "./user";
export * from "./variableGroup";
export * from "./workItemQueryPermissions";

// Export sub-modules:
import * as agent from "./agent";
import * as build from "./build";
import * as config from "./config";
import * as core from "./core";
import * as entitlement from "./entitlement";
import * as identities from "./identities";
import * as pipeline from "./pipeline";
import * as policy from "./policy";
import * as repository from "./repository";
import * as security from "./security";
import * as serviceendpoint from "./serviceendpoint";
import * as types from "./types";

export {
    agent,
    build,
    config,
    core,
    entitlement,
    identities,
    pipeline,
    policy,
    repository,
    security,
    serviceendpoint,
    types,
};

// Import resources to register:
import { AreaPermissions } from "./areaPermissions";
import { BranchPolicyAutoReviewers } from "./branchPolicyAutoReviewers";
import { BranchPolicyBuildValidation } from "./branchPolicyBuildValidation";
import { BranchPolicyCommentResolution } from "./branchPolicyCommentResolution";
import { BranchPolicyMergeTypes } from "./branchPolicyMergeTypes";
import { BranchPolicyMinReviewers } from "./branchPolicyMinReviewers";
import { BranchPolicyStatusCheck } from "./branchPolicyStatusCheck";
import { BranchPolicyWorkItemLinking } from "./branchPolicyWorkItemLinking";
import { BuildDefinition } from "./buildDefinition";
import { BuildDefinitionPermissions } from "./buildDefinitionPermissions";
import { Environment } from "./environment";
import { Git } from "./git";
import { GitPermissions } from "./gitPermissions";
import { GitRepositoryFile } from "./gitRepositoryFile";
import { Group } from "./group";
import { GroupMembership } from "./groupMembership";
import { IterativePermissions } from "./iterativePermissions";
import { Pool } from "./pool";
import { Project } from "./project";
import { ProjectFeatures } from "./projectFeatures";
import { ProjectPermissions } from "./projectPermissions";
import { ProjectPipelineSettings } from "./projectPipelineSettings";
import { Queue } from "./queue";
import { RepositoryPolicyAuthorEmailPattern } from "./repositoryPolicyAuthorEmailPattern";
import { RepositoryPolicyCaseEnforcement } from "./repositoryPolicyCaseEnforcement";
import { RepositoryPolicyCheckCredentials } from "./repositoryPolicyCheckCredentials";
import { RepositoryPolicyFilePathPattern } from "./repositoryPolicyFilePathPattern";
import { RepositoryPolicyMaxFileSize } from "./repositoryPolicyMaxFileSize";
import { RepositoryPolicyMaxPathLength } from "./repositoryPolicyMaxPathLength";
import { RepositoryPolicyReservedNames } from "./repositoryPolicyReservedNames";
import { ResourceAuthorization } from "./resourceAuthorization";
import { ServiceEndpointArtifactory } from "./serviceEndpointArtifactory";
import { ServiceEndpointAws } from "./serviceEndpointAws";
import { ServiceEndpointAzureDevOps } from "./serviceEndpointAzureDevOps";
import { ServiceEndpointAzureEcr } from "./serviceEndpointAzureEcr";
import { ServiceEndpointAzureRM } from "./serviceEndpointAzureRM";
import { ServiceEndpointBitBucket } from "./serviceEndpointBitBucket";
import { ServiceEndpointDockerRegistry } from "./serviceEndpointDockerRegistry";
import { ServiceEndpointGeneric } from "./serviceEndpointGeneric";
import { ServiceEndpointGenericGit } from "./serviceEndpointGenericGit";
import { ServiceEndpointGitHub } from "./serviceEndpointGitHub";
import { ServiceEndpointGitHubEnterprise } from "./serviceEndpointGitHubEnterprise";
import { ServiceEndpointKubernetes } from "./serviceEndpointKubernetes";
import { ServiceEndpointNpm } from "./serviceEndpointNpm";
import { ServiceEndpointPipeline } from "./serviceEndpointPipeline";
import { ServiceEndpointServiceFabric } from "./serviceEndpointServiceFabric";
import { ServiceEndpointSonarQube } from "./serviceEndpointSonarQube";
import { ServiceEndpointSsh } from "./serviceEndpointSsh";
import { ServiceendpointArgocd } from "./serviceendpointArgocd";
import { ServiceendpointPermissions } from "./serviceendpointPermissions";
import { ServicehookPermissions } from "./servicehookPermissions";
import { TaggingPermissions } from "./taggingPermissions";
import { Team } from "./team";
import { TeamAdministrators } from "./teamAdministrators";
import { TeamMembers } from "./teamMembers";
import { User } from "./user";
import { VariableGroup } from "./variableGroup";
import { WorkItemQueryPermissions } from "./workItemQueryPermissions";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azuredevops:index/areaPermissions:AreaPermissions":
                return new AreaPermissions(name, <any>undefined, { urn })
            case "azuredevops:index/branchPolicyAutoReviewers:BranchPolicyAutoReviewers":
                return new BranchPolicyAutoReviewers(name, <any>undefined, { urn })
            case "azuredevops:index/branchPolicyBuildValidation:BranchPolicyBuildValidation":
                return new BranchPolicyBuildValidation(name, <any>undefined, { urn })
            case "azuredevops:index/branchPolicyCommentResolution:BranchPolicyCommentResolution":
                return new BranchPolicyCommentResolution(name, <any>undefined, { urn })
            case "azuredevops:index/branchPolicyMergeTypes:BranchPolicyMergeTypes":
                return new BranchPolicyMergeTypes(name, <any>undefined, { urn })
            case "azuredevops:index/branchPolicyMinReviewers:BranchPolicyMinReviewers":
                return new BranchPolicyMinReviewers(name, <any>undefined, { urn })
            case "azuredevops:index/branchPolicyStatusCheck:BranchPolicyStatusCheck":
                return new BranchPolicyStatusCheck(name, <any>undefined, { urn })
            case "azuredevops:index/branchPolicyWorkItemLinking:BranchPolicyWorkItemLinking":
                return new BranchPolicyWorkItemLinking(name, <any>undefined, { urn })
            case "azuredevops:index/buildDefinition:BuildDefinition":
                return new BuildDefinition(name, <any>undefined, { urn })
            case "azuredevops:index/buildDefinitionPermissions:BuildDefinitionPermissions":
                return new BuildDefinitionPermissions(name, <any>undefined, { urn })
            case "azuredevops:index/environment:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "azuredevops:index/git:Git":
                return new Git(name, <any>undefined, { urn })
            case "azuredevops:index/gitPermissions:GitPermissions":
                return new GitPermissions(name, <any>undefined, { urn })
            case "azuredevops:index/gitRepositoryFile:GitRepositoryFile":
                return new GitRepositoryFile(name, <any>undefined, { urn })
            case "azuredevops:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "azuredevops:index/groupMembership:GroupMembership":
                return new GroupMembership(name, <any>undefined, { urn })
            case "azuredevops:index/iterativePermissions:IterativePermissions":
                return new IterativePermissions(name, <any>undefined, { urn })
            case "azuredevops:index/pool:Pool":
                return new Pool(name, <any>undefined, { urn })
            case "azuredevops:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "azuredevops:index/projectFeatures:ProjectFeatures":
                return new ProjectFeatures(name, <any>undefined, { urn })
            case "azuredevops:index/projectPermissions:ProjectPermissions":
                return new ProjectPermissions(name, <any>undefined, { urn })
            case "azuredevops:index/projectPipelineSettings:ProjectPipelineSettings":
                return new ProjectPipelineSettings(name, <any>undefined, { urn })
            case "azuredevops:index/queue:Queue":
                return new Queue(name, <any>undefined, { urn })
            case "azuredevops:index/repositoryPolicyAuthorEmailPattern:RepositoryPolicyAuthorEmailPattern":
                return new RepositoryPolicyAuthorEmailPattern(name, <any>undefined, { urn })
            case "azuredevops:index/repositoryPolicyCaseEnforcement:RepositoryPolicyCaseEnforcement":
                return new RepositoryPolicyCaseEnforcement(name, <any>undefined, { urn })
            case "azuredevops:index/repositoryPolicyCheckCredentials:RepositoryPolicyCheckCredentials":
                return new RepositoryPolicyCheckCredentials(name, <any>undefined, { urn })
            case "azuredevops:index/repositoryPolicyFilePathPattern:RepositoryPolicyFilePathPattern":
                return new RepositoryPolicyFilePathPattern(name, <any>undefined, { urn })
            case "azuredevops:index/repositoryPolicyMaxFileSize:RepositoryPolicyMaxFileSize":
                return new RepositoryPolicyMaxFileSize(name, <any>undefined, { urn })
            case "azuredevops:index/repositoryPolicyMaxPathLength:RepositoryPolicyMaxPathLength":
                return new RepositoryPolicyMaxPathLength(name, <any>undefined, { urn })
            case "azuredevops:index/repositoryPolicyReservedNames:RepositoryPolicyReservedNames":
                return new RepositoryPolicyReservedNames(name, <any>undefined, { urn })
            case "azuredevops:index/resourceAuthorization:ResourceAuthorization":
                return new ResourceAuthorization(name, <any>undefined, { urn })
            case "azuredevops:index/serviceEndpointArtifactory:ServiceEndpointArtifactory":
                return new ServiceEndpointArtifactory(name, <any>undefined, { urn })
            case "azuredevops:index/serviceEndpointAws:ServiceEndpointAws":
                return new ServiceEndpointAws(name, <any>undefined, { urn })
            case "azuredevops:index/serviceEndpointAzureDevOps:ServiceEndpointAzureDevOps":
                return new ServiceEndpointAzureDevOps(name, <any>undefined, { urn })
            case "azuredevops:index/serviceEndpointAzureEcr:ServiceEndpointAzureEcr":
                return new ServiceEndpointAzureEcr(name, <any>undefined, { urn })
            case "azuredevops:index/serviceEndpointAzureRM:ServiceEndpointAzureRM":
                return new ServiceEndpointAzureRM(name, <any>undefined, { urn })
            case "azuredevops:index/serviceEndpointBitBucket:ServiceEndpointBitBucket":
                return new ServiceEndpointBitBucket(name, <any>undefined, { urn })
            case "azuredevops:index/serviceEndpointDockerRegistry:ServiceEndpointDockerRegistry":
                return new ServiceEndpointDockerRegistry(name, <any>undefined, { urn })
            case "azuredevops:index/serviceEndpointGeneric:ServiceEndpointGeneric":
                return new ServiceEndpointGeneric(name, <any>undefined, { urn })
            case "azuredevops:index/serviceEndpointGenericGit:ServiceEndpointGenericGit":
                return new ServiceEndpointGenericGit(name, <any>undefined, { urn })
            case "azuredevops:index/serviceEndpointGitHub:ServiceEndpointGitHub":
                return new ServiceEndpointGitHub(name, <any>undefined, { urn })
            case "azuredevops:index/serviceEndpointGitHubEnterprise:ServiceEndpointGitHubEnterprise":
                return new ServiceEndpointGitHubEnterprise(name, <any>undefined, { urn })
            case "azuredevops:index/serviceEndpointKubernetes:ServiceEndpointKubernetes":
                return new ServiceEndpointKubernetes(name, <any>undefined, { urn })
            case "azuredevops:index/serviceEndpointNpm:ServiceEndpointNpm":
                return new ServiceEndpointNpm(name, <any>undefined, { urn })
            case "azuredevops:index/serviceEndpointPipeline:ServiceEndpointPipeline":
                return new ServiceEndpointPipeline(name, <any>undefined, { urn })
            case "azuredevops:index/serviceEndpointServiceFabric:ServiceEndpointServiceFabric":
                return new ServiceEndpointServiceFabric(name, <any>undefined, { urn })
            case "azuredevops:index/serviceEndpointSonarQube:ServiceEndpointSonarQube":
                return new ServiceEndpointSonarQube(name, <any>undefined, { urn })
            case "azuredevops:index/serviceEndpointSsh:ServiceEndpointSsh":
                return new ServiceEndpointSsh(name, <any>undefined, { urn })
            case "azuredevops:index/serviceendpointArgocd:ServiceendpointArgocd":
                return new ServiceendpointArgocd(name, <any>undefined, { urn })
            case "azuredevops:index/serviceendpointPermissions:ServiceendpointPermissions":
                return new ServiceendpointPermissions(name, <any>undefined, { urn })
            case "azuredevops:index/servicehookPermissions:ServicehookPermissions":
                return new ServicehookPermissions(name, <any>undefined, { urn })
            case "azuredevops:index/taggingPermissions:TaggingPermissions":
                return new TaggingPermissions(name, <any>undefined, { urn })
            case "azuredevops:index/team:Team":
                return new Team(name, <any>undefined, { urn })
            case "azuredevops:index/teamAdministrators:TeamAdministrators":
                return new TeamAdministrators(name, <any>undefined, { urn })
            case "azuredevops:index/teamMembers:TeamMembers":
                return new TeamMembers(name, <any>undefined, { urn })
            case "azuredevops:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "azuredevops:index/variableGroup:VariableGroup":
                return new VariableGroup(name, <any>undefined, { urn })
            case "azuredevops:index/workItemQueryPermissions:WorkItemQueryPermissions":
                return new WorkItemQueryPermissions(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azuredevops", "index/areaPermissions", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/branchPolicyAutoReviewers", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/branchPolicyBuildValidation", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/branchPolicyCommentResolution", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/branchPolicyMergeTypes", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/branchPolicyMinReviewers", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/branchPolicyStatusCheck", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/branchPolicyWorkItemLinking", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/buildDefinition", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/buildDefinitionPermissions", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/environment", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/git", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/gitPermissions", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/gitRepositoryFile", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/group", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/groupMembership", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/iterativePermissions", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/pool", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/project", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/projectFeatures", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/projectPermissions", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/projectPipelineSettings", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/queue", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/repositoryPolicyAuthorEmailPattern", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/repositoryPolicyCaseEnforcement", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/repositoryPolicyCheckCredentials", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/repositoryPolicyFilePathPattern", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/repositoryPolicyMaxFileSize", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/repositoryPolicyMaxPathLength", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/repositoryPolicyReservedNames", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/resourceAuthorization", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceEndpointArtifactory", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceEndpointAws", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceEndpointAzureDevOps", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceEndpointAzureEcr", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceEndpointAzureRM", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceEndpointBitBucket", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceEndpointDockerRegistry", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceEndpointGeneric", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceEndpointGenericGit", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceEndpointGitHub", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceEndpointGitHubEnterprise", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceEndpointKubernetes", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceEndpointNpm", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceEndpointPipeline", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceEndpointServiceFabric", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceEndpointSonarQube", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceEndpointSsh", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceendpointArgocd", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/serviceendpointPermissions", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/servicehookPermissions", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/taggingPermissions", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/team", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/teamAdministrators", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/teamMembers", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/user", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/variableGroup", _module)
pulumi.runtime.registerResourceModule("azuredevops", "index/workItemQueryPermissions", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("azuredevops", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:azuredevops") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
