// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages a team within a project in a Azure DevOps organization.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azuredevops from "@pulumi/azuredevops";
 *
 * const exampleProject = new azuredevops.Project("exampleProject", {
 *     workItemTemplate: "Agile",
 *     versionControl: "Git",
 *     visibility: "private",
 *     description: "Managed by Terraform",
 * });
 * const example-project-contributors = azuredevops.getGroupOutput({
 *     projectId: exampleProject.id,
 *     name: "Contributors",
 * });
 * const example-project-readers = azuredevops.getGroupOutput({
 *     projectId: exampleProject.id,
 *     name: "Readers",
 * });
 * const exampleTeam = new azuredevops.Team("exampleTeam", {
 *     projectId: exampleProject.id,
 *     administrators: [example_project_contributors.apply(example_project_contributors => example_project_contributors.descriptor)],
 *     members: [example_project_readers.apply(example_project_readers => example_project_readers.descriptor)],
 * });
 * ```
 * ## Relevant Links
 *
 * - [Azure DevOps Service REST API 6.0 - Teams - Create](https://docs.microsoft.com/en-us/rest/api/azure/devops/core/teams/create?view=azure-devops-rest-6.0)
 *
 * ## PAT Permissions Required
 *
 * - **vso.project_manage**:	Grants the ability to create, read, update, and delete projects and teams.
 *
 * ## Import
 *
 * Azure DevOps teams can be imported using the complete resource id `<project_id>/<team_id>` e.g.
 *
 * ```sh
 *  $ pulumi import azuredevops:index/team:Team example 00000000-0000-0000-0000-000000000000/00000000-0000-0000-0000-000000000000
 * ```
 */
export class Team extends pulumi.CustomResource {
    /**
     * Get an existing Team resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TeamState, opts?: pulumi.CustomResourceOptions): Team {
        return new Team(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azuredevops:index/team:Team';

    /**
     * Returns true if the given object is an instance of Team.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Team {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Team.__pulumiType;
    }

    /**
     * List of subject descriptors to define administrators of the team.
     */
    public readonly administrators!: pulumi.Output<string[]>;
    /**
     * The description of the Team.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * List of subject descriptors to define members of the team.
     */
    public readonly members!: pulumi.Output<string[]>;
    /**
     * The name of the Team.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The Project ID.
     */
    public readonly projectId!: pulumi.Output<string>;

    /**
     * Create a Team resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TeamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TeamArgs | TeamState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TeamState | undefined;
            resourceInputs["administrators"] = state ? state.administrators : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["members"] = state ? state.members : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
        } else {
            const args = argsOrState as TeamArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["administrators"] = args ? args.administrators : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["members"] = args ? args.members : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Team.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Team resources.
 */
export interface TeamState {
    /**
     * List of subject descriptors to define administrators of the team.
     */
    administrators?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the Team.
     */
    description?: pulumi.Input<string>;
    /**
     * List of subject descriptors to define members of the team.
     */
    members?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the Team.
     */
    name?: pulumi.Input<string>;
    /**
     * The Project ID.
     */
    projectId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Team resource.
 */
export interface TeamArgs {
    /**
     * List of subject descriptors to define administrators of the team.
     */
    administrators?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the Team.
     */
    description?: pulumi.Input<string>;
    /**
     * List of subject descriptors to define members of the team.
     */
    members?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the Team.
     */
    name?: pulumi.Input<string>;
    /**
     * The Project ID.
     */
    projectId: pulumi.Input<string>;
}
