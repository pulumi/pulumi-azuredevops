// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages Project Tags within Azure DevOps organization.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azuredevops from "@pulumi/azuredevops";
 *
 * const example = new azuredevops.Project("example", {
 *     name: "Example Project",
 *     visibility: "private",
 *     versionControl: "Git",
 *     workItemTemplate: "Agile",
 *     description: "Managed by Pulumi",
 * });
 * const exampleProjectTags = new azuredevops.ProjectTags("example", {
 *     projectId: example.id,
 *     tags: [
 *         "tag1",
 *         "tag2",
 *     ],
 * });
 * ```
 *
 * ## Relevant Links
 *
 * - [Azure DevOps Service REST API 7.0 - Project Properties](https://learn.microsoft.com/en-us/rest/api/azure/devops/core/projects/get-project-properties?view=azure-devops-rest-7.1&tabs=HTTP)
 *
 * ## Import
 *
 * Azure DevOps Project Tags can be imported using the Project ID e.g.:
 *
 * ```sh
 * $ pulumi import azuredevops:index/projectTags:ProjectTags example 00000000-0000-0000-0000-000000000000
 * ```
 */
export class ProjectTags extends pulumi.CustomResource {
    /**
     * Get an existing ProjectTags resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectTagsState, opts?: pulumi.CustomResourceOptions): ProjectTags {
        return new ProjectTags(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azuredevops:index/projectTags:ProjectTags';

    /**
     * Returns true if the given object is an instance of ProjectTags.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectTags {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectTags.__pulumiType;
    }

    /**
     * The ID of the Project. Changing this forces a new resource to be created.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * A mapping of tags assigned to the Project.
     */
    public readonly tags!: pulumi.Output<string[]>;

    /**
     * Create a ProjectTags resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectTagsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectTagsArgs | ProjectTagsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectTagsState | undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ProjectTagsArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.tags === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tags'");
            }
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectTags.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectTags resources.
 */
export interface ProjectTagsState {
    /**
     * The ID of the Project. Changing this forces a new resource to be created.
     */
    projectId?: pulumi.Input<string>;
    /**
     * A mapping of tags assigned to the Project.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ProjectTags resource.
 */
export interface ProjectTagsArgs {
    /**
     * The ID of the Project. Changing this forces a new resource to be created.
     */
    projectId: pulumi.Input<string>;
    /**
     * A mapping of tags assigned to the Project.
     */
    tags: pulumi.Input<pulumi.Input<string>[]>;
}
