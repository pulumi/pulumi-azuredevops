// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages a Git Repository Branch.
 */
export class GitRepositoryBranch extends pulumi.CustomResource {
    /**
     * Get an existing GitRepositoryBranch resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GitRepositoryBranchState, opts?: pulumi.CustomResourceOptions): GitRepositoryBranch {
        return new GitRepositoryBranch(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azuredevops:index/gitRepositoryBranch:GitRepositoryBranch';

    /**
     * Returns true if the given object is an instance of GitRepositoryBranch.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GitRepositoryBranch {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GitRepositoryBranch.__pulumiType;
    }

    /**
     * The commit object ID of last commit on the branch.
     */
    public /*out*/ readonly lastCommitId!: pulumi.Output<string>;
    /**
     * The name of the branch in short format not prefixed with `refs/heads/`.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The reference to the source branch to create the branch from, in `<name>` or `refs/heads/<name>` format. Conflict with `refTag`, `refCommitId`.
     */
    public readonly refBranch!: pulumi.Output<string | undefined>;
    /**
     * The commit object ID to create the branch from. Conflict with `refBranch`, `refTag`.
     */
    public readonly refCommitId!: pulumi.Output<string | undefined>;
    /**
     * The reference to the tag to create the branch from, in `<name>` or `refs/tags/<name>` format. Conflict with `refBranch`, `refCommitId`.
     */
    public readonly refTag!: pulumi.Output<string | undefined>;
    /**
     * The ID of the repository the branch is created against.
     */
    public readonly repositoryId!: pulumi.Output<string>;

    /**
     * Create a GitRepositoryBranch resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GitRepositoryBranchArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GitRepositoryBranchArgs | GitRepositoryBranchState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GitRepositoryBranchState | undefined;
            resourceInputs["lastCommitId"] = state ? state.lastCommitId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["refBranch"] = state ? state.refBranch : undefined;
            resourceInputs["refCommitId"] = state ? state.refCommitId : undefined;
            resourceInputs["refTag"] = state ? state.refTag : undefined;
            resourceInputs["repositoryId"] = state ? state.repositoryId : undefined;
        } else {
            const args = argsOrState as GitRepositoryBranchArgs | undefined;
            if ((!args || args.repositoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repositoryId'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["refBranch"] = args ? args.refBranch : undefined;
            resourceInputs["refCommitId"] = args ? args.refCommitId : undefined;
            resourceInputs["refTag"] = args ? args.refTag : undefined;
            resourceInputs["repositoryId"] = args ? args.repositoryId : undefined;
            resourceInputs["lastCommitId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GitRepositoryBranch.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GitRepositoryBranch resources.
 */
export interface GitRepositoryBranchState {
    /**
     * The commit object ID of last commit on the branch.
     */
    lastCommitId?: pulumi.Input<string>;
    /**
     * The name of the branch in short format not prefixed with `refs/heads/`.
     */
    name?: pulumi.Input<string>;
    /**
     * The reference to the source branch to create the branch from, in `<name>` or `refs/heads/<name>` format. Conflict with `refTag`, `refCommitId`.
     */
    refBranch?: pulumi.Input<string>;
    /**
     * The commit object ID to create the branch from. Conflict with `refBranch`, `refTag`.
     */
    refCommitId?: pulumi.Input<string>;
    /**
     * The reference to the tag to create the branch from, in `<name>` or `refs/tags/<name>` format. Conflict with `refBranch`, `refCommitId`.
     */
    refTag?: pulumi.Input<string>;
    /**
     * The ID of the repository the branch is created against.
     */
    repositoryId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GitRepositoryBranch resource.
 */
export interface GitRepositoryBranchArgs {
    /**
     * The name of the branch in short format not prefixed with `refs/heads/`.
     */
    name?: pulumi.Input<string>;
    /**
     * The reference to the source branch to create the branch from, in `<name>` or `refs/heads/<name>` format. Conflict with `refTag`, `refCommitId`.
     */
    refBranch?: pulumi.Input<string>;
    /**
     * The commit object ID to create the branch from. Conflict with `refBranch`, `refTag`.
     */
    refCommitId?: pulumi.Input<string>;
    /**
     * The reference to the tag to create the branch from, in `<name>` or `refs/tags/<name>` format. Conflict with `refBranch`, `refCommitId`.
     */
    refTag?: pulumi.Input<string>;
    /**
     * The ID of the repository the branch is created against.
     */
    repositoryId: pulumi.Input<string>;
}
